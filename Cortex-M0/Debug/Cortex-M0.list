
Cortex-M0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000168  08005e68  00020168  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000254  08005e68  00020254  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  9 .debug_info   000139bb  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000251d  00000000  00000000  00033b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b60  00000000  00000000  00036068  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f8  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000067fc  00000000  00000000  000375c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000426f  00000000  00000000  0003ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000ea  00000000  00000000  0004202b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002edc  00000000  00000000  00042118  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000297b  00000000  00000000  00044ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00047970  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  000479f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000168 	.word	0x20000168
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059a0 	.word	0x080059a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000016c 	.word	0x2000016c
 8000104:	080059a0 	.word	0x080059a0

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	; 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__aeabi_idiv0>:
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_fadd>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46c6      	mov	lr, r8
 8000274:	024e      	lsls	r6, r1, #9
 8000276:	0247      	lsls	r7, r0, #9
 8000278:	0a76      	lsrs	r6, r6, #9
 800027a:	0a7b      	lsrs	r3, r7, #9
 800027c:	0044      	lsls	r4, r0, #1
 800027e:	0fc5      	lsrs	r5, r0, #31
 8000280:	00f7      	lsls	r7, r6, #3
 8000282:	0048      	lsls	r0, r1, #1
 8000284:	4698      	mov	r8, r3
 8000286:	b500      	push	{lr}
 8000288:	0e24      	lsrs	r4, r4, #24
 800028a:	002a      	movs	r2, r5
 800028c:	00db      	lsls	r3, r3, #3
 800028e:	0e00      	lsrs	r0, r0, #24
 8000290:	0fc9      	lsrs	r1, r1, #31
 8000292:	46bc      	mov	ip, r7
 8000294:	428d      	cmp	r5, r1
 8000296:	d067      	beq.n	8000368 <__aeabi_fadd+0xf8>
 8000298:	1a22      	subs	r2, r4, r0
 800029a:	2a00      	cmp	r2, #0
 800029c:	dc00      	bgt.n	80002a0 <__aeabi_fadd+0x30>
 800029e:	e0a5      	b.n	80003ec <__aeabi_fadd+0x17c>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d13a      	bne.n	800031a <__aeabi_fadd+0xaa>
 80002a4:	2f00      	cmp	r7, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_fadd+0x3a>
 80002a8:	e093      	b.n	80003d2 <__aeabi_fadd+0x162>
 80002aa:	1e51      	subs	r1, r2, #1
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d000      	beq.n	80002b2 <__aeabi_fadd+0x42>
 80002b0:	e0bc      	b.n	800042c <__aeabi_fadd+0x1bc>
 80002b2:	2401      	movs	r4, #1
 80002b4:	1bdb      	subs	r3, r3, r7
 80002b6:	015a      	lsls	r2, r3, #5
 80002b8:	d546      	bpl.n	8000348 <__aeabi_fadd+0xd8>
 80002ba:	019b      	lsls	r3, r3, #6
 80002bc:	099e      	lsrs	r6, r3, #6
 80002be:	0030      	movs	r0, r6
 80002c0:	f000 fdb2 	bl	8000e28 <__clzsi2>
 80002c4:	3805      	subs	r0, #5
 80002c6:	4086      	lsls	r6, r0
 80002c8:	4284      	cmp	r4, r0
 80002ca:	dd00      	ble.n	80002ce <__aeabi_fadd+0x5e>
 80002cc:	e09d      	b.n	800040a <__aeabi_fadd+0x19a>
 80002ce:	1b04      	subs	r4, r0, r4
 80002d0:	0032      	movs	r2, r6
 80002d2:	2020      	movs	r0, #32
 80002d4:	3401      	adds	r4, #1
 80002d6:	40e2      	lsrs	r2, r4
 80002d8:	1b04      	subs	r4, r0, r4
 80002da:	40a6      	lsls	r6, r4
 80002dc:	0033      	movs	r3, r6
 80002de:	1e5e      	subs	r6, r3, #1
 80002e0:	41b3      	sbcs	r3, r6
 80002e2:	2400      	movs	r4, #0
 80002e4:	4313      	orrs	r3, r2
 80002e6:	075a      	lsls	r2, r3, #29
 80002e8:	d004      	beq.n	80002f4 <__aeabi_fadd+0x84>
 80002ea:	220f      	movs	r2, #15
 80002ec:	401a      	ands	r2, r3
 80002ee:	2a04      	cmp	r2, #4
 80002f0:	d000      	beq.n	80002f4 <__aeabi_fadd+0x84>
 80002f2:	3304      	adds	r3, #4
 80002f4:	015a      	lsls	r2, r3, #5
 80002f6:	d529      	bpl.n	800034c <__aeabi_fadd+0xdc>
 80002f8:	3401      	adds	r4, #1
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d100      	bne.n	8000300 <__aeabi_fadd+0x90>
 80002fe:	e081      	b.n	8000404 <__aeabi_fadd+0x194>
 8000300:	002a      	movs	r2, r5
 8000302:	019b      	lsls	r3, r3, #6
 8000304:	0a5b      	lsrs	r3, r3, #9
 8000306:	b2e4      	uxtb	r4, r4
 8000308:	025b      	lsls	r3, r3, #9
 800030a:	05e4      	lsls	r4, r4, #23
 800030c:	0a58      	lsrs	r0, r3, #9
 800030e:	07d2      	lsls	r2, r2, #31
 8000310:	4320      	orrs	r0, r4
 8000312:	4310      	orrs	r0, r2
 8000314:	bc04      	pop	{r2}
 8000316:	4690      	mov	r8, r2
 8000318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031a:	2cff      	cmp	r4, #255	; 0xff
 800031c:	d0e3      	beq.n	80002e6 <__aeabi_fadd+0x76>
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	0038      	movs	r0, r7
 8000322:	04c9      	lsls	r1, r1, #19
 8000324:	4308      	orrs	r0, r1
 8000326:	4684      	mov	ip, r0
 8000328:	2a1b      	cmp	r2, #27
 800032a:	dd00      	ble.n	800032e <__aeabi_fadd+0xbe>
 800032c:	e082      	b.n	8000434 <__aeabi_fadd+0x1c4>
 800032e:	2020      	movs	r0, #32
 8000330:	4661      	mov	r1, ip
 8000332:	40d1      	lsrs	r1, r2
 8000334:	1a82      	subs	r2, r0, r2
 8000336:	4660      	mov	r0, ip
 8000338:	4090      	lsls	r0, r2
 800033a:	0002      	movs	r2, r0
 800033c:	1e50      	subs	r0, r2, #1
 800033e:	4182      	sbcs	r2, r0
 8000340:	430a      	orrs	r2, r1
 8000342:	1a9b      	subs	r3, r3, r2
 8000344:	015a      	lsls	r2, r3, #5
 8000346:	d4b8      	bmi.n	80002ba <__aeabi_fadd+0x4a>
 8000348:	075a      	lsls	r2, r3, #29
 800034a:	d1ce      	bne.n	80002ea <__aeabi_fadd+0x7a>
 800034c:	08de      	lsrs	r6, r3, #3
 800034e:	002a      	movs	r2, r5
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d13a      	bne.n	80003ca <__aeabi_fadd+0x15a>
 8000354:	2e00      	cmp	r6, #0
 8000356:	d100      	bne.n	800035a <__aeabi_fadd+0xea>
 8000358:	e0ae      	b.n	80004b8 <__aeabi_fadd+0x248>
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	03db      	lsls	r3, r3, #15
 800035e:	4333      	orrs	r3, r6
 8000360:	025b      	lsls	r3, r3, #9
 8000362:	0a5b      	lsrs	r3, r3, #9
 8000364:	24ff      	movs	r4, #255	; 0xff
 8000366:	e7cf      	b.n	8000308 <__aeabi_fadd+0x98>
 8000368:	1a21      	subs	r1, r4, r0
 800036a:	2900      	cmp	r1, #0
 800036c:	dd52      	ble.n	8000414 <__aeabi_fadd+0x1a4>
 800036e:	2800      	cmp	r0, #0
 8000370:	d031      	beq.n	80003d6 <__aeabi_fadd+0x166>
 8000372:	2cff      	cmp	r4, #255	; 0xff
 8000374:	d0b7      	beq.n	80002e6 <__aeabi_fadd+0x76>
 8000376:	2080      	movs	r0, #128	; 0x80
 8000378:	003e      	movs	r6, r7
 800037a:	04c0      	lsls	r0, r0, #19
 800037c:	4306      	orrs	r6, r0
 800037e:	46b4      	mov	ip, r6
 8000380:	291b      	cmp	r1, #27
 8000382:	dd00      	ble.n	8000386 <__aeabi_fadd+0x116>
 8000384:	e0aa      	b.n	80004dc <__aeabi_fadd+0x26c>
 8000386:	2620      	movs	r6, #32
 8000388:	4660      	mov	r0, ip
 800038a:	40c8      	lsrs	r0, r1
 800038c:	1a71      	subs	r1, r6, r1
 800038e:	4666      	mov	r6, ip
 8000390:	408e      	lsls	r6, r1
 8000392:	0031      	movs	r1, r6
 8000394:	1e4e      	subs	r6, r1, #1
 8000396:	41b1      	sbcs	r1, r6
 8000398:	4301      	orrs	r1, r0
 800039a:	185b      	adds	r3, r3, r1
 800039c:	0159      	lsls	r1, r3, #5
 800039e:	d5d3      	bpl.n	8000348 <__aeabi_fadd+0xd8>
 80003a0:	3401      	adds	r4, #1
 80003a2:	2cff      	cmp	r4, #255	; 0xff
 80003a4:	d100      	bne.n	80003a8 <__aeabi_fadd+0x138>
 80003a6:	e087      	b.n	80004b8 <__aeabi_fadd+0x248>
 80003a8:	2201      	movs	r2, #1
 80003aa:	4978      	ldr	r1, [pc, #480]	; (800058c <__aeabi_fadd+0x31c>)
 80003ac:	401a      	ands	r2, r3
 80003ae:	085b      	lsrs	r3, r3, #1
 80003b0:	400b      	ands	r3, r1
 80003b2:	4313      	orrs	r3, r2
 80003b4:	e797      	b.n	80002e6 <__aeabi_fadd+0x76>
 80003b6:	2c00      	cmp	r4, #0
 80003b8:	d000      	beq.n	80003bc <__aeabi_fadd+0x14c>
 80003ba:	e0a7      	b.n	800050c <__aeabi_fadd+0x29c>
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d000      	beq.n	80003c2 <__aeabi_fadd+0x152>
 80003c0:	e0b6      	b.n	8000530 <__aeabi_fadd+0x2c0>
 80003c2:	1e3b      	subs	r3, r7, #0
 80003c4:	d162      	bne.n	800048c <__aeabi_fadd+0x21c>
 80003c6:	2600      	movs	r6, #0
 80003c8:	2200      	movs	r2, #0
 80003ca:	0273      	lsls	r3, r6, #9
 80003cc:	0a5b      	lsrs	r3, r3, #9
 80003ce:	b2e4      	uxtb	r4, r4
 80003d0:	e79a      	b.n	8000308 <__aeabi_fadd+0x98>
 80003d2:	0014      	movs	r4, r2
 80003d4:	e787      	b.n	80002e6 <__aeabi_fadd+0x76>
 80003d6:	2f00      	cmp	r7, #0
 80003d8:	d04d      	beq.n	8000476 <__aeabi_fadd+0x206>
 80003da:	1e48      	subs	r0, r1, #1
 80003dc:	2800      	cmp	r0, #0
 80003de:	d157      	bne.n	8000490 <__aeabi_fadd+0x220>
 80003e0:	4463      	add	r3, ip
 80003e2:	2401      	movs	r4, #1
 80003e4:	015a      	lsls	r2, r3, #5
 80003e6:	d5af      	bpl.n	8000348 <__aeabi_fadd+0xd8>
 80003e8:	2402      	movs	r4, #2
 80003ea:	e7dd      	b.n	80003a8 <__aeabi_fadd+0x138>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	d124      	bne.n	800043a <__aeabi_fadd+0x1ca>
 80003f0:	1c62      	adds	r2, r4, #1
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	2a01      	cmp	r2, #1
 80003f6:	ddde      	ble.n	80003b6 <__aeabi_fadd+0x146>
 80003f8:	1bde      	subs	r6, r3, r7
 80003fa:	0172      	lsls	r2, r6, #5
 80003fc:	d535      	bpl.n	800046a <__aeabi_fadd+0x1fa>
 80003fe:	1afe      	subs	r6, r7, r3
 8000400:	000d      	movs	r5, r1
 8000402:	e75c      	b.n	80002be <__aeabi_fadd+0x4e>
 8000404:	002a      	movs	r2, r5
 8000406:	2300      	movs	r3, #0
 8000408:	e77e      	b.n	8000308 <__aeabi_fadd+0x98>
 800040a:	0033      	movs	r3, r6
 800040c:	4a60      	ldr	r2, [pc, #384]	; (8000590 <__aeabi_fadd+0x320>)
 800040e:	1a24      	subs	r4, r4, r0
 8000410:	4013      	ands	r3, r2
 8000412:	e768      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000414:	2900      	cmp	r1, #0
 8000416:	d163      	bne.n	80004e0 <__aeabi_fadd+0x270>
 8000418:	1c61      	adds	r1, r4, #1
 800041a:	b2c8      	uxtb	r0, r1
 800041c:	2801      	cmp	r0, #1
 800041e:	dd4e      	ble.n	80004be <__aeabi_fadd+0x24e>
 8000420:	29ff      	cmp	r1, #255	; 0xff
 8000422:	d049      	beq.n	80004b8 <__aeabi_fadd+0x248>
 8000424:	4463      	add	r3, ip
 8000426:	085b      	lsrs	r3, r3, #1
 8000428:	000c      	movs	r4, r1
 800042a:	e75c      	b.n	80002e6 <__aeabi_fadd+0x76>
 800042c:	2aff      	cmp	r2, #255	; 0xff
 800042e:	d041      	beq.n	80004b4 <__aeabi_fadd+0x244>
 8000430:	000a      	movs	r2, r1
 8000432:	e779      	b.n	8000328 <__aeabi_fadd+0xb8>
 8000434:	2201      	movs	r2, #1
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	e784      	b.n	8000344 <__aeabi_fadd+0xd4>
 800043a:	2c00      	cmp	r4, #0
 800043c:	d01d      	beq.n	800047a <__aeabi_fadd+0x20a>
 800043e:	28ff      	cmp	r0, #255	; 0xff
 8000440:	d022      	beq.n	8000488 <__aeabi_fadd+0x218>
 8000442:	2480      	movs	r4, #128	; 0x80
 8000444:	04e4      	lsls	r4, r4, #19
 8000446:	4252      	negs	r2, r2
 8000448:	4323      	orrs	r3, r4
 800044a:	2a1b      	cmp	r2, #27
 800044c:	dd00      	ble.n	8000450 <__aeabi_fadd+0x1e0>
 800044e:	e08a      	b.n	8000566 <__aeabi_fadd+0x2f6>
 8000450:	001c      	movs	r4, r3
 8000452:	2520      	movs	r5, #32
 8000454:	40d4      	lsrs	r4, r2
 8000456:	1aaa      	subs	r2, r5, r2
 8000458:	4093      	lsls	r3, r2
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	4193      	sbcs	r3, r2
 800045e:	4323      	orrs	r3, r4
 8000460:	4662      	mov	r2, ip
 8000462:	0004      	movs	r4, r0
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	000d      	movs	r5, r1
 8000468:	e725      	b.n	80002b6 <__aeabi_fadd+0x46>
 800046a:	2e00      	cmp	r6, #0
 800046c:	d000      	beq.n	8000470 <__aeabi_fadd+0x200>
 800046e:	e726      	b.n	80002be <__aeabi_fadd+0x4e>
 8000470:	2200      	movs	r2, #0
 8000472:	2400      	movs	r4, #0
 8000474:	e7a9      	b.n	80003ca <__aeabi_fadd+0x15a>
 8000476:	000c      	movs	r4, r1
 8000478:	e735      	b.n	80002e6 <__aeabi_fadd+0x76>
 800047a:	2b00      	cmp	r3, #0
 800047c:	d04d      	beq.n	800051a <__aeabi_fadd+0x2aa>
 800047e:	43d2      	mvns	r2, r2
 8000480:	2a00      	cmp	r2, #0
 8000482:	d0ed      	beq.n	8000460 <__aeabi_fadd+0x1f0>
 8000484:	28ff      	cmp	r0, #255	; 0xff
 8000486:	d1e0      	bne.n	800044a <__aeabi_fadd+0x1da>
 8000488:	4663      	mov	r3, ip
 800048a:	24ff      	movs	r4, #255	; 0xff
 800048c:	000d      	movs	r5, r1
 800048e:	e72a      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000490:	29ff      	cmp	r1, #255	; 0xff
 8000492:	d00f      	beq.n	80004b4 <__aeabi_fadd+0x244>
 8000494:	0001      	movs	r1, r0
 8000496:	e773      	b.n	8000380 <__aeabi_fadd+0x110>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d061      	beq.n	8000560 <__aeabi_fadd+0x2f0>
 800049c:	24ff      	movs	r4, #255	; 0xff
 800049e:	2f00      	cmp	r7, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x234>
 80004a2:	e720      	b.n	80002e6 <__aeabi_fadd+0x76>
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	4641      	mov	r1, r8
 80004a8:	03d2      	lsls	r2, r2, #15
 80004aa:	4211      	tst	r1, r2
 80004ac:	d002      	beq.n	80004b4 <__aeabi_fadd+0x244>
 80004ae:	4216      	tst	r6, r2
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fadd+0x244>
 80004b2:	003b      	movs	r3, r7
 80004b4:	24ff      	movs	r4, #255	; 0xff
 80004b6:	e716      	b.n	80002e6 <__aeabi_fadd+0x76>
 80004b8:	24ff      	movs	r4, #255	; 0xff
 80004ba:	2300      	movs	r3, #0
 80004bc:	e724      	b.n	8000308 <__aeabi_fadd+0x98>
 80004be:	2c00      	cmp	r4, #0
 80004c0:	d1ea      	bne.n	8000498 <__aeabi_fadd+0x228>
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d058      	beq.n	8000578 <__aeabi_fadd+0x308>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x25c>
 80004ca:	e70c      	b.n	80002e6 <__aeabi_fadd+0x76>
 80004cc:	4463      	add	r3, ip
 80004ce:	015a      	lsls	r2, r3, #5
 80004d0:	d400      	bmi.n	80004d4 <__aeabi_fadd+0x264>
 80004d2:	e739      	b.n	8000348 <__aeabi_fadd+0xd8>
 80004d4:	4a2e      	ldr	r2, [pc, #184]	; (8000590 <__aeabi_fadd+0x320>)
 80004d6:	000c      	movs	r4, r1
 80004d8:	4013      	ands	r3, r2
 80004da:	e704      	b.n	80002e6 <__aeabi_fadd+0x76>
 80004dc:	2101      	movs	r1, #1
 80004de:	e75c      	b.n	800039a <__aeabi_fadd+0x12a>
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d11e      	bne.n	8000522 <__aeabi_fadd+0x2b2>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d040      	beq.n	800056a <__aeabi_fadd+0x2fa>
 80004e8:	43c9      	mvns	r1, r1
 80004ea:	2900      	cmp	r1, #0
 80004ec:	d00b      	beq.n	8000506 <__aeabi_fadd+0x296>
 80004ee:	28ff      	cmp	r0, #255	; 0xff
 80004f0:	d036      	beq.n	8000560 <__aeabi_fadd+0x2f0>
 80004f2:	291b      	cmp	r1, #27
 80004f4:	dc47      	bgt.n	8000586 <__aeabi_fadd+0x316>
 80004f6:	001c      	movs	r4, r3
 80004f8:	2620      	movs	r6, #32
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	1a71      	subs	r1, r6, r1
 80004fe:	408b      	lsls	r3, r1
 8000500:	1e59      	subs	r1, r3, #1
 8000502:	418b      	sbcs	r3, r1
 8000504:	4323      	orrs	r3, r4
 8000506:	4463      	add	r3, ip
 8000508:	0004      	movs	r4, r0
 800050a:	e747      	b.n	800039c <__aeabi_fadd+0x12c>
 800050c:	2b00      	cmp	r3, #0
 800050e:	d118      	bne.n	8000542 <__aeabi_fadd+0x2d2>
 8000510:	1e3b      	subs	r3, r7, #0
 8000512:	d02d      	beq.n	8000570 <__aeabi_fadd+0x300>
 8000514:	000d      	movs	r5, r1
 8000516:	24ff      	movs	r4, #255	; 0xff
 8000518:	e6e5      	b.n	80002e6 <__aeabi_fadd+0x76>
 800051a:	003b      	movs	r3, r7
 800051c:	0004      	movs	r4, r0
 800051e:	000d      	movs	r5, r1
 8000520:	e6e1      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000522:	28ff      	cmp	r0, #255	; 0xff
 8000524:	d01c      	beq.n	8000560 <__aeabi_fadd+0x2f0>
 8000526:	2480      	movs	r4, #128	; 0x80
 8000528:	04e4      	lsls	r4, r4, #19
 800052a:	4249      	negs	r1, r1
 800052c:	4323      	orrs	r3, r4
 800052e:	e7e0      	b.n	80004f2 <__aeabi_fadd+0x282>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x2c6>
 8000534:	e6d7      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000536:	1bde      	subs	r6, r3, r7
 8000538:	0172      	lsls	r2, r6, #5
 800053a:	d51f      	bpl.n	800057c <__aeabi_fadd+0x30c>
 800053c:	1afb      	subs	r3, r7, r3
 800053e:	000d      	movs	r5, r1
 8000540:	e6d1      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000542:	24ff      	movs	r4, #255	; 0xff
 8000544:	2f00      	cmp	r7, #0
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x2da>
 8000548:	e6cd      	b.n	80002e6 <__aeabi_fadd+0x76>
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	4640      	mov	r0, r8
 800054e:	03d2      	lsls	r2, r2, #15
 8000550:	4210      	tst	r0, r2
 8000552:	d0af      	beq.n	80004b4 <__aeabi_fadd+0x244>
 8000554:	4216      	tst	r6, r2
 8000556:	d1ad      	bne.n	80004b4 <__aeabi_fadd+0x244>
 8000558:	003b      	movs	r3, r7
 800055a:	000d      	movs	r5, r1
 800055c:	24ff      	movs	r4, #255	; 0xff
 800055e:	e6c2      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000560:	4663      	mov	r3, ip
 8000562:	24ff      	movs	r4, #255	; 0xff
 8000564:	e6bf      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000566:	2301      	movs	r3, #1
 8000568:	e77a      	b.n	8000460 <__aeabi_fadd+0x1f0>
 800056a:	003b      	movs	r3, r7
 800056c:	0004      	movs	r4, r0
 800056e:	e6ba      	b.n	80002e6 <__aeabi_fadd+0x76>
 8000570:	2680      	movs	r6, #128	; 0x80
 8000572:	2200      	movs	r2, #0
 8000574:	03f6      	lsls	r6, r6, #15
 8000576:	e6f0      	b.n	800035a <__aeabi_fadd+0xea>
 8000578:	003b      	movs	r3, r7
 800057a:	e6b4      	b.n	80002e6 <__aeabi_fadd+0x76>
 800057c:	1e33      	subs	r3, r6, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0x312>
 8000580:	e6e2      	b.n	8000348 <__aeabi_fadd+0xd8>
 8000582:	2200      	movs	r2, #0
 8000584:	e721      	b.n	80003ca <__aeabi_fadd+0x15a>
 8000586:	2301      	movs	r3, #1
 8000588:	e7bd      	b.n	8000506 <__aeabi_fadd+0x296>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	7dffffff 	.word	0x7dffffff
 8000590:	fbffffff 	.word	0xfbffffff

08000594 <__aeabi_fdiv>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	46de      	mov	lr, fp
 800059c:	4645      	mov	r5, r8
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0244      	lsls	r4, r0, #9
 80005a2:	0043      	lsls	r3, r0, #1
 80005a4:	0fc6      	lsrs	r6, r0, #31
 80005a6:	b083      	sub	sp, #12
 80005a8:	1c0f      	adds	r7, r1, #0
 80005aa:	0a64      	lsrs	r4, r4, #9
 80005ac:	0e1b      	lsrs	r3, r3, #24
 80005ae:	46b2      	mov	sl, r6
 80005b0:	d053      	beq.n	800065a <__aeabi_fdiv+0xc6>
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	d027      	beq.n	8000606 <__aeabi_fdiv+0x72>
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	00e4      	lsls	r4, r4, #3
 80005ba:	04d2      	lsls	r2, r2, #19
 80005bc:	4314      	orrs	r4, r2
 80005be:	227f      	movs	r2, #127	; 0x7f
 80005c0:	4252      	negs	r2, r2
 80005c2:	4690      	mov	r8, r2
 80005c4:	4498      	add	r8, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	4699      	mov	r9, r3
 80005ca:	469b      	mov	fp, r3
 80005cc:	027d      	lsls	r5, r7, #9
 80005ce:	0078      	lsls	r0, r7, #1
 80005d0:	0ffb      	lsrs	r3, r7, #31
 80005d2:	0a6d      	lsrs	r5, r5, #9
 80005d4:	0e00      	lsrs	r0, r0, #24
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	d024      	beq.n	8000624 <__aeabi_fdiv+0x90>
 80005da:	28ff      	cmp	r0, #255	; 0xff
 80005dc:	d046      	beq.n	800066c <__aeabi_fdiv+0xd8>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	2100      	movs	r1, #0
 80005e2:	00ed      	lsls	r5, r5, #3
 80005e4:	04db      	lsls	r3, r3, #19
 80005e6:	431d      	orrs	r5, r3
 80005e8:	387f      	subs	r0, #127	; 0x7f
 80005ea:	4647      	mov	r7, r8
 80005ec:	1a38      	subs	r0, r7, r0
 80005ee:	464f      	mov	r7, r9
 80005f0:	430f      	orrs	r7, r1
 80005f2:	00bf      	lsls	r7, r7, #2
 80005f4:	46b9      	mov	r9, r7
 80005f6:	0033      	movs	r3, r6
 80005f8:	9a00      	ldr	r2, [sp, #0]
 80005fa:	4f87      	ldr	r7, [pc, #540]	; (8000818 <__aeabi_fdiv+0x284>)
 80005fc:	4053      	eors	r3, r2
 80005fe:	464a      	mov	r2, r9
 8000600:	58ba      	ldr	r2, [r7, r2]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4697      	mov	pc, r2
 8000606:	2c00      	cmp	r4, #0
 8000608:	d14e      	bne.n	80006a8 <__aeabi_fdiv+0x114>
 800060a:	2308      	movs	r3, #8
 800060c:	4699      	mov	r9, r3
 800060e:	33f7      	adds	r3, #247	; 0xf7
 8000610:	4698      	mov	r8, r3
 8000612:	3bfd      	subs	r3, #253	; 0xfd
 8000614:	469b      	mov	fp, r3
 8000616:	027d      	lsls	r5, r7, #9
 8000618:	0078      	lsls	r0, r7, #1
 800061a:	0ffb      	lsrs	r3, r7, #31
 800061c:	0a6d      	lsrs	r5, r5, #9
 800061e:	0e00      	lsrs	r0, r0, #24
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	d1da      	bne.n	80005da <__aeabi_fdiv+0x46>
 8000624:	2d00      	cmp	r5, #0
 8000626:	d126      	bne.n	8000676 <__aeabi_fdiv+0xe2>
 8000628:	2000      	movs	r0, #0
 800062a:	2101      	movs	r1, #1
 800062c:	0033      	movs	r3, r6
 800062e:	9a00      	ldr	r2, [sp, #0]
 8000630:	4f7a      	ldr	r7, [pc, #488]	; (800081c <__aeabi_fdiv+0x288>)
 8000632:	4053      	eors	r3, r2
 8000634:	4642      	mov	r2, r8
 8000636:	1a10      	subs	r0, r2, r0
 8000638:	464a      	mov	r2, r9
 800063a:	430a      	orrs	r2, r1
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	58ba      	ldr	r2, [r7, r2]
 8000640:	001d      	movs	r5, r3
 8000642:	4697      	mov	pc, r2
 8000644:	9b00      	ldr	r3, [sp, #0]
 8000646:	002c      	movs	r4, r5
 8000648:	469a      	mov	sl, r3
 800064a:	468b      	mov	fp, r1
 800064c:	465b      	mov	r3, fp
 800064e:	2b02      	cmp	r3, #2
 8000650:	d131      	bne.n	80006b6 <__aeabi_fdiv+0x122>
 8000652:	4653      	mov	r3, sl
 8000654:	21ff      	movs	r1, #255	; 0xff
 8000656:	2400      	movs	r4, #0
 8000658:	e038      	b.n	80006cc <__aeabi_fdiv+0x138>
 800065a:	2c00      	cmp	r4, #0
 800065c:	d117      	bne.n	800068e <__aeabi_fdiv+0xfa>
 800065e:	2304      	movs	r3, #4
 8000660:	4699      	mov	r9, r3
 8000662:	2300      	movs	r3, #0
 8000664:	4698      	mov	r8, r3
 8000666:	3301      	adds	r3, #1
 8000668:	469b      	mov	fp, r3
 800066a:	e7af      	b.n	80005cc <__aeabi_fdiv+0x38>
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	2d00      	cmp	r5, #0
 8000670:	d10b      	bne.n	800068a <__aeabi_fdiv+0xf6>
 8000672:	2102      	movs	r1, #2
 8000674:	e7da      	b.n	800062c <__aeabi_fdiv+0x98>
 8000676:	0028      	movs	r0, r5
 8000678:	f000 fbd6 	bl	8000e28 <__clzsi2>
 800067c:	1f43      	subs	r3, r0, #5
 800067e:	409d      	lsls	r5, r3
 8000680:	2376      	movs	r3, #118	; 0x76
 8000682:	425b      	negs	r3, r3
 8000684:	1a18      	subs	r0, r3, r0
 8000686:	2100      	movs	r1, #0
 8000688:	e7af      	b.n	80005ea <__aeabi_fdiv+0x56>
 800068a:	2103      	movs	r1, #3
 800068c:	e7ad      	b.n	80005ea <__aeabi_fdiv+0x56>
 800068e:	0020      	movs	r0, r4
 8000690:	f000 fbca 	bl	8000e28 <__clzsi2>
 8000694:	1f43      	subs	r3, r0, #5
 8000696:	409c      	lsls	r4, r3
 8000698:	2376      	movs	r3, #118	; 0x76
 800069a:	425b      	negs	r3, r3
 800069c:	1a1b      	subs	r3, r3, r0
 800069e:	4698      	mov	r8, r3
 80006a0:	2300      	movs	r3, #0
 80006a2:	4699      	mov	r9, r3
 80006a4:	469b      	mov	fp, r3
 80006a6:	e791      	b.n	80005cc <__aeabi_fdiv+0x38>
 80006a8:	230c      	movs	r3, #12
 80006aa:	4699      	mov	r9, r3
 80006ac:	33f3      	adds	r3, #243	; 0xf3
 80006ae:	4698      	mov	r8, r3
 80006b0:	3bfc      	subs	r3, #252	; 0xfc
 80006b2:	469b      	mov	fp, r3
 80006b4:	e78a      	b.n	80005cc <__aeabi_fdiv+0x38>
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d100      	bne.n	80006bc <__aeabi_fdiv+0x128>
 80006ba:	e0a5      	b.n	8000808 <__aeabi_fdiv+0x274>
 80006bc:	4655      	mov	r5, sl
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fdiv+0x130>
 80006c2:	e081      	b.n	80007c8 <__aeabi_fdiv+0x234>
 80006c4:	2301      	movs	r3, #1
 80006c6:	2100      	movs	r1, #0
 80006c8:	2400      	movs	r4, #0
 80006ca:	402b      	ands	r3, r5
 80006cc:	0264      	lsls	r4, r4, #9
 80006ce:	05c9      	lsls	r1, r1, #23
 80006d0:	0a60      	lsrs	r0, r4, #9
 80006d2:	07db      	lsls	r3, r3, #31
 80006d4:	4308      	orrs	r0, r1
 80006d6:	4318      	orrs	r0, r3
 80006d8:	b003      	add	sp, #12
 80006da:	bc3c      	pop	{r2, r3, r4, r5}
 80006dc:	4690      	mov	r8, r2
 80006de:	4699      	mov	r9, r3
 80006e0:	46a2      	mov	sl, r4
 80006e2:	46ab      	mov	fp, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	2480      	movs	r4, #128	; 0x80
 80006e8:	2300      	movs	r3, #0
 80006ea:	03e4      	lsls	r4, r4, #15
 80006ec:	21ff      	movs	r1, #255	; 0xff
 80006ee:	e7ed      	b.n	80006cc <__aeabi_fdiv+0x138>
 80006f0:	21ff      	movs	r1, #255	; 0xff
 80006f2:	2400      	movs	r4, #0
 80006f4:	e7ea      	b.n	80006cc <__aeabi_fdiv+0x138>
 80006f6:	2301      	movs	r3, #1
 80006f8:	1a59      	subs	r1, r3, r1
 80006fa:	291b      	cmp	r1, #27
 80006fc:	dd66      	ble.n	80007cc <__aeabi_fdiv+0x238>
 80006fe:	9a01      	ldr	r2, [sp, #4]
 8000700:	4013      	ands	r3, r2
 8000702:	2100      	movs	r1, #0
 8000704:	2400      	movs	r4, #0
 8000706:	e7e1      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	03db      	lsls	r3, r3, #15
 800070c:	421c      	tst	r4, r3
 800070e:	d038      	beq.n	8000782 <__aeabi_fdiv+0x1ee>
 8000710:	421d      	tst	r5, r3
 8000712:	d051      	beq.n	80007b8 <__aeabi_fdiv+0x224>
 8000714:	431c      	orrs	r4, r3
 8000716:	0264      	lsls	r4, r4, #9
 8000718:	0a64      	lsrs	r4, r4, #9
 800071a:	0033      	movs	r3, r6
 800071c:	21ff      	movs	r1, #255	; 0xff
 800071e:	e7d5      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000720:	0163      	lsls	r3, r4, #5
 8000722:	016c      	lsls	r4, r5, #5
 8000724:	42a3      	cmp	r3, r4
 8000726:	d23b      	bcs.n	80007a0 <__aeabi_fdiv+0x20c>
 8000728:	261b      	movs	r6, #27
 800072a:	2100      	movs	r1, #0
 800072c:	3801      	subs	r0, #1
 800072e:	2501      	movs	r5, #1
 8000730:	001f      	movs	r7, r3
 8000732:	0049      	lsls	r1, r1, #1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	2f00      	cmp	r7, #0
 8000738:	db01      	blt.n	800073e <__aeabi_fdiv+0x1aa>
 800073a:	429c      	cmp	r4, r3
 800073c:	d801      	bhi.n	8000742 <__aeabi_fdiv+0x1ae>
 800073e:	1b1b      	subs	r3, r3, r4
 8000740:	4329      	orrs	r1, r5
 8000742:	3e01      	subs	r6, #1
 8000744:	2e00      	cmp	r6, #0
 8000746:	d1f3      	bne.n	8000730 <__aeabi_fdiv+0x19c>
 8000748:	001c      	movs	r4, r3
 800074a:	1e63      	subs	r3, r4, #1
 800074c:	419c      	sbcs	r4, r3
 800074e:	430c      	orrs	r4, r1
 8000750:	0001      	movs	r1, r0
 8000752:	317f      	adds	r1, #127	; 0x7f
 8000754:	2900      	cmp	r1, #0
 8000756:	ddce      	ble.n	80006f6 <__aeabi_fdiv+0x162>
 8000758:	0763      	lsls	r3, r4, #29
 800075a:	d004      	beq.n	8000766 <__aeabi_fdiv+0x1d2>
 800075c:	230f      	movs	r3, #15
 800075e:	4023      	ands	r3, r4
 8000760:	2b04      	cmp	r3, #4
 8000762:	d000      	beq.n	8000766 <__aeabi_fdiv+0x1d2>
 8000764:	3404      	adds	r4, #4
 8000766:	0123      	lsls	r3, r4, #4
 8000768:	d503      	bpl.n	8000772 <__aeabi_fdiv+0x1de>
 800076a:	0001      	movs	r1, r0
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <__aeabi_fdiv+0x28c>)
 800076e:	3180      	adds	r1, #128	; 0x80
 8000770:	401c      	ands	r4, r3
 8000772:	29fe      	cmp	r1, #254	; 0xfe
 8000774:	dd0d      	ble.n	8000792 <__aeabi_fdiv+0x1fe>
 8000776:	2301      	movs	r3, #1
 8000778:	9a01      	ldr	r2, [sp, #4]
 800077a:	21ff      	movs	r1, #255	; 0xff
 800077c:	4013      	ands	r3, r2
 800077e:	2400      	movs	r4, #0
 8000780:	e7a4      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	431c      	orrs	r4, r3
 8000788:	0264      	lsls	r4, r4, #9
 800078a:	0a64      	lsrs	r4, r4, #9
 800078c:	0033      	movs	r3, r6
 800078e:	21ff      	movs	r1, #255	; 0xff
 8000790:	e79c      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000792:	2301      	movs	r3, #1
 8000794:	9a01      	ldr	r2, [sp, #4]
 8000796:	01a4      	lsls	r4, r4, #6
 8000798:	0a64      	lsrs	r4, r4, #9
 800079a:	b2c9      	uxtb	r1, r1
 800079c:	4013      	ands	r3, r2
 800079e:	e795      	b.n	80006cc <__aeabi_fdiv+0x138>
 80007a0:	1b1b      	subs	r3, r3, r4
 80007a2:	261a      	movs	r6, #26
 80007a4:	2101      	movs	r1, #1
 80007a6:	e7c2      	b.n	800072e <__aeabi_fdiv+0x19a>
 80007a8:	9b00      	ldr	r3, [sp, #0]
 80007aa:	468b      	mov	fp, r1
 80007ac:	469a      	mov	sl, r3
 80007ae:	2400      	movs	r4, #0
 80007b0:	e74c      	b.n	800064c <__aeabi_fdiv+0xb8>
 80007b2:	0263      	lsls	r3, r4, #9
 80007b4:	d5e5      	bpl.n	8000782 <__aeabi_fdiv+0x1ee>
 80007b6:	2500      	movs	r5, #0
 80007b8:	2480      	movs	r4, #128	; 0x80
 80007ba:	03e4      	lsls	r4, r4, #15
 80007bc:	432c      	orrs	r4, r5
 80007be:	0264      	lsls	r4, r4, #9
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	9b00      	ldr	r3, [sp, #0]
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	e781      	b.n	80006cc <__aeabi_fdiv+0x138>
 80007c8:	9501      	str	r5, [sp, #4]
 80007ca:	e7c1      	b.n	8000750 <__aeabi_fdiv+0x1bc>
 80007cc:	0023      	movs	r3, r4
 80007ce:	2020      	movs	r0, #32
 80007d0:	40cb      	lsrs	r3, r1
 80007d2:	1a41      	subs	r1, r0, r1
 80007d4:	408c      	lsls	r4, r1
 80007d6:	1e61      	subs	r1, r4, #1
 80007d8:	418c      	sbcs	r4, r1
 80007da:	431c      	orrs	r4, r3
 80007dc:	0763      	lsls	r3, r4, #29
 80007de:	d004      	beq.n	80007ea <__aeabi_fdiv+0x256>
 80007e0:	230f      	movs	r3, #15
 80007e2:	4023      	ands	r3, r4
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fdiv+0x256>
 80007e8:	3404      	adds	r4, #4
 80007ea:	0163      	lsls	r3, r4, #5
 80007ec:	d505      	bpl.n	80007fa <__aeabi_fdiv+0x266>
 80007ee:	2301      	movs	r3, #1
 80007f0:	9a01      	ldr	r2, [sp, #4]
 80007f2:	2101      	movs	r1, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	2400      	movs	r4, #0
 80007f8:	e768      	b.n	80006cc <__aeabi_fdiv+0x138>
 80007fa:	2301      	movs	r3, #1
 80007fc:	9a01      	ldr	r2, [sp, #4]
 80007fe:	01a4      	lsls	r4, r4, #6
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	4013      	ands	r3, r2
 8000804:	2100      	movs	r1, #0
 8000806:	e761      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	431c      	orrs	r4, r3
 800080e:	0264      	lsls	r4, r4, #9
 8000810:	0a64      	lsrs	r4, r4, #9
 8000812:	4653      	mov	r3, sl
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	e759      	b.n	80006cc <__aeabi_fdiv+0x138>
 8000818:	08005a18 	.word	0x08005a18
 800081c:	08005a58 	.word	0x08005a58
 8000820:	f7ffffff 	.word	0xf7ffffff

08000824 <__aeabi_fmul>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	4657      	mov	r7, sl
 8000828:	464e      	mov	r6, r9
 800082a:	4645      	mov	r5, r8
 800082c:	46de      	mov	lr, fp
 800082e:	b5e0      	push	{r5, r6, r7, lr}
 8000830:	0247      	lsls	r7, r0, #9
 8000832:	0046      	lsls	r6, r0, #1
 8000834:	4688      	mov	r8, r1
 8000836:	0a7f      	lsrs	r7, r7, #9
 8000838:	0e36      	lsrs	r6, r6, #24
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	2e00      	cmp	r6, #0
 800083e:	d047      	beq.n	80008d0 <__aeabi_fmul+0xac>
 8000840:	2eff      	cmp	r6, #255	; 0xff
 8000842:	d024      	beq.n	800088e <__aeabi_fmul+0x6a>
 8000844:	00fb      	lsls	r3, r7, #3
 8000846:	2780      	movs	r7, #128	; 0x80
 8000848:	04ff      	lsls	r7, r7, #19
 800084a:	431f      	orrs	r7, r3
 800084c:	2300      	movs	r3, #0
 800084e:	4699      	mov	r9, r3
 8000850:	469a      	mov	sl, r3
 8000852:	3e7f      	subs	r6, #127	; 0x7f
 8000854:	4643      	mov	r3, r8
 8000856:	025d      	lsls	r5, r3, #9
 8000858:	0058      	lsls	r0, r3, #1
 800085a:	0fdb      	lsrs	r3, r3, #31
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	0e00      	lsrs	r0, r0, #24
 8000860:	4698      	mov	r8, r3
 8000862:	d043      	beq.n	80008ec <__aeabi_fmul+0xc8>
 8000864:	28ff      	cmp	r0, #255	; 0xff
 8000866:	d03b      	beq.n	80008e0 <__aeabi_fmul+0xbc>
 8000868:	00eb      	lsls	r3, r5, #3
 800086a:	2580      	movs	r5, #128	; 0x80
 800086c:	2200      	movs	r2, #0
 800086e:	04ed      	lsls	r5, r5, #19
 8000870:	431d      	orrs	r5, r3
 8000872:	387f      	subs	r0, #127	; 0x7f
 8000874:	1836      	adds	r6, r6, r0
 8000876:	1c73      	adds	r3, r6, #1
 8000878:	4641      	mov	r1, r8
 800087a:	469b      	mov	fp, r3
 800087c:	464b      	mov	r3, r9
 800087e:	4061      	eors	r1, r4
 8000880:	4313      	orrs	r3, r2
 8000882:	2b0f      	cmp	r3, #15
 8000884:	d864      	bhi.n	8000950 <__aeabi_fmul+0x12c>
 8000886:	4875      	ldr	r0, [pc, #468]	; (8000a5c <__aeabi_fmul+0x238>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	58c3      	ldr	r3, [r0, r3]
 800088c:	469f      	mov	pc, r3
 800088e:	2f00      	cmp	r7, #0
 8000890:	d142      	bne.n	8000918 <__aeabi_fmul+0xf4>
 8000892:	2308      	movs	r3, #8
 8000894:	4699      	mov	r9, r3
 8000896:	3b06      	subs	r3, #6
 8000898:	26ff      	movs	r6, #255	; 0xff
 800089a:	469a      	mov	sl, r3
 800089c:	e7da      	b.n	8000854 <__aeabi_fmul+0x30>
 800089e:	4641      	mov	r1, r8
 80008a0:	2a02      	cmp	r2, #2
 80008a2:	d028      	beq.n	80008f6 <__aeabi_fmul+0xd2>
 80008a4:	2a03      	cmp	r2, #3
 80008a6:	d100      	bne.n	80008aa <__aeabi_fmul+0x86>
 80008a8:	e0ce      	b.n	8000a48 <__aeabi_fmul+0x224>
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fmul+0x8c>
 80008ae:	e0ac      	b.n	8000a0a <__aeabi_fmul+0x1e6>
 80008b0:	4011      	ands	r1, r2
 80008b2:	2000      	movs	r0, #0
 80008b4:	2200      	movs	r2, #0
 80008b6:	b2cc      	uxtb	r4, r1
 80008b8:	0240      	lsls	r0, r0, #9
 80008ba:	05d2      	lsls	r2, r2, #23
 80008bc:	0a40      	lsrs	r0, r0, #9
 80008be:	07e4      	lsls	r4, r4, #31
 80008c0:	4310      	orrs	r0, r2
 80008c2:	4320      	orrs	r0, r4
 80008c4:	bc3c      	pop	{r2, r3, r4, r5}
 80008c6:	4690      	mov	r8, r2
 80008c8:	4699      	mov	r9, r3
 80008ca:	46a2      	mov	sl, r4
 80008cc:	46ab      	mov	fp, r5
 80008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d0:	2f00      	cmp	r7, #0
 80008d2:	d115      	bne.n	8000900 <__aeabi_fmul+0xdc>
 80008d4:	2304      	movs	r3, #4
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b03      	subs	r3, #3
 80008da:	2600      	movs	r6, #0
 80008dc:	469a      	mov	sl, r3
 80008de:	e7b9      	b.n	8000854 <__aeabi_fmul+0x30>
 80008e0:	20ff      	movs	r0, #255	; 0xff
 80008e2:	2202      	movs	r2, #2
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d0c5      	beq.n	8000874 <__aeabi_fmul+0x50>
 80008e8:	2203      	movs	r2, #3
 80008ea:	e7c3      	b.n	8000874 <__aeabi_fmul+0x50>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d119      	bne.n	8000924 <__aeabi_fmul+0x100>
 80008f0:	2000      	movs	r0, #0
 80008f2:	2201      	movs	r2, #1
 80008f4:	e7be      	b.n	8000874 <__aeabi_fmul+0x50>
 80008f6:	2401      	movs	r4, #1
 80008f8:	22ff      	movs	r2, #255	; 0xff
 80008fa:	400c      	ands	r4, r1
 80008fc:	2000      	movs	r0, #0
 80008fe:	e7db      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000900:	0038      	movs	r0, r7
 8000902:	f000 fa91 	bl	8000e28 <__clzsi2>
 8000906:	2676      	movs	r6, #118	; 0x76
 8000908:	1f43      	subs	r3, r0, #5
 800090a:	409f      	lsls	r7, r3
 800090c:	2300      	movs	r3, #0
 800090e:	4276      	negs	r6, r6
 8000910:	1a36      	subs	r6, r6, r0
 8000912:	4699      	mov	r9, r3
 8000914:	469a      	mov	sl, r3
 8000916:	e79d      	b.n	8000854 <__aeabi_fmul+0x30>
 8000918:	230c      	movs	r3, #12
 800091a:	4699      	mov	r9, r3
 800091c:	3b09      	subs	r3, #9
 800091e:	26ff      	movs	r6, #255	; 0xff
 8000920:	469a      	mov	sl, r3
 8000922:	e797      	b.n	8000854 <__aeabi_fmul+0x30>
 8000924:	0028      	movs	r0, r5
 8000926:	f000 fa7f 	bl	8000e28 <__clzsi2>
 800092a:	1f43      	subs	r3, r0, #5
 800092c:	409d      	lsls	r5, r3
 800092e:	2376      	movs	r3, #118	; 0x76
 8000930:	425b      	negs	r3, r3
 8000932:	1a18      	subs	r0, r3, r0
 8000934:	2200      	movs	r2, #0
 8000936:	e79d      	b.n	8000874 <__aeabi_fmul+0x50>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	2400      	movs	r4, #0
 800093c:	03c0      	lsls	r0, r0, #15
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	e7ba      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000942:	003d      	movs	r5, r7
 8000944:	4652      	mov	r2, sl
 8000946:	e7ab      	b.n	80008a0 <__aeabi_fmul+0x7c>
 8000948:	003d      	movs	r5, r7
 800094a:	0021      	movs	r1, r4
 800094c:	4652      	mov	r2, sl
 800094e:	e7a7      	b.n	80008a0 <__aeabi_fmul+0x7c>
 8000950:	0c3b      	lsrs	r3, r7, #16
 8000952:	469c      	mov	ip, r3
 8000954:	042a      	lsls	r2, r5, #16
 8000956:	0c12      	lsrs	r2, r2, #16
 8000958:	0c2b      	lsrs	r3, r5, #16
 800095a:	0014      	movs	r4, r2
 800095c:	4660      	mov	r0, ip
 800095e:	4665      	mov	r5, ip
 8000960:	043f      	lsls	r7, r7, #16
 8000962:	0c3f      	lsrs	r7, r7, #16
 8000964:	437c      	muls	r4, r7
 8000966:	4342      	muls	r2, r0
 8000968:	435d      	muls	r5, r3
 800096a:	437b      	muls	r3, r7
 800096c:	0c27      	lsrs	r7, r4, #16
 800096e:	189b      	adds	r3, r3, r2
 8000970:	18ff      	adds	r7, r7, r3
 8000972:	42ba      	cmp	r2, r7
 8000974:	d903      	bls.n	800097e <__aeabi_fmul+0x15a>
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	025b      	lsls	r3, r3, #9
 800097a:	469c      	mov	ip, r3
 800097c:	4465      	add	r5, ip
 800097e:	0424      	lsls	r4, r4, #16
 8000980:	043a      	lsls	r2, r7, #16
 8000982:	0c24      	lsrs	r4, r4, #16
 8000984:	1912      	adds	r2, r2, r4
 8000986:	0193      	lsls	r3, r2, #6
 8000988:	1e5c      	subs	r4, r3, #1
 800098a:	41a3      	sbcs	r3, r4
 800098c:	0c3f      	lsrs	r7, r7, #16
 800098e:	0e92      	lsrs	r2, r2, #26
 8000990:	197d      	adds	r5, r7, r5
 8000992:	431a      	orrs	r2, r3
 8000994:	01ad      	lsls	r5, r5, #6
 8000996:	4315      	orrs	r5, r2
 8000998:	012b      	lsls	r3, r5, #4
 800099a:	d504      	bpl.n	80009a6 <__aeabi_fmul+0x182>
 800099c:	2301      	movs	r3, #1
 800099e:	465e      	mov	r6, fp
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	401d      	ands	r5, r3
 80009a4:	4315      	orrs	r5, r2
 80009a6:	0032      	movs	r2, r6
 80009a8:	327f      	adds	r2, #127	; 0x7f
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	dd25      	ble.n	80009fa <__aeabi_fmul+0x1d6>
 80009ae:	076b      	lsls	r3, r5, #29
 80009b0:	d004      	beq.n	80009bc <__aeabi_fmul+0x198>
 80009b2:	230f      	movs	r3, #15
 80009b4:	402b      	ands	r3, r5
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d000      	beq.n	80009bc <__aeabi_fmul+0x198>
 80009ba:	3504      	adds	r5, #4
 80009bc:	012b      	lsls	r3, r5, #4
 80009be:	d503      	bpl.n	80009c8 <__aeabi_fmul+0x1a4>
 80009c0:	0032      	movs	r2, r6
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <__aeabi_fmul+0x23c>)
 80009c4:	3280      	adds	r2, #128	; 0x80
 80009c6:	401d      	ands	r5, r3
 80009c8:	2afe      	cmp	r2, #254	; 0xfe
 80009ca:	dc94      	bgt.n	80008f6 <__aeabi_fmul+0xd2>
 80009cc:	2401      	movs	r4, #1
 80009ce:	01a8      	lsls	r0, r5, #6
 80009d0:	0a40      	lsrs	r0, r0, #9
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	400c      	ands	r4, r1
 80009d6:	e76f      	b.n	80008b8 <__aeabi_fmul+0x94>
 80009d8:	2080      	movs	r0, #128	; 0x80
 80009da:	03c0      	lsls	r0, r0, #15
 80009dc:	4207      	tst	r7, r0
 80009de:	d007      	beq.n	80009f0 <__aeabi_fmul+0x1cc>
 80009e0:	4205      	tst	r5, r0
 80009e2:	d105      	bne.n	80009f0 <__aeabi_fmul+0x1cc>
 80009e4:	4328      	orrs	r0, r5
 80009e6:	0240      	lsls	r0, r0, #9
 80009e8:	0a40      	lsrs	r0, r0, #9
 80009ea:	4644      	mov	r4, r8
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	e763      	b.n	80008b8 <__aeabi_fmul+0x94>
 80009f0:	4338      	orrs	r0, r7
 80009f2:	0240      	lsls	r0, r0, #9
 80009f4:	0a40      	lsrs	r0, r0, #9
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	e75e      	b.n	80008b8 <__aeabi_fmul+0x94>
 80009fa:	2401      	movs	r4, #1
 80009fc:	1aa3      	subs	r3, r4, r2
 80009fe:	2b1b      	cmp	r3, #27
 8000a00:	dd05      	ble.n	8000a0e <__aeabi_fmul+0x1ea>
 8000a02:	400c      	ands	r4, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	e756      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000a0a:	465e      	mov	r6, fp
 8000a0c:	e7cb      	b.n	80009a6 <__aeabi_fmul+0x182>
 8000a0e:	002a      	movs	r2, r5
 8000a10:	2020      	movs	r0, #32
 8000a12:	40da      	lsrs	r2, r3
 8000a14:	1ac3      	subs	r3, r0, r3
 8000a16:	409d      	lsls	r5, r3
 8000a18:	002b      	movs	r3, r5
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	075a      	lsls	r2, r3, #29
 8000a22:	d004      	beq.n	8000a2e <__aeabi_fmul+0x20a>
 8000a24:	220f      	movs	r2, #15
 8000a26:	401a      	ands	r2, r3
 8000a28:	2a04      	cmp	r2, #4
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x20a>
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	015a      	lsls	r2, r3, #5
 8000a30:	d504      	bpl.n	8000a3c <__aeabi_fmul+0x218>
 8000a32:	2401      	movs	r4, #1
 8000a34:	2201      	movs	r2, #1
 8000a36:	400c      	ands	r4, r1
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e73d      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000a3c:	2401      	movs	r4, #1
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	0a58      	lsrs	r0, r3, #9
 8000a42:	400c      	ands	r4, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	e737      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000a48:	2080      	movs	r0, #128	; 0x80
 8000a4a:	2401      	movs	r4, #1
 8000a4c:	03c0      	lsls	r0, r0, #15
 8000a4e:	4328      	orrs	r0, r5
 8000a50:	0240      	lsls	r0, r0, #9
 8000a52:	0a40      	lsrs	r0, r0, #9
 8000a54:	400c      	ands	r4, r1
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	e72e      	b.n	80008b8 <__aeabi_fmul+0x94>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	08005a98 	.word	0x08005a98
 8000a60:	f7ffffff 	.word	0xf7ffffff

08000a64 <__aeabi_fsub>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	46d6      	mov	lr, sl
 8000a6a:	4646      	mov	r6, r8
 8000a6c:	0044      	lsls	r4, r0, #1
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0fc2      	lsrs	r2, r0, #31
 8000a72:	0247      	lsls	r7, r0, #9
 8000a74:	0248      	lsls	r0, r1, #9
 8000a76:	0a40      	lsrs	r0, r0, #9
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4666      	mov	r6, ip
 8000a7c:	0a7b      	lsrs	r3, r7, #9
 8000a7e:	0048      	lsls	r0, r1, #1
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	469a      	mov	sl, r3
 8000a84:	0e24      	lsrs	r4, r4, #24
 8000a86:	0015      	movs	r5, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	0e00      	lsrs	r0, r0, #24
 8000a8c:	4689      	mov	r9, r1
 8000a8e:	00f6      	lsls	r6, r6, #3
 8000a90:	28ff      	cmp	r0, #255	; 0xff
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fsub+0x32>
 8000a94:	e08f      	b.n	8000bb6 <__aeabi_fsub+0x152>
 8000a96:	2101      	movs	r1, #1
 8000a98:	464f      	mov	r7, r9
 8000a9a:	404f      	eors	r7, r1
 8000a9c:	0039      	movs	r1, r7
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d066      	beq.n	8000b70 <__aeabi_fsub+0x10c>
 8000aa2:	1a22      	subs	r2, r4, r0
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	dc00      	bgt.n	8000aaa <__aeabi_fsub+0x46>
 8000aa8:	e09d      	b.n	8000be6 <__aeabi_fsub+0x182>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d13d      	bne.n	8000b2a <__aeabi_fsub+0xc6>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fsub+0x50>
 8000ab2:	e08b      	b.n	8000bcc <__aeabi_fsub+0x168>
 8000ab4:	1e51      	subs	r1, r2, #1
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x58>
 8000aba:	e0b5      	b.n	8000c28 <__aeabi_fsub+0x1c4>
 8000abc:	2401      	movs	r4, #1
 8000abe:	1b9b      	subs	r3, r3, r6
 8000ac0:	015a      	lsls	r2, r3, #5
 8000ac2:	d544      	bpl.n	8000b4e <__aeabi_fsub+0xea>
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	099f      	lsrs	r7, r3, #6
 8000ac8:	0038      	movs	r0, r7
 8000aca:	f000 f9ad 	bl	8000e28 <__clzsi2>
 8000ace:	3805      	subs	r0, #5
 8000ad0:	4087      	lsls	r7, r0
 8000ad2:	4284      	cmp	r4, r0
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_fsub+0x74>
 8000ad6:	e096      	b.n	8000c06 <__aeabi_fsub+0x1a2>
 8000ad8:	1b04      	subs	r4, r0, r4
 8000ada:	003a      	movs	r2, r7
 8000adc:	2020      	movs	r0, #32
 8000ade:	3401      	adds	r4, #1
 8000ae0:	40e2      	lsrs	r2, r4
 8000ae2:	1b04      	subs	r4, r0, r4
 8000ae4:	40a7      	lsls	r7, r4
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	1e5f      	subs	r7, r3, #1
 8000aea:	41bb      	sbcs	r3, r7
 8000aec:	2400      	movs	r4, #0
 8000aee:	4313      	orrs	r3, r2
 8000af0:	075a      	lsls	r2, r3, #29
 8000af2:	d004      	beq.n	8000afe <__aeabi_fsub+0x9a>
 8000af4:	220f      	movs	r2, #15
 8000af6:	401a      	ands	r2, r3
 8000af8:	2a04      	cmp	r2, #4
 8000afa:	d000      	beq.n	8000afe <__aeabi_fsub+0x9a>
 8000afc:	3304      	adds	r3, #4
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	d527      	bpl.n	8000b52 <__aeabi_fsub+0xee>
 8000b02:	3401      	adds	r4, #1
 8000b04:	2cff      	cmp	r4, #255	; 0xff
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0xa6>
 8000b08:	e079      	b.n	8000bfe <__aeabi_fsub+0x19a>
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	0a5b      	lsrs	r3, r3, #9
 8000b10:	b2e4      	uxtb	r4, r4
 8000b12:	402a      	ands	r2, r5
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	05e4      	lsls	r4, r4, #23
 8000b18:	0a58      	lsrs	r0, r3, #9
 8000b1a:	07d2      	lsls	r2, r2, #31
 8000b1c:	4320      	orrs	r0, r4
 8000b1e:	4310      	orrs	r0, r2
 8000b20:	bc1c      	pop	{r2, r3, r4}
 8000b22:	4690      	mov	r8, r2
 8000b24:	4699      	mov	r9, r3
 8000b26:	46a2      	mov	sl, r4
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2a:	2cff      	cmp	r4, #255	; 0xff
 8000b2c:	d0e0      	beq.n	8000af0 <__aeabi_fsub+0x8c>
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	04c9      	lsls	r1, r1, #19
 8000b32:	430e      	orrs	r6, r1
 8000b34:	2a1b      	cmp	r2, #27
 8000b36:	dc7b      	bgt.n	8000c30 <__aeabi_fsub+0x1cc>
 8000b38:	0031      	movs	r1, r6
 8000b3a:	2020      	movs	r0, #32
 8000b3c:	40d1      	lsrs	r1, r2
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4096      	lsls	r6, r2
 8000b42:	1e72      	subs	r2, r6, #1
 8000b44:	4196      	sbcs	r6, r2
 8000b46:	430e      	orrs	r6, r1
 8000b48:	1b9b      	subs	r3, r3, r6
 8000b4a:	015a      	lsls	r2, r3, #5
 8000b4c:	d4ba      	bmi.n	8000ac4 <__aeabi_fsub+0x60>
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d1d0      	bne.n	8000af4 <__aeabi_fsub+0x90>
 8000b52:	2201      	movs	r2, #1
 8000b54:	08df      	lsrs	r7, r3, #3
 8000b56:	402a      	ands	r2, r5
 8000b58:	2cff      	cmp	r4, #255	; 0xff
 8000b5a:	d133      	bne.n	8000bc4 <__aeabi_fsub+0x160>
 8000b5c:	2f00      	cmp	r7, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0xfe>
 8000b60:	e0a8      	b.n	8000cb4 <__aeabi_fsub+0x250>
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	03db      	lsls	r3, r3, #15
 8000b66:	433b      	orrs	r3, r7
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	24ff      	movs	r4, #255	; 0xff
 8000b6e:	e7d1      	b.n	8000b14 <__aeabi_fsub+0xb0>
 8000b70:	1a21      	subs	r1, r4, r0
 8000b72:	2900      	cmp	r1, #0
 8000b74:	dd4c      	ble.n	8000c10 <__aeabi_fsub+0x1ac>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d02a      	beq.n	8000bd0 <__aeabi_fsub+0x16c>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d0b8      	beq.n	8000af0 <__aeabi_fsub+0x8c>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	04c0      	lsls	r0, r0, #19
 8000b82:	4306      	orrs	r6, r0
 8000b84:	291b      	cmp	r1, #27
 8000b86:	dd00      	ble.n	8000b8a <__aeabi_fsub+0x126>
 8000b88:	e0af      	b.n	8000cea <__aeabi_fsub+0x286>
 8000b8a:	0030      	movs	r0, r6
 8000b8c:	2720      	movs	r7, #32
 8000b8e:	40c8      	lsrs	r0, r1
 8000b90:	1a79      	subs	r1, r7, r1
 8000b92:	408e      	lsls	r6, r1
 8000b94:	1e71      	subs	r1, r6, #1
 8000b96:	418e      	sbcs	r6, r1
 8000b98:	4306      	orrs	r6, r0
 8000b9a:	199b      	adds	r3, r3, r6
 8000b9c:	0159      	lsls	r1, r3, #5
 8000b9e:	d5d6      	bpl.n	8000b4e <__aeabi_fsub+0xea>
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fsub+0x144>
 8000ba6:	e085      	b.n	8000cb4 <__aeabi_fsub+0x250>
 8000ba8:	2201      	movs	r2, #1
 8000baa:	497a      	ldr	r1, [pc, #488]	; (8000d94 <__aeabi_fsub+0x330>)
 8000bac:	401a      	ands	r2, r3
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	e79c      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fsub+0x158>
 8000bba:	e770      	b.n	8000a9e <__aeabi_fsub+0x3a>
 8000bbc:	e76b      	b.n	8000a96 <__aeabi_fsub+0x32>
 8000bbe:	1e3b      	subs	r3, r7, #0
 8000bc0:	d1c5      	bne.n	8000b4e <__aeabi_fsub+0xea>
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	027b      	lsls	r3, r7, #9
 8000bc6:	0a5b      	lsrs	r3, r3, #9
 8000bc8:	b2e4      	uxtb	r4, r4
 8000bca:	e7a3      	b.n	8000b14 <__aeabi_fsub+0xb0>
 8000bcc:	0014      	movs	r4, r2
 8000bce:	e78f      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d04d      	beq.n	8000c70 <__aeabi_fsub+0x20c>
 8000bd4:	1e48      	subs	r0, r1, #1
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d157      	bne.n	8000c8a <__aeabi_fsub+0x226>
 8000bda:	199b      	adds	r3, r3, r6
 8000bdc:	2401      	movs	r4, #1
 8000bde:	015a      	lsls	r2, r3, #5
 8000be0:	d5b5      	bpl.n	8000b4e <__aeabi_fsub+0xea>
 8000be2:	2402      	movs	r4, #2
 8000be4:	e7e0      	b.n	8000ba8 <__aeabi_fsub+0x144>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d125      	bne.n	8000c36 <__aeabi_fsub+0x1d2>
 8000bea:	1c62      	adds	r2, r4, #1
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	2a01      	cmp	r2, #1
 8000bf0:	dd72      	ble.n	8000cd8 <__aeabi_fsub+0x274>
 8000bf2:	1b9f      	subs	r7, r3, r6
 8000bf4:	017a      	lsls	r2, r7, #5
 8000bf6:	d535      	bpl.n	8000c64 <__aeabi_fsub+0x200>
 8000bf8:	1af7      	subs	r7, r6, r3
 8000bfa:	000d      	movs	r5, r1
 8000bfc:	e764      	b.n	8000ac8 <__aeabi_fsub+0x64>
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2300      	movs	r3, #0
 8000c02:	402a      	ands	r2, r5
 8000c04:	e786      	b.n	8000b14 <__aeabi_fsub+0xb0>
 8000c06:	003b      	movs	r3, r7
 8000c08:	4a63      	ldr	r2, [pc, #396]	; (8000d98 <__aeabi_fsub+0x334>)
 8000c0a:	1a24      	subs	r4, r4, r0
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	e76f      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d16c      	bne.n	8000cee <__aeabi_fsub+0x28a>
 8000c14:	1c61      	adds	r1, r4, #1
 8000c16:	b2c8      	uxtb	r0, r1
 8000c18:	2801      	cmp	r0, #1
 8000c1a:	dd4e      	ble.n	8000cba <__aeabi_fsub+0x256>
 8000c1c:	29ff      	cmp	r1, #255	; 0xff
 8000c1e:	d049      	beq.n	8000cb4 <__aeabi_fsub+0x250>
 8000c20:	199b      	adds	r3, r3, r6
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	000c      	movs	r4, r1
 8000c26:	e763      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000c28:	2aff      	cmp	r2, #255	; 0xff
 8000c2a:	d041      	beq.n	8000cb0 <__aeabi_fsub+0x24c>
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	e781      	b.n	8000b34 <__aeabi_fsub+0xd0>
 8000c30:	2601      	movs	r6, #1
 8000c32:	1b9b      	subs	r3, r3, r6
 8000c34:	e789      	b.n	8000b4a <__aeabi_fsub+0xe6>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d01c      	beq.n	8000c74 <__aeabi_fsub+0x210>
 8000c3a:	28ff      	cmp	r0, #255	; 0xff
 8000c3c:	d021      	beq.n	8000c82 <__aeabi_fsub+0x21e>
 8000c3e:	2480      	movs	r4, #128	; 0x80
 8000c40:	04e4      	lsls	r4, r4, #19
 8000c42:	4252      	negs	r2, r2
 8000c44:	4323      	orrs	r3, r4
 8000c46:	2a1b      	cmp	r2, #27
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_fsub+0x1e8>
 8000c4a:	e096      	b.n	8000d7a <__aeabi_fsub+0x316>
 8000c4c:	001c      	movs	r4, r3
 8000c4e:	2520      	movs	r5, #32
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	1aaa      	subs	r2, r5, r2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	4193      	sbcs	r3, r2
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	1af3      	subs	r3, r6, r3
 8000c5e:	0004      	movs	r4, r0
 8000c60:	000d      	movs	r5, r1
 8000c62:	e72d      	b.n	8000ac0 <__aeabi_fsub+0x5c>
 8000c64:	2f00      	cmp	r7, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x206>
 8000c68:	e72e      	b.n	8000ac8 <__aeabi_fsub+0x64>
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e7a9      	b.n	8000bc4 <__aeabi_fsub+0x160>
 8000c70:	000c      	movs	r4, r1
 8000c72:	e73d      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d058      	beq.n	8000d2a <__aeabi_fsub+0x2c6>
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d0ee      	beq.n	8000c5c <__aeabi_fsub+0x1f8>
 8000c7e:	28ff      	cmp	r0, #255	; 0xff
 8000c80:	d1e1      	bne.n	8000c46 <__aeabi_fsub+0x1e2>
 8000c82:	0033      	movs	r3, r6
 8000c84:	24ff      	movs	r4, #255	; 0xff
 8000c86:	000d      	movs	r5, r1
 8000c88:	e732      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000c8a:	29ff      	cmp	r1, #255	; 0xff
 8000c8c:	d010      	beq.n	8000cb0 <__aeabi_fsub+0x24c>
 8000c8e:	0001      	movs	r1, r0
 8000c90:	e778      	b.n	8000b84 <__aeabi_fsub+0x120>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d06e      	beq.n	8000d74 <__aeabi_fsub+0x310>
 8000c96:	24ff      	movs	r4, #255	; 0xff
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x23a>
 8000c9c:	e728      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	4651      	mov	r1, sl
 8000ca2:	03d2      	lsls	r2, r2, #15
 8000ca4:	4211      	tst	r1, r2
 8000ca6:	d003      	beq.n	8000cb0 <__aeabi_fsub+0x24c>
 8000ca8:	4661      	mov	r1, ip
 8000caa:	4211      	tst	r1, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x24c>
 8000cae:	0033      	movs	r3, r6
 8000cb0:	24ff      	movs	r4, #255	; 0xff
 8000cb2:	e71d      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000cb4:	24ff      	movs	r4, #255	; 0xff
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e72c      	b.n	8000b14 <__aeabi_fsub+0xb0>
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d1e9      	bne.n	8000c92 <__aeabi_fsub+0x22e>
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d063      	beq.n	8000d8a <__aeabi_fsub+0x326>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x264>
 8000cc6:	e713      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000cc8:	199b      	adds	r3, r3, r6
 8000cca:	015a      	lsls	r2, r3, #5
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fsub+0x26c>
 8000cce:	e73e      	b.n	8000b4e <__aeabi_fsub+0xea>
 8000cd0:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <__aeabi_fsub+0x334>)
 8000cd2:	000c      	movs	r4, r1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	e70b      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d11e      	bne.n	8000d1a <__aeabi_fsub+0x2b6>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d12f      	bne.n	8000d40 <__aeabi_fsub+0x2dc>
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d04f      	beq.n	8000d84 <__aeabi_fsub+0x320>
 8000ce4:	0033      	movs	r3, r6
 8000ce6:	000d      	movs	r5, r1
 8000ce8:	e702      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000cea:	2601      	movs	r6, #1
 8000cec:	e755      	b.n	8000b9a <__aeabi_fsub+0x136>
 8000cee:	2c00      	cmp	r4, #0
 8000cf0:	d11f      	bne.n	8000d32 <__aeabi_fsub+0x2ce>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d043      	beq.n	8000d7e <__aeabi_fsub+0x31a>
 8000cf6:	43c9      	mvns	r1, r1
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d00b      	beq.n	8000d14 <__aeabi_fsub+0x2b0>
 8000cfc:	28ff      	cmp	r0, #255	; 0xff
 8000cfe:	d039      	beq.n	8000d74 <__aeabi_fsub+0x310>
 8000d00:	291b      	cmp	r1, #27
 8000d02:	dc44      	bgt.n	8000d8e <__aeabi_fsub+0x32a>
 8000d04:	001c      	movs	r4, r3
 8000d06:	2720      	movs	r7, #32
 8000d08:	40cc      	lsrs	r4, r1
 8000d0a:	1a79      	subs	r1, r7, r1
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	1e59      	subs	r1, r3, #1
 8000d10:	418b      	sbcs	r3, r1
 8000d12:	4323      	orrs	r3, r4
 8000d14:	199b      	adds	r3, r3, r6
 8000d16:	0004      	movs	r4, r0
 8000d18:	e740      	b.n	8000b9c <__aeabi_fsub+0x138>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d11a      	bne.n	8000d54 <__aeabi_fsub+0x2f0>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d124      	bne.n	8000d6c <__aeabi_fsub+0x308>
 8000d22:	2780      	movs	r7, #128	; 0x80
 8000d24:	2200      	movs	r2, #0
 8000d26:	03ff      	lsls	r7, r7, #15
 8000d28:	e71b      	b.n	8000b62 <__aeabi_fsub+0xfe>
 8000d2a:	0033      	movs	r3, r6
 8000d2c:	0004      	movs	r4, r0
 8000d2e:	000d      	movs	r5, r1
 8000d30:	e6de      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d32:	28ff      	cmp	r0, #255	; 0xff
 8000d34:	d01e      	beq.n	8000d74 <__aeabi_fsub+0x310>
 8000d36:	2480      	movs	r4, #128	; 0x80
 8000d38:	04e4      	lsls	r4, r4, #19
 8000d3a:	4249      	negs	r1, r1
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	e7df      	b.n	8000d00 <__aeabi_fsub+0x29c>
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_fsub+0x2e2>
 8000d44:	e6d4      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d46:	1b9f      	subs	r7, r3, r6
 8000d48:	017a      	lsls	r2, r7, #5
 8000d4a:	d400      	bmi.n	8000d4e <__aeabi_fsub+0x2ea>
 8000d4c:	e737      	b.n	8000bbe <__aeabi_fsub+0x15a>
 8000d4e:	1af3      	subs	r3, r6, r3
 8000d50:	000d      	movs	r5, r1
 8000d52:	e6cd      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d54:	24ff      	movs	r4, #255	; 0xff
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x2f8>
 8000d5a:	e6c9      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	4650      	mov	r0, sl
 8000d60:	03d2      	lsls	r2, r2, #15
 8000d62:	4210      	tst	r0, r2
 8000d64:	d0a4      	beq.n	8000cb0 <__aeabi_fsub+0x24c>
 8000d66:	4660      	mov	r0, ip
 8000d68:	4210      	tst	r0, r2
 8000d6a:	d1a1      	bne.n	8000cb0 <__aeabi_fsub+0x24c>
 8000d6c:	0033      	movs	r3, r6
 8000d6e:	000d      	movs	r5, r1
 8000d70:	24ff      	movs	r4, #255	; 0xff
 8000d72:	e6bd      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d74:	0033      	movs	r3, r6
 8000d76:	24ff      	movs	r4, #255	; 0xff
 8000d78:	e6ba      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e76e      	b.n	8000c5c <__aeabi_fsub+0x1f8>
 8000d7e:	0033      	movs	r3, r6
 8000d80:	0004      	movs	r4, r0
 8000d82:	e6b5      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d84:	2700      	movs	r7, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	e71c      	b.n	8000bc4 <__aeabi_fsub+0x160>
 8000d8a:	0033      	movs	r3, r6
 8000d8c:	e6b0      	b.n	8000af0 <__aeabi_fsub+0x8c>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e7c0      	b.n	8000d14 <__aeabi_fsub+0x2b0>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	7dffffff 	.word	0x7dffffff
 8000d98:	fbffffff 	.word	0xfbffffff

08000d9c <__aeabi_ui2f>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	1e04      	subs	r4, r0, #0
 8000da0:	d027      	beq.n	8000df2 <__aeabi_ui2f+0x56>
 8000da2:	f000 f841 	bl	8000e28 <__clzsi2>
 8000da6:	239e      	movs	r3, #158	; 0x9e
 8000da8:	1a1b      	subs	r3, r3, r0
 8000daa:	2b96      	cmp	r3, #150	; 0x96
 8000dac:	dc0a      	bgt.n	8000dc4 <__aeabi_ui2f+0x28>
 8000dae:	2296      	movs	r2, #150	; 0x96
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	0264      	lsls	r4, r4, #9
 8000db6:	0a64      	lsrs	r4, r4, #9
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	0264      	lsls	r4, r4, #9
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0a60      	lsrs	r0, r4, #9
 8000dc0:	4318      	orrs	r0, r3
 8000dc2:	bd10      	pop	{r4, pc}
 8000dc4:	2b99      	cmp	r3, #153	; 0x99
 8000dc6:	dc17      	bgt.n	8000df8 <__aeabi_ui2f+0x5c>
 8000dc8:	2299      	movs	r2, #153	; 0x99
 8000dca:	1ad2      	subs	r2, r2, r3
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	dd27      	ble.n	8000e20 <__aeabi_ui2f+0x84>
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	0022      	movs	r2, r4
 8000dd4:	4c13      	ldr	r4, [pc, #76]	; (8000e24 <__aeabi_ui2f+0x88>)
 8000dd6:	4014      	ands	r4, r2
 8000dd8:	0751      	lsls	r1, r2, #29
 8000dda:	d004      	beq.n	8000de6 <__aeabi_ui2f+0x4a>
 8000ddc:	210f      	movs	r1, #15
 8000dde:	400a      	ands	r2, r1
 8000de0:	2a04      	cmp	r2, #4
 8000de2:	d000      	beq.n	8000de6 <__aeabi_ui2f+0x4a>
 8000de4:	3404      	adds	r4, #4
 8000de6:	0162      	lsls	r2, r4, #5
 8000de8:	d412      	bmi.n	8000e10 <__aeabi_ui2f+0x74>
 8000dea:	01a4      	lsls	r4, r4, #6
 8000dec:	0a64      	lsrs	r4, r4, #9
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	e7e3      	b.n	8000dba <__aeabi_ui2f+0x1e>
 8000df2:	2300      	movs	r3, #0
 8000df4:	2400      	movs	r4, #0
 8000df6:	e7e0      	b.n	8000dba <__aeabi_ui2f+0x1e>
 8000df8:	22b9      	movs	r2, #185	; 0xb9
 8000dfa:	0021      	movs	r1, r4
 8000dfc:	1ad2      	subs	r2, r2, r3
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	000a      	movs	r2, r1
 8000e02:	1e51      	subs	r1, r2, #1
 8000e04:	418a      	sbcs	r2, r1
 8000e06:	2105      	movs	r1, #5
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	e7db      	b.n	8000dc8 <__aeabi_ui2f+0x2c>
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__aeabi_ui2f+0x88>)
 8000e12:	401c      	ands	r4, r3
 8000e14:	239f      	movs	r3, #159	; 0x9f
 8000e16:	01a4      	lsls	r4, r4, #6
 8000e18:	1a1b      	subs	r3, r3, r0
 8000e1a:	0a64      	lsrs	r4, r4, #9
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	e7cc      	b.n	8000dba <__aeabi_ui2f+0x1e>
 8000e20:	0022      	movs	r2, r4
 8000e22:	e7d7      	b.n	8000dd4 <__aeabi_ui2f+0x38>
 8000e24:	fbffffff 	.word	0xfbffffff

08000e28 <__clzsi2>:
 8000e28:	211c      	movs	r1, #28
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d301      	bcc.n	8000e36 <__clzsi2+0xe>
 8000e32:	0c00      	lsrs	r0, r0, #16
 8000e34:	3910      	subs	r1, #16
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	d301      	bcc.n	8000e40 <__clzsi2+0x18>
 8000e3c:	0a00      	lsrs	r0, r0, #8
 8000e3e:	3908      	subs	r1, #8
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d301      	bcc.n	8000e4a <__clzsi2+0x22>
 8000e46:	0900      	lsrs	r0, r0, #4
 8000e48:	3904      	subs	r1, #4
 8000e4a:	a202      	add	r2, pc, #8	; (adr r2, 8000e54 <__clzsi2+0x2c>)
 8000e4c:	5c10      	ldrb	r0, [r2, r0]
 8000e4e:	1840      	adds	r0, r0, r1
 8000e50:	4770      	bx	lr
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	02020304 	.word	0x02020304
 8000e58:	01010101 	.word	0x01010101
	...

08000e64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_Init+0x24>)
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x24>)
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	2110      	movs	r1, #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f809 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7a:	f002 fa45 	bl	8003308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000e94:	f000 ffac 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	23fa      	movs	r3, #250	; 0xfa
 8000e9c:	0099      	lsls	r1, r3, #2
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f7ff f95a 	bl	8000158 <__udivsi3>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 f8f0 	bl	800108c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f8c3 	bl	8001040 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick++;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_IncTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_IncTick+0x14>)
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000190 	.word	0x20000190

08000edc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <HAL_GetTick+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000190 	.word	0x20000190

08000ef0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <NVIC_EnableIRQ+0x28>)
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	221f      	movs	r2, #31
 8000f06:	400a      	ands	r2, r1
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4091      	lsls	r1, r2
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f30:	d932      	bls.n	8000f98 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f32:	4c2f      	ldr	r4, [pc, #188]	; (8000ff0 <NVIC_SetPriority+0xd4>)
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	0899      	lsrs	r1, r3, #2
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <NVIC_SetPriority+0xd4>)
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	4003      	ands	r3, r0
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3306      	adds	r3, #6
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	18d3      	adds	r3, r2, r3
 8000f58:	3304      	adds	r3, #4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1dfa      	adds	r2, r7, #7
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	0010      	movs	r0, r2
 8000f62:	2203      	movs	r2, #3
 8000f64:	4002      	ands	r2, r0
 8000f66:	00d2      	lsls	r2, r2, #3
 8000f68:	20ff      	movs	r0, #255	; 0xff
 8000f6a:	4090      	lsls	r0, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	43d2      	mvns	r2, r2
 8000f70:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	20ff      	movs	r0, #255	; 0xff
 8000f78:	4018      	ands	r0, r3
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	001d      	movs	r5, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	402b      	ands	r3, r5
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4098      	lsls	r0, r3
 8000f88:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	1d8b      	adds	r3, r1, #6
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	18e3      	adds	r3, r4, r3
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f96:	e027      	b.n	8000fe8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	4c16      	ldr	r4, [pc, #88]	; (8000ff4 <NVIC_SetPriority+0xd8>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <NVIC_SetPriority+0xd8>)
 8000fa4:	1dfa      	adds	r2, r7, #7
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	b252      	sxtb	r2, r2
 8000faa:	0892      	lsrs	r2, r2, #2
 8000fac:	32c0      	adds	r2, #192	; 0xc0
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	5852      	ldr	r2, [r2, r1]
 8000fb2:	1df9      	adds	r1, r7, #7
 8000fb4:	7809      	ldrb	r1, [r1, #0]
 8000fb6:	0008      	movs	r0, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4001      	ands	r1, r0
 8000fbc:	00c9      	lsls	r1, r1, #3
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	4088      	lsls	r0, r1
 8000fc2:	0001      	movs	r1, r0
 8000fc4:	43c9      	mvns	r1, r1
 8000fc6:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	0192      	lsls	r2, r2, #6
 8000fcc:	20ff      	movs	r0, #255	; 0xff
 8000fce:	4010      	ands	r0, r2
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	0015      	movs	r5, r2
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	402a      	ands	r2, r5
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	4090      	lsls	r0, r2
 8000fde:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	33c0      	adds	r3, #192	; 0xc0
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	511a      	str	r2, [r3, r4]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <SysTick_Config+0x40>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d901      	bls.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e010      	b.n	8001030 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <SysTick_Config+0x44>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	3a01      	subs	r2, #1
 8001014:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	2301      	movs	r3, #1
 8001018:	425b      	negs	r3, r3
 800101a:	2103      	movs	r1, #3
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff7d 	bl	8000f1c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <SysTick_Config+0x44>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x44>)
 800102a:	2207      	movs	r2, #7
 800102c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102e:	2300      	movs	r3, #0
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	00ffffff 	.word	0x00ffffff
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	230f      	movs	r3, #15
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	1c02      	adds	r2, r0, #0
 8001050:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff ff5c 	bl	8000f1c <NVIC_SetPriority>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b004      	add	sp, #16
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b25b      	sxtb	r3, r3
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ff36 	bl	8000ef0 <NVIC_EnableIRQ>
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ffae 	bl	8000ff8 <SysTick_Config>
 800109c:	0003      	movs	r3, r0
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d106      	bne.n	80010c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	2104      	movs	r1, #4
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010c2:	e005      	b.n	80010d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	2104      	movs	r1, #4
 80010cc:	438a      	bics	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010e0:	f000 f803 	bl	80010ea <HAL_SYSTICK_Callback>
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800110a:	e155      	b.n	80013b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <HAL_GPIO_Init+0x30>
 8001122:	e146      	b.n	80013b2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b12      	cmp	r3, #18
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	58d3      	ldr	r3, [r2, r3]
 8001140:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2207      	movs	r2, #7
 8001146:	4013      	ands	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2107      	movs	r1, #7
 8001160:	400b      	ands	r3, r1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	6939      	ldr	r1, [r7, #16]
 800117a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d00b      	beq.n	80011d0 <HAL_GPIO_Init+0xdc>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c4:	2b11      	cmp	r3, #17
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b12      	cmp	r3, #18
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	2201      	movs	r2, #1
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	055b      	lsls	r3, r3, #21
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_GPIO_Init+0x17c>
 800126e:	e0a0      	b.n	80013b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001272:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001274:	6992      	ldr	r2, [r2, #24]
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	589b      	ldr	r3, [r3, r2]
 8001294:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2203      	movs	r2, #3
 800129a:	4013      	ands	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	2390      	movs	r3, #144	; 0x90
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x1f6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x2e4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x1f2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_GPIO_Init+0x2e8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x2ec>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1ea>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1e6>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012da:	2305      	movs	r3, #5
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012ea:	2300      	movs	r3, #0
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	2103      	movs	r1, #3
 80012f0:	400a      	ands	r2, r1
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2e0>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	039b      	lsls	r3, r3, #14
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	40da      	lsrs	r2, r3
 80013c0:	1e13      	subs	r3, r2, #0
 80013c2:	d000      	beq.n	80013c6 <HAL_GPIO_Init+0x2d2>
 80013c4:	e6a2      	b.n	800110c <HAL_GPIO_Init+0x18>
  } 
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b006      	add	sp, #24
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001000 	.word	0x48001000
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	0008      	movs	r0, r1
 80013f6:	0011      	movs	r1, r2
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	1c02      	adds	r2, r0, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	1c7b      	adds	r3, r7, #1
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001404:	1c7b      	adds	r3, r7, #1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	1cbb      	adds	r3, r7, #2
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d100      	bne.n	8001440 <HAL_RCC_OscConfig+0x18>
 800143e:	e08d      	b.n	800155c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001440:	4bc5      	ldr	r3, [pc, #788]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00e      	beq.n	800146a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800144c:	4bc2      	ldr	r3, [pc, #776]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b08      	cmp	r3, #8
 8001456:	d116      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
 8001458:	4bbf      	ldr	r3, [pc, #764]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	401a      	ands	r2, r3
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	429a      	cmp	r2, r3
 8001468:	d10d      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4bbb      	ldr	r3, [pc, #748]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	d100      	bne.n	8001478 <HAL_RCC_OscConfig+0x50>
 8001476:	e070      	b.n	800155a <HAL_RCC_OscConfig+0x132>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d000      	beq.n	8001482 <HAL_RCC_OscConfig+0x5a>
 8001480:	e06b      	b.n	800155a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e327      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_RCC_OscConfig+0x76>
 800148e:	4bb2      	ldr	r3, [pc, #712]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001490:	4ab1      	ldr	r2, [pc, #708]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0249      	lsls	r1, r1, #9
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e02f      	b.n	80014fe <HAL_RCC_OscConfig+0xd6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4bac      	ldr	r3, [pc, #688]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014a8:	4aab      	ldr	r2, [pc, #684]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	49ab      	ldr	r1, [pc, #684]	; (800175c <HAL_RCC_OscConfig+0x334>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	4ba9      	ldr	r3, [pc, #676]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014b4:	4aa8      	ldr	r2, [pc, #672]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	49a9      	ldr	r1, [pc, #676]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e01e      	b.n	80014fe <HAL_RCC_OscConfig+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0xbe>
 80014c8:	4ba3      	ldr	r3, [pc, #652]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014ca:	4aa3      	ldr	r2, [pc, #652]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	02c9      	lsls	r1, r1, #11
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014d8:	4a9f      	ldr	r2, [pc, #636]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0249      	lsls	r1, r1, #9
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0xd6>
 80014e6:	4b9c      	ldr	r3, [pc, #624]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014e8:	4a9b      	ldr	r2, [pc, #620]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	499b      	ldr	r1, [pc, #620]	; (800175c <HAL_RCC_OscConfig+0x334>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	4999      	ldr	r1, [pc, #612]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d014      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fce9 	bl	8000edc <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fce4 	bl	8000edc <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e2d9      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b8d      	ldr	r3, [pc, #564]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e015      	b.n	800155c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcd4 	bl	8000edc <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153a:	f7ff fccf 	bl	8000edc <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	; 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e2c4      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154c:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x112>
 8001558:	e000      	b.n	800155c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x140>
 8001566:	e06c      	b.n	8001642 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	d00e      	beq.n	8001590 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001572:	4b79      	ldr	r3, [pc, #484]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	220c      	movs	r2, #12
 8001578:	4013      	ands	r3, r2
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11f      	bne.n	80015be <HAL_RCC_OscConfig+0x196>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	23c0      	movs	r3, #192	; 0xc0
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	401a      	ands	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	429a      	cmp	r2, r3
 800158e:	d116      	bne.n	80015be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001590:	4b71      	ldr	r3, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e297      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015a8:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	21f8      	movs	r1, #248	; 0xf8
 80015ae:	438b      	bics	r3, r1
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015bc:	e041      	b.n	8001642 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d024      	beq.n	8001610 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c6:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015c8:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fc83 	bl	8000edc <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc7e 	bl	8000edc <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e273      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f1      	beq.n	80015dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4a57      	ldr	r2, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015fa:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	21f8      	movs	r1, #248	; 0xf8
 8001600:	438b      	bics	r3, r1
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	430b      	orrs	r3, r1
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e018      	b.n	8001642 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001612:	4a51      	ldr	r2, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc5e 	bl	8000edc <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fc59 	bl	8000edc <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e24e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2208      	movs	r2, #8
 8001648:	4013      	ands	r3, r2
 800164a:	d036      	beq.n	80016ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d019      	beq.n	8001688 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001656:	4a40      	ldr	r2, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165a:	2101      	movs	r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc3c 	bl	8000edc <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fc37 	bl	8000edc <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e22c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d0f1      	beq.n	800166a <HAL_RCC_OscConfig+0x242>
 8001686:	e018      	b.n	80016ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800168c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168e:	2101      	movs	r1, #1
 8001690:	438a      	bics	r2, r1
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fc22 	bl	8000edc <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fc1d 	bl	8000edc <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e212      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f1      	bne.n	800169e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2204      	movs	r2, #4
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x29e>
 80016c4:	e0b6      	b.n	8001834 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	055b      	lsls	r3, r3, #21
 80016d6:	4013      	ands	r3, r2
 80016d8:	d111      	bne.n	80016fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016de:	69d2      	ldr	r2, [r2, #28]
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0549      	lsls	r1, r1, #21
 80016e4:	430a      	orrs	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	055b      	lsls	r3, r3, #21
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d11a      	bne.n	8001740 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 800170c:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001718:	f7ff fbe0 	bl	8000edc <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fbdb 	bl	8000edc <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1d0      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10f      	bne.n	8001768 <HAL_RCC_OscConfig+0x340>
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800174a:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800174c:	6a12      	ldr	r2, [r2, #32]
 800174e:	2101      	movs	r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	621a      	str	r2, [r3, #32]
 8001754:	e036      	b.n	80017c4 <HAL_RCC_OscConfig+0x39c>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	fffeffff 	.word	0xfffeffff
 8001760:	fffbffff 	.word	0xfffbffff
 8001764:	40007000 	.word	0x40007000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x362>
 8001770:	4bc9      	ldr	r3, [pc, #804]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001772:	4ac9      	ldr	r2, [pc, #804]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001774:	6a12      	ldr	r2, [r2, #32]
 8001776:	2101      	movs	r1, #1
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	4bc6      	ldr	r3, [pc, #792]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800177e:	4ac6      	ldr	r2, [pc, #792]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001780:	6a12      	ldr	r2, [r2, #32]
 8001782:	2104      	movs	r1, #4
 8001784:	438a      	bics	r2, r1
 8001786:	621a      	str	r2, [r3, #32]
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x39c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x384>
 8001792:	4bc1      	ldr	r3, [pc, #772]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001794:	4ac0      	ldr	r2, [pc, #768]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001796:	6a12      	ldr	r2, [r2, #32]
 8001798:	2104      	movs	r1, #4
 800179a:	430a      	orrs	r2, r1
 800179c:	621a      	str	r2, [r3, #32]
 800179e:	4bbe      	ldr	r3, [pc, #760]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017a0:	4abd      	ldr	r2, [pc, #756]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017a2:	6a12      	ldr	r2, [r2, #32]
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	621a      	str	r2, [r3, #32]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x39c>
 80017ac:	4bba      	ldr	r3, [pc, #744]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017ae:	4aba      	ldr	r2, [pc, #744]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017b0:	6a12      	ldr	r2, [r2, #32]
 80017b2:	2101      	movs	r1, #1
 80017b4:	438a      	bics	r2, r1
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	4bb7      	ldr	r3, [pc, #732]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017ba:	4ab7      	ldr	r2, [pc, #732]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017bc:	6a12      	ldr	r2, [r2, #32]
 80017be:	2104      	movs	r1, #4
 80017c0:	438a      	bics	r2, r1
 80017c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb86 	bl	8000edc <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	e009      	b.n	80017ea <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb81 	bl	8000edc <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	4aae      	ldr	r2, [pc, #696]	; (8001a9c <HAL_RCC_OscConfig+0x674>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e175      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3ae>
 80017f4:	e013      	b.n	800181e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb71 	bl	8000edc <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e009      	b.n	8001814 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fb6c 	bl	8000edc <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4aa4      	ldr	r2, [pc, #656]	; (8001a9c <HAL_RCC_OscConfig+0x674>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e160      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	4ba0      	ldr	r3, [pc, #640]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800181e:	2317      	movs	r3, #23
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b9b      	ldr	r3, [pc, #620]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800182a:	4a9b      	ldr	r2, [pc, #620]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800182c:	69d2      	ldr	r2, [r2, #28]
 800182e:	499c      	ldr	r1, [pc, #624]	; (8001aa0 <HAL_RCC_OscConfig+0x678>)
 8001830:	400a      	ands	r2, r1
 8001832:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2210      	movs	r2, #16
 800183a:	4013      	ands	r3, r2
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d12a      	bne.n	800189c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001846:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001848:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800184a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800184c:	2104      	movs	r1, #4
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001852:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001854:	4a90      	ldr	r2, [pc, #576]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb3d 	bl	8000edc <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001868:	f7ff fb38 	bl	8000edc <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e12d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800187a:	4b87      	ldr	r3, [pc, #540]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d0f1      	beq.n	8001868 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001884:	4a84      	ldr	r2, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	21f8      	movs	r1, #248	; 0xf8
 800188c:	438b      	bics	r3, r1
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	430b      	orrs	r3, r1
 8001898:	6353      	str	r3, [r2, #52]	; 0x34
 800189a:	e034      	b.n	8001906 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	3305      	adds	r3, #5
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018a4:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018aa:	2104      	movs	r1, #4
 80018ac:	438a      	bics	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b0:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018b2:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	21f8      	movs	r1, #248	; 0xf8
 80018b8:	438b      	bics	r3, r1
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6353      	str	r3, [r2, #52]	; 0x34
 80018c6:	e01e      	b.n	8001906 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018ca:	4a73      	ldr	r2, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018ce:	2104      	movs	r1, #4
 80018d0:	430a      	orrs	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018d6:	4a70      	ldr	r2, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018da:	2101      	movs	r1, #1
 80018dc:	438a      	bics	r2, r1
 80018de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fafc 	bl	8000edc <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ea:	f7ff faf7 	bl	8000edc <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0ec      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1f1      	bne.n	80018ea <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	4013      	ands	r3, r2
 800190e:	d05c      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001910:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d00e      	beq.n	800193a <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800191c:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	220c      	movs	r2, #12
 8001922:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001924:	2b08      	cmp	r3, #8
 8001926:	d114      	bne.n	8001952 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	401a      	ands	r2, r3
 8001932:	23c0      	movs	r3, #192	; 0xc0
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	429a      	cmp	r2, r3
 8001938:	d10b      	bne.n	8001952 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4013      	ands	r3, r2
 8001944:	d040      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d03c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0c1      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01b      	beq.n	8001992 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800195a:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 800195e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0249      	lsls	r1, r1, #9
 8001964:	430a      	orrs	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fab8 	bl	8000edc <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001972:	f7ff fab3 	bl	8000edc <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0a8      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	025b      	lsls	r3, r3, #9
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x54a>
 8001990:	e01b      	b.n	80019ca <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001994:	4a40      	ldr	r2, [pc, #256]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001998:	4942      	ldr	r1, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800199a:	400a      	ands	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fa9d 	bl	8000edc <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a8:	f7ff fa98 	bl	8000edc <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e08d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80019bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x580>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5ac>
 80019d2:	e07f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	220c      	movs	r2, #12
 80019da:	4013      	ands	r3, r2
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d100      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5ba>
 80019e0:	e076      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d14b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80019ec:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	492d      	ldr	r1, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fa71 	bl	8000edc <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff fa6c 	bl	8000edc <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e061      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	049b      	lsls	r3, r3, #18
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	210f      	movs	r1, #15
 8001a26:	438b      	bics	r3, r1
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	491c      	ldr	r1, [pc, #112]	; (8001aac <HAL_RCC_OscConfig+0x684>)
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	4303      	orrs	r3, r0
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0449      	lsls	r1, r1, #17
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fa40 	bl	8000edc <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff fa3b 	bl	8000edc <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e030      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	049b      	lsls	r3, r3, #18
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x63a>
 8001a80:	e028      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RCC_OscConfig+0x670>)
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fa25 	bl	8000edc <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x69a>
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	efffffff 	.word	0xefffffff
 8001aa4:	fffeffff 	.word	0xfffeffff
 8001aa8:	feffffff 	.word	0xfeffffff
 8001aac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fa14 	bl	8000edc <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCC_OscConfig+0x6b8>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	049b      	lsls	r3, r3, #18
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x688>
 8001ace:	e001      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b006      	add	sp, #24
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	401a      	ands	r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d211      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b00:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	438a      	bics	r2, r1
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	401a      	ands	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0d7      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2e:	4a6c      	ldr	r2, [pc, #432]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b30:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	21f0      	movs	r1, #240	; 0xf0
 8001b36:	438b      	bics	r3, r1
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x6a>
 8001b4c:	e089      	b.n	8001c62 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d120      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0b6      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	049b      	lsls	r3, r3, #18
 8001b76:	4013      	ands	r3, r2
 8001b78:	d114      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0aa      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b86:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d108      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e09e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e097      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2103      	movs	r1, #3
 8001bac:	438b      	bics	r3, r1
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f990 	bl	8000edc <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff f987 	bl	8000edc <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a43      	ldr	r2, [pc, #268]	; (8001ce4 <HAL_RCC_ClockConfig+0x200>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e07a      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	220c      	movs	r2, #12
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_ClockConfig+0xe6>
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d111      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f971 	bl	8000edc <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a38      	ldr	r2, [pc, #224]	; (8001ce4 <HAL_RCC_ClockConfig+0x200>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e064      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x112>
 8001c16:	e024      	b.n	8001c62 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d11b      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c22:	f7ff f95b 	bl	8000edc <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <HAL_RCC_ClockConfig+0x200>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e04e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x13e>
 8001c42:	e00e      	b.n	8001c62 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f94a 	bl	8000edc <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <HAL_RCC_ClockConfig+0x200>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e03d      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	401a      	ands	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d911      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	438a      	bics	r2, r1
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_RCC_ClockConfig+0x1f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	401a      	ands	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e01f      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d008      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <HAL_RCC_ClockConfig+0x204>)
 8001ca6:	4019      	ands	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cb0:	f000 f820 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x208>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	000a      	movs	r2, r1
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x20c>)
 8001cca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff f8dd 	bl	8000e8c <HAL_InitTick>
  
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	00001388 	.word	0x00001388
 8001ce8:	fffff8ff 	.word	0xfffff8ff
 8001cec:	08005ad8 	.word	0x08005ad8
 8001cf0:	20000100 	.word	0x20000100

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08f      	sub	sp, #60	; 0x3c
 8001cf8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cfa:	2314      	movs	r3, #20
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	4a37      	ldr	r2, [pc, #220]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001d00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d02:	c313      	stmia	r3!, {r0, r1, r4}
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	220c      	movs	r2, #12
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d006      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x52>
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d043      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xd0>
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d144      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	e044      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2214      	movs	r2, #20
 8001d50:	18ba      	adds	r2, r7, r2
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	1d3a      	adds	r2, r7, #4
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	025b      	lsls	r3, r3, #9
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d78:	f7fe f9ee 	bl	8000158 <__udivsi3>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	001a      	movs	r2, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	4353      	muls	r3, r2
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
 8001d86:	e01a      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8a:	23c0      	movs	r3, #192	; 0xc0
 8001d8c:	025b      	lsls	r3, r3, #9
 8001d8e:	401a      	ands	r2, r3
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9c:	f7fe f9dc 	bl	8000158 <__udivsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	001a      	movs	r2, r3
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	4353      	muls	r3, r2
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001db0:	f7fe f9d2 	bl	8000158 <__udivsi3>
 8001db4:	0003      	movs	r3, r0
 8001db6:	001a      	movs	r2, r3
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	4353      	muls	r3, r2
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b00f      	add	sp, #60	; 0x3c
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	080059b8 	.word	0x080059b8
 8001de0:	080059c8 	.word	0x080059c8
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	02dc6c00 	.word	0x02dc6c00

08001df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	20000100 	.word	0x20000100

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e08:	f7ff fff2 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	2207      	movs	r2, #7
 8001e16:	4013      	ands	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	000b      	movs	r3, r1
}    
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08005ae8 	.word	0x08005ae8

08001e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d100      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e4c:	e08e      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2317      	movs	r3, #23
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	055b      	lsls	r3, r3, #21
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d111      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e64:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e66:	69d2      	ldr	r2, [r2, #28]
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0549      	lsls	r1, r1, #21
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e94:	4a5f      	ldr	r2, [pc, #380]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0049      	lsls	r1, r1, #1
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f81c 	bl	8000edc <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f817 	bl	8000edc <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0a4      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ec8:	4b51      	ldr	r3, [pc, #324]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d034      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d02c      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef6:	4a46      	ldr	r2, [pc, #280]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef8:	6a12      	ldr	r2, [r2, #32]
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0249      	lsls	r1, r1, #9
 8001efe:	430a      	orrs	r2, r1
 8001f00:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f04:	4a42      	ldr	r2, [pc, #264]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f06:	6a12      	ldr	r2, [r2, #32]
 8001f08:	4944      	ldr	r1, [pc, #272]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ffde 	bl	8000edc <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e009      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ffd9 	bl	8000edc <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e065      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4933      	ldr	r1, [pc, #204]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f4c:	4019      	ands	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f56:	2317      	movs	r3, #23
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f64:	69d2      	ldr	r2, [r2, #28]
 8001f66:	492f      	ldr	r1, [pc, #188]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f76:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	438b      	bics	r3, r1
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4923      	ldr	r1, [pc, #140]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f9c:	4019      	ands	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	4013      	ands	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	438b      	bics	r3, r1
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	438b      	bics	r3, r1
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	438b      	bics	r3, r1
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	430b      	orrs	r3, r1
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b006      	add	sp, #24
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	fffffcff 	.word	0xfffffcff
 800201c:	fffeffff 	.word	0xfffeffff
 8002020:	00001388 	.word	0x00001388
 8002024:	efffffff 	.word	0xefffffff
 8002028:	fffcffff 	.word	0xfffcffff

0800202c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e01e      	b.n	800207c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223d      	movs	r2, #61	; 0x3d
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223c      	movs	r2, #60	; 0x3c
 800204e:	2100      	movs	r1, #0
 8002050:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f001 fa2d 	bl	80034b4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223d      	movs	r2, #61	; 0x3d
 800205e:	2102      	movs	r1, #2
 8002060:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	0019      	movs	r1, r3
 800206c:	0010      	movs	r0, r2
 800206e:	f000 fa39 	bl	80024e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223d      	movs	r2, #61	; 0x3d
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	2101      	movs	r1, #1
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	2101      	movs	r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d124      	bne.n	8002116 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d11d      	bne.n	8002116 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2203      	movs	r2, #3
 80020e0:	4252      	negs	r2, r2
 80020e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2203      	movs	r2, #3
 80020f2:	4013      	ands	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f9db 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 80020fe:	e007      	b.n	8002110 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f9ce 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f9da 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	2b04      	cmp	r3, #4
 8002122:	d125      	bne.n	8002170 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	2b04      	cmp	r3, #4
 8002130:	d11e      	bne.n	8002170 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2205      	movs	r2, #5
 8002138:	4252      	negs	r2, r2
 800213a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f9ae 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 8002158:	e007      	b.n	800216a <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f9a1 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f9ad 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2208      	movs	r2, #8
 8002178:	4013      	ands	r3, r2
 800217a:	2b08      	cmp	r3, #8
 800217c:	d124      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2208      	movs	r2, #8
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d11d      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2209      	movs	r2, #9
 8002192:	4252      	negs	r2, r2
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2203      	movs	r2, #3
 80021a4:	4013      	ands	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f982 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e007      	b.n	80021c2 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f975 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f981 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2210      	movs	r2, #16
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d125      	bne.n	8002222 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2210      	movs	r2, #16
 80021de:	4013      	ands	r3, r2
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d11e      	bne.n	8002222 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2211      	movs	r2, #17
 80021ea:	4252      	negs	r2, r2
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2208      	movs	r2, #8
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f955 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 800220a:	e007      	b.n	800221c <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f948 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f954 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10f      	bne.n	8002250 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2202      	movs	r2, #2
 8002244:	4252      	negs	r2, r2
 8002246:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f001 f82c 	bl	80032a8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	4013      	ands	r3, r2
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d10f      	bne.n	800227e <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	4013      	ands	r3, r2
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d108      	bne.n	800227e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2281      	movs	r2, #129	; 0x81
 8002272:	4252      	negs	r2, r2
 8002274:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 faaa 	bl	80027d2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2240      	movs	r2, #64	; 0x40
 8002286:	4013      	ands	r3, r2
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d10f      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	4013      	ands	r3, r2
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d108      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2241      	movs	r2, #65	; 0x41
 80022a0:	4252      	negs	r2, r2
 80022a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f914 	bl	80024d4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2220      	movs	r2, #32
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d10f      	bne.n	80022da <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d108      	bne.n	80022da <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	4252      	negs	r2, r2
 80022d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fa74 	bl	80027c2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223c      	movs	r2, #60	; 0x3c
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIM_ConfigClockSource+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0ca      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x1b2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	223c      	movs	r2, #60	; 0x3c
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2102      	movs	r1, #2
 800230e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2277      	movs	r2, #119	; 0x77
 800231c:	4393      	bics	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a5f      	ldr	r2, [pc, #380]	; (80024a0 <HAL_TIM_ConfigClockSource+0x1bc>)
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d100      	bne.n	800233a <HAL_TIM_ConfigClockSource+0x56>
 8002338:	e078      	b.n	800242c <HAL_TIM_ConfigClockSource+0x148>
 800233a:	d80e      	bhi.n	800235a <HAL_TIM_ConfigClockSource+0x76>
 800233c:	2b10      	cmp	r3, #16
 800233e:	d100      	bne.n	8002342 <HAL_TIM_ConfigClockSource+0x5e>
 8002340:	e08b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x176>
 8002342:	d803      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x68>
 8002344:	2b00      	cmp	r3, #0
 8002346:	d100      	bne.n	800234a <HAL_TIM_ConfigClockSource+0x66>
 8002348:	e080      	b.n	800244c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800234a:	e09b      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800234c:	2b20      	cmp	r3, #32
 800234e:	d100      	bne.n	8002352 <HAL_TIM_ConfigClockSource+0x6e>
 8002350:	e08a      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>
 8002352:	2b30      	cmp	r3, #48	; 0x30
 8002354:	d100      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x74>
 8002356:	e08e      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x192>
    break;
 8002358:	e094      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800235a:	2b70      	cmp	r3, #112	; 0x70
 800235c:	d017      	beq.n	800238e <HAL_TIM_ConfigClockSource+0xaa>
 800235e:	d804      	bhi.n	800236a <HAL_TIM_ConfigClockSource+0x86>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d043      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x108>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d051      	beq.n	800240c <HAL_TIM_ConfigClockSource+0x128>
    break;
 8002368:	e08c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	0152      	lsls	r2, r2, #5
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_ConfigClockSource+0x98>
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	0192      	lsls	r2, r2, #6
 8002376:	4293      	cmp	r3, r2
 8002378:	d024      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 800237a:	e083      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	2107      	movs	r1, #7
 8002388:	438a      	bics	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
    break;
 800238c:	e07a      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f000 f9ab 	bl	80026f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2277      	movs	r2, #119	; 0x77
 80023ae:	4393      	bics	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2277      	movs	r2, #119	; 0x77
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	609a      	str	r2, [r3, #8]
    break;
 80023c2:	e05f      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f000 f990 	bl	80026f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	01c9      	lsls	r1, r1, #7
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
    break;
 80023ea:	e04b      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	001a      	movs	r2, r3
 80023fa:	f000 f8f5 	bl	80025e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2150      	movs	r1, #80	; 0x50
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f957 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 800240a:	e03b      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	001a      	movs	r2, r3
 800241a:	f000 f917 	bl	800264c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2160      	movs	r1, #96	; 0x60
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f947 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 800242a:	e02b      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	001a      	movs	r2, r3
 800243a:	f000 f8d5 	bl	80025e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f937 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 800244a:	e01b      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2100      	movs	r1, #0
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f930 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 8002458:	e014      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2110      	movs	r1, #16
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f929 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 8002466:	e00d      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2120      	movs	r1, #32
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f922 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 8002474:	e006      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2130      	movs	r1, #48	; 0x30
 800247c:	0018      	movs	r0, r3
 800247e:	f000 f91b 	bl	80026b8 <TIM_ITRx_SetConfig>
    break;
 8002482:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	223d      	movs	r2, #61	; 0x3d
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	223c      	movs	r2, #60	; 0x3c
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b004      	add	sp, #16
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	ffff00ff 	.word	0xffff00ff

080024a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <TIM_Base_SetConfig+0xe8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d008      	beq.n	8002512 <TIM_Base_SetConfig+0x2e>
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	429a      	cmp	r2, r3
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0x2e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <TIM_Base_SetConfig+0xec>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2270      	movs	r2, #112	; 0x70
 8002516:	4393      	bics	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <TIM_Base_SetConfig+0xe8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	05db      	lsls	r3, r3, #23
 8002532:	429a      	cmp	r2, r3
 8002534:	d013      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <TIM_Base_SetConfig+0xec>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00f      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <TIM_Base_SetConfig+0xf0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00b      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <TIM_Base_SetConfig+0xf4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <TIM_Base_SetConfig+0xf8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_Base_SetConfig+0x7a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <TIM_Base_SetConfig+0xfc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <TIM_Base_SetConfig+0x100>)
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	4393      	bics	r3, r2
 8002576:	001a      	movs	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <TIM_Base_SetConfig+0xe8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00b      	beq.n	80025b6 <TIM_Base_SetConfig+0xd2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <TIM_Base_SetConfig+0xf4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <TIM_Base_SetConfig+0xd2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <TIM_Base_SetConfig+0xf8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_Base_SetConfig+0xd2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <TIM_Base_SetConfig+0xfc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d103      	bne.n	80025be <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	615a      	str	r2, [r3, #20]
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40002000 	.word	0x40002000
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800
 80025e4:	fffffcff 	.word	0xfffffcff

080025e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2201      	movs	r2, #1
 8002608:	4393      	bics	r3, r2
 800260a:	001a      	movs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	22f0      	movs	r2, #240	; 0xf0
 800261a:	4393      	bics	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	220a      	movs	r2, #10
 800262c:	4393      	bics	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	621a      	str	r2, [r3, #32]
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b006      	add	sp, #24
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	2210      	movs	r2, #16
 8002666:	4393      	bics	r3, r2
 8002668:	001a      	movs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <TIM_TI2_ConfigInputStage+0x68>)
 800267e:	4013      	ands	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	031b      	lsls	r3, r3, #12
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	22a0      	movs	r2, #160	; 0xa0
 8002690:	4393      	bics	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	ffff0fff 	.word	0xffff0fff

080026b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	000a      	movs	r2, r1
 80026c2:	1cbb      	adds	r3, r7, #2
 80026c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2270      	movs	r2, #112	; 0x70
 80026d4:	4393      	bics	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026d8:	1cbb      	adds	r3, r7, #2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2207      	movs	r2, #7
 80026de:	4313      	orrs	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	001a      	movs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <TIM_ETR_SetConfig+0x40>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	431a      	orrs	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffff00ff 	.word	0xffff00ff

0800273c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223c      	movs	r2, #60	; 0x3c
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e032      	b.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223c      	movs	r2, #60	; 0x3c
 8002758:	2101      	movs	r1, #1
 800275a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	223d      	movs	r2, #61	; 0x3d
 8002760:	2102      	movs	r1, #2
 8002762:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	6852      	ldr	r2, [r2, #4]
 800276e:	2170      	movs	r1, #112	; 0x70
 8002770:	438a      	bics	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	6851      	ldr	r1, [r2, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	6892      	ldr	r2, [r2, #8]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	438a      	bics	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	6891      	ldr	r1, [r2, #8]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	6852      	ldr	r2, [r2, #4]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223d      	movs	r2, #61	; 0x3d
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	223c      	movs	r2, #60	; 0x3c
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b002      	add	sp, #8
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e047      	b.n	8002886 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2269      	movs	r2, #105	; 0x69
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2268      	movs	r2, #104	; 0x68
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 feab 	bl	8003568 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2269      	movs	r2, #105	; 0x69
 8002816:	2124      	movs	r1, #36	; 0x24
 8002818:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f000 f8f1 	bl	8002a14 <UART_SetConfig>
 8002832:	0003      	movs	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e024      	b.n	8002886 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 faa0 	bl	8002d8c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	6852      	ldr	r2, [r2, #4]
 8002856:	490e      	ldr	r1, [pc, #56]	; (8002890 <HAL_UART_Init+0xac>)
 8002858:	400a      	ands	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	212a      	movs	r1, #42	; 0x2a
 8002868:	438a      	bics	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 fb30 	bl	8002ee4 <UART_CheckIdleState>
 8002884:	0003      	movs	r3, r0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	ffffb7ff 	.word	0xffffb7ff

08002894 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	1dbb      	adds	r3, r7, #6
 80028a2:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2269      	movs	r2, #105	; 0x69
 80028ac:	5c9b      	ldrb	r3, [r3, r2]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d000      	beq.n	80028b6 <HAL_UART_Transmit+0x22>
 80028b4:	e08c      	b.n	80029d0 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_UART_Transmit+0x30>
 80028bc:	1dbb      	adds	r3, r7, #6
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e084      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	015b      	lsls	r3, r3, #5
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d109      	bne.n	80028e8 <HAL_UART_Transmit+0x54>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e074      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2268      	movs	r2, #104	; 0x68
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Transmit+0x62>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e06d      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2268      	movs	r2, #104	; 0x68
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2269      	movs	r2, #105	; 0x69
 8002908:	2121      	movs	r1, #33	; 0x21
 800290a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800290c:	f7fe fae6 	bl	8000edc <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1dba      	adds	r2, r7, #6
 8002918:	2150      	movs	r1, #80	; 0x50
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1dba      	adds	r2, r7, #6
 8002922:	2152      	movs	r1, #82	; 0x52
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8002928:	e035      	b.n	8002996 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2252      	movs	r2, #82	; 0x52
 800292e:	5a9b      	ldrh	r3, [r3, r2]
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b299      	uxth	r1, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2252      	movs	r2, #82	; 0x52
 800293a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	0013      	movs	r3, r2
 8002946:	2200      	movs	r2, #0
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	f000 fb23 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d001      	beq.n	8002956 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e03d      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	015b      	lsls	r3, r3, #5
 800295e:	429a      	cmp	r2, r3
 8002960:	d111      	bne.n	8002986 <HAL_UART_Transmit+0xf2>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	05d2      	lsls	r2, r2, #23
 8002978:	0dd2      	lsrs	r2, r2, #23
 800297a:	b292      	uxth	r2, r2
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3302      	adds	r3, #2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	e007      	b.n	8002996 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1c59      	adds	r1, r3, #1
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2252      	movs	r2, #82	; 0x52
 800299a:	5a9b      	ldrh	r3, [r3, r2]
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1c3      	bne.n	800292a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	0013      	movs	r3, r2
 80029ac:	2200      	movs	r2, #0
 80029ae:	2140      	movs	r1, #64	; 0x40
 80029b0:	f000 faf0 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 80029b4:	1e03      	subs	r3, r0, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e00a      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2269      	movs	r2, #105	; 0x69
 80029c0:	2120      	movs	r1, #32
 80029c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2268      	movs	r2, #104	; 0x68
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b006      	add	sp, #24
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2269      	movs	r2, #105	; 0x69
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	226a      	movs	r2, #106	; 0x6a
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2db      	uxtb	r3, r3
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a20:	2317      	movs	r3, #23
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2210      	movs	r2, #16
 8002a26:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002a30:	2314      	movs	r3, #20
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	2313      	movs	r3, #19
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	49c0      	ldr	r1, [pc, #768]	; (8002d64 <UART_SetConfig+0x350>)
 8002a64:	4011      	ands	r1, r2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	49bc      	ldr	r1, [pc, #752]	; (8002d68 <UART_SetConfig+0x354>)
 8002a78:	4011      	ands	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	49b4      	ldr	r1, [pc, #720]	; (8002d6c <UART_SetConfig+0x358>)
 8002a9a:	4011      	ands	r1, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4ab2      	ldr	r2, [pc, #712]	; (8002d70 <UART_SetConfig+0x35c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d125      	bne.n	8002af8 <UART_SetConfig+0xe4>
 8002aac:	4bb1      	ldr	r3, [pc, #708]	; (8002d74 <UART_SetConfig+0x360>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d00f      	beq.n	8002ad8 <UART_SetConfig+0xc4>
 8002ab8:	d304      	bcc.n	8002ac4 <UART_SetConfig+0xb0>
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d011      	beq.n	8002ae2 <UART_SetConfig+0xce>
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d005      	beq.n	8002ace <UART_SetConfig+0xba>
 8002ac2:	e013      	b.n	8002aec <UART_SetConfig+0xd8>
 8002ac4:	2317      	movs	r3, #23
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e064      	b.n	8002b98 <UART_SetConfig+0x184>
 8002ace:	2317      	movs	r3, #23
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e05f      	b.n	8002b98 <UART_SetConfig+0x184>
 8002ad8:	2317      	movs	r3, #23
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	2204      	movs	r2, #4
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e05a      	b.n	8002b98 <UART_SetConfig+0x184>
 8002ae2:	2317      	movs	r3, #23
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e055      	b.n	8002b98 <UART_SetConfig+0x184>
 8002aec:	2317      	movs	r3, #23
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2210      	movs	r2, #16
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	e04f      	b.n	8002b98 <UART_SetConfig+0x184>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a9e      	ldr	r2, [pc, #632]	; (8002d78 <UART_SetConfig+0x364>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d132      	bne.n	8002b68 <UART_SetConfig+0x154>
 8002b02:	4b9c      	ldr	r3, [pc, #624]	; (8002d74 <UART_SetConfig+0x360>)
 8002b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b06:	23c0      	movs	r3, #192	; 0xc0
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0252      	lsls	r2, r2, #9
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d019      	beq.n	8002b48 <UART_SetConfig+0x134>
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	0252      	lsls	r2, r2, #9
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d802      	bhi.n	8002b22 <UART_SetConfig+0x10e>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <UART_SetConfig+0x120>
 8002b20:	e01c      	b.n	8002b5c <UART_SetConfig+0x148>
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	0292      	lsls	r2, r2, #10
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <UART_SetConfig+0x13e>
 8002b2a:	22c0      	movs	r2, #192	; 0xc0
 8002b2c:	0292      	lsls	r2, r2, #10
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d005      	beq.n	8002b3e <UART_SetConfig+0x12a>
 8002b32:	e013      	b.n	8002b5c <UART_SetConfig+0x148>
 8002b34:	2317      	movs	r3, #23
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e02c      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b3e:	2317      	movs	r3, #23
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e027      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b48:	2317      	movs	r3, #23
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e022      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b52:	2317      	movs	r3, #23
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2208      	movs	r2, #8
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e01d      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b5c:	2317      	movs	r3, #23
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2210      	movs	r2, #16
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	e017      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a83      	ldr	r2, [pc, #524]	; (8002d7c <UART_SetConfig+0x368>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d104      	bne.n	8002b7c <UART_SetConfig+0x168>
 8002b72:	2317      	movs	r3, #23
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e00d      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7f      	ldr	r2, [pc, #508]	; (8002d80 <UART_SetConfig+0x36c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d104      	bne.n	8002b90 <UART_SetConfig+0x17c>
 8002b86:	2317      	movs	r3, #23
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <UART_SetConfig+0x184>
 8002b90:	2317      	movs	r3, #23
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2210      	movs	r2, #16
 8002b96:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d000      	beq.n	8002ba6 <UART_SetConfig+0x192>
 8002ba4:	e07b      	b.n	8002c9e <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 8002ba6:	2317      	movs	r3, #23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d01c      	beq.n	8002bea <UART_SetConfig+0x1d6>
 8002bb0:	dc02      	bgt.n	8002bb8 <UART_SetConfig+0x1a4>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <UART_SetConfig+0x1ae>
 8002bb6:	e04f      	b.n	8002c58 <UART_SetConfig+0x244>
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d027      	beq.n	8002c0c <UART_SetConfig+0x1f8>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d039      	beq.n	8002c34 <UART_SetConfig+0x220>
 8002bc0:	e04a      	b.n	8002c58 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bc2:	f7ff f91f 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	005a      	lsls	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	18d2      	adds	r2, r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f7fd fabd 	bl	8000158 <__udivsi3>
 8002bde:	0003      	movs	r3, r0
 8002be0:	001a      	movs	r2, r3
 8002be2:	2314      	movs	r3, #20
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	801a      	strh	r2, [r3, #0]
        break;
 8002be8:	e03b      	b.n	8002c62 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	4a64      	ldr	r2, [pc, #400]	; (8002d84 <UART_SetConfig+0x370>)
 8002bf2:	189a      	adds	r2, r3, r2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	f7fd faac 	bl	8000158 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	001a      	movs	r2, r3
 8002c04:	2314      	movs	r3, #20
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	801a      	strh	r2, [r3, #0]
        break;
 8002c0a:	e02a      	b.n	8002c62 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c0c:	f7ff f872 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002c10:	0003      	movs	r3, r0
 8002c12:	005a      	lsls	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	18d2      	adds	r2, r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0019      	movs	r1, r3
 8002c22:	0010      	movs	r0, r2
 8002c24:	f7fd fa98 	bl	8000158 <__udivsi3>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	2314      	movs	r3, #20
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	801a      	strh	r2, [r3, #0]
        break;
 8002c32:	e016      	b.n	8002c62 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	0252      	lsls	r2, r2, #9
 8002c3e:	189a      	adds	r2, r3, r2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0019      	movs	r1, r3
 8002c46:	0010      	movs	r0, r2
 8002c48:	f7fd fa86 	bl	8000158 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	001a      	movs	r2, r3
 8002c50:	2314      	movs	r3, #20
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	801a      	strh	r2, [r3, #0]
        break;
 8002c56:	e004      	b.n	8002c62 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c58:	2313      	movs	r3, #19
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
        break;
 8002c60:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002c62:	230a      	movs	r3, #10
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2214      	movs	r2, #20
 8002c68:	18ba      	adds	r2, r7, r2
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	438a      	bics	r2, r1
 8002c70:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c72:	2314      	movs	r3, #20
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	105b      	asrs	r3, r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b299      	uxth	r1, r3
 8002c82:	230a      	movs	r3, #10
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	220a      	movs	r2, #10
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	220a      	movs	r2, #10
 8002c96:	18ba      	adds	r2, r7, r2
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e05b      	b.n	8002d56 <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d01b      	beq.n	8002ce0 <UART_SetConfig+0x2cc>
 8002ca8:	dc02      	bgt.n	8002cb0 <UART_SetConfig+0x29c>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <UART_SetConfig+0x2a6>
 8002cae:	e04d      	b.n	8002d4c <UART_SetConfig+0x338>
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d026      	beq.n	8002d02 <UART_SetConfig+0x2ee>
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d037      	beq.n	8002d28 <UART_SetConfig+0x314>
 8002cb8:	e048      	b.n	8002d4c <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	f7ff f8a1 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	18d2      	adds	r2, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	0010      	movs	r0, r2
 8002cd4:	f7fd fa40 	bl	8000158 <__udivsi3>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	60e3      	str	r3, [r4, #12]
        break;
 8002cde:	e03a      	b.n	8002d56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681c      	ldr	r4, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <UART_SetConfig+0x374>)
 8002cec:	189a      	adds	r2, r3, r2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	f7fd fa2f 	bl	8000158 <__udivsi3>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	60e3      	str	r3, [r4, #12]
        break;
 8002d00:	e029      	b.n	8002d56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681c      	ldr	r4, [r3, #0]
 8002d06:	f7fe fff5 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	18d2      	adds	r2, r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0019      	movs	r1, r3
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	f7fd fa1c 	bl	8000158 <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	60e3      	str	r3, [r4, #12]
        break;
 8002d26:	e016      	b.n	8002d56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681c      	ldr	r4, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	0212      	lsls	r2, r2, #8
 8002d36:	189a      	adds	r2, r3, r2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	0010      	movs	r0, r2
 8002d40:	f7fd fa0a 	bl	8000158 <__udivsi3>
 8002d44:	0003      	movs	r3, r0
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	60e3      	str	r3, [r4, #12]
        break;
 8002d4a:	e004      	b.n	8002d56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d4c:	2313      	movs	r3, #19
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
        break;
 8002d54:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002d56:	2313      	movs	r3, #19
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]

}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b007      	add	sp, #28
 8002d62:	bd90      	pop	{r4, r7, pc}
 8002d64:	efff69f3 	.word	0xefff69f3
 8002d68:	ffffcfff 	.word	0xffffcfff
 8002d6c:	fffff4ff 	.word	0xfffff4ff
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40004400 	.word	0x40004400
 8002d7c:	40004800 	.word	0x40004800
 8002d80:	40004c00 	.word	0x40004c00
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	007a1200 	.word	0x007a1200

08002d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	4945      	ldr	r1, [pc, #276]	; (8002ec0 <UART_AdvFeatureConfig+0x134>)
 8002daa:	4011      	ands	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2202      	movs	r2, #2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d00a      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	493e      	ldr	r1, [pc, #248]	; (8002ec4 <UART_AdvFeatureConfig+0x138>)
 8002dca:	4011      	ands	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	6852      	ldr	r2, [r2, #4]
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <UART_AdvFeatureConfig+0x13c>)
 8002dea:	4011      	ands	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2208      	movs	r2, #8
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d00a      	beq.n	8002e14 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	6852      	ldr	r2, [r2, #4]
 8002e08:	4930      	ldr	r1, [pc, #192]	; (8002ecc <UART_AdvFeatureConfig+0x140>)
 8002e0a:	4011      	ands	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2210      	movs	r2, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d00a      	beq.n	8002e34 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	4929      	ldr	r1, [pc, #164]	; (8002ed0 <UART_AdvFeatureConfig+0x144>)
 8002e2a:	4011      	ands	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	6892      	ldr	r2, [r2, #8]
 8002e48:	4922      	ldr	r1, [pc, #136]	; (8002ed4 <UART_AdvFeatureConfig+0x148>)
 8002e4a:	4011      	ands	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2240      	movs	r2, #64	; 0x40
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d01b      	beq.n	8002e96 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <UART_AdvFeatureConfig+0x14c>)
 8002e6a:	4011      	ands	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	035b      	lsls	r3, r3, #13
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d10a      	bne.n	8002e96 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	6852      	ldr	r2, [r2, #4]
 8002e8a:	4914      	ldr	r1, [pc, #80]	; (8002edc <UART_AdvFeatureConfig+0x150>)
 8002e8c:	4011      	ands	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	6852      	ldr	r2, [r2, #4]
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <UART_AdvFeatureConfig+0x154>)
 8002eac:	4011      	ands	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	fffdffff 	.word	0xfffdffff
 8002ec4:	fffeffff 	.word	0xfffeffff
 8002ec8:	fffbffff 	.word	0xfffbffff
 8002ecc:	ffff7fff 	.word	0xffff7fff
 8002ed0:	ffffefff 	.word	0xffffefff
 8002ed4:	ffffdfff 	.word	0xffffdfff
 8002ed8:	ffefffff 	.word	0xffefffff
 8002edc:	ff9fffff 	.word	0xff9fffff
 8002ee0:	fff7ffff 	.word	0xfff7ffff

08002ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ef6:	f7fd fff1 	bl	8000edc <HAL_GetTick>
 8002efa:	0003      	movs	r3, r0
 8002efc:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <UART_CheckIdleState+0xa4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <UART_CheckIdleState+0x2e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <UART_CheckIdleState+0xa8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d129      	bne.n	8002f66 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d10d      	bne.n	8002f3c <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	0399      	lsls	r1, r3, #14
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <UART_CheckIdleState+0xac>)
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f000 f830 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d001      	beq.n	8002f3c <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e021      	b.n	8002f80 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2204      	movs	r2, #4
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d10d      	bne.n	8002f66 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	03d9      	lsls	r1, r3, #15
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <UART_CheckIdleState+0xac>)
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	0013      	movs	r3, r2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f000 f81b 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e00c      	b.n	8002f80 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2269      	movs	r2, #105	; 0x69
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	226a      	movs	r2, #106	; 0x6a
 8002f72:	2120      	movs	r1, #32
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2268      	movs	r2, #104	; 0x68
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	01ffffff 	.word	0x01ffffff

08002f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	e02b      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	d028      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fb2:	f7fd ff93 	bl	8000edc <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d91d      	bls.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	438a      	bics	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2269      	movs	r2, #105	; 0x69
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	226a      	movs	r2, #106	; 0x6a
 8002fee:	2120      	movs	r1, #32
 8002ff0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2268      	movs	r2, #104	; 0x68
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	425a      	negs	r2, r3
 800300e:	4153      	adcs	r3, r2
 8003010:	b2db      	uxtb	r3, r3
 8003012:	001a      	movs	r2, r3
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d0c4      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	fffffe5f 	.word	0xfffffe5f

0800302c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <MX_GPIO_Init+0xc8>)
 8003034:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <MX_GPIO_Init+0xc8>)
 8003036:	6952      	ldr	r2, [r2, #20]
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	0309      	lsls	r1, r1, #12
 800303c:	430a      	orrs	r2, r1
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <MX_GPIO_Init+0xc8>)
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	031b      	lsls	r3, r3, #12
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <MX_GPIO_Init+0xc8>)
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <MX_GPIO_Init+0xc8>)
 8003052:	6952      	ldr	r2, [r2, #20]
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	03c9      	lsls	r1, r1, #15
 8003058:	430a      	orrs	r2, r1
 800305a:	615a      	str	r2, [r3, #20]
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <MX_GPIO_Init+0xc8>)
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	03db      	lsls	r3, r3, #15
 8003064:	4013      	ands	r3, r2
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <MX_GPIO_Init+0xc8>)
 800306c:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <MX_GPIO_Init+0xc8>)
 800306e:	6952      	ldr	r2, [r2, #20]
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	0289      	lsls	r1, r1, #10
 8003074:	430a      	orrs	r2, r1
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <MX_GPIO_Init+0xc8>)
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	029b      	lsls	r3, r3, #10
 8003080:	4013      	ands	r3, r2
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	2200      	movs	r2, #0
 800308c:	2120      	movs	r1, #32
 800308e:	0018      	movs	r0, r3
 8003090:	f7fe f9ac 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003094:	230c      	movs	r3, #12
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	0192      	lsls	r2, r2, #6
 800309c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800309e:	230c      	movs	r3, #12
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <MX_GPIO_Init+0xcc>)
 80030a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	230c      	movs	r3, #12
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030ae:	230c      	movs	r3, #12
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <MX_GPIO_Init+0xd0>)
 80030b4:	0019      	movs	r1, r3
 80030b6:	0010      	movs	r0, r2
 80030b8:	f7fe f81c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80030bc:	230c      	movs	r3, #12
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2220      	movs	r2, #32
 80030c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c4:	230c      	movs	r3, #12
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	230c      	movs	r3, #12
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d4:	230c      	movs	r3, #12
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80030dc:	230c      	movs	r3, #12
 80030de:	18fa      	adds	r2, r7, r3
 80030e0:	2390      	movs	r3, #144	; 0x90
 80030e2:	05db      	lsls	r3, r3, #23
 80030e4:	0011      	movs	r1, r2
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fe f804 	bl	80010f4 <HAL_GPIO_Init>

}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b008      	add	sp, #32
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	10210000 	.word	0x10210000
 80030fc:	48000800 	.word	0x48000800

08003100 <__io_putchar>:
/*
 * Printf in Serial 2 (Virtual serial of Nucleo-64 with STLINK)
 */

int __io_putchar(int ch)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	230c      	movs	r3, #12
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	701a      	strb	r2, [r3, #0]

 while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY);//Wait until UART is ready
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <__io_putchar+0x3c>)
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff fc5f 	bl	80029da <HAL_UART_GetState>
 800311c:	0003      	movs	r3, r0
 800311e:	2b20      	cmp	r3, #32
 8003120:	d1f8      	bne.n	8003114 <__io_putchar+0x14>
 HAL_UART_Transmit(&huart2, &(*c), 1, 10);
 8003122:	230c      	movs	r3, #12
 8003124:	18f9      	adds	r1, r7, r3
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <__io_putchar+0x3c>)
 8003128:	230a      	movs	r3, #10
 800312a:	2201      	movs	r2, #1
 800312c:	f7ff fbb2 	bl	8002894 <HAL_UART_Transmit>
 return ch;
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	200001e0 	.word	0x200001e0

08003140 <_write>:

int _write(int file,char *ptr, int len)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e009      	b.n	8003166 <_write+0x26>
	 __io_putchar(*ptr++);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60ba      	str	r2, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff ffd0 	bl	8003100 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3301      	adds	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	dbf1      	blt.n	8003152 <_write+0x12>
	 }
return len;
 800316e:	687b      	ldr	r3, [r7, #4]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b006      	add	sp, #24
 8003176:	bd80      	pop	{r7, pc}

08003178 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800317e:	f7fd fe71 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003182:	f000 f825 	bl	80031d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003186:	f7ff ff51 	bl	800302c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800318a:	f000 f9b7 	bl	80034fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800318e:	f000 f93f 	bl	8003410 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//Start 1s timer
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <main+0x48>)
 8003194:	0018      	movs	r0, r3
 8003196:	f7fe ff75 	bl	8002084 <HAL_TIM_Base_Start_IT>
  uint32_t ifftFlag = 0;
  uint32_t doBitReverse = 1;
#endif

#ifdef meiaquatro
  uint32_t ifftFlag = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  uint32_t doBitReverse = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN 3 */


#ifdef meiaquatro
	  arm_cfft_f32(&arm_cfft_sR_f32_len32, senoide_input, ifftFlag, doBitReverse);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4906      	ldr	r1, [pc, #24]	; (80031c4 <main+0x4c>)
 80031ac:	4806      	ldr	r0, [pc, #24]	; (80031c8 <main+0x50>)
 80031ae:	f000 ff23 	bl	8003ff8 <arm_cfft_f32>
	  FFT_result++;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <main+0x54>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <main+0x54>)
 80031ba:	601a      	str	r2, [r3, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len32, senoide_input, ifftFlag, doBitReverse);
 80031bc:	e7f1      	b.n	80031a2 <main+0x2a>
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	200001a0 	.word	0x200001a0
 80031c4:	20000000 	.word	0x20000000
 80031c8:	08005af0 	.word	0x08005af0
 80031cc:	20000194 	.word	0x20000194

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b098      	sub	sp, #96	; 0x60
 80031d4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80031d6:	232c      	movs	r3, #44	; 0x2c
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2220      	movs	r2, #32
 80031dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80031de:	232c      	movs	r3, #44	; 0x2c
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2201      	movs	r2, #1
 80031e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031e6:	232c      	movs	r3, #44	; 0x2c
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ee:	232c      	movs	r3, #44	; 0x2c
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fe f918 	bl	8001428 <HAL_RCC_OscConfig>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d006      	beq.n	800320a <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031fc:	23eb      	movs	r3, #235	; 0xeb
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <SystemClock_Config+0xd4>)
 8003202:	0011      	movs	r1, r2
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f879 	bl	80032fc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800320a:	231c      	movs	r3, #28
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2207      	movs	r2, #7
 8003210:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003212:	231c      	movs	r3, #28
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2203      	movs	r2, #3
 8003218:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800321a:	231c      	movs	r3, #28
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003222:	231c      	movs	r3, #28
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800322a:	231c      	movs	r3, #28
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2101      	movs	r1, #1
 8003230:	0018      	movs	r0, r3
 8003232:	f7fe fc57 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d007      	beq.n	800324a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800323a:	23e4      	movs	r3, #228	; 0xe4
 800323c:	33ff      	adds	r3, #255	; 0xff
 800323e:	001a      	movs	r2, r3
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <SystemClock_Config+0xd4>)
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f859 	bl	80032fc <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800324a:	003b      	movs	r3, r7
 800324c:	2202      	movs	r2, #2
 800324e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003250:	003b      	movs	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003256:	003b      	movs	r3, r7
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe fde9 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d006      	beq.n	8003270 <SystemClock_Config+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003262:	23f5      	movs	r3, #245	; 0xf5
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <SystemClock_Config+0xd4>)
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f846 	bl	80032fc <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003270:	f7fe fdbe 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8003274:	0002      	movs	r2, r0
 8003276:	23fa      	movs	r3, #250	; 0xfa
 8003278:	0099      	lsls	r1, r3, #2
 800327a:	0010      	movs	r0, r2
 800327c:	f7fc ff6c 	bl	8000158 <__udivsi3>
 8003280:	0003      	movs	r3, r0
 8003282:	0018      	movs	r0, r3
 8003284:	f7fd ff02 	bl	800108c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003288:	2004      	movs	r0, #4
 800328a:	f7fd ff0d 	bl	80010a8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800328e:	2301      	movs	r3, #1
 8003290:	425b      	negs	r3, r3
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	0018      	movs	r0, r3
 8003298:	f7fd fed2 	bl	8001040 <HAL_NVIC_SetPriority>
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b018      	add	sp, #96	; 0x60
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	080059d8 	.word	0x080059d8

080032a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d112      	bne.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x3a>

	  printf("FFT/s: %i \r\n", (FFT_result-FFT_old));
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80032c8:	0011      	movs	r1, r2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f001 fbf6 	bl	8004abc <iprintf>
	  FFT_old = FFT_result;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032d6:	601a      	str	r2, [r3, #0]
	  i++;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END Callback 1 */
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b002      	add	sp, #8
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	20000194 	.word	0x20000194
 80032f0:	2000019c 	.word	0x2000019c
 80032f4:	080059e8 	.word	0x080059e8
 80032f8:	20000198 	.word	0x20000198

080032fc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003306:	e7fe      	b.n	8003306 <_Error_Handler+0xa>

08003308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_MspInit+0x50>)
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <HAL_MspInit+0x50>)
 8003312:	6992      	ldr	r2, [r2, #24]
 8003314:	2101      	movs	r1, #1
 8003316:	430a      	orrs	r2, r1
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_MspInit+0x50>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003326:	2305      	movs	r3, #5
 8003328:	425b      	negs	r3, r3
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	0018      	movs	r0, r3
 8003330:	f7fd fe86 	bl	8001040 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003334:	2302      	movs	r3, #2
 8003336:	425b      	negs	r3, r3
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	0018      	movs	r0, r3
 800333e:	f7fd fe7f 	bl	8001040 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003342:	2301      	movs	r3, #1
 8003344:	425b      	negs	r3, r3
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f7fd fe78 	bl	8001040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000

0800335c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003360:	f7fd fdb0 	bl	8000ec4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003364:	f7fd feba 	bl	80010dc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <TIM2_IRQHandler+0x14>)
 8003376:	0018      	movs	r0, r3
 8003378:	f7fe fe9d 	bl	80020b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	200001a0 	.word	0x200001a0

08003388 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <SystemInit+0x70>)
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <SystemInit+0x70>)
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <SystemInit+0x70>)
 800339a:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <SystemInit+0x70>)
 800339c:	6852      	ldr	r2, [r2, #4]
 800339e:	4917      	ldr	r1, [pc, #92]	; (80033fc <SystemInit+0x74>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <SystemInit+0x70>)
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <SystemInit+0x70>)
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4915      	ldr	r1, [pc, #84]	; (8003400 <SystemInit+0x78>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <SystemInit+0x70>)
 80033b2:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <SystemInit+0x70>)
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4913      	ldr	r1, [pc, #76]	; (8003404 <SystemInit+0x7c>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <SystemInit+0x70>)
 80033be:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <SystemInit+0x70>)
 80033c0:	6852      	ldr	r2, [r2, #4]
 80033c2:	4911      	ldr	r1, [pc, #68]	; (8003408 <SystemInit+0x80>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <SystemInit+0x70>)
 80033ca:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <SystemInit+0x70>)
 80033cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033ce:	210f      	movs	r1, #15
 80033d0:	438a      	bics	r2, r1
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <SystemInit+0x70>)
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <SystemInit+0x70>)
 80033d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033da:	490c      	ldr	r1, [pc, #48]	; (800340c <SystemInit+0x84>)
 80033dc:	400a      	ands	r2, r1
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <SystemInit+0x70>)
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <SystemInit+0x70>)
 80033e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <SystemInit+0x70>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]

}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08ffb80c 	.word	0x08ffb80c
 8003400:	fef6ffff 	.word	0xfef6ffff
 8003404:	fffbffff 	.word	0xfffbffff
 8003408:	ffc0ffff 	.word	0xffc0ffff
 800340c:	fffcfe2c 	.word	0xfffcfe2c

08003410 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	05d2      	lsls	r2, r2, #23
 800341c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0xBB80;
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003420:	4a22      	ldr	r2, [pc, #136]	; (80034ac <MX_TIM2_Init+0x9c>)
 8003422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <MX_TIM2_Init+0x98>)
 800342c:	22fa      	movs	r2, #250	; 0xfa
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <MX_TIM2_Init+0x98>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003440:	0018      	movs	r0, r3
 8003442:	f7fe fdf3 	bl	800202c <HAL_TIM_Base_Init>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d004      	beq.n	8003454 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <MX_TIM2_Init+0xa0>)
 800344c:	213f      	movs	r1, #63	; 0x3f
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff ff54 	bl	80032fc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003454:	2308      	movs	r3, #8
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	0152      	lsls	r2, r2, #5
 800345c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800345e:	2308      	movs	r3, #8
 8003460:	18fa      	adds	r2, r7, r3
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_TIM2_Init+0x98>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f7fe ff3c 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d004      	beq.n	800347a <MX_TIM2_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <MX_TIM2_Init+0xa0>)
 8003472:	2145      	movs	r1, #69	; 0x45
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff ff41 	bl	80032fc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347a:	003b      	movs	r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003480:	003b      	movs	r3, r7
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003486:	003a      	movs	r2, r7
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <MX_TIM2_Init+0x98>)
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff f955 	bl	800273c <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	1e03      	subs	r3, r0, #0
 8003494:	d004      	beq.n	80034a0 <MX_TIM2_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_TIM2_Init+0xa0>)
 8003498:	214c      	movs	r1, #76	; 0x4c
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff ff2e 	bl	80032fc <_Error_Handler>
  }

}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200001a0 	.word	0x200001a0
 80034ac:	0000bb80 	.word	0x0000bb80
 80034b0:	080059f8 	.word	0x080059f8

080034b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d113      	bne.n	80034f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_TIM_Base_MspInit+0x44>)
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_TIM_Base_MspInit+0x44>)
 80034cc:	69d2      	ldr	r2, [r2, #28]
 80034ce:	2101      	movs	r1, #1
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_TIM_Base_MspInit+0x44>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	200f      	movs	r0, #15
 80034e6:	f7fd fdab 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034ea:	200f      	movs	r0, #15
 80034ec:	f7fd fdbe 	bl	800106c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000

080034fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <MX_USART2_UART_Init+0x64>)
 8003504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003508:	22e1      	movs	r2, #225	; 0xe1
 800350a:	0252      	lsls	r2, r2, #9
 800350c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0552      	lsls	r2, r2, #21
 8003514:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003518:	2200      	movs	r2, #0
 800351a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <MX_USART2_UART_Init+0x60>)
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003524:	220c      	movs	r2, #12
 8003526:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_USART2_UART_Init+0x60>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003530:	2200      	movs	r2, #0
 8003532:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003536:	2200      	movs	r2, #0
 8003538:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <MX_USART2_UART_Init+0x60>)
 800353c:	2200      	movs	r2, #0
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_USART2_UART_Init+0x60>)
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff f94e 	bl	80027e4 <HAL_UART_Init>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d004      	beq.n	8003556 <MX_USART2_UART_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <MX_USART2_UART_Init+0x68>)
 800354e:	2144      	movs	r1, #68	; 0x44
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fed3 	bl	80032fc <_Error_Handler>
  }

}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200001e0 	.word	0x200001e0
 8003560:	40004400 	.word	0x40004400
 8003564:	08005a08 	.word	0x08005a08

08003568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_UART_MspInit+0x70>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d129      	bne.n	80035ce <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_UART_MspInit+0x74>)
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_UART_MspInit+0x74>)
 800357e:	69d2      	ldr	r2, [r2, #28]
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	0289      	lsls	r1, r1, #10
 8003584:	430a      	orrs	r2, r1
 8003586:	61da      	str	r2, [r3, #28]
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_UART_MspInit+0x74>)
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003596:	230c      	movs	r3, #12
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	220c      	movs	r2, #12
 800359c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	230c      	movs	r3, #12
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2202      	movs	r2, #2
 80035a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	230c      	movs	r3, #12
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	230c      	movs	r3, #12
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80035b6:	230c      	movs	r3, #12
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2201      	movs	r2, #1
 80035bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	230c      	movs	r3, #12
 80035c0:	18fa      	adds	r2, r7, r3
 80035c2:	2390      	movs	r3, #144	; 0x90
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	0011      	movs	r1, r2
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fd fd93 	bl	80010f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b008      	add	sp, #32
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	40004400 	.word	0x40004400
 80035dc:	40021000 	.word	0x40021000

080035e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035e0:	480d      	ldr	r0, [pc, #52]	; (8003618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035e4:	480d      	ldr	r0, [pc, #52]	; (800361c <LoopForever+0x6>)
  ldr r1, =_edata
 80035e6:	490e      	ldr	r1, [pc, #56]	; (8003620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035e8:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <LoopForever+0xe>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ec:	e002      	b.n	80035f4 <LoopCopyDataInit>

080035ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f2:	3304      	adds	r3, #4

080035f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f8:	d3f9      	bcc.n	80035ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fa:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035fc:	4c0b      	ldr	r4, [pc, #44]	; (800362c <LoopForever+0x16>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003600:	e001      	b.n	8003606 <LoopFillZerobss>

08003602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003604:	3204      	adds	r2, #4

08003606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003608:	d3fb      	bcc.n	8003602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800360a:	f7ff febd 	bl	8003388 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800360e:	f001 fa31 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003612:	f7ff fdb1 	bl	8003178 <main>

08003616 <LoopForever>:

LoopForever:
    b LoopForever
 8003616:	e7fe      	b.n	8003616 <LoopForever>
  ldr   r0, =_estack
 8003618:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800361c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003620:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003624:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 8003628:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800362c:	20000254 	.word	0x20000254

08003630 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_COMP_IRQHandler>
	...

08003634 <arm_cfft_radix8by2_f32>:
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	4656      	mov	r6, sl
 8003638:	464d      	mov	r5, r9
 800363a:	465f      	mov	r7, fp
 800363c:	4644      	mov	r4, r8
 800363e:	b4f0      	push	{r4, r5, r6, r7}
 8003640:	000d      	movs	r5, r1
 8003642:	46ac      	mov	ip, r5
 8003644:	b093      	sub	sp, #76	; 0x4c
 8003646:	9111      	str	r1, [sp, #68]	; 0x44
 8003648:	8801      	ldrh	r1, [r0, #0]
 800364a:	900e      	str	r0, [sp, #56]	; 0x38
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4463      	add	r3, ip
 8003650:	001e      	movs	r6, r3
 8003652:	46b4      	mov	ip, r6
 8003654:	930f      	str	r3, [sp, #60]	; 0x3c
 8003656:	084b      	lsrs	r3, r1, #1
 8003658:	9310      	str	r3, [sp, #64]	; 0x40
 800365a:	08c9      	lsrs	r1, r1, #3
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	6842      	ldr	r2, [r0, #4]
 8003660:	9109      	str	r1, [sp, #36]	; 0x24
 8003662:	18e8      	adds	r0, r5, r3
 8003664:	4463      	add	r3, ip
 8003666:	2900      	cmp	r1, #0
 8003668:	d100      	bne.n	800366c <arm_cfft_radix8by2_f32+0x38>
 800366a:	e110      	b.n	800388e <arm_cfft_radix8by2_f32+0x25a>
 800366c:	4680      	mov	r8, r0
 800366e:	001f      	movs	r7, r3
 8003670:	4691      	mov	r9, r2
 8003672:	46ab      	mov	fp, r5
 8003674:	46b2      	mov	sl, r6
 8003676:	465a      	mov	r2, fp
 8003678:	4659      	mov	r1, fp
 800367a:	6852      	ldr	r2, [r2, #4]
 800367c:	4654      	mov	r4, sl
 800367e:	9200      	str	r2, [sp, #0]
 8003680:	4652      	mov	r2, sl
 8003682:	688d      	ldr	r5, [r1, #8]
 8003684:	68c9      	ldr	r1, [r1, #12]
 8003686:	6864      	ldr	r4, [r4, #4]
 8003688:	9101      	str	r1, [sp, #4]
 800368a:	4641      	mov	r1, r8
 800368c:	9402      	str	r4, [sp, #8]
 800368e:	68d4      	ldr	r4, [r2, #12]
 8003690:	4642      	mov	r2, r8
 8003692:	6849      	ldr	r1, [r1, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	910b      	str	r1, [sp, #44]	; 0x2c
 8003698:	4641      	mov	r1, r8
 800369a:	9203      	str	r2, [sp, #12]
 800369c:	4642      	mov	r2, r8
 800369e:	465b      	mov	r3, fp
 80036a0:	4650      	mov	r0, sl
 80036a2:	68c9      	ldr	r1, [r1, #12]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	910c      	str	r1, [sp, #48]	; 0x30
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	9204      	str	r2, [sp, #16]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6800      	ldr	r0, [r0, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	9106      	str	r1, [sp, #24]
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	9205      	str	r2, [sp, #20]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	910d      	str	r1, [sp, #52]	; 0x34
 80036bc:	900a      	str	r0, [sp, #40]	; 0x28
 80036be:	1c01      	adds	r1, r0, #0
 80036c0:	1c18      	adds	r0, r3, #0
 80036c2:	9207      	str	r2, [sp, #28]
 80036c4:	4656      	mov	r6, sl
 80036c6:	9308      	str	r3, [sp, #32]
 80036c8:	f7fc fdd2 	bl	8000270 <__aeabi_fadd>
 80036cc:	465b      	mov	r3, fp
 80036ce:	68b6      	ldr	r6, [r6, #8]
 80036d0:	9902      	ldr	r1, [sp, #8]
 80036d2:	6018      	str	r0, [r3, #0]
 80036d4:	9800      	ldr	r0, [sp, #0]
 80036d6:	f7fc fdcb 	bl	8000270 <__aeabi_fadd>
 80036da:	465b      	mov	r3, fp
 80036dc:	1c31      	adds	r1, r6, #0
 80036de:	6058      	str	r0, [r3, #4]
 80036e0:	1c28      	adds	r0, r5, #0
 80036e2:	f7fc fdc5 	bl	8000270 <__aeabi_fadd>
 80036e6:	465b      	mov	r3, fp
 80036e8:	1c21      	adds	r1, r4, #0
 80036ea:	6098      	str	r0, [r3, #8]
 80036ec:	9801      	ldr	r0, [sp, #4]
 80036ee:	f7fc fdbf 	bl	8000270 <__aeabi_fadd>
 80036f2:	465b      	mov	r3, fp
 80036f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80036f6:	60d8      	str	r0, [r3, #12]
 80036f8:	9808      	ldr	r0, [sp, #32]
 80036fa:	f7fd f9b3 	bl	8000a64 <__aeabi_fsub>
 80036fe:	9902      	ldr	r1, [sp, #8]
 8003700:	9008      	str	r0, [sp, #32]
 8003702:	9800      	ldr	r0, [sp, #0]
 8003704:	f7fd f9ae 	bl	8000a64 <__aeabi_fsub>
 8003708:	1c31      	adds	r1, r6, #0
 800370a:	9000      	str	r0, [sp, #0]
 800370c:	1c28      	adds	r0, r5, #0
 800370e:	f7fd f9a9 	bl	8000a64 <__aeabi_fsub>
 8003712:	1c21      	adds	r1, r4, #0
 8003714:	9002      	str	r0, [sp, #8]
 8003716:	9801      	ldr	r0, [sp, #4]
 8003718:	f7fd f9a4 	bl	8000a64 <__aeabi_fsub>
 800371c:	9905      	ldr	r1, [sp, #20]
 800371e:	9001      	str	r0, [sp, #4]
 8003720:	9803      	ldr	r0, [sp, #12]
 8003722:	f7fc fda5 	bl	8000270 <__aeabi_fadd>
 8003726:	4643      	mov	r3, r8
 8003728:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800372a:	9906      	ldr	r1, [sp, #24]
 800372c:	6018      	str	r0, [r3, #0]
 800372e:	1c30      	adds	r0, r6, #0
 8003730:	f7fc fd9e 	bl	8000270 <__aeabi_fadd>
 8003734:	4643      	mov	r3, r8
 8003736:	9907      	ldr	r1, [sp, #28]
 8003738:	6058      	str	r0, [r3, #4]
 800373a:	9804      	ldr	r0, [sp, #16]
 800373c:	f7fc fd98 	bl	8000270 <__aeabi_fadd>
 8003740:	4643      	mov	r3, r8
 8003742:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003744:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003746:	6098      	str	r0, [r3, #8]
 8003748:	1c29      	adds	r1, r5, #0
 800374a:	1c20      	adds	r0, r4, #0
 800374c:	f7fc fd90 	bl	8000270 <__aeabi_fadd>
 8003750:	4643      	mov	r3, r8
 8003752:	9903      	ldr	r1, [sp, #12]
 8003754:	60d8      	str	r0, [r3, #12]
 8003756:	9805      	ldr	r0, [sp, #20]
 8003758:	f7fd f984 	bl	8000a64 <__aeabi_fsub>
 800375c:	1c31      	adds	r1, r6, #0
 800375e:	9003      	str	r0, [sp, #12]
 8003760:	9806      	ldr	r0, [sp, #24]
 8003762:	f7fd f97f 	bl	8000a64 <__aeabi_fsub>
 8003766:	9904      	ldr	r1, [sp, #16]
 8003768:	1c06      	adds	r6, r0, #0
 800376a:	9807      	ldr	r0, [sp, #28]
 800376c:	f7fd f97a 	bl	8000a64 <__aeabi_fsub>
 8003770:	1c21      	adds	r1, r4, #0
 8003772:	9004      	str	r0, [sp, #16]
 8003774:	1c28      	adds	r0, r5, #0
 8003776:	f7fd f975 	bl	8000a64 <__aeabi_fsub>
 800377a:	464b      	mov	r3, r9
 800377c:	681c      	ldr	r4, [r3, #0]
 800377e:	9005      	str	r0, [sp, #20]
 8003780:	1c21      	adds	r1, r4, #0
 8003782:	9808      	ldr	r0, [sp, #32]
 8003784:	685d      	ldr	r5, [r3, #4]
 8003786:	f7fd f84d 	bl	8000824 <__aeabi_fmul>
 800378a:	1c29      	adds	r1, r5, #0
 800378c:	9006      	str	r0, [sp, #24]
 800378e:	9800      	ldr	r0, [sp, #0]
 8003790:	f7fd f848 	bl	8000824 <__aeabi_fmul>
 8003794:	1c01      	adds	r1, r0, #0
 8003796:	9806      	ldr	r0, [sp, #24]
 8003798:	f7fc fd6a 	bl	8000270 <__aeabi_fadd>
 800379c:	4653      	mov	r3, sl
 800379e:	1c21      	adds	r1, r4, #0
 80037a0:	6018      	str	r0, [r3, #0]
 80037a2:	9800      	ldr	r0, [sp, #0]
 80037a4:	f7fd f83e 	bl	8000824 <__aeabi_fmul>
 80037a8:	1c29      	adds	r1, r5, #0
 80037aa:	9000      	str	r0, [sp, #0]
 80037ac:	9808      	ldr	r0, [sp, #32]
 80037ae:	f7fd f839 	bl	8000824 <__aeabi_fmul>
 80037b2:	1c01      	adds	r1, r0, #0
 80037b4:	9800      	ldr	r0, [sp, #0]
 80037b6:	f7fd f955 	bl	8000a64 <__aeabi_fsub>
 80037ba:	4653      	mov	r3, sl
 80037bc:	1c29      	adds	r1, r5, #0
 80037be:	6058      	str	r0, [r3, #4]
 80037c0:	9803      	ldr	r0, [sp, #12]
 80037c2:	f7fd f82f 	bl	8000824 <__aeabi_fmul>
 80037c6:	1c21      	adds	r1, r4, #0
 80037c8:	9000      	str	r0, [sp, #0]
 80037ca:	1c30      	adds	r0, r6, #0
 80037cc:	f7fd f82a 	bl	8000824 <__aeabi_fmul>
 80037d0:	1c01      	adds	r1, r0, #0
 80037d2:	9800      	ldr	r0, [sp, #0]
 80037d4:	f7fd f946 	bl	8000a64 <__aeabi_fsub>
 80037d8:	1c29      	adds	r1, r5, #0
 80037da:	6038      	str	r0, [r7, #0]
 80037dc:	1c30      	adds	r0, r6, #0
 80037de:	f7fd f821 	bl	8000824 <__aeabi_fmul>
 80037e2:	1c21      	adds	r1, r4, #0
 80037e4:	1c05      	adds	r5, r0, #0
 80037e6:	9803      	ldr	r0, [sp, #12]
 80037e8:	f7fd f81c 	bl	8000824 <__aeabi_fmul>
 80037ec:	1c01      	adds	r1, r0, #0
 80037ee:	1c28      	adds	r0, r5, #0
 80037f0:	f7fc fd3e 	bl	8000270 <__aeabi_fadd>
 80037f4:	464b      	mov	r3, r9
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	689c      	ldr	r4, [r3, #8]
 80037fa:	9802      	ldr	r0, [sp, #8]
 80037fc:	1c21      	adds	r1, r4, #0
 80037fe:	68dd      	ldr	r5, [r3, #12]
 8003800:	f7fd f810 	bl	8000824 <__aeabi_fmul>
 8003804:	1c29      	adds	r1, r5, #0
 8003806:	1c06      	adds	r6, r0, #0
 8003808:	9801      	ldr	r0, [sp, #4]
 800380a:	f7fd f80b 	bl	8000824 <__aeabi_fmul>
 800380e:	1c01      	adds	r1, r0, #0
 8003810:	1c30      	adds	r0, r6, #0
 8003812:	f7fc fd2d 	bl	8000270 <__aeabi_fadd>
 8003816:	4653      	mov	r3, sl
 8003818:	1c21      	adds	r1, r4, #0
 800381a:	6098      	str	r0, [r3, #8]
 800381c:	9801      	ldr	r0, [sp, #4]
 800381e:	f7fd f801 	bl	8000824 <__aeabi_fmul>
 8003822:	1c29      	adds	r1, r5, #0
 8003824:	1c06      	adds	r6, r0, #0
 8003826:	9802      	ldr	r0, [sp, #8]
 8003828:	f7fc fffc 	bl	8000824 <__aeabi_fmul>
 800382c:	1c01      	adds	r1, r0, #0
 800382e:	1c30      	adds	r0, r6, #0
 8003830:	f7fd f918 	bl	8000a64 <__aeabi_fsub>
 8003834:	4653      	mov	r3, sl
 8003836:	1c29      	adds	r1, r5, #0
 8003838:	60d8      	str	r0, [r3, #12]
 800383a:	9804      	ldr	r0, [sp, #16]
 800383c:	f7fc fff2 	bl	8000824 <__aeabi_fmul>
 8003840:	1c21      	adds	r1, r4, #0
 8003842:	1c06      	adds	r6, r0, #0
 8003844:	9805      	ldr	r0, [sp, #20]
 8003846:	f7fc ffed 	bl	8000824 <__aeabi_fmul>
 800384a:	1c01      	adds	r1, r0, #0
 800384c:	1c30      	adds	r0, r6, #0
 800384e:	f7fd f909 	bl	8000a64 <__aeabi_fsub>
 8003852:	1c29      	adds	r1, r5, #0
 8003854:	60b8      	str	r0, [r7, #8]
 8003856:	9805      	ldr	r0, [sp, #20]
 8003858:	f7fc ffe4 	bl	8000824 <__aeabi_fmul>
 800385c:	1c21      	adds	r1, r4, #0
 800385e:	1c05      	adds	r5, r0, #0
 8003860:	9804      	ldr	r0, [sp, #16]
 8003862:	f7fc ffdf 	bl	8000824 <__aeabi_fmul>
 8003866:	1c01      	adds	r1, r0, #0
 8003868:	1c28      	adds	r0, r5, #0
 800386a:	f7fc fd01 	bl	8000270 <__aeabi_fadd>
 800386e:	2210      	movs	r2, #16
 8003870:	4694      	mov	ip, r2
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	9309      	str	r3, [sp, #36]	; 0x24
 800387a:	44e3      	add	fp, ip
 800387c:	44e0      	add	r8, ip
 800387e:	3710      	adds	r7, #16
 8003880:	44e2      	add	sl, ip
 8003882:	44e1      	add	r9, ip
 8003884:	2b00      	cmp	r3, #0
 8003886:	d000      	beq.n	800388a <arm_cfft_radix8by2_f32+0x256>
 8003888:	e6f5      	b.n	8003676 <arm_cfft_radix8by2_f32+0x42>
 800388a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	466b      	mov	r3, sp
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	185b      	adds	r3, r3, r1
 8003894:	881c      	ldrh	r4, [r3, #0]
 8003896:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003898:	0021      	movs	r1, r4
 800389a:	2302      	movs	r3, #2
 800389c:	f000 fc28 	bl	80040f0 <arm_radix8_butterfly_f32>
 80038a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038a2:	0021      	movs	r1, r4
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80038a8:	2302      	movs	r3, #2
 80038aa:	f000 fc21 	bl	80040f0 <arm_radix8_butterfly_f32>
 80038ae:	b013      	add	sp, #76	; 0x4c
 80038b0:	bc3c      	pop	{r2, r3, r4, r5}
 80038b2:	4690      	mov	r8, r2
 80038b4:	4699      	mov	r9, r3
 80038b6:	46a2      	mov	sl, r4
 80038b8:	46ab      	mov	fp, r5
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038bc <arm_cfft_radix8by4_f32>:
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	465f      	mov	r7, fp
 80038c0:	4656      	mov	r6, sl
 80038c2:	464d      	mov	r5, r9
 80038c4:	4644      	mov	r4, r8
 80038c6:	468c      	mov	ip, r1
 80038c8:	b4f0      	push	{r4, r5, r6, r7}
 80038ca:	8802      	ldrh	r2, [r0, #0]
 80038cc:	000d      	movs	r5, r1
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	0093      	lsls	r3, r2, #2
 80038d2:	449c      	add	ip, r3
 80038d4:	4666      	mov	r6, ip
 80038d6:	449c      	add	ip, r3
 80038d8:	4661      	mov	r1, ip
 80038da:	b0a9      	sub	sp, #164	; 0xa4
 80038dc:	449c      	add	ip, r3
 80038de:	4664      	mov	r4, ip
 80038e0:	0007      	movs	r7, r0
 80038e2:	9026      	str	r0, [sp, #152]	; 0x98
 80038e4:	0008      	movs	r0, r1
 80038e6:	3b04      	subs	r3, #4
 80038e8:	4463      	add	r3, ip
 80038ea:	941f      	str	r4, [sp, #124]	; 0x7c
 80038ec:	9302      	str	r3, [sp, #8]
 80038ee:	682c      	ldr	r4, [r5, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9520      	str	r5, [sp, #128]	; 0x80
 80038f4:	6805      	ldr	r5, [r0, #0]
 80038f6:	3904      	subs	r1, #4
 80038f8:	4698      	mov	r8, r3
 80038fa:	0007      	movs	r7, r0
 80038fc:	0853      	lsrs	r3, r2, #1
 80038fe:	9105      	str	r1, [sp, #20]
 8003900:	1c20      	adds	r0, r4, #0
 8003902:	1c29      	adds	r1, r5, #0
 8003904:	9325      	str	r3, [sp, #148]	; 0x94
 8003906:	f7fc fcb3 	bl	8000270 <__aeabi_fadd>
 800390a:	1c29      	adds	r1, r5, #0
 800390c:	4681      	mov	r9, r0
 800390e:	1c20      	adds	r0, r4, #0
 8003910:	f7fd f8a8 	bl	8000a64 <__aeabi_fsub>
 8003914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003916:	687d      	ldr	r5, [r7, #4]
 8003918:	685c      	ldr	r4, [r3, #4]
 800391a:	4682      	mov	sl, r0
 800391c:	1c29      	adds	r1, r5, #0
 800391e:	1c20      	adds	r0, r4, #0
 8003920:	9721      	str	r7, [sp, #132]	; 0x84
 8003922:	f7fc fca5 	bl	8000270 <__aeabi_fadd>
 8003926:	1c29      	adds	r1, r5, #0
 8003928:	9001      	str	r0, [sp, #4]
 800392a:	1c20      	adds	r0, r4, #0
 800392c:	f7fd f89a 	bl	8000a64 <__aeabi_fsub>
 8003930:	0033      	movs	r3, r6
 8003932:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003934:	681d      	ldr	r5, [r3, #0]
 8003936:	6814      	ldr	r4, [r2, #0]
 8003938:	4683      	mov	fp, r0
 800393a:	1c29      	adds	r1, r5, #0
 800393c:	4648      	mov	r0, r9
 800393e:	6877      	ldr	r7, [r6, #4]
 8003940:	931d      	str	r3, [sp, #116]	; 0x74
 8003942:	6856      	ldr	r6, [r2, #4]
 8003944:	f7fc fc94 	bl	8000270 <__aeabi_fadd>
 8003948:	1c21      	adds	r1, r4, #0
 800394a:	f7fc fc91 	bl	8000270 <__aeabi_fadd>
 800394e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003952:	6008      	str	r0, [r1, #0]
 8003954:	3108      	adds	r1, #8
 8003956:	911e      	str	r1, [sp, #120]	; 0x78
 8003958:	9801      	ldr	r0, [sp, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	f7fc fc88 	bl	8000270 <__aeabi_fadd>
 8003960:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003962:	6851      	ldr	r1, [r2, #4]
 8003964:	f7fc fc84 	bl	8000270 <__aeabi_fadd>
 8003968:	9920      	ldr	r1, [sp, #128]	; 0x80
 800396a:	6048      	str	r0, [r1, #4]
 800396c:	1c39      	adds	r1, r7, #0
 800396e:	4650      	mov	r0, sl
 8003970:	f7fc fc7e 	bl	8000270 <__aeabi_fadd>
 8003974:	1c31      	adds	r1, r6, #0
 8003976:	f7fd f875 	bl	8000a64 <__aeabi_fsub>
 800397a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800397c:	1c29      	adds	r1, r5, #0
 800397e:	001a      	movs	r2, r3
 8003980:	6018      	str	r0, [r3, #0]
 8003982:	3208      	adds	r2, #8
 8003984:	4658      	mov	r0, fp
 8003986:	921a      	str	r2, [sp, #104]	; 0x68
 8003988:	f7fd f86c 	bl	8000a64 <__aeabi_fsub>
 800398c:	1c21      	adds	r1, r4, #0
 800398e:	f7fc fc6f 	bl	8000270 <__aeabi_fadd>
 8003992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003994:	1c29      	adds	r1, r5, #0
 8003996:	6058      	str	r0, [r3, #4]
 8003998:	4648      	mov	r0, r9
 800399a:	f7fd f863 	bl	8000a64 <__aeabi_fsub>
 800399e:	1c21      	adds	r1, r4, #0
 80039a0:	f7fd f860 	bl	8000a64 <__aeabi_fsub>
 80039a4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80039a6:	6008      	str	r0, [r1, #0]
 80039a8:	3108      	adds	r1, #8
 80039aa:	911c      	str	r1, [sp, #112]	; 0x70
 80039ac:	9801      	ldr	r0, [sp, #4]
 80039ae:	1c39      	adds	r1, r7, #0
 80039b0:	f7fd f858 	bl	8000a64 <__aeabi_fsub>
 80039b4:	1c31      	adds	r1, r6, #0
 80039b6:	f7fd f855 	bl	8000a64 <__aeabi_fsub>
 80039ba:	9921      	ldr	r1, [sp, #132]	; 0x84
 80039bc:	6048      	str	r0, [r1, #4]
 80039be:	1c39      	adds	r1, r7, #0
 80039c0:	4650      	mov	r0, sl
 80039c2:	f7fd f84f 	bl	8000a64 <__aeabi_fsub>
 80039c6:	1c31      	adds	r1, r6, #0
 80039c8:	f7fc fc52 	bl	8000270 <__aeabi_fadd>
 80039cc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80039ce:	1c29      	adds	r1, r5, #0
 80039d0:	0037      	movs	r7, r6
 80039d2:	6030      	str	r0, [r6, #0]
 80039d4:	3708      	adds	r7, #8
 80039d6:	4658      	mov	r0, fp
 80039d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80039da:	f7fc fc49 	bl	8000270 <__aeabi_fadd>
 80039de:	1c21      	adds	r1, r4, #0
 80039e0:	f7fd f840 	bl	8000a64 <__aeabi_fsub>
 80039e4:	0034      	movs	r4, r6
 80039e6:	6070      	str	r0, [r6, #4]
 80039e8:	2508      	movs	r5, #8
 80039ea:	2610      	movs	r6, #16
 80039ec:	4640      	mov	r0, r8
 80039ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80039f0:	4445      	add	r5, r8
 80039f2:	1e93      	subs	r3, r2, #2
 80039f4:	4446      	add	r6, r8
 80039f6:	3018      	adds	r0, #24
 80039f8:	085a      	lsrs	r2, r3, #1
 80039fa:	9523      	str	r5, [sp, #140]	; 0x8c
 80039fc:	9624      	str	r6, [sp, #144]	; 0x90
 80039fe:	9022      	str	r0, [sp, #136]	; 0x88
 8003a00:	9227      	str	r2, [sp, #156]	; 0x9c
 8003a02:	d100      	bne.n	8003a06 <arm_cfft_radix8by4_f32+0x14a>
 8003a04:	e1fd      	b.n	8003e02 <arm_cfft_radix8by4_f32+0x546>
 8003a06:	46a2      	mov	sl, r4
 8003a08:	240c      	movs	r4, #12
 8003a0a:	4264      	negs	r4, r4
 8003a0c:	46a4      	mov	ip, r4
 8003a0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a10:	9212      	str	r2, [sp, #72]	; 0x48
 8003a12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003a14:	44e2      	add	sl, ip
 8003a16:	3b0c      	subs	r3, #12
 8003a18:	46d1      	mov	r9, sl
 8003a1a:	4693      	mov	fp, r2
 8003a1c:	46b8      	mov	r8, r7
 8003a1e:	469a      	mov	sl, r3
 8003a20:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003a22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a24:	3808      	subs	r0, #8
 8003a26:	9001      	str	r0, [sp, #4]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003a2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003a2e:	9011      	str	r0, [sp, #68]	; 0x44
 8003a30:	9610      	str	r6, [sp, #64]	; 0x40
 8003a32:	9513      	str	r5, [sp, #76]	; 0x4c
 8003a34:	9104      	str	r1, [sp, #16]
 8003a36:	9e04      	ldr	r6, [sp, #16]
 8003a38:	9f03      	ldr	r7, [sp, #12]
 8003a3a:	6834      	ldr	r4, [r6, #0]
 8003a3c:	683d      	ldr	r5, [r7, #0]
 8003a3e:	1c20      	adds	r0, r4, #0
 8003a40:	1c29      	adds	r1, r5, #0
 8003a42:	f7fc fc15 	bl	8000270 <__aeabi_fadd>
 8003a46:	1c29      	adds	r1, r5, #0
 8003a48:	9006      	str	r0, [sp, #24]
 8003a4a:	1c20      	adds	r0, r4, #0
 8003a4c:	f7fd f80a 	bl	8000a64 <__aeabi_fsub>
 8003a50:	6874      	ldr	r4, [r6, #4]
 8003a52:	687d      	ldr	r5, [r7, #4]
 8003a54:	9007      	str	r0, [sp, #28]
 8003a56:	1c29      	adds	r1, r5, #0
 8003a58:	1c20      	adds	r0, r4, #0
 8003a5a:	9604      	str	r6, [sp, #16]
 8003a5c:	9703      	str	r7, [sp, #12]
 8003a5e:	f7fc fc07 	bl	8000270 <__aeabi_fadd>
 8003a62:	1c29      	adds	r1, r5, #0
 8003a64:	9008      	str	r0, [sp, #32]
 8003a66:	1c20      	adds	r0, r4, #0
 8003a68:	f7fc fffc 	bl	8000a64 <__aeabi_fsub>
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	684f      	ldr	r7, [r1, #4]
 8003a70:	4641      	mov	r1, r8
 8003a72:	684e      	ldr	r6, [r1, #4]
 8003a74:	9009      	str	r0, [sp, #36]	; 0x24
 8003a76:	1c39      	adds	r1, r7, #0
 8003a78:	9807      	ldr	r0, [sp, #28]
 8003a7a:	f7fc fbf9 	bl	8000270 <__aeabi_fadd>
 8003a7e:	1c31      	adds	r1, r6, #0
 8003a80:	f7fc fff0 	bl	8000a64 <__aeabi_fsub>
 8003a84:	4659      	mov	r1, fp
 8003a86:	680d      	ldr	r5, [r1, #0]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	680c      	ldr	r4, [r1, #0]
 8003a8c:	900a      	str	r0, [sp, #40]	; 0x28
 8003a8e:	1c29      	adds	r1, r5, #0
 8003a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a92:	f7fc ffe7 	bl	8000a64 <__aeabi_fsub>
 8003a96:	1c21      	adds	r1, r4, #0
 8003a98:	f7fc fbea 	bl	8000270 <__aeabi_fadd>
 8003a9c:	1c29      	adds	r1, r5, #0
 8003a9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003aa0:	9806      	ldr	r0, [sp, #24]
 8003aa2:	f7fc ffdf 	bl	8000a64 <__aeabi_fsub>
 8003aa6:	1c21      	adds	r1, r4, #0
 8003aa8:	f7fc ffdc 	bl	8000a64 <__aeabi_fsub>
 8003aac:	1c39      	adds	r1, r7, #0
 8003aae:	900c      	str	r0, [sp, #48]	; 0x30
 8003ab0:	9808      	ldr	r0, [sp, #32]
 8003ab2:	f7fc ffd7 	bl	8000a64 <__aeabi_fsub>
 8003ab6:	1c31      	adds	r1, r6, #0
 8003ab8:	f7fc ffd4 	bl	8000a64 <__aeabi_fsub>
 8003abc:	1c39      	adds	r1, r7, #0
 8003abe:	9014      	str	r0, [sp, #80]	; 0x50
 8003ac0:	9807      	ldr	r0, [sp, #28]
 8003ac2:	f7fc ffcf 	bl	8000a64 <__aeabi_fsub>
 8003ac6:	1c31      	adds	r1, r6, #0
 8003ac8:	f7fc fbd2 	bl	8000270 <__aeabi_fadd>
 8003acc:	1c29      	adds	r1, r5, #0
 8003ace:	9007      	str	r0, [sp, #28]
 8003ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ad2:	f7fc fbcd 	bl	8000270 <__aeabi_fadd>
 8003ad6:	1c21      	adds	r1, r4, #0
 8003ad8:	f7fc ffc4 	bl	8000a64 <__aeabi_fsub>
 8003adc:	1c29      	adds	r1, r5, #0
 8003ade:	9015      	str	r0, [sp, #84]	; 0x54
 8003ae0:	9806      	ldr	r0, [sp, #24]
 8003ae2:	f7fc fbc5 	bl	8000270 <__aeabi_fadd>
 8003ae6:	1c21      	adds	r1, r4, #0
 8003ae8:	f7fc fbc2 	bl	8000270 <__aeabi_fadd>
 8003aec:	9b04      	ldr	r3, [sp, #16]
 8003aee:	6018      	str	r0, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	1f1c      	subs	r4, r3, #4
 8003af4:	9304      	str	r3, [sp, #16]
 8003af6:	465b      	mov	r3, fp
 8003af8:	9808      	ldr	r0, [sp, #32]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	f7fc fbb8 	bl	8000270 <__aeabi_fadd>
 8003b00:	4643      	mov	r3, r8
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	f7fc fbb4 	bl	8000270 <__aeabi_fadd>
 8003b08:	4653      	mov	r3, sl
 8003b0a:	6020      	str	r0, [r4, #0]
 8003b0c:	685c      	ldr	r4, [r3, #4]
 8003b0e:	464b      	mov	r3, r9
 8003b10:	685d      	ldr	r5, [r3, #4]
 8003b12:	1c20      	adds	r0, r4, #0
 8003b14:	1c29      	adds	r1, r5, #0
 8003b16:	f7fc fbab 	bl	8000270 <__aeabi_fadd>
 8003b1a:	1c29      	adds	r1, r5, #0
 8003b1c:	9008      	str	r0, [sp, #32]
 8003b1e:	1c20      	adds	r0, r4, #0
 8003b20:	f7fc ffa0 	bl	8000a64 <__aeabi_fsub>
 8003b24:	4653      	mov	r3, sl
 8003b26:	689c      	ldr	r4, [r3, #8]
 8003b28:	464b      	mov	r3, r9
 8003b2a:	689d      	ldr	r5, [r3, #8]
 8003b2c:	1c06      	adds	r6, r0, #0
 8003b2e:	1c29      	adds	r1, r5, #0
 8003b30:	1c20      	adds	r0, r4, #0
 8003b32:	f7fc fb9d 	bl	8000270 <__aeabi_fadd>
 8003b36:	1c29      	adds	r1, r5, #0
 8003b38:	9009      	str	r0, [sp, #36]	; 0x24
 8003b3a:	1c20      	adds	r0, r4, #0
 8003b3c:	f7fc ff92 	bl	8000a64 <__aeabi_fsub>
 8003b40:	9b05      	ldr	r3, [sp, #20]
 8003b42:	9c02      	ldr	r4, [sp, #8]
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	6821      	ldr	r1, [r4, #0]
 8003b48:	900d      	str	r0, [sp, #52]	; 0x34
 8003b4a:	1c28      	adds	r0, r5, #0
 8003b4c:	9106      	str	r1, [sp, #24]
 8003b4e:	f7fc ff89 	bl	8000a64 <__aeabi_fsub>
 8003b52:	1c01      	adds	r1, r0, #0
 8003b54:	9017      	str	r0, [sp, #92]	; 0x5c
 8003b56:	1c30      	adds	r0, r6, #0
 8003b58:	9616      	str	r6, [sp, #88]	; 0x58
 8003b5a:	f7fc fb89 	bl	8000270 <__aeabi_fadd>
 8003b5e:	9b01      	ldr	r3, [sp, #4]
 8003b60:	9402      	str	r4, [sp, #8]
 8003b62:	681f      	ldr	r7, [r3, #0]
 8003b64:	3c04      	subs	r4, #4
 8003b66:	6826      	ldr	r6, [r4, #0]
 8003b68:	1c39      	adds	r1, r7, #0
 8003b6a:	9018      	str	r0, [sp, #96]	; 0x60
 8003b6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b6e:	f7fc ff79 	bl	8000a64 <__aeabi_fsub>
 8003b72:	1c31      	adds	r1, r6, #0
 8003b74:	f7fc fb7c 	bl	8000270 <__aeabi_fadd>
 8003b78:	1c39      	adds	r1, r7, #0
 8003b7a:	900e      	str	r0, [sp, #56]	; 0x38
 8003b7c:	9808      	ldr	r0, [sp, #32]
 8003b7e:	f7fc ff71 	bl	8000a64 <__aeabi_fsub>
 8003b82:	1c31      	adds	r1, r6, #0
 8003b84:	f7fc ff6e 	bl	8000a64 <__aeabi_fsub>
 8003b88:	1c29      	adds	r1, r5, #0
 8003b8a:	9019      	str	r0, [sp, #100]	; 0x64
 8003b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b8e:	f7fc ff69 	bl	8000a64 <__aeabi_fsub>
 8003b92:	9906      	ldr	r1, [sp, #24]
 8003b94:	f7fc ff66 	bl	8000a64 <__aeabi_fsub>
 8003b98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003b9a:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003b9e:	f7fc ff61 	bl	8000a64 <__aeabi_fsub>
 8003ba2:	1c39      	adds	r1, r7, #0
 8003ba4:	9016      	str	r0, [sp, #88]	; 0x58
 8003ba6:	1c30      	adds	r0, r6, #0
 8003ba8:	f7fc ff5c 	bl	8000a64 <__aeabi_fsub>
 8003bac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bae:	f7fc ff59 	bl	8000a64 <__aeabi_fsub>
 8003bb2:	1c29      	adds	r1, r5, #0
 8003bb4:	900d      	str	r0, [sp, #52]	; 0x34
 8003bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb8:	f7fc fb5a 	bl	8000270 <__aeabi_fadd>
 8003bbc:	9906      	ldr	r1, [sp, #24]
 8003bbe:	f7fc fb57 	bl	8000270 <__aeabi_fadd>
 8003bc2:	4655      	mov	r5, sl
 8003bc4:	9901      	ldr	r1, [sp, #4]
 8003bc6:	60a8      	str	r0, [r5, #8]
 8003bc8:	6809      	ldr	r1, [r1, #0]
 8003bca:	9808      	ldr	r0, [sp, #32]
 8003bcc:	f7fc fb50 	bl	8000270 <__aeabi_fadd>
 8003bd0:	6821      	ldr	r1, [r4, #0]
 8003bd2:	f7fc fb4d 	bl	8000270 <__aeabi_fadd>
 8003bd6:	6068      	str	r0, [r5, #4]
 8003bd8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003bda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bdc:	682c      	ldr	r4, [r5, #0]
 8003bde:	3508      	adds	r5, #8
 8003be0:	1f2b      	subs	r3, r5, #4
 8003be2:	1c21      	adds	r1, r4, #0
 8003be4:	9513      	str	r5, [sp, #76]	; 0x4c
 8003be6:	681d      	ldr	r5, [r3, #0]
 8003be8:	f7fc fe1c 	bl	8000824 <__aeabi_fmul>
 8003bec:	1c29      	adds	r1, r5, #0
 8003bee:	1c06      	adds	r6, r0, #0
 8003bf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003bf2:	f7fc fe17 	bl	8000824 <__aeabi_fmul>
 8003bf6:	1c01      	adds	r1, r0, #0
 8003bf8:	1c30      	adds	r0, r6, #0
 8003bfa:	f7fc fb39 	bl	8000270 <__aeabi_fadd>
 8003bfe:	465f      	mov	r7, fp
 8003c00:	6038      	str	r0, [r7, #0]
 8003c02:	2708      	movs	r7, #8
 8003c04:	46bc      	mov	ip, r7
 8003c06:	1c21      	adds	r1, r4, #0
 8003c08:	44e3      	add	fp, ip
 8003c0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c0c:	f7fc fe0a 	bl	8000824 <__aeabi_fmul>
 8003c10:	465f      	mov	r7, fp
 8003c12:	1c29      	adds	r1, r5, #0
 8003c14:	1f3e      	subs	r6, r7, #4
 8003c16:	1c07      	adds	r7, r0, #0
 8003c18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c1a:	f7fc fe03 	bl	8000824 <__aeabi_fmul>
 8003c1e:	1c01      	adds	r1, r0, #0
 8003c20:	1c38      	adds	r0, r7, #0
 8003c22:	f7fc ff1f 	bl	8000a64 <__aeabi_fsub>
 8003c26:	1c29      	adds	r1, r5, #0
 8003c28:	6030      	str	r0, [r6, #0]
 8003c2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c2c:	f7fc fdfa 	bl	8000824 <__aeabi_fmul>
 8003c30:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8003c32:	1c06      	adds	r6, r0, #0
 8003c34:	1c21      	adds	r1, r4, #0
 8003c36:	1c38      	adds	r0, r7, #0
 8003c38:	f7fc fdf4 	bl	8000824 <__aeabi_fmul>
 8003c3c:	1c01      	adds	r1, r0, #0
 8003c3e:	1c30      	adds	r0, r6, #0
 8003c40:	f7fc ff10 	bl	8000a64 <__aeabi_fsub>
 8003c44:	9e05      	ldr	r6, [sp, #20]
 8003c46:	1c29      	adds	r1, r5, #0
 8003c48:	6030      	str	r0, [r6, #0]
 8003c4a:	3e08      	subs	r6, #8
 8003c4c:	1c38      	adds	r0, r7, #0
 8003c4e:	9605      	str	r6, [sp, #20]
 8003c50:	f7fc fde8 	bl	8000824 <__aeabi_fmul>
 8003c54:	1c21      	adds	r1, r4, #0
 8003c56:	1c05      	adds	r5, r0, #0
 8003c58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c5a:	f7fc fde3 	bl	8000824 <__aeabi_fmul>
 8003c5e:	1c01      	adds	r1, r0, #0
 8003c60:	1c28      	adds	r0, r5, #0
 8003c62:	f7fc fb05 	bl	8000270 <__aeabi_fadd>
 8003c66:	9901      	ldr	r1, [sp, #4]
 8003c68:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003c6a:	6008      	str	r0, [r1, #0]
 8003c6c:	6834      	ldr	r4, [r6, #0]
 8003c6e:	6875      	ldr	r5, [r6, #4]
 8003c70:	1c21      	adds	r1, r4, #0
 8003c72:	3610      	adds	r6, #16
 8003c74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003c76:	9610      	str	r6, [sp, #64]	; 0x40
 8003c78:	f7fc fdd4 	bl	8000824 <__aeabi_fmul>
 8003c7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003c7e:	1c06      	adds	r6, r0, #0
 8003c80:	1c29      	adds	r1, r5, #0
 8003c82:	1c38      	adds	r0, r7, #0
 8003c84:	f7fc fdce 	bl	8000824 <__aeabi_fmul>
 8003c88:	1c01      	adds	r1, r0, #0
 8003c8a:	1c30      	adds	r0, r6, #0
 8003c8c:	f7fc faf0 	bl	8000270 <__aeabi_fadd>
 8003c90:	9a03      	ldr	r2, [sp, #12]
 8003c92:	1c21      	adds	r1, r4, #0
 8003c94:	6010      	str	r0, [r2, #0]
 8003c96:	3208      	adds	r2, #8
 8003c98:	1c38      	adds	r0, r7, #0
 8003c9a:	1f16      	subs	r6, r2, #4
 8003c9c:	9203      	str	r2, [sp, #12]
 8003c9e:	f7fc fdc1 	bl	8000824 <__aeabi_fmul>
 8003ca2:	1c29      	adds	r1, r5, #0
 8003ca4:	1c07      	adds	r7, r0, #0
 8003ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ca8:	f7fc fdbc 	bl	8000824 <__aeabi_fmul>
 8003cac:	1c01      	adds	r1, r0, #0
 8003cae:	1c38      	adds	r0, r7, #0
 8003cb0:	f7fc fed8 	bl	8000a64 <__aeabi_fsub>
 8003cb4:	6030      	str	r0, [r6, #0]
 8003cb6:	2680      	movs	r6, #128	; 0x80
 8003cb8:	0636      	lsls	r6, r6, #24
 8003cba:	46b4      	mov	ip, r6
 8003cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003cbe:	1c21      	adds	r1, r4, #0
 8003cc0:	4462      	add	r2, ip
 8003cc2:	0010      	movs	r0, r2
 8003cc4:	f7fc fdae 	bl	8000824 <__aeabi_fmul>
 8003cc8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8003cca:	1c06      	adds	r6, r0, #0
 8003ccc:	1c29      	adds	r1, r5, #0
 8003cce:	1c38      	adds	r0, r7, #0
 8003cd0:	f7fc fda8 	bl	8000824 <__aeabi_fmul>
 8003cd4:	1c01      	adds	r1, r0, #0
 8003cd6:	1c30      	adds	r0, r6, #0
 8003cd8:	f7fc fec4 	bl	8000a64 <__aeabi_fsub>
 8003cdc:	464a      	mov	r2, r9
 8003cde:	1c29      	adds	r1, r5, #0
 8003ce0:	6090      	str	r0, [r2, #8]
 8003ce2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ce4:	f7fc fd9e 	bl	8000824 <__aeabi_fmul>
 8003ce8:	1c21      	adds	r1, r4, #0
 8003cea:	1c05      	adds	r5, r0, #0
 8003cec:	1c38      	adds	r0, r7, #0
 8003cee:	f7fc fd99 	bl	8000824 <__aeabi_fmul>
 8003cf2:	1c01      	adds	r1, r0, #0
 8003cf4:	1c28      	adds	r0, r5, #0
 8003cf6:	f7fc feb5 	bl	8000a64 <__aeabi_fsub>
 8003cfa:	464a      	mov	r2, r9
 8003cfc:	6050      	str	r0, [r2, #4]
 8003cfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d00:	9807      	ldr	r0, [sp, #28]
 8003d02:	6814      	ldr	r4, [r2, #0]
 8003d04:	6855      	ldr	r5, [r2, #4]
 8003d06:	1c21      	adds	r1, r4, #0
 8003d08:	3218      	adds	r2, #24
 8003d0a:	9211      	str	r2, [sp, #68]	; 0x44
 8003d0c:	f7fc fd8a 	bl	8000824 <__aeabi_fmul>
 8003d10:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8003d12:	1c06      	adds	r6, r0, #0
 8003d14:	1c29      	adds	r1, r5, #0
 8003d16:	1c38      	adds	r0, r7, #0
 8003d18:	f7fc fd84 	bl	8000824 <__aeabi_fmul>
 8003d1c:	1c01      	adds	r1, r0, #0
 8003d1e:	1c30      	adds	r0, r6, #0
 8003d20:	f7fc faa6 	bl	8000270 <__aeabi_fadd>
 8003d24:	4642      	mov	r2, r8
 8003d26:	6010      	str	r0, [r2, #0]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	4694      	mov	ip, r2
 8003d2c:	44e0      	add	r8, ip
 8003d2e:	4642      	mov	r2, r8
 8003d30:	1c21      	adds	r1, r4, #0
 8003d32:	1c38      	adds	r0, r7, #0
 8003d34:	1f16      	subs	r6, r2, #4
 8003d36:	f7fc fd75 	bl	8000824 <__aeabi_fmul>
 8003d3a:	1c29      	adds	r1, r5, #0
 8003d3c:	1c07      	adds	r7, r0, #0
 8003d3e:	9807      	ldr	r0, [sp, #28]
 8003d40:	f7fc fd70 	bl	8000824 <__aeabi_fmul>
 8003d44:	1c01      	adds	r1, r0, #0
 8003d46:	1c38      	adds	r0, r7, #0
 8003d48:	f7fc fe8c 	bl	8000a64 <__aeabi_fsub>
 8003d4c:	1c29      	adds	r1, r5, #0
 8003d4e:	6030      	str	r0, [r6, #0]
 8003d50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d52:	f7fc fd67 	bl	8000824 <__aeabi_fmul>
 8003d56:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8003d58:	1c06      	adds	r6, r0, #0
 8003d5a:	1c21      	adds	r1, r4, #0
 8003d5c:	1c38      	adds	r0, r7, #0
 8003d5e:	f7fc fd61 	bl	8000824 <__aeabi_fmul>
 8003d62:	1c01      	adds	r1, r0, #0
 8003d64:	1c30      	adds	r0, r6, #0
 8003d66:	f7fc fe7d 	bl	8000a64 <__aeabi_fsub>
 8003d6a:	9b02      	ldr	r3, [sp, #8]
 8003d6c:	1c29      	adds	r1, r5, #0
 8003d6e:	6018      	str	r0, [r3, #0]
 8003d70:	3b08      	subs	r3, #8
 8003d72:	1c38      	adds	r0, r7, #0
 8003d74:	001e      	movs	r6, r3
 8003d76:	9302      	str	r3, [sp, #8]
 8003d78:	f7fc fd54 	bl	8000824 <__aeabi_fmul>
 8003d7c:	1c21      	adds	r1, r4, #0
 8003d7e:	1c05      	adds	r5, r0, #0
 8003d80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d82:	f7fc fd4f 	bl	8000824 <__aeabi_fmul>
 8003d86:	1c01      	adds	r1, r0, #0
 8003d88:	1c28      	adds	r0, r5, #0
 8003d8a:	f7fc fa71 	bl	8000270 <__aeabi_fadd>
 8003d8e:	6070      	str	r0, [r6, #4]
 8003d90:	2008      	movs	r0, #8
 8003d92:	4240      	negs	r0, r0
 8003d94:	4684      	mov	ip, r0
 8003d96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d98:	9901      	ldr	r1, [sp, #4]
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	1809      	adds	r1, r1, r0
 8003d9e:	9212      	str	r2, [sp, #72]	; 0x48
 8003da0:	44e2      	add	sl, ip
 8003da2:	44e1      	add	r9, ip
 8003da4:	9101      	str	r1, [sp, #4]
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d000      	beq.n	8003dac <arm_cfft_radix8by4_f32+0x4f0>
 8003daa:	e644      	b.n	8003a36 <arm_cfft_radix8by4_f32+0x17a>
 8003dac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003dae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003db0:	468c      	mov	ip, r1
 8003db2:	00da      	lsls	r2, r3, #3
 8003db4:	4494      	add	ip, r2
 8003db6:	4661      	mov	r1, ip
 8003db8:	911e      	str	r1, [sp, #120]	; 0x78
 8003dba:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003dbc:	9824      	ldr	r0, [sp, #144]	; 0x90
 8003dbe:	468c      	mov	ip, r1
 8003dc0:	4494      	add	ip, r2
 8003dc2:	4661      	mov	r1, ip
 8003dc4:	9123      	str	r1, [sp, #140]	; 0x8c
 8003dc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003dc8:	468c      	mov	ip, r1
 8003dca:	4494      	add	ip, r2
 8003dcc:	4661      	mov	r1, ip
 8003dce:	4684      	mov	ip, r0
 8003dd0:	911a      	str	r1, [sp, #104]	; 0x68
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	449c      	add	ip, r3
 8003dd8:	4663      	mov	r3, ip
 8003dda:	9324      	str	r3, [sp, #144]	; 0x90
 8003ddc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003dde:	469c      	mov	ip, r3
 8003de0:	4494      	add	ip, r2
 8003de2:	4663      	mov	r3, ip
 8003de4:	468c      	mov	ip, r1
 8003de6:	931c      	str	r3, [sp, #112]	; 0x70
 8003de8:	004b      	lsls	r3, r1, #1
 8003dea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003dec:	4463      	add	r3, ip
 8003dee:	468c      	mov	ip, r1
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	449c      	add	ip, r3
 8003df4:	4663      	mov	r3, ip
 8003df6:	9322      	str	r3, [sp, #136]	; 0x88
 8003df8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dfa:	469c      	mov	ip, r3
 8003dfc:	4494      	add	ip, r2
 8003dfe:	4663      	mov	r3, ip
 8003e00:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e02:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8003e04:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8003e06:	6834      	ldr	r4, [r6, #0]
 8003e08:	683d      	ldr	r5, [r7, #0]
 8003e0a:	1c20      	adds	r0, r4, #0
 8003e0c:	1c29      	adds	r1, r5, #0
 8003e0e:	f7fc fa2f 	bl	8000270 <__aeabi_fadd>
 8003e12:	1c29      	adds	r1, r5, #0
 8003e14:	9001      	str	r0, [sp, #4]
 8003e16:	1c20      	adds	r0, r4, #0
 8003e18:	f7fc fe24 	bl	8000a64 <__aeabi_fsub>
 8003e1c:	6874      	ldr	r4, [r6, #4]
 8003e1e:	687d      	ldr	r5, [r7, #4]
 8003e20:	4683      	mov	fp, r0
 8003e22:	1c29      	adds	r1, r5, #0
 8003e24:	1c20      	adds	r0, r4, #0
 8003e26:	961e      	str	r6, [sp, #120]	; 0x78
 8003e28:	971c      	str	r7, [sp, #112]	; 0x70
 8003e2a:	f7fc fa21 	bl	8000270 <__aeabi_fadd>
 8003e2e:	1c29      	adds	r1, r5, #0
 8003e30:	4681      	mov	r9, r0
 8003e32:	1c20      	adds	r0, r4, #0
 8003e34:	f7fc fe16 	bl	8000a64 <__aeabi_fsub>
 8003e38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8003e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e3c:	6867      	ldr	r7, [r4, #4]
 8003e3e:	685e      	ldr	r6, [r3, #4]
 8003e40:	4682      	mov	sl, r0
 8003e42:	1c39      	adds	r1, r7, #0
 8003e44:	4658      	mov	r0, fp
 8003e46:	f7fc fa13 	bl	8000270 <__aeabi_fadd>
 8003e4a:	1c31      	adds	r1, r6, #0
 8003e4c:	f7fc fe0a 	bl	8000a64 <__aeabi_fsub>
 8003e50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	941a      	str	r4, [sp, #104]	; 0x68
 8003e56:	6814      	ldr	r4, [r2, #0]
 8003e58:	9002      	str	r0, [sp, #8]
 8003e5a:	1c29      	adds	r1, r5, #0
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	f7fc fe01 	bl	8000a64 <__aeabi_fsub>
 8003e62:	1c21      	adds	r1, r4, #0
 8003e64:	f7fc fa04 	bl	8000270 <__aeabi_fadd>
 8003e68:	1c29      	adds	r1, r5, #0
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	9801      	ldr	r0, [sp, #4]
 8003e6e:	f7fc fdf9 	bl	8000a64 <__aeabi_fsub>
 8003e72:	1c21      	adds	r1, r4, #0
 8003e74:	f7fc fdf6 	bl	8000a64 <__aeabi_fsub>
 8003e78:	1c39      	adds	r1, r7, #0
 8003e7a:	9003      	str	r0, [sp, #12]
 8003e7c:	4648      	mov	r0, r9
 8003e7e:	f7fc fdf1 	bl	8000a64 <__aeabi_fsub>
 8003e82:	1c31      	adds	r1, r6, #0
 8003e84:	f7fc fdee 	bl	8000a64 <__aeabi_fsub>
 8003e88:	1c39      	adds	r1, r7, #0
 8003e8a:	9004      	str	r0, [sp, #16]
 8003e8c:	4658      	mov	r0, fp
 8003e8e:	f7fc fde9 	bl	8000a64 <__aeabi_fsub>
 8003e92:	1c31      	adds	r1, r6, #0
 8003e94:	f7fc f9ec 	bl	8000270 <__aeabi_fadd>
 8003e98:	1c29      	adds	r1, r5, #0
 8003e9a:	1c07      	adds	r7, r0, #0
 8003e9c:	4650      	mov	r0, sl
 8003e9e:	f7fc f9e7 	bl	8000270 <__aeabi_fadd>
 8003ea2:	1c21      	adds	r1, r4, #0
 8003ea4:	f7fc fdde 	bl	8000a64 <__aeabi_fsub>
 8003ea8:	1c29      	adds	r1, r5, #0
 8003eaa:	1c06      	adds	r6, r0, #0
 8003eac:	9801      	ldr	r0, [sp, #4]
 8003eae:	f7fc f9df 	bl	8000270 <__aeabi_fadd>
 8003eb2:	1c21      	adds	r1, r4, #0
 8003eb4:	f7fc f9dc 	bl	8000270 <__aeabi_fadd>
 8003eb8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8003eba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003ebc:	6028      	str	r0, [r5, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	4648      	mov	r0, r9
 8003ec2:	f7fc f9d5 	bl	8000270 <__aeabi_fadd>
 8003ec6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003ec8:	6851      	ldr	r1, [r2, #4]
 8003eca:	f7fc f9d1 	bl	8000270 <__aeabi_fadd>
 8003ece:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003ed0:	6068      	str	r0, [r5, #4]
 8003ed2:	9b02      	ldr	r3, [sp, #8]
 8003ed4:	680d      	ldr	r5, [r1, #0]
 8003ed6:	684c      	ldr	r4, [r1, #4]
 8003ed8:	1c18      	adds	r0, r3, #0
 8003eda:	1c29      	adds	r1, r5, #0
 8003edc:	469b      	mov	fp, r3
 8003ede:	f7fc fca1 	bl	8000824 <__aeabi_fmul>
 8003ee2:	1c21      	adds	r1, r4, #0
 8003ee4:	4681      	mov	r9, r0
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f7fc fc9c 	bl	8000824 <__aeabi_fmul>
 8003eec:	1c01      	adds	r1, r0, #0
 8003eee:	4648      	mov	r0, r9
 8003ef0:	f7fc f9be 	bl	8000270 <__aeabi_fadd>
 8003ef4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003ef6:	1c29      	adds	r1, r5, #0
 8003ef8:	6018      	str	r0, [r3, #0]
 8003efa:	4640      	mov	r0, r8
 8003efc:	f7fc fc92 	bl	8000824 <__aeabi_fmul>
 8003f00:	1c21      	adds	r1, r4, #0
 8003f02:	1c05      	adds	r5, r0, #0
 8003f04:	4658      	mov	r0, fp
 8003f06:	f7fc fc8d 	bl	8000824 <__aeabi_fmul>
 8003f0a:	1c01      	adds	r1, r0, #0
 8003f0c:	1c28      	adds	r0, r5, #0
 8003f0e:	f7fc fda9 	bl	8000a64 <__aeabi_fsub>
 8003f12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f14:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003f16:	6058      	str	r0, [r3, #4]
 8003f18:	680d      	ldr	r5, [r1, #0]
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	684c      	ldr	r4, [r1, #4]
 8003f1e:	1c18      	adds	r0, r3, #0
 8003f20:	1c29      	adds	r1, r5, #0
 8003f22:	469a      	mov	sl, r3
 8003f24:	f7fc fc7e 	bl	8000824 <__aeabi_fmul>
 8003f28:	9b04      	ldr	r3, [sp, #16]
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	1c21      	adds	r1, r4, #0
 8003f2e:	1c18      	adds	r0, r3, #0
 8003f30:	4699      	mov	r9, r3
 8003f32:	f7fc fc77 	bl	8000824 <__aeabi_fmul>
 8003f36:	1c01      	adds	r1, r0, #0
 8003f38:	4640      	mov	r0, r8
 8003f3a:	f7fc f999 	bl	8000270 <__aeabi_fadd>
 8003f3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f40:	6008      	str	r0, [r1, #0]
 8003f42:	1c29      	adds	r1, r5, #0
 8003f44:	4648      	mov	r0, r9
 8003f46:	f7fc fc6d 	bl	8000824 <__aeabi_fmul>
 8003f4a:	1c21      	adds	r1, r4, #0
 8003f4c:	1c05      	adds	r5, r0, #0
 8003f4e:	4650      	mov	r0, sl
 8003f50:	f7fc fc68 	bl	8000824 <__aeabi_fmul>
 8003f54:	1c01      	adds	r1, r0, #0
 8003f56:	1c28      	adds	r0, r5, #0
 8003f58:	f7fc fd84 	bl	8000a64 <__aeabi_fsub>
 8003f5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f5e:	6048      	str	r0, [r1, #4]
 8003f60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003f62:	1c38      	adds	r0, r7, #0
 8003f64:	680d      	ldr	r5, [r1, #0]
 8003f66:	684c      	ldr	r4, [r1, #4]
 8003f68:	1c29      	adds	r1, r5, #0
 8003f6a:	f7fc fc5b 	bl	8000824 <__aeabi_fmul>
 8003f6e:	1c21      	adds	r1, r4, #0
 8003f70:	4680      	mov	r8, r0
 8003f72:	1c30      	adds	r0, r6, #0
 8003f74:	f7fc fc56 	bl	8000824 <__aeabi_fmul>
 8003f78:	1c01      	adds	r1, r0, #0
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	f7fc f978 	bl	8000270 <__aeabi_fadd>
 8003f80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003f82:	1c29      	adds	r1, r5, #0
 8003f84:	6010      	str	r0, [r2, #0]
 8003f86:	1c30      	adds	r0, r6, #0
 8003f88:	f7fc fc4c 	bl	8000824 <__aeabi_fmul>
 8003f8c:	1c21      	adds	r1, r4, #0
 8003f8e:	1c05      	adds	r5, r0, #0
 8003f90:	1c38      	adds	r0, r7, #0
 8003f92:	f7fc fc47 	bl	8000824 <__aeabi_fmul>
 8003f96:	1c01      	adds	r1, r0, #0
 8003f98:	1c28      	adds	r0, r5, #0
 8003f9a:	f7fc fd63 	bl	8000a64 <__aeabi_fsub>
 8003f9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003fa0:	466b      	mov	r3, sp
 8003fa2:	6050      	str	r0, [r2, #4]
 8003fa4:	2294      	movs	r2, #148	; 0x94
 8003fa6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	881c      	ldrh	r4, [r3, #0]
 8003fac:	686b      	ldr	r3, [r5, #4]
 8003fae:	0021      	movs	r1, r4
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9a01      	ldr	r2, [sp, #4]
 8003fb4:	9820      	ldr	r0, [sp, #128]	; 0x80
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	f000 f89a 	bl	80040f0 <arm_radix8_butterfly_f32>
 8003fbc:	686b      	ldr	r3, [r5, #4]
 8003fbe:	0021      	movs	r1, r4
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	9a01      	ldr	r2, [sp, #4]
 8003fc4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	f000 f892 	bl	80040f0 <arm_radix8_butterfly_f32>
 8003fcc:	686b      	ldr	r3, [r5, #4]
 8003fce:	0021      	movs	r1, r4
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	9a01      	ldr	r2, [sp, #4]
 8003fd4:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	f000 f88a 	bl	80040f0 <arm_radix8_butterfly_f32>
 8003fdc:	686a      	ldr	r2, [r5, #4]
 8003fde:	2304      	movs	r3, #4
 8003fe0:	0021      	movs	r1, r4
 8003fe2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8003fe4:	f000 f884 	bl	80040f0 <arm_radix8_butterfly_f32>
 8003fe8:	b029      	add	sp, #164	; 0xa4
 8003fea:	bc3c      	pop	{r2, r3, r4, r5}
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	46a2      	mov	sl, r4
 8003ff2:	46ab      	mov	fp, r5
 8003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)

08003ff8 <arm_cfft_f32>:
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	4647      	mov	r7, r8
 8003ffc:	b480      	push	{r7}
 8003ffe:	0006      	movs	r6, r0
 8004000:	000c      	movs	r4, r1
 8004002:	0017      	movs	r7, r2
 8004004:	4698      	mov	r8, r3
 8004006:	8805      	ldrh	r5, [r0, #0]
 8004008:	2a01      	cmp	r2, #1
 800400a:	d059      	beq.n	80040c0 <arm_cfft_f32+0xc8>
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	429d      	cmp	r5, r3
 8004012:	d049      	beq.n	80040a8 <arm_cfft_f32+0xb0>
 8004014:	d93c      	bls.n	8004090 <arm_cfft_f32+0x98>
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	429d      	cmp	r5, r3
 800401c:	d03f      	beq.n	800409e <arm_cfft_f32+0xa6>
 800401e:	d95e      	bls.n	80040de <arm_cfft_f32+0xe6>
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	429d      	cmp	r5, r3
 8004026:	d03f      	beq.n	80040a8 <arm_cfft_f32+0xb0>
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	429d      	cmp	r5, r3
 800402e:	d13f      	bne.n	80040b0 <arm_cfft_f32+0xb8>
 8004030:	2301      	movs	r3, #1
 8004032:	6872      	ldr	r2, [r6, #4]
 8004034:	0029      	movs	r1, r5
 8004036:	0020      	movs	r0, r4
 8004038:	f000 f85a 	bl	80040f0 <arm_radix8_butterfly_f32>
 800403c:	4643      	mov	r3, r8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d039      	beq.n	80040b6 <arm_cfft_f32+0xbe>
 8004042:	68b2      	ldr	r2, [r6, #8]
 8004044:	89b1      	ldrh	r1, [r6, #12]
 8004046:	0020      	movs	r0, r4
 8004048:	f7fc f85e 	bl	8000108 <arm_bitreversal_32>
 800404c:	2f01      	cmp	r7, #1
 800404e:	d134      	bne.n	80040ba <arm_cfft_f32+0xc2>
 8004050:	0028      	movs	r0, r5
 8004052:	f7fc fea3 	bl	8000d9c <__aeabi_ui2f>
 8004056:	1c01      	adds	r1, r0, #0
 8004058:	20fe      	movs	r0, #254	; 0xfe
 800405a:	0580      	lsls	r0, r0, #22
 800405c:	f7fc fa9a 	bl	8000594 <__aeabi_fdiv>
 8004060:	1c07      	adds	r7, r0, #0
 8004062:	2d00      	cmp	r5, #0
 8004064:	d029      	beq.n	80040ba <arm_cfft_f32+0xc2>
 8004066:	2600      	movs	r6, #0
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	1c39      	adds	r1, r7, #0
 800406c:	f7fc fbda 	bl	8000824 <__aeabi_fmul>
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	0612      	lsls	r2, r2, #24
 8004074:	4694      	mov	ip, r2
 8004076:	6863      	ldr	r3, [r4, #4]
 8004078:	6020      	str	r0, [r4, #0]
 800407a:	4463      	add	r3, ip
 800407c:	0018      	movs	r0, r3
 800407e:	1c39      	adds	r1, r7, #0
 8004080:	f7fc fbd0 	bl	8000824 <__aeabi_fmul>
 8004084:	3601      	adds	r6, #1
 8004086:	6060      	str	r0, [r4, #4]
 8004088:	3408      	adds	r4, #8
 800408a:	42b5      	cmp	r5, r6
 800408c:	d8ec      	bhi.n	8004068 <arm_cfft_f32+0x70>
 800408e:	e014      	b.n	80040ba <arm_cfft_f32+0xc2>
 8004090:	2d20      	cmp	r5, #32
 8004092:	d009      	beq.n	80040a8 <arm_cfft_f32+0xb0>
 8004094:	d928      	bls.n	80040e8 <arm_cfft_f32+0xf0>
 8004096:	2d40      	cmp	r5, #64	; 0x40
 8004098:	d0ca      	beq.n	8004030 <arm_cfft_f32+0x38>
 800409a:	2d80      	cmp	r5, #128	; 0x80
 800409c:	d108      	bne.n	80040b0 <arm_cfft_f32+0xb8>
 800409e:	0021      	movs	r1, r4
 80040a0:	0030      	movs	r0, r6
 80040a2:	f7ff fac7 	bl	8003634 <arm_cfft_radix8by2_f32>
 80040a6:	e003      	b.n	80040b0 <arm_cfft_f32+0xb8>
 80040a8:	0021      	movs	r1, r4
 80040aa:	0030      	movs	r0, r6
 80040ac:	f7ff fc06 	bl	80038bc <arm_cfft_radix8by4_f32>
 80040b0:	4643      	mov	r3, r8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1c5      	bne.n	8004042 <arm_cfft_f32+0x4a>
 80040b6:	2f01      	cmp	r7, #1
 80040b8:	d0ca      	beq.n	8004050 <arm_cfft_f32+0x58>
 80040ba:	bc04      	pop	{r2}
 80040bc:	4690      	mov	r8, r2
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c0:	1d0b      	adds	r3, r1, #4
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	d0a2      	beq.n	800400c <arm_cfft_f32+0x14>
 80040c6:	2100      	movs	r1, #0
 80040c8:	2080      	movs	r0, #128	; 0x80
 80040ca:	0600      	lsls	r0, r0, #24
 80040cc:	4684      	mov	ip, r0
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	3101      	adds	r1, #1
 80040d2:	4462      	add	r2, ip
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	428d      	cmp	r5, r1
 80040da:	d8f5      	bhi.n	80040c8 <arm_cfft_f32+0xd0>
 80040dc:	e796      	b.n	800400c <arm_cfft_f32+0x14>
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	429d      	cmp	r5, r3
 80040e4:	d0a4      	beq.n	8004030 <arm_cfft_f32+0x38>
 80040e6:	e7e3      	b.n	80040b0 <arm_cfft_f32+0xb8>
 80040e8:	2d10      	cmp	r5, #16
 80040ea:	d0d8      	beq.n	800409e <arm_cfft_f32+0xa6>
 80040ec:	e7e0      	b.n	80040b0 <arm_cfft_f32+0xb8>
 80040ee:	46c0      	nop			; (mov r8, r8)

080040f0 <arm_radix8_butterfly_f32>:
 80040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f2:	4644      	mov	r4, r8
 80040f4:	465f      	mov	r7, fp
 80040f6:	4656      	mov	r6, sl
 80040f8:	464d      	mov	r5, r9
 80040fa:	b4f0      	push	{r4, r5, r6, r7}
 80040fc:	0004      	movs	r4, r0
 80040fe:	b0b9      	sub	sp, #228	; 0xe4
 8004100:	9036      	str	r0, [sp, #216]	; 0xd8
 8004102:	911a      	str	r1, [sp, #104]	; 0x68
 8004104:	9237      	str	r2, [sp, #220]	; 0xdc
 8004106:	9310      	str	r3, [sp, #64]	; 0x40
 8004108:	9118      	str	r1, [sp, #96]	; 0x60
 800410a:	08cb      	lsrs	r3, r1, #3
 800410c:	001a      	movs	r2, r3
 800410e:	4694      	mov	ip, r2
 8004110:	932e      	str	r3, [sp, #184]	; 0xb8
 8004112:	00cb      	lsls	r3, r1, #3
 8004114:	9319      	str	r3, [sp, #100]	; 0x64
 8004116:	0011      	movs	r1, r2
 8004118:	0053      	lsls	r3, r2, #1
 800411a:	9311      	str	r3, [sp, #68]	; 0x44
 800411c:	4463      	add	r3, ip
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	46a0      	mov	r8, r4
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	2300      	movs	r3, #0
 8004128:	46a3      	mov	fp, r4
 800412a:	18a6      	adds	r6, r4, r2
 800412c:	00ca      	lsls	r2, r1, #3
 800412e:	9205      	str	r2, [sp, #20]
 8004130:	3204      	adds	r2, #4
 8004132:	4490      	add	r8, r2
 8004134:	010a      	lsls	r2, r1, #4
 8004136:	9202      	str	r2, [sp, #8]
 8004138:	9309      	str	r3, [sp, #36]	; 0x24
 800413a:	3204      	adds	r2, #4
 800413c:	4643      	mov	r3, r8
 800413e:	445a      	add	r2, fp
 8004140:	46a2      	mov	sl, r4
 8004142:	46b3      	mov	fp, r6
 8004144:	9200      	str	r2, [sp, #0]
 8004146:	014a      	lsls	r2, r1, #5
 8004148:	9201      	str	r2, [sp, #4]
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	4653      	mov	r3, sl
 800414e:	4652      	mov	r2, sl
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	1c20      	adds	r0, r4, #0
 8004156:	58d5      	ldr	r5, [r2, r3]
 8004158:	1c29      	adds	r1, r5, #0
 800415a:	f7fc f889 	bl	8000270 <__aeabi_fadd>
 800415e:	1c29      	adds	r1, r5, #0
 8004160:	1c06      	adds	r6, r0, #0
 8004162:	1c20      	adds	r0, r4, #0
 8004164:	f7fc fc7e 	bl	8000a64 <__aeabi_fsub>
 8004168:	4651      	mov	r1, sl
 800416a:	465c      	mov	r4, fp
 800416c:	9a05      	ldr	r2, [sp, #20]
 800416e:	9008      	str	r0, [sp, #32]
 8004170:	588d      	ldr	r5, [r1, r2]
 8004172:	9a02      	ldr	r2, [sp, #8]
 8004174:	1c28      	adds	r0, r5, #0
 8004176:	58a7      	ldr	r7, [r4, r2]
 8004178:	1c39      	adds	r1, r7, #0
 800417a:	f7fc f879 	bl	8000270 <__aeabi_fadd>
 800417e:	1c39      	adds	r1, r7, #0
 8004180:	1c04      	adds	r4, r0, #0
 8004182:	1c28      	adds	r0, r5, #0
 8004184:	4655      	mov	r5, sl
 8004186:	f7fc fc6d 	bl	8000a64 <__aeabi_fsub>
 800418a:	4651      	mov	r1, sl
 800418c:	9a02      	ldr	r2, [sp, #8]
 800418e:	9f04      	ldr	r7, [sp, #16]
 8004190:	58ad      	ldr	r5, [r5, r2]
 8004192:	59c9      	ldr	r1, [r1, r7]
 8004194:	900a      	str	r0, [sp, #40]	; 0x28
 8004196:	1c28      	adds	r0, r5, #0
 8004198:	4688      	mov	r8, r1
 800419a:	f7fc f869 	bl	8000270 <__aeabi_fadd>
 800419e:	1c07      	adds	r7, r0, #0
 80041a0:	1c28      	adds	r0, r5, #0
 80041a2:	465d      	mov	r5, fp
 80041a4:	4641      	mov	r1, r8
 80041a6:	f7fc fc5d 	bl	8000a64 <__aeabi_fsub>
 80041aa:	682d      	ldr	r5, [r5, #0]
 80041ac:	9b01      	ldr	r3, [sp, #4]
 80041ae:	46a8      	mov	r8, r5
 80041b0:	465d      	mov	r5, fp
 80041b2:	58ed      	ldr	r5, [r5, r3]
 80041b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80041b6:	1c29      	adds	r1, r5, #0
 80041b8:	4640      	mov	r0, r8
 80041ba:	f7fc f859 	bl	8000270 <__aeabi_fadd>
 80041be:	46a9      	mov	r9, r5
 80041c0:	1c05      	adds	r5, r0, #0
 80041c2:	4649      	mov	r1, r9
 80041c4:	4640      	mov	r0, r8
 80041c6:	f7fc fc4d 	bl	8000a64 <__aeabi_fsub>
 80041ca:	1c39      	adds	r1, r7, #0
 80041cc:	900c      	str	r0, [sp, #48]	; 0x30
 80041ce:	1c30      	adds	r0, r6, #0
 80041d0:	f7fc fc48 	bl	8000a64 <__aeabi_fsub>
 80041d4:	1c39      	adds	r1, r7, #0
 80041d6:	900d      	str	r0, [sp, #52]	; 0x34
 80041d8:	1c30      	adds	r0, r6, #0
 80041da:	f7fc f849 	bl	8000270 <__aeabi_fadd>
 80041de:	1c29      	adds	r1, r5, #0
 80041e0:	1c06      	adds	r6, r0, #0
 80041e2:	1c20      	adds	r0, r4, #0
 80041e4:	f7fc fc3e 	bl	8000a64 <__aeabi_fsub>
 80041e8:	1c29      	adds	r1, r5, #0
 80041ea:	900e      	str	r0, [sp, #56]	; 0x38
 80041ec:	1c20      	adds	r0, r4, #0
 80041ee:	f7fc f83f 	bl	8000270 <__aeabi_fadd>
 80041f2:	1c04      	adds	r4, r0, #0
 80041f4:	1c01      	adds	r1, r0, #0
 80041f6:	1c30      	adds	r0, r6, #0
 80041f8:	f7fc f83a 	bl	8000270 <__aeabi_fadd>
 80041fc:	4655      	mov	r5, sl
 80041fe:	1c21      	adds	r1, r4, #0
 8004200:	6028      	str	r0, [r5, #0]
 8004202:	1c30      	adds	r0, r6, #0
 8004204:	f7fc fc2e 	bl	8000a64 <__aeabi_fsub>
 8004208:	9e01      	ldr	r6, [sp, #4]
 800420a:	9b00      	ldr	r3, [sp, #0]
 800420c:	51a8      	str	r0, [r5, r6]
 800420e:	686c      	ldr	r4, [r5, #4]
 8004210:	9902      	ldr	r1, [sp, #8]
 8004212:	1c20      	adds	r0, r4, #0
 8004214:	585d      	ldr	r5, [r3, r1]
 8004216:	1c29      	adds	r1, r5, #0
 8004218:	f7fc f82a 	bl	8000270 <__aeabi_fadd>
 800421c:	1c29      	adds	r1, r5, #0
 800421e:	1c07      	adds	r7, r0, #0
 8004220:	1c20      	adds	r0, r4, #0
 8004222:	f7fc fc1f 	bl	8000a64 <__aeabi_fsub>
 8004226:	9903      	ldr	r1, [sp, #12]
 8004228:	900f      	str	r0, [sp, #60]	; 0x3c
 800422a:	680c      	ldr	r4, [r1, #0]
 800422c:	598d      	ldr	r5, [r1, r6]
 800422e:	1c20      	adds	r0, r4, #0
 8004230:	1c29      	adds	r1, r5, #0
 8004232:	f7fc f81d 	bl	8000270 <__aeabi_fadd>
 8004236:	1c29      	adds	r1, r5, #0
 8004238:	4681      	mov	r9, r0
 800423a:	1c20      	adds	r0, r4, #0
 800423c:	f7fc fc12 	bl	8000a64 <__aeabi_fsub>
 8004240:	9b00      	ldr	r3, [sp, #0]
 8004242:	9601      	str	r6, [sp, #4]
 8004244:	001a      	movs	r2, r3
 8004246:	681d      	ldr	r5, [r3, #0]
 8004248:	5996      	ldr	r6, [r2, r6]
 800424a:	1c04      	adds	r4, r0, #0
 800424c:	1c31      	adds	r1, r6, #0
 800424e:	1c28      	adds	r0, r5, #0
 8004250:	f7fc f80e 	bl	8000270 <__aeabi_fadd>
 8004254:	4680      	mov	r8, r0
 8004256:	1c28      	adds	r0, r5, #0
 8004258:	465d      	mov	r5, fp
 800425a:	1c31      	adds	r1, r6, #0
 800425c:	f7fc fc02 	bl	8000a64 <__aeabi_fsub>
 8004260:	9903      	ldr	r1, [sp, #12]
 8004262:	9e04      	ldr	r6, [sp, #16]
 8004264:	686d      	ldr	r5, [r5, #4]
 8004266:	598e      	ldr	r6, [r1, r6]
 8004268:	9006      	str	r0, [sp, #24]
 800426a:	1c31      	adds	r1, r6, #0
 800426c:	1c28      	adds	r0, r5, #0
 800426e:	f7fb ffff 	bl	8000270 <__aeabi_fadd>
 8004272:	1c31      	adds	r1, r6, #0
 8004274:	9007      	str	r0, [sp, #28]
 8004276:	1c28      	adds	r0, r5, #0
 8004278:	f7fc fbf4 	bl	8000a64 <__aeabi_fsub>
 800427c:	4641      	mov	r1, r8
 800427e:	1c06      	adds	r6, r0, #0
 8004280:	1c38      	adds	r0, r7, #0
 8004282:	f7fc fbef 	bl	8000a64 <__aeabi_fsub>
 8004286:	4641      	mov	r1, r8
 8004288:	1c05      	adds	r5, r0, #0
 800428a:	1c38      	adds	r0, r7, #0
 800428c:	f7fb fff0 	bl	8000270 <__aeabi_fadd>
 8004290:	9907      	ldr	r1, [sp, #28]
 8004292:	4680      	mov	r8, r0
 8004294:	4648      	mov	r0, r9
 8004296:	f7fc fbe5 	bl	8000a64 <__aeabi_fsub>
 800429a:	9907      	ldr	r1, [sp, #28]
 800429c:	1c07      	adds	r7, r0, #0
 800429e:	4648      	mov	r0, r9
 80042a0:	f7fb ffe6 	bl	8000270 <__aeabi_fadd>
 80042a4:	4681      	mov	r9, r0
 80042a6:	1c01      	adds	r1, r0, #0
 80042a8:	4640      	mov	r0, r8
 80042aa:	f7fb ffe1 	bl	8000270 <__aeabi_fadd>
 80042ae:	4652      	mov	r2, sl
 80042b0:	4649      	mov	r1, r9
 80042b2:	6050      	str	r0, [r2, #4]
 80042b4:	4640      	mov	r0, r8
 80042b6:	f7fc fbd5 	bl	8000a64 <__aeabi_fsub>
 80042ba:	9a00      	ldr	r2, [sp, #0]
 80042bc:	9b02      	ldr	r3, [sp, #8]
 80042be:	1c39      	adds	r1, r7, #0
 80042c0:	50d0      	str	r0, [r2, r3]
 80042c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c4:	1c18      	adds	r0, r3, #0
 80042c6:	4698      	mov	r8, r3
 80042c8:	f7fb ffd2 	bl	8000270 <__aeabi_fadd>
 80042cc:	4651      	mov	r1, sl
 80042ce:	9a02      	ldr	r2, [sp, #8]
 80042d0:	5088      	str	r0, [r1, r2]
 80042d2:	1c39      	adds	r1, r7, #0
 80042d4:	4640      	mov	r0, r8
 80042d6:	f7fc fbc5 	bl	8000a64 <__aeabi_fsub>
 80042da:	4651      	mov	r1, sl
 80042dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042de:	9f04      	ldr	r7, [sp, #16]
 80042e0:	4698      	mov	r8, r3
 80042e2:	51c8      	str	r0, [r1, r7]
 80042e4:	1c19      	adds	r1, r3, #0
 80042e6:	1c28      	adds	r0, r5, #0
 80042e8:	f7fc fbbc 	bl	8000a64 <__aeabi_fsub>
 80042ec:	9f00      	ldr	r7, [sp, #0]
 80042ee:	1c29      	adds	r1, r5, #0
 80042f0:	6038      	str	r0, [r7, #0]
 80042f2:	4640      	mov	r0, r8
 80042f4:	f7fb ffbc 	bl	8000270 <__aeabi_fadd>
 80042f8:	9b01      	ldr	r3, [sp, #4]
 80042fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80042fc:	50f8      	str	r0, [r7, r3]
 80042fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004300:	1c28      	adds	r0, r5, #0
 8004302:	1c19      	adds	r1, r3, #0
 8004304:	4698      	mov	r8, r3
 8004306:	9700      	str	r7, [sp, #0]
 8004308:	f7fc fbac 	bl	8000a64 <__aeabi_fsub>
 800430c:	498c      	ldr	r1, [pc, #560]	; (8004540 <arm_radix8_butterfly_f32+0x450>)
 800430e:	f7fc fa89 	bl	8000824 <__aeabi_fmul>
 8004312:	4641      	mov	r1, r8
 8004314:	4681      	mov	r9, r0
 8004316:	1c28      	adds	r0, r5, #0
 8004318:	f7fb ffaa 	bl	8000270 <__aeabi_fadd>
 800431c:	4988      	ldr	r1, [pc, #544]	; (8004540 <arm_radix8_butterfly_f32+0x450>)
 800431e:	f7fc fa81 	bl	8000824 <__aeabi_fmul>
 8004322:	1c31      	adds	r1, r6, #0
 8004324:	1c05      	adds	r5, r0, #0
 8004326:	1c20      	adds	r0, r4, #0
 8004328:	f7fc fb9c 	bl	8000a64 <__aeabi_fsub>
 800432c:	4984      	ldr	r1, [pc, #528]	; (8004540 <arm_radix8_butterfly_f32+0x450>)
 800432e:	f7fc fa79 	bl	8000824 <__aeabi_fmul>
 8004332:	1c31      	adds	r1, r6, #0
 8004334:	1c07      	adds	r7, r0, #0
 8004336:	1c20      	adds	r0, r4, #0
 8004338:	f7fb ff9a 	bl	8000270 <__aeabi_fadd>
 800433c:	4980      	ldr	r1, [pc, #512]	; (8004540 <arm_radix8_butterfly_f32+0x450>)
 800433e:	f7fc fa71 	bl	8000824 <__aeabi_fmul>
 8004342:	9c08      	ldr	r4, [sp, #32]
 8004344:	4649      	mov	r1, r9
 8004346:	9007      	str	r0, [sp, #28]
 8004348:	1c20      	adds	r0, r4, #0
 800434a:	f7fc fb8b 	bl	8000a64 <__aeabi_fsub>
 800434e:	4649      	mov	r1, r9
 8004350:	4680      	mov	r8, r0
 8004352:	1c20      	adds	r0, r4, #0
 8004354:	f7fb ff8c 	bl	8000270 <__aeabi_fadd>
 8004358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800435a:	1c29      	adds	r1, r5, #0
 800435c:	9008      	str	r0, [sp, #32]
 800435e:	1c18      	adds	r0, r3, #0
 8004360:	4699      	mov	r9, r3
 8004362:	f7fc fb7f 	bl	8000a64 <__aeabi_fsub>
 8004366:	1c29      	adds	r1, r5, #0
 8004368:	1c04      	adds	r4, r0, #0
 800436a:	4648      	mov	r0, r9
 800436c:	f7fb ff80 	bl	8000270 <__aeabi_fadd>
 8004370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004372:	1c06      	adds	r6, r0, #0
 8004374:	1c39      	adds	r1, r7, #0
 8004376:	1c18      	adds	r0, r3, #0
 8004378:	4699      	mov	r9, r3
 800437a:	f7fc fb73 	bl	8000a64 <__aeabi_fsub>
 800437e:	1c39      	adds	r1, r7, #0
 8004380:	1c05      	adds	r5, r0, #0
 8004382:	4648      	mov	r0, r9
 8004384:	f7fb ff74 	bl	8000270 <__aeabi_fadd>
 8004388:	9907      	ldr	r1, [sp, #28]
 800438a:	1c07      	adds	r7, r0, #0
 800438c:	9806      	ldr	r0, [sp, #24]
 800438e:	f7fc fb69 	bl	8000a64 <__aeabi_fsub>
 8004392:	9907      	ldr	r1, [sp, #28]
 8004394:	4681      	mov	r9, r0
 8004396:	9806      	ldr	r0, [sp, #24]
 8004398:	f7fb ff6a 	bl	8000270 <__aeabi_fadd>
 800439c:	1c01      	adds	r1, r0, #0
 800439e:	9006      	str	r0, [sp, #24]
 80043a0:	9808      	ldr	r0, [sp, #32]
 80043a2:	f7fb ff65 	bl	8000270 <__aeabi_fadd>
 80043a6:	4651      	mov	r1, sl
 80043a8:	9b05      	ldr	r3, [sp, #20]
 80043aa:	50c8      	str	r0, [r1, r3]
 80043ac:	9906      	ldr	r1, [sp, #24]
 80043ae:	9808      	ldr	r0, [sp, #32]
 80043b0:	f7fc fb58 	bl	8000a64 <__aeabi_fsub>
 80043b4:	4659      	mov	r1, fp
 80043b6:	9b01      	ldr	r3, [sp, #4]
 80043b8:	50c8      	str	r0, [r1, r3]
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	f7fb ff57 	bl	8000270 <__aeabi_fadd>
 80043c2:	4659      	mov	r1, fp
 80043c4:	9a02      	ldr	r2, [sp, #8]
 80043c6:	5088      	str	r0, [r1, r2]
 80043c8:	4649      	mov	r1, r9
 80043ca:	4640      	mov	r0, r8
 80043cc:	f7fc fb4a 	bl	8000a64 <__aeabi_fsub>
 80043d0:	465a      	mov	r2, fp
 80043d2:	1c31      	adds	r1, r6, #0
 80043d4:	6010      	str	r0, [r2, #0]
 80043d6:	1c38      	adds	r0, r7, #0
 80043d8:	f7fc fb44 	bl	8000a64 <__aeabi_fsub>
 80043dc:	9903      	ldr	r1, [sp, #12]
 80043de:	6008      	str	r0, [r1, #0]
 80043e0:	1c39      	adds	r1, r7, #0
 80043e2:	1c30      	adds	r0, r6, #0
 80043e4:	f7fb ff44 	bl	8000270 <__aeabi_fadd>
 80043e8:	9e03      	ldr	r6, [sp, #12]
 80043ea:	9f04      	ldr	r7, [sp, #16]
 80043ec:	1c21      	adds	r1, r4, #0
 80043ee:	51f0      	str	r0, [r6, r7]
 80043f0:	1c28      	adds	r0, r5, #0
 80043f2:	f7fc fb37 	bl	8000a64 <__aeabi_fsub>
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	1c29      	adds	r1, r5, #0
 80043fa:	50f0      	str	r0, [r6, r3]
 80043fc:	1c20      	adds	r0, r4, #0
 80043fe:	f7fb ff37 	bl	8000270 <__aeabi_fadd>
 8004402:	465b      	mov	r3, fp
 8004404:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004406:	6058      	str	r0, [r3, #4]
 8004408:	468c      	mov	ip, r1
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800440e:	4463      	add	r3, ip
 8004410:	0031      	movs	r1, r6
 8004412:	4684      	mov	ip, r0
 8004414:	9a00      	ldr	r2, [sp, #0]
 8004416:	001c      	movs	r4, r3
 8004418:	9309      	str	r3, [sp, #36]	; 0x24
 800441a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800441c:	4462      	add	r2, ip
 800441e:	4461      	add	r1, ip
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	44e2      	add	sl, ip
 8004424:	44e3      	add	fp, ip
 8004426:	9103      	str	r1, [sp, #12]
 8004428:	001a      	movs	r2, r3
 800442a:	42a2      	cmp	r2, r4
 800442c:	d900      	bls.n	8004430 <arm_radix8_butterfly_f32+0x340>
 800442e:	e68d      	b.n	800414c <arm_radix8_butterfly_f32+0x5c>
 8004430:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8004432:	2e07      	cmp	r6, #7
 8004434:	d800      	bhi.n	8004438 <arm_radix8_butterfly_f32+0x348>
 8004436:	e313      	b.n	8004a60 <arm_radix8_butterfly_f32+0x970>
 8004438:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800443a:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800443c:	00d3      	lsls	r3, r2, #3
 800443e:	0018      	movs	r0, r3
 8004440:	9335      	str	r3, [sp, #212]	; 0xd4
 8004442:	4684      	mov	ip, r0
 8004444:	002b      	movs	r3, r5
 8004446:	0010      	movs	r0, r2
 8004448:	4463      	add	r3, ip
 800444a:	0111      	lsls	r1, r2, #4
 800444c:	449c      	add	ip, r3
 800444e:	912f      	str	r1, [sp, #188]	; 0xbc
 8004450:	4661      	mov	r1, ip
 8004452:	4684      	mov	ip, r0
 8004454:	0052      	lsls	r2, r2, #1
 8004456:	4462      	add	r2, ip
 8004458:	912d      	str	r1, [sp, #180]	; 0xb4
 800445a:	9123      	str	r1, [sp, #140]	; 0x8c
 800445c:	00d1      	lsls	r1, r2, #3
 800445e:	000c      	movs	r4, r1
 8004460:	9131      	str	r1, [sp, #196]	; 0xc4
 8004462:	46a4      	mov	ip, r4
 8004464:	0029      	movs	r1, r5
 8004466:	4461      	add	r1, ip
 8004468:	4684      	mov	ip, r0
 800446a:	4462      	add	r2, ip
 800446c:	9124      	str	r1, [sp, #144]	; 0x90
 800446e:	0001      	movs	r1, r0
 8004470:	00d0      	lsls	r0, r2, #3
 8004472:	0004      	movs	r4, r0
 8004474:	9030      	str	r0, [sp, #192]	; 0xc0
 8004476:	46a4      	mov	ip, r4
 8004478:	0028      	movs	r0, r5
 800447a:	4460      	add	r0, ip
 800447c:	468c      	mov	ip, r1
 800447e:	4462      	add	r2, ip
 8004480:	9026      	str	r0, [sp, #152]	; 0x98
 8004482:	0008      	movs	r0, r1
 8004484:	00d1      	lsls	r1, r2, #3
 8004486:	468c      	mov	ip, r1
 8004488:	002c      	movs	r4, r5
 800448a:	4464      	add	r4, ip
 800448c:	4684      	mov	ip, r0
 800448e:	4462      	add	r2, ip
 8004490:	9134      	str	r1, [sp, #208]	; 0xd0
 8004492:	0001      	movs	r1, r0
 8004494:	00d0      	lsls	r0, r2, #3
 8004496:	4684      	mov	ip, r0
 8004498:	9425      	str	r4, [sp, #148]	; 0x94
 800449a:	002c      	movs	r4, r5
 800449c:	4465      	add	r5, ip
 800449e:	468c      	mov	ip, r1
 80044a0:	4462      	add	r2, ip
 80044a2:	00d2      	lsls	r2, r2, #3
 80044a4:	4694      	mov	ip, r2
 80044a6:	952c      	str	r5, [sp, #176]	; 0xb0
 80044a8:	0025      	movs	r5, r4
 80044aa:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 80044ac:	9232      	str	r2, [sp, #200]	; 0xc8
 80044ae:	0022      	movs	r2, r4
 80044b0:	4465      	add	r5, ip
 80044b2:	46b4      	mov	ip, r6
 80044b4:	3208      	adds	r2, #8
 80044b6:	922a      	str	r2, [sp, #168]	; 0xa8
 80044b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80044ba:	9033      	str	r0, [sp, #204]	; 0xcc
 80044bc:	3201      	adds	r2, #1
 80044be:	4462      	add	r2, ip
 80044c0:	46a4      	mov	ip, r4
 80044c2:	00d1      	lsls	r1, r2, #3
 80044c4:	4461      	add	r1, ip
 80044c6:	46b4      	mov	ip, r6
 80044c8:	4462      	add	r2, ip
 80044ca:	46a4      	mov	ip, r4
 80044cc:	00d2      	lsls	r2, r2, #3
 80044ce:	3204      	adds	r2, #4
 80044d0:	4462      	add	r2, ip
 80044d2:	9228      	str	r2, [sp, #160]	; 0xa0
 80044d4:	9a05      	ldr	r2, [sp, #20]
 80044d6:	952b      	str	r5, [sp, #172]	; 0xac
 80044d8:	320c      	adds	r2, #12
 80044da:	4462      	add	r2, ip
 80044dc:	9227      	str	r2, [sp, #156]	; 0x9c
 80044de:	2201      	movs	r2, #1
 80044e0:	9129      	str	r1, [sp, #164]	; 0xa4
 80044e2:	9222      	str	r2, [sp, #136]	; 0x88
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	920a      	str	r2, [sp, #40]	; 0x28
 80044ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80044ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80044ee:	6811      	ldr	r1, [r2, #0]
 80044f0:	6853      	ldr	r3, [r2, #4]
 80044f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80044f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80044f6:	931d      	str	r3, [sp, #116]	; 0x74
 80044f8:	6808      	ldr	r0, [r1, #0]
 80044fa:	684b      	ldr	r3, [r1, #4]
 80044fc:	901b      	str	r0, [sp, #108]	; 0x6c
 80044fe:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004500:	931e      	str	r3, [sp, #120]	; 0x78
 8004502:	6804      	ldr	r4, [r0, #0]
 8004504:	6843      	ldr	r3, [r0, #4]
 8004506:	940c      	str	r4, [sp, #48]	; 0x30
 8004508:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800450a:	9310      	str	r3, [sp, #64]	; 0x40
 800450c:	6825      	ldr	r5, [r4, #0]
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	950d      	str	r5, [sp, #52]	; 0x34
 8004512:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8004514:	931f      	str	r3, [sp, #124]	; 0x7c
 8004516:	682e      	ldr	r6, [r5, #0]
 8004518:	686b      	ldr	r3, [r5, #4]
 800451a:	961c      	str	r6, [sp, #112]	; 0x70
 800451c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800451e:	9320      	str	r3, [sp, #128]	; 0x80
 8004520:	6837      	ldr	r7, [r6, #0]
 8004522:	970e      	str	r7, [sp, #56]	; 0x38
 8004524:	6873      	ldr	r3, [r6, #4]
 8004526:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004528:	9321      	str	r3, [sp, #132]	; 0x84
 800452a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800452c:	46b3      	mov	fp, r6
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004532:	9303      	str	r3, [sp, #12]
 8004534:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004536:	4698      	mov	r8, r3
 8004538:	46c2      	mov	sl, r8
 800453a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800453c:	9309      	str	r3, [sp, #36]	; 0x24
 800453e:	e001      	b.n	8004544 <arm_radix8_butterfly_f32+0x454>
 8004540:	3f3504f3 	.word	0x3f3504f3
 8004544:	465b      	mov	r3, fp
 8004546:	4659      	mov	r1, fp
 8004548:	681d      	ldr	r5, [r3, #0]
 800454a:	9b01      	ldr	r3, [sp, #4]
 800454c:	1c28      	adds	r0, r5, #0
 800454e:	58ce      	ldr	r6, [r1, r3]
 8004550:	1c31      	adds	r1, r6, #0
 8004552:	f7fb fe8d 	bl	8000270 <__aeabi_fadd>
 8004556:	1c04      	adds	r4, r0, #0
 8004558:	1c28      	adds	r0, r5, #0
 800455a:	465d      	mov	r5, fp
 800455c:	1c31      	adds	r1, r6, #0
 800455e:	4656      	mov	r6, sl
 8004560:	f7fc fa80 	bl	8000a64 <__aeabi_fsub>
 8004564:	9905      	ldr	r1, [sp, #20]
 8004566:	9013      	str	r0, [sp, #76]	; 0x4c
 8004568:	586d      	ldr	r5, [r5, r1]
 800456a:	9902      	ldr	r1, [sp, #8]
 800456c:	1c28      	adds	r0, r5, #0
 800456e:	5877      	ldr	r7, [r6, r1]
 8004570:	1c39      	adds	r1, r7, #0
 8004572:	f7fb fe7d 	bl	8000270 <__aeabi_fadd>
 8004576:	1c39      	adds	r1, r7, #0
 8004578:	1c06      	adds	r6, r0, #0
 800457a:	465f      	mov	r7, fp
 800457c:	1c28      	adds	r0, r5, #0
 800457e:	465d      	mov	r5, fp
 8004580:	f7fc fa70 	bl	8000a64 <__aeabi_fsub>
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	9902      	ldr	r1, [sp, #8]
 8004588:	58bf      	ldr	r7, [r7, r2]
 800458a:	586d      	ldr	r5, [r5, r1]
 800458c:	9014      	str	r0, [sp, #80]	; 0x50
 800458e:	1c39      	adds	r1, r7, #0
 8004590:	1c28      	adds	r0, r5, #0
 8004592:	f7fb fe6d 	bl	8000270 <__aeabi_fadd>
 8004596:	1c39      	adds	r1, r7, #0
 8004598:	4680      	mov	r8, r0
 800459a:	4657      	mov	r7, sl
 800459c:	1c28      	adds	r0, r5, #0
 800459e:	4655      	mov	r5, sl
 80045a0:	f7fc fa60 	bl	8000a64 <__aeabi_fsub>
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	682d      	ldr	r5, [r5, #0]
 80045a8:	58ff      	ldr	r7, [r7, r3]
 80045aa:	9015      	str	r0, [sp, #84]	; 0x54
 80045ac:	1c39      	adds	r1, r7, #0
 80045ae:	1c28      	adds	r0, r5, #0
 80045b0:	f7fb fe5e 	bl	8000270 <__aeabi_fadd>
 80045b4:	46b9      	mov	r9, r7
 80045b6:	1c07      	adds	r7, r0, #0
 80045b8:	4649      	mov	r1, r9
 80045ba:	1c28      	adds	r0, r5, #0
 80045bc:	f7fc fa52 	bl	8000a64 <__aeabi_fsub>
 80045c0:	4641      	mov	r1, r8
 80045c2:	9016      	str	r0, [sp, #88]	; 0x58
 80045c4:	1c20      	adds	r0, r4, #0
 80045c6:	f7fc fa4d 	bl	8000a64 <__aeabi_fsub>
 80045ca:	4641      	mov	r1, r8
 80045cc:	1c05      	adds	r5, r0, #0
 80045ce:	1c20      	adds	r0, r4, #0
 80045d0:	f7fb fe4e 	bl	8000270 <__aeabi_fadd>
 80045d4:	1c39      	adds	r1, r7, #0
 80045d6:	4680      	mov	r8, r0
 80045d8:	1c30      	adds	r0, r6, #0
 80045da:	f7fc fa43 	bl	8000a64 <__aeabi_fsub>
 80045de:	1c39      	adds	r1, r7, #0
 80045e0:	1c04      	adds	r4, r0, #0
 80045e2:	1c30      	adds	r0, r6, #0
 80045e4:	f7fb fe44 	bl	8000270 <__aeabi_fadd>
 80045e8:	1c06      	adds	r6, r0, #0
 80045ea:	1c01      	adds	r1, r0, #0
 80045ec:	4640      	mov	r0, r8
 80045ee:	f7fb fe3f 	bl	8000270 <__aeabi_fadd>
 80045f2:	465f      	mov	r7, fp
 80045f4:	1c31      	adds	r1, r6, #0
 80045f6:	6038      	str	r0, [r7, #0]
 80045f8:	4640      	mov	r0, r8
 80045fa:	f7fc fa33 	bl	8000a64 <__aeabi_fsub>
 80045fe:	687e      	ldr	r6, [r7, #4]
 8004600:	9f03      	ldr	r7, [sp, #12]
 8004602:	9006      	str	r0, [sp, #24]
 8004604:	683f      	ldr	r7, [r7, #0]
 8004606:	1c30      	adds	r0, r6, #0
 8004608:	1c39      	adds	r1, r7, #0
 800460a:	f7fb fe31 	bl	8000270 <__aeabi_fadd>
 800460e:	1c39      	adds	r1, r7, #0
 8004610:	4680      	mov	r8, r0
 8004612:	1c30      	adds	r0, r6, #0
 8004614:	f7fc fa26 	bl	8000a64 <__aeabi_fsub>
 8004618:	9b00      	ldr	r3, [sp, #0]
 800461a:	9a01      	ldr	r2, [sp, #4]
 800461c:	681f      	ldr	r7, [r3, #0]
 800461e:	589e      	ldr	r6, [r3, r2]
 8004620:	9007      	str	r0, [sp, #28]
 8004622:	1c31      	adds	r1, r6, #0
 8004624:	1c38      	adds	r0, r7, #0
 8004626:	f7fb fe23 	bl	8000270 <__aeabi_fadd>
 800462a:	46b1      	mov	r9, r6
 800462c:	1c06      	adds	r6, r0, #0
 800462e:	4649      	mov	r1, r9
 8004630:	1c38      	adds	r0, r7, #0
 8004632:	f7fc fa17 	bl	8000a64 <__aeabi_fsub>
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	9f05      	ldr	r7, [sp, #20]
 800463a:	9a03      	ldr	r2, [sp, #12]
 800463c:	9902      	ldr	r1, [sp, #8]
 800463e:	59df      	ldr	r7, [r3, r7]
 8004640:	5851      	ldr	r1, [r2, r1]
 8004642:	9017      	str	r0, [sp, #92]	; 0x5c
 8004644:	1c38      	adds	r0, r7, #0
 8004646:	9108      	str	r1, [sp, #32]
 8004648:	f7fb fe12 	bl	8000270 <__aeabi_fadd>
 800464c:	4681      	mov	r9, r0
 800464e:	1c38      	adds	r0, r7, #0
 8004650:	4657      	mov	r7, sl
 8004652:	9908      	ldr	r1, [sp, #32]
 8004654:	f7fc fa06 	bl	8000a64 <__aeabi_fsub>
 8004658:	687f      	ldr	r7, [r7, #4]
 800465a:	9b00      	ldr	r3, [sp, #0]
 800465c:	1c3a      	adds	r2, r7, #0
 800465e:	9f04      	ldr	r7, [sp, #16]
 8004660:	9008      	str	r0, [sp, #32]
 8004662:	59d9      	ldr	r1, [r3, r7]
 8004664:	1c10      	adds	r0, r2, #0
 8004666:	9211      	str	r2, [sp, #68]	; 0x44
 8004668:	9112      	str	r1, [sp, #72]	; 0x48
 800466a:	f7fb fe01 	bl	8000270 <__aeabi_fadd>
 800466e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004670:	1c07      	adds	r7, r0, #0
 8004672:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004674:	f7fc f9f6 	bl	8000a64 <__aeabi_fsub>
 8004678:	4649      	mov	r1, r9
 800467a:	9011      	str	r0, [sp, #68]	; 0x44
 800467c:	4640      	mov	r0, r8
 800467e:	f7fc f9f1 	bl	8000a64 <__aeabi_fsub>
 8004682:	4649      	mov	r1, r9
 8004684:	9012      	str	r0, [sp, #72]	; 0x48
 8004686:	4640      	mov	r0, r8
 8004688:	f7fb fdf2 	bl	8000270 <__aeabi_fadd>
 800468c:	1c39      	adds	r1, r7, #0
 800468e:	4680      	mov	r8, r0
 8004690:	1c30      	adds	r0, r6, #0
 8004692:	f7fc f9e7 	bl	8000a64 <__aeabi_fsub>
 8004696:	1c39      	adds	r1, r7, #0
 8004698:	4681      	mov	r9, r0
 800469a:	1c30      	adds	r0, r6, #0
 800469c:	f7fb fde8 	bl	8000270 <__aeabi_fadd>
 80046a0:	4649      	mov	r1, r9
 80046a2:	1c07      	adds	r7, r0, #0
 80046a4:	1c28      	adds	r0, r5, #0
 80046a6:	f7fb fde3 	bl	8000270 <__aeabi_fadd>
 80046aa:	4649      	mov	r1, r9
 80046ac:	1c06      	adds	r6, r0, #0
 80046ae:	1c28      	adds	r0, r5, #0
 80046b0:	f7fc f9d8 	bl	8000a64 <__aeabi_fsub>
 80046b4:	1c39      	adds	r1, r7, #0
 80046b6:	1c05      	adds	r5, r0, #0
 80046b8:	4640      	mov	r0, r8
 80046ba:	f7fb fdd9 	bl	8000270 <__aeabi_fadd>
 80046be:	4659      	mov	r1, fp
 80046c0:	6048      	str	r0, [r1, #4]
 80046c2:	1c39      	adds	r1, r7, #0
 80046c4:	4640      	mov	r0, r8
 80046c6:	f7fc f9cd 	bl	8000a64 <__aeabi_fsub>
 80046ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046cc:	4680      	mov	r8, r0
 80046ce:	1c21      	adds	r1, r4, #0
 80046d0:	1c18      	adds	r0, r3, #0
 80046d2:	4699      	mov	r9, r3
 80046d4:	f7fc f9c6 	bl	8000a64 <__aeabi_fsub>
 80046d8:	4649      	mov	r1, r9
 80046da:	1c07      	adds	r7, r0, #0
 80046dc:	1c20      	adds	r0, r4, #0
 80046de:	f7fb fdc7 	bl	8000270 <__aeabi_fadd>
 80046e2:	9906      	ldr	r1, [sp, #24]
 80046e4:	1c04      	adds	r4, r0, #0
 80046e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046e8:	f7fc f89c 	bl	8000824 <__aeabi_fmul>
 80046ec:	4641      	mov	r1, r8
 80046ee:	4681      	mov	r9, r0
 80046f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80046f2:	f7fc f897 	bl	8000824 <__aeabi_fmul>
 80046f6:	1c01      	adds	r1, r0, #0
 80046f8:	4648      	mov	r0, r9
 80046fa:	f7fb fdb9 	bl	8000270 <__aeabi_fadd>
 80046fe:	4659      	mov	r1, fp
 8004700:	9a01      	ldr	r2, [sp, #4]
 8004702:	5088      	str	r0, [r1, r2]
 8004704:	4641      	mov	r1, r8
 8004706:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004708:	f7fc f88c 	bl	8000824 <__aeabi_fmul>
 800470c:	9906      	ldr	r1, [sp, #24]
 800470e:	4680      	mov	r8, r0
 8004710:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004712:	f7fc f887 	bl	8000824 <__aeabi_fmul>
 8004716:	1c01      	adds	r1, r0, #0
 8004718:	4640      	mov	r0, r8
 800471a:	f7fc f9a3 	bl	8000a64 <__aeabi_fsub>
 800471e:	9a03      	ldr	r2, [sp, #12]
 8004720:	1c31      	adds	r1, r6, #0
 8004722:	6010      	str	r0, [r2, #0]
 8004724:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004726:	f7fc f87d 	bl	8000824 <__aeabi_fmul>
 800472a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800472c:	4680      	mov	r8, r0
 800472e:	1c39      	adds	r1, r7, #0
 8004730:	1c18      	adds	r0, r3, #0
 8004732:	4699      	mov	r9, r3
 8004734:	f7fc f876 	bl	8000824 <__aeabi_fmul>
 8004738:	1c01      	adds	r1, r0, #0
 800473a:	4640      	mov	r0, r8
 800473c:	f7fb fd98 	bl	8000270 <__aeabi_fadd>
 8004740:	465b      	mov	r3, fp
 8004742:	9902      	ldr	r1, [sp, #8]
 8004744:	5058      	str	r0, [r3, r1]
 8004746:	1c39      	adds	r1, r7, #0
 8004748:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800474a:	f7fc f86b 	bl	8000824 <__aeabi_fmul>
 800474e:	1c31      	adds	r1, r6, #0
 8004750:	1c07      	adds	r7, r0, #0
 8004752:	4648      	mov	r0, r9
 8004754:	f7fc f866 	bl	8000824 <__aeabi_fmul>
 8004758:	1c01      	adds	r1, r0, #0
 800475a:	1c38      	adds	r0, r7, #0
 800475c:	f7fc f982 	bl	8000a64 <__aeabi_fsub>
 8004760:	9b00      	ldr	r3, [sp, #0]
 8004762:	9e05      	ldr	r6, [sp, #20]
 8004764:	1c29      	adds	r1, r5, #0
 8004766:	5198      	str	r0, [r3, r6]
 8004768:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800476a:	1c18      	adds	r0, r3, #0
 800476c:	4699      	mov	r9, r3
 800476e:	f7fc f859 	bl	8000824 <__aeabi_fmul>
 8004772:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004774:	1c06      	adds	r6, r0, #0
 8004776:	1c21      	adds	r1, r4, #0
 8004778:	1c18      	adds	r0, r3, #0
 800477a:	4698      	mov	r8, r3
 800477c:	f7fc f852 	bl	8000824 <__aeabi_fmul>
 8004780:	1c01      	adds	r1, r0, #0
 8004782:	1c30      	adds	r0, r6, #0
 8004784:	f7fb fd74 	bl	8000270 <__aeabi_fadd>
 8004788:	465e      	mov	r6, fp
 800478a:	9f04      	ldr	r7, [sp, #16]
 800478c:	1c21      	adds	r1, r4, #0
 800478e:	51f0      	str	r0, [r6, r7]
 8004790:	4648      	mov	r0, r9
 8004792:	f7fc f847 	bl	8000824 <__aeabi_fmul>
 8004796:	1c29      	adds	r1, r5, #0
 8004798:	1c04      	adds	r4, r0, #0
 800479a:	4640      	mov	r0, r8
 800479c:	f7fc f842 	bl	8000824 <__aeabi_fmul>
 80047a0:	1c01      	adds	r1, r0, #0
 80047a2:	1c20      	adds	r0, r4, #0
 80047a4:	f7fc f95e 	bl	8000a64 <__aeabi_fsub>
 80047a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80047aa:	9c03      	ldr	r4, [sp, #12]
 80047ac:	9902      	ldr	r1, [sp, #8]
 80047ae:	4699      	mov	r9, r3
 80047b0:	5060      	str	r0, [r4, r1]
 80047b2:	1c19      	adds	r1, r3, #0
 80047b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047b6:	1c18      	adds	r0, r3, #0
 80047b8:	4698      	mov	r8, r3
 80047ba:	f7fc f953 	bl	8000a64 <__aeabi_fsub>
 80047be:	49ac      	ldr	r1, [pc, #688]	; (8004a70 <arm_radix8_butterfly_f32+0x980>)
 80047c0:	f7fc f830 	bl	8000824 <__aeabi_fmul>
 80047c4:	4649      	mov	r1, r9
 80047c6:	1c04      	adds	r4, r0, #0
 80047c8:	4640      	mov	r0, r8
 80047ca:	f7fb fd51 	bl	8000270 <__aeabi_fadd>
 80047ce:	49a8      	ldr	r1, [pc, #672]	; (8004a70 <arm_radix8_butterfly_f32+0x980>)
 80047d0:	f7fc f828 	bl	8000824 <__aeabi_fmul>
 80047d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047d6:	1c05      	adds	r5, r0, #0
 80047d8:	4699      	mov	r9, r3
 80047da:	1c19      	adds	r1, r3, #0
 80047dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047de:	1c18      	adds	r0, r3, #0
 80047e0:	4698      	mov	r8, r3
 80047e2:	f7fc f93f 	bl	8000a64 <__aeabi_fsub>
 80047e6:	49a2      	ldr	r1, [pc, #648]	; (8004a70 <arm_radix8_butterfly_f32+0x980>)
 80047e8:	f7fc f81c 	bl	8000824 <__aeabi_fmul>
 80047ec:	4649      	mov	r1, r9
 80047ee:	1c07      	adds	r7, r0, #0
 80047f0:	4640      	mov	r0, r8
 80047f2:	f7fb fd3d 	bl	8000270 <__aeabi_fadd>
 80047f6:	499e      	ldr	r1, [pc, #632]	; (8004a70 <arm_radix8_butterfly_f32+0x980>)
 80047f8:	f7fc f814 	bl	8000824 <__aeabi_fmul>
 80047fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80047fe:	4681      	mov	r9, r0
 8004800:	1c21      	adds	r1, r4, #0
 8004802:	1c30      	adds	r0, r6, #0
 8004804:	f7fc f92e 	bl	8000a64 <__aeabi_fsub>
 8004808:	1c21      	adds	r1, r4, #0
 800480a:	4680      	mov	r8, r0
 800480c:	1c30      	adds	r0, r6, #0
 800480e:	f7fb fd2f 	bl	8000270 <__aeabi_fadd>
 8004812:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004814:	1c29      	adds	r1, r5, #0
 8004816:	9006      	str	r0, [sp, #24]
 8004818:	1c30      	adds	r0, r6, #0
 800481a:	f7fc f923 	bl	8000a64 <__aeabi_fsub>
 800481e:	1c29      	adds	r1, r5, #0
 8004820:	1c04      	adds	r4, r0, #0
 8004822:	1c30      	adds	r0, r6, #0
 8004824:	f7fb fd24 	bl	8000270 <__aeabi_fadd>
 8004828:	1c39      	adds	r1, r7, #0
 800482a:	1c06      	adds	r6, r0, #0
 800482c:	9807      	ldr	r0, [sp, #28]
 800482e:	f7fc f919 	bl	8000a64 <__aeabi_fsub>
 8004832:	1c39      	adds	r1, r7, #0
 8004834:	1c05      	adds	r5, r0, #0
 8004836:	9807      	ldr	r0, [sp, #28]
 8004838:	f7fb fd1a 	bl	8000270 <__aeabi_fadd>
 800483c:	464b      	mov	r3, r9
 800483e:	1c07      	adds	r7, r0, #0
 8004840:	9307      	str	r3, [sp, #28]
 8004842:	4649      	mov	r1, r9
 8004844:	9808      	ldr	r0, [sp, #32]
 8004846:	f7fc f90d 	bl	8000a64 <__aeabi_fsub>
 800484a:	9907      	ldr	r1, [sp, #28]
 800484c:	4681      	mov	r9, r0
 800484e:	9808      	ldr	r0, [sp, #32]
 8004850:	f7fb fd0e 	bl	8000270 <__aeabi_fadd>
 8004854:	1c01      	adds	r1, r0, #0
 8004856:	9008      	str	r0, [sp, #32]
 8004858:	9806      	ldr	r0, [sp, #24]
 800485a:	f7fb fd09 	bl	8000270 <__aeabi_fadd>
 800485e:	9908      	ldr	r1, [sp, #32]
 8004860:	9007      	str	r0, [sp, #28]
 8004862:	9806      	ldr	r0, [sp, #24]
 8004864:	f7fc f8fe 	bl	8000a64 <__aeabi_fsub>
 8004868:	4649      	mov	r1, r9
 800486a:	9006      	str	r0, [sp, #24]
 800486c:	4640      	mov	r0, r8
 800486e:	f7fb fcff 	bl	8000270 <__aeabi_fadd>
 8004872:	4649      	mov	r1, r9
 8004874:	9008      	str	r0, [sp, #32]
 8004876:	4640      	mov	r0, r8
 8004878:	f7fc f8f4 	bl	8000a64 <__aeabi_fsub>
 800487c:	1c31      	adds	r1, r6, #0
 800487e:	4681      	mov	r9, r0
 8004880:	1c38      	adds	r0, r7, #0
 8004882:	f7fc f8ef 	bl	8000a64 <__aeabi_fsub>
 8004886:	1c39      	adds	r1, r7, #0
 8004888:	4680      	mov	r8, r0
 800488a:	1c30      	adds	r0, r6, #0
 800488c:	f7fb fcf0 	bl	8000270 <__aeabi_fadd>
 8004890:	1c21      	adds	r1, r4, #0
 8004892:	1c07      	adds	r7, r0, #0
 8004894:	1c28      	adds	r0, r5, #0
 8004896:	f7fc f8e5 	bl	8000a64 <__aeabi_fsub>
 800489a:	1c29      	adds	r1, r5, #0
 800489c:	1c06      	adds	r6, r0, #0
 800489e:	1c20      	adds	r0, r4, #0
 80048a0:	f7fb fce6 	bl	8000270 <__aeabi_fadd>
 80048a4:	9907      	ldr	r1, [sp, #28]
 80048a6:	1c04      	adds	r4, r0, #0
 80048a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048aa:	f7fb ffbb 	bl	8000824 <__aeabi_fmul>
 80048ae:	4641      	mov	r1, r8
 80048b0:	1c05      	adds	r5, r0, #0
 80048b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048b4:	f7fb ffb6 	bl	8000824 <__aeabi_fmul>
 80048b8:	1c01      	adds	r1, r0, #0
 80048ba:	1c28      	adds	r0, r5, #0
 80048bc:	f7fb fcd8 	bl	8000270 <__aeabi_fadd>
 80048c0:	4659      	mov	r1, fp
 80048c2:	9d05      	ldr	r5, [sp, #20]
 80048c4:	5148      	str	r0, [r1, r5]
 80048c6:	4641      	mov	r1, r8
 80048c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048ca:	f7fb ffab 	bl	8000824 <__aeabi_fmul>
 80048ce:	9907      	ldr	r1, [sp, #28]
 80048d0:	1c05      	adds	r5, r0, #0
 80048d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048d4:	f7fb ffa6 	bl	8000824 <__aeabi_fmul>
 80048d8:	1c01      	adds	r1, r0, #0
 80048da:	1c28      	adds	r0, r5, #0
 80048dc:	f7fc f8c2 	bl	8000a64 <__aeabi_fsub>
 80048e0:	9b00      	ldr	r3, [sp, #0]
 80048e2:	9906      	ldr	r1, [sp, #24]
 80048e4:	6018      	str	r0, [r3, #0]
 80048e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048e8:	f7fb ff9c 	bl	8000824 <__aeabi_fmul>
 80048ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048ee:	1c05      	adds	r5, r0, #0
 80048f0:	1c39      	adds	r1, r7, #0
 80048f2:	1c18      	adds	r0, r3, #0
 80048f4:	4698      	mov	r8, r3
 80048f6:	f7fb ff95 	bl	8000824 <__aeabi_fmul>
 80048fa:	1c01      	adds	r1, r0, #0
 80048fc:	1c28      	adds	r0, r5, #0
 80048fe:	f7fb fcb7 	bl	8000270 <__aeabi_fadd>
 8004902:	4655      	mov	r5, sl
 8004904:	9a01      	ldr	r2, [sp, #4]
 8004906:	1c39      	adds	r1, r7, #0
 8004908:	50a8      	str	r0, [r5, r2]
 800490a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800490c:	f7fb ff8a 	bl	8000824 <__aeabi_fmul>
 8004910:	9906      	ldr	r1, [sp, #24]
 8004912:	1c05      	adds	r5, r0, #0
 8004914:	4640      	mov	r0, r8
 8004916:	f7fb ff85 	bl	8000824 <__aeabi_fmul>
 800491a:	1c01      	adds	r1, r0, #0
 800491c:	1c28      	adds	r0, r5, #0
 800491e:	f7fc f8a1 	bl	8000a64 <__aeabi_fsub>
 8004922:	9f00      	ldr	r7, [sp, #0]
 8004924:	9d04      	ldr	r5, [sp, #16]
 8004926:	9908      	ldr	r1, [sp, #32]
 8004928:	5178      	str	r0, [r7, r5]
 800492a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800492c:	f7fb ff7a 	bl	8000824 <__aeabi_fmul>
 8004930:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004932:	1c05      	adds	r5, r0, #0
 8004934:	1c31      	adds	r1, r6, #0
 8004936:	1c18      	adds	r0, r3, #0
 8004938:	4698      	mov	r8, r3
 800493a:	f7fb ff73 	bl	8000824 <__aeabi_fmul>
 800493e:	1c01      	adds	r1, r0, #0
 8004940:	1c28      	adds	r0, r5, #0
 8004942:	f7fb fc95 	bl	8000270 <__aeabi_fadd>
 8004946:	4653      	mov	r3, sl
 8004948:	9d02      	ldr	r5, [sp, #8]
 800494a:	1c31      	adds	r1, r6, #0
 800494c:	5158      	str	r0, [r3, r5]
 800494e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004950:	f7fb ff68 	bl	8000824 <__aeabi_fmul>
 8004954:	9908      	ldr	r1, [sp, #32]
 8004956:	1c05      	adds	r5, r0, #0
 8004958:	4640      	mov	r0, r8
 800495a:	f7fb ff63 	bl	8000824 <__aeabi_fmul>
 800495e:	1c01      	adds	r1, r0, #0
 8004960:	1c28      	adds	r0, r5, #0
 8004962:	f7fc f87f 	bl	8000a64 <__aeabi_fsub>
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800496a:	50b8      	str	r0, [r7, r2]
 800496c:	4649      	mov	r1, r9
 800496e:	1c18      	adds	r0, r3, #0
 8004970:	4698      	mov	r8, r3
 8004972:	f7fb ff57 	bl	8000824 <__aeabi_fmul>
 8004976:	003e      	movs	r6, r7
 8004978:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800497a:	1c21      	adds	r1, r4, #0
 800497c:	1c05      	adds	r5, r0, #0
 800497e:	1c38      	adds	r0, r7, #0
 8004980:	f7fb ff50 	bl	8000824 <__aeabi_fmul>
 8004984:	1c01      	adds	r1, r0, #0
 8004986:	1c28      	adds	r0, r5, #0
 8004988:	f7fb fc72 	bl	8000270 <__aeabi_fadd>
 800498c:	4653      	mov	r3, sl
 800498e:	1c21      	adds	r1, r4, #0
 8004990:	6018      	str	r0, [r3, #0]
 8004992:	4640      	mov	r0, r8
 8004994:	f7fb ff46 	bl	8000824 <__aeabi_fmul>
 8004998:	4649      	mov	r1, r9
 800499a:	1c04      	adds	r4, r0, #0
 800499c:	1c38      	adds	r0, r7, #0
 800499e:	f7fb ff41 	bl	8000824 <__aeabi_fmul>
 80049a2:	1c01      	adds	r1, r0, #0
 80049a4:	1c20      	adds	r0, r4, #0
 80049a6:	f7fc f85d 	bl	8000a64 <__aeabi_fsub>
 80049aa:	4653      	mov	r3, sl
 80049ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049ae:	6058      	str	r0, [r3, #4]
 80049b0:	468c      	mov	ip, r1
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80049b6:	4463      	add	r3, ip
 80049b8:	0018      	movs	r0, r3
 80049ba:	468c      	mov	ip, r1
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
 80049be:	0033      	movs	r3, r6
 80049c0:	9c03      	ldr	r4, [sp, #12]
 80049c2:	4463      	add	r3, ip
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80049c8:	4464      	add	r4, ip
 80049ca:	44e3      	add	fp, ip
 80049cc:	44e2      	add	sl, ip
 80049ce:	9403      	str	r4, [sp, #12]
 80049d0:	001a      	movs	r2, r3
 80049d2:	4282      	cmp	r2, r0
 80049d4:	d900      	bls.n	80049d8 <arm_radix8_butterfly_f32+0x8e8>
 80049d6:	e5b5      	b.n	8004544 <arm_radix8_butterfly_f32+0x454>
 80049d8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80049da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80049dc:	4684      	mov	ip, r0
 80049de:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80049e0:	4461      	add	r1, ip
 80049e2:	4684      	mov	ip, r0
 80049e4:	9123      	str	r1, [sp, #140]	; 0x8c
 80049e6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80049e8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80049ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ec:	4461      	add	r1, ip
 80049ee:	4684      	mov	ip, r0
 80049f0:	9124      	str	r1, [sp, #144]	; 0x90
 80049f2:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80049f4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80049f6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80049f8:	4461      	add	r1, ip
 80049fa:	4684      	mov	ip, r0
 80049fc:	9126      	str	r1, [sp, #152]	; 0x98
 80049fe:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8004a00:	9925      	ldr	r1, [sp, #148]	; 0x94
 8004a02:	3301      	adds	r3, #1
 8004a04:	4461      	add	r1, ip
 8004a06:	4684      	mov	ip, r0
 8004a08:	9125      	str	r1, [sp, #148]	; 0x94
 8004a0a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8004a0c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004a0e:	001a      	movs	r2, r3
 8004a10:	4461      	add	r1, ip
 8004a12:	4684      	mov	ip, r0
 8004a14:	912c      	str	r1, [sp, #176]	; 0xb0
 8004a16:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004a18:	9322      	str	r3, [sp, #136]	; 0x88
 8004a1a:	4461      	add	r1, ip
 8004a1c:	912b      	str	r1, [sp, #172]	; 0xac
 8004a1e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004a20:	0023      	movs	r3, r4
 8004a22:	3108      	adds	r1, #8
 8004a24:	912a      	str	r1, [sp, #168]	; 0xa8
 8004a26:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004a28:	3108      	adds	r1, #8
 8004a2a:	9129      	str	r1, [sp, #164]	; 0xa4
 8004a2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004a2e:	3108      	adds	r1, #8
 8004a30:	9128      	str	r1, [sp, #160]	; 0xa0
 8004a32:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004a34:	3108      	adds	r1, #8
 8004a36:	9127      	str	r1, [sp, #156]	; 0x9c
 8004a38:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d005      	beq.n	8004a4a <arm_radix8_butterfly_f32+0x95a>
 8004a3e:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8004a40:	0022      	movs	r2, r4
 8004a42:	468c      	mov	ip, r1
 8004a44:	4462      	add	r2, ip
 8004a46:	922d      	str	r2, [sp, #180]	; 0xb4
 8004a48:	e54c      	b.n	80044e4 <arm_radix8_butterfly_f32+0x3f4>
 8004a4a:	466b      	mov	r3, sp
 8004a4c:	22d4      	movs	r2, #212	; 0xd4
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8004a54:	9310      	str	r3, [sp, #64]	; 0x40
 8004a56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8004a58:	9318      	str	r3, [sp, #96]	; 0x60
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	f7ff fb55 	bl	800410a <arm_radix8_butterfly_f32+0x1a>
 8004a60:	b039      	add	sp, #228	; 0xe4
 8004a62:	bc3c      	pop	{r2, r3, r4, r5}
 8004a64:	4690      	mov	r8, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	46a2      	mov	sl, r4
 8004a6a:	46ab      	mov	fp, r5
 8004a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	3f3504f3 	.word	0x3f3504f3

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	2600      	movs	r6, #0
 8004a78:	4d0c      	ldr	r5, [pc, #48]	; (8004aac <__libc_init_array+0x38>)
 8004a7a:	4c0d      	ldr	r4, [pc, #52]	; (8004ab0 <__libc_init_array+0x3c>)
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	2600      	movs	r6, #0
 8004a86:	f000 ff8b 	bl	80059a0 <_init>
 8004a8a:	4d0a      	ldr	r5, [pc, #40]	; (8004ab4 <__libc_init_array+0x40>)
 8004a8c:	4c0a      	ldr	r4, [pc, #40]	; (8004ab8 <__libc_init_array+0x44>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	00b3      	lsls	r3, r6, #2
 8004a9a:	58eb      	ldr	r3, [r5, r3]
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	00b3      	lsls	r3, r6, #2
 8004aa4:	58eb      	ldr	r3, [r5, r3]
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	08005cf8 	.word	0x08005cf8
 8004ab0:	08005cf8 	.word	0x08005cf8
 8004ab4:	08005cf8 	.word	0x08005cf8
 8004ab8:	08005cfc 	.word	0x08005cfc

08004abc <iprintf>:
 8004abc:	b40f      	push	{r0, r1, r2, r3}
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <iprintf+0x30>)
 8004ac0:	b513      	push	{r0, r1, r4, lr}
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	2c00      	cmp	r4, #0
 8004ac6:	d005      	beq.n	8004ad4 <iprintf+0x18>
 8004ac8:	69a3      	ldr	r3, [r4, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <iprintf+0x18>
 8004ace:	0020      	movs	r0, r4
 8004ad0:	f000 f850 	bl	8004b74 <__sinit>
 8004ad4:	ab05      	add	r3, sp, #20
 8004ad6:	9a04      	ldr	r2, [sp, #16]
 8004ad8:	68a1      	ldr	r1, [r4, #8]
 8004ada:	0020      	movs	r0, r4
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	f000 f96d 	bl	8004dbc <_vfiprintf_r>
 8004ae2:	bc16      	pop	{r1, r2, r4}
 8004ae4:	bc08      	pop	{r3}
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4718      	bx	r3
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	20000104 	.word	0x20000104

08004af0 <_cleanup_r>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4902      	ldr	r1, [pc, #8]	; (8004afc <_cleanup_r+0xc>)
 8004af4:	f000 f8b2 	bl	8004c5c <_fwalk_reent>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	080056b9 	.word	0x080056b9

08004b00 <std.isra.0>:
 8004b00:	2300      	movs	r3, #0
 8004b02:	b510      	push	{r4, lr}
 8004b04:	0004      	movs	r4, r0
 8004b06:	6003      	str	r3, [r0, #0]
 8004b08:	6043      	str	r3, [r0, #4]
 8004b0a:	6083      	str	r3, [r0, #8]
 8004b0c:	8181      	strh	r1, [r0, #12]
 8004b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b10:	81c2      	strh	r2, [r0, #14]
 8004b12:	6103      	str	r3, [r0, #16]
 8004b14:	6143      	str	r3, [r0, #20]
 8004b16:	6183      	str	r3, [r0, #24]
 8004b18:	0019      	movs	r1, r3
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	305c      	adds	r0, #92	; 0x5c
 8004b1e:	f000 f8be 	bl	8004c9e <memset>
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <std.isra.0+0x38>)
 8004b24:	6224      	str	r4, [r4, #32]
 8004b26:	6263      	str	r3, [r4, #36]	; 0x24
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <std.isra.0+0x3c>)
 8004b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <std.isra.0+0x40>)
 8004b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <std.isra.0+0x44>)
 8004b32:	6323      	str	r3, [r4, #48]	; 0x30
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	08005329 	.word	0x08005329
 8004b3c:	08005351 	.word	0x08005351
 8004b40:	08005389 	.word	0x08005389
 8004b44:	080053b5 	.word	0x080053b5

08004b48 <__sfmoreglue>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	2568      	movs	r5, #104	; 0x68
 8004b4c:	1e4a      	subs	r2, r1, #1
 8004b4e:	4355      	muls	r5, r2
 8004b50:	000e      	movs	r6, r1
 8004b52:	0029      	movs	r1, r5
 8004b54:	3174      	adds	r1, #116	; 0x74
 8004b56:	f000 f8ab 	bl	8004cb0 <_malloc_r>
 8004b5a:	1e04      	subs	r4, r0, #0
 8004b5c:	d008      	beq.n	8004b70 <__sfmoreglue+0x28>
 8004b5e:	2100      	movs	r1, #0
 8004b60:	002a      	movs	r2, r5
 8004b62:	6001      	str	r1, [r0, #0]
 8004b64:	6046      	str	r6, [r0, #4]
 8004b66:	300c      	adds	r0, #12
 8004b68:	60a0      	str	r0, [r4, #8]
 8004b6a:	3268      	adds	r2, #104	; 0x68
 8004b6c:	f000 f897 	bl	8004c9e <memset>
 8004b70:	0020      	movs	r0, r4
 8004b72:	bd70      	pop	{r4, r5, r6, pc}

08004b74 <__sinit>:
 8004b74:	6983      	ldr	r3, [r0, #24]
 8004b76:	b513      	push	{r0, r1, r4, lr}
 8004b78:	0004      	movs	r4, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d128      	bne.n	8004bd0 <__sinit+0x5c>
 8004b7e:	6483      	str	r3, [r0, #72]	; 0x48
 8004b80:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004b82:	6503      	str	r3, [r0, #80]	; 0x50
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <__sinit+0x60>)
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <__sinit+0x64>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6282      	str	r2, [r0, #40]	; 0x28
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	4298      	cmp	r0, r3
 8004b90:	d101      	bne.n	8004b96 <__sinit+0x22>
 8004b92:	2301      	movs	r3, #1
 8004b94:	6183      	str	r3, [r0, #24]
 8004b96:	0020      	movs	r0, r4
 8004b98:	f000 f820 	bl	8004bdc <__sfp>
 8004b9c:	6060      	str	r0, [r4, #4]
 8004b9e:	0020      	movs	r0, r4
 8004ba0:	f000 f81c 	bl	8004bdc <__sfp>
 8004ba4:	60a0      	str	r0, [r4, #8]
 8004ba6:	0020      	movs	r0, r4
 8004ba8:	f000 f818 	bl	8004bdc <__sfp>
 8004bac:	2200      	movs	r2, #0
 8004bae:	60e0      	str	r0, [r4, #12]
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	6860      	ldr	r0, [r4, #4]
 8004bb4:	f7ff ffa4 	bl	8004b00 <std.isra.0>
 8004bb8:	2201      	movs	r2, #1
 8004bba:	2109      	movs	r1, #9
 8004bbc:	68a0      	ldr	r0, [r4, #8]
 8004bbe:	f7ff ff9f 	bl	8004b00 <std.isra.0>
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	2112      	movs	r1, #18
 8004bc6:	68e0      	ldr	r0, [r4, #12]
 8004bc8:	f7ff ff9a 	bl	8004b00 <std.isra.0>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	61a3      	str	r3, [r4, #24]
 8004bd0:	bd13      	pop	{r0, r1, r4, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	08005cc0 	.word	0x08005cc0
 8004bd8:	08004af1 	.word	0x08004af1

08004bdc <__sfp>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <__sfp+0x7c>)
 8004be0:	0007      	movs	r7, r0
 8004be2:	681e      	ldr	r6, [r3, #0]
 8004be4:	69b3      	ldr	r3, [r6, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <__sfp+0x14>
 8004bea:	0030      	movs	r0, r6
 8004bec:	f7ff ffc2 	bl	8004b74 <__sinit>
 8004bf0:	3648      	adds	r6, #72	; 0x48
 8004bf2:	68b4      	ldr	r4, [r6, #8]
 8004bf4:	6873      	ldr	r3, [r6, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	d504      	bpl.n	8004c04 <__sfp+0x28>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <__sfp+0x34>
 8004c00:	6836      	ldr	r6, [r6, #0]
 8004c02:	e7f6      	b.n	8004bf2 <__sfp+0x16>
 8004c04:	220c      	movs	r2, #12
 8004c06:	5ea5      	ldrsh	r5, [r4, r2]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	d00d      	beq.n	8004c28 <__sfp+0x4c>
 8004c0c:	3468      	adds	r4, #104	; 0x68
 8004c0e:	e7f2      	b.n	8004bf6 <__sfp+0x1a>
 8004c10:	2104      	movs	r1, #4
 8004c12:	0038      	movs	r0, r7
 8004c14:	f7ff ff98 	bl	8004b48 <__sfmoreglue>
 8004c18:	6030      	str	r0, [r6, #0]
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d1f0      	bne.n	8004c00 <__sfp+0x24>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	0004      	movs	r4, r0
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	0020      	movs	r0, r4
 8004c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c28:	2301      	movs	r3, #1
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	81e3      	strh	r3, [r4, #14]
 8004c30:	3302      	adds	r3, #2
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	6665      	str	r5, [r4, #100]	; 0x64
 8004c36:	6025      	str	r5, [r4, #0]
 8004c38:	60a5      	str	r5, [r4, #8]
 8004c3a:	6065      	str	r5, [r4, #4]
 8004c3c:	6125      	str	r5, [r4, #16]
 8004c3e:	6165      	str	r5, [r4, #20]
 8004c40:	61a5      	str	r5, [r4, #24]
 8004c42:	2208      	movs	r2, #8
 8004c44:	0029      	movs	r1, r5
 8004c46:	305c      	adds	r0, #92	; 0x5c
 8004c48:	f000 f829 	bl	8004c9e <memset>
 8004c4c:	6365      	str	r5, [r4, #52]	; 0x34
 8004c4e:	63a5      	str	r5, [r4, #56]	; 0x38
 8004c50:	64a5      	str	r5, [r4, #72]	; 0x48
 8004c52:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004c54:	e7e6      	b.n	8004c24 <__sfp+0x48>
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	08005cc0 	.word	0x08005cc0

08004c5c <_fwalk_reent>:
 8004c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0007      	movs	r7, r0
 8004c62:	2600      	movs	r6, #0
 8004c64:	9101      	str	r1, [sp, #4]
 8004c66:	3448      	adds	r4, #72	; 0x48
 8004c68:	2c00      	cmp	r4, #0
 8004c6a:	d101      	bne.n	8004c70 <_fwalk_reent+0x14>
 8004c6c:	0030      	movs	r0, r6
 8004c6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	68a5      	ldr	r5, [r4, #8]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	d501      	bpl.n	8004c82 <_fwalk_reent+0x26>
 8004c7e:	6824      	ldr	r4, [r4, #0]
 8004c80:	e7f2      	b.n	8004c68 <_fwalk_reent+0xc>
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d908      	bls.n	8004c9a <_fwalk_reent+0x3e>
 8004c88:	220e      	movs	r2, #14
 8004c8a:	5eab      	ldrsh	r3, [r5, r2]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	d004      	beq.n	8004c9a <_fwalk_reent+0x3e>
 8004c90:	0029      	movs	r1, r5
 8004c92:	0038      	movs	r0, r7
 8004c94:	9b01      	ldr	r3, [sp, #4]
 8004c96:	4798      	blx	r3
 8004c98:	4306      	orrs	r6, r0
 8004c9a:	3568      	adds	r5, #104	; 0x68
 8004c9c:	e7eb      	b.n	8004c76 <_fwalk_reent+0x1a>

08004c9e <memset>:
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	1882      	adds	r2, r0, r2
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d100      	bne.n	8004ca8 <memset+0xa>
 8004ca6:	4770      	bx	lr
 8004ca8:	7019      	strb	r1, [r3, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	e7f9      	b.n	8004ca2 <memset+0x4>
	...

08004cb0 <_malloc_r>:
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	b570      	push	{r4, r5, r6, lr}
 8004cb4:	1ccd      	adds	r5, r1, #3
 8004cb6:	439d      	bics	r5, r3
 8004cb8:	3508      	adds	r5, #8
 8004cba:	0006      	movs	r6, r0
 8004cbc:	2d0c      	cmp	r5, #12
 8004cbe:	d21e      	bcs.n	8004cfe <_malloc_r+0x4e>
 8004cc0:	250c      	movs	r5, #12
 8004cc2:	42a9      	cmp	r1, r5
 8004cc4:	d81d      	bhi.n	8004d02 <_malloc_r+0x52>
 8004cc6:	0030      	movs	r0, r6
 8004cc8:	f000 fdad 	bl	8005826 <__malloc_lock>
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <_malloc_r+0xb4>)
 8004cce:	6814      	ldr	r4, [r2, #0]
 8004cd0:	0021      	movs	r1, r4
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	d119      	bne.n	8004d0a <_malloc_r+0x5a>
 8004cd6:	4c24      	ldr	r4, [pc, #144]	; (8004d68 <_malloc_r+0xb8>)
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <_malloc_r+0x36>
 8004cde:	0030      	movs	r0, r6
 8004ce0:	f000 fb10 	bl	8005304 <_sbrk_r>
 8004ce4:	6020      	str	r0, [r4, #0]
 8004ce6:	0029      	movs	r1, r5
 8004ce8:	0030      	movs	r0, r6
 8004cea:	f000 fb0b 	bl	8005304 <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d12c      	bne.n	8004d4c <_malloc_r+0x9c>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	0030      	movs	r0, r6
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f000 fd96 	bl	8005828 <__malloc_unlock>
 8004cfc:	e003      	b.n	8004d06 <_malloc_r+0x56>
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	dadf      	bge.n	8004cc2 <_malloc_r+0x12>
 8004d02:	230c      	movs	r3, #12
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	2000      	movs	r0, #0
 8004d08:	bd70      	pop	{r4, r5, r6, pc}
 8004d0a:	680b      	ldr	r3, [r1, #0]
 8004d0c:	1b5b      	subs	r3, r3, r5
 8004d0e:	d41a      	bmi.n	8004d46 <_malloc_r+0x96>
 8004d10:	2b0b      	cmp	r3, #11
 8004d12:	d903      	bls.n	8004d1c <_malloc_r+0x6c>
 8004d14:	600b      	str	r3, [r1, #0]
 8004d16:	18cc      	adds	r4, r1, r3
 8004d18:	6025      	str	r5, [r4, #0]
 8004d1a:	e003      	b.n	8004d24 <_malloc_r+0x74>
 8004d1c:	428c      	cmp	r4, r1
 8004d1e:	d10e      	bne.n	8004d3e <_malloc_r+0x8e>
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	0030      	movs	r0, r6
 8004d26:	f000 fd7f 	bl	8005828 <__malloc_unlock>
 8004d2a:	0020      	movs	r0, r4
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	300b      	adds	r0, #11
 8004d30:	1d23      	adds	r3, r4, #4
 8004d32:	4390      	bics	r0, r2
 8004d34:	1ac3      	subs	r3, r0, r3
 8004d36:	d0e7      	beq.n	8004d08 <_malloc_r+0x58>
 8004d38:	425a      	negs	r2, r3
 8004d3a:	50e2      	str	r2, [r4, r3]
 8004d3c:	e7e4      	b.n	8004d08 <_malloc_r+0x58>
 8004d3e:	684b      	ldr	r3, [r1, #4]
 8004d40:	6063      	str	r3, [r4, #4]
 8004d42:	000c      	movs	r4, r1
 8004d44:	e7ee      	b.n	8004d24 <_malloc_r+0x74>
 8004d46:	000c      	movs	r4, r1
 8004d48:	6849      	ldr	r1, [r1, #4]
 8004d4a:	e7c2      	b.n	8004cd2 <_malloc_r+0x22>
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	1cc4      	adds	r4, r0, #3
 8004d50:	439c      	bics	r4, r3
 8004d52:	42a0      	cmp	r0, r4
 8004d54:	d0e0      	beq.n	8004d18 <_malloc_r+0x68>
 8004d56:	1a21      	subs	r1, r4, r0
 8004d58:	0030      	movs	r0, r6
 8004d5a:	f000 fad3 	bl	8005304 <_sbrk_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d1da      	bne.n	8004d18 <_malloc_r+0x68>
 8004d62:	e7c6      	b.n	8004cf2 <_malloc_r+0x42>
 8004d64:	20000184 	.word	0x20000184
 8004d68:	20000188 	.word	0x20000188

08004d6c <__sfputc_r>:
 8004d6c:	6893      	ldr	r3, [r2, #8]
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	3b01      	subs	r3, #1
 8004d72:	6093      	str	r3, [r2, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da05      	bge.n	8004d84 <__sfputc_r+0x18>
 8004d78:	6994      	ldr	r4, [r2, #24]
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	db08      	blt.n	8004d90 <__sfputc_r+0x24>
 8004d7e:	b2cb      	uxtb	r3, r1
 8004d80:	2b0a      	cmp	r3, #10
 8004d82:	d005      	beq.n	8004d90 <__sfputc_r+0x24>
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	1c58      	adds	r0, r3, #1
 8004d88:	6010      	str	r0, [r2, #0]
 8004d8a:	7019      	strb	r1, [r3, #0]
 8004d8c:	b2c8      	uxtb	r0, r1
 8004d8e:	bd10      	pop	{r4, pc}
 8004d90:	f000 fb16 	bl	80053c0 <__swbuf_r>
 8004d94:	e7fb      	b.n	8004d8e <__sfputc_r+0x22>

08004d96 <__sfputs_r>:
 8004d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d98:	0006      	movs	r6, r0
 8004d9a:	000f      	movs	r7, r1
 8004d9c:	0014      	movs	r4, r2
 8004d9e:	18d5      	adds	r5, r2, r3
 8004da0:	42ac      	cmp	r4, r5
 8004da2:	d101      	bne.n	8004da8 <__sfputs_r+0x12>
 8004da4:	2000      	movs	r0, #0
 8004da6:	e007      	b.n	8004db8 <__sfputs_r+0x22>
 8004da8:	7821      	ldrb	r1, [r4, #0]
 8004daa:	003a      	movs	r2, r7
 8004dac:	0030      	movs	r0, r6
 8004dae:	f7ff ffdd 	bl	8004d6c <__sfputc_r>
 8004db2:	3401      	adds	r4, #1
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d1f3      	bne.n	8004da0 <__sfputs_r+0xa>
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dbc <_vfiprintf_r>:
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	b09f      	sub	sp, #124	; 0x7c
 8004dc0:	0006      	movs	r6, r0
 8004dc2:	000f      	movs	r7, r1
 8004dc4:	0014      	movs	r4, r2
 8004dc6:	9305      	str	r3, [sp, #20]
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d004      	beq.n	8004dd6 <_vfiprintf_r+0x1a>
 8004dcc:	6983      	ldr	r3, [r0, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <_vfiprintf_r+0x1a>
 8004dd2:	f7ff fecf 	bl	8004b74 <__sinit>
 8004dd6:	4b7f      	ldr	r3, [pc, #508]	; (8004fd4 <_vfiprintf_r+0x218>)
 8004dd8:	429f      	cmp	r7, r3
 8004dda:	d15c      	bne.n	8004e96 <_vfiprintf_r+0xda>
 8004ddc:	6877      	ldr	r7, [r6, #4]
 8004dde:	89bb      	ldrh	r3, [r7, #12]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	d562      	bpl.n	8004eaa <_vfiprintf_r+0xee>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d05f      	beq.n	8004eaa <_vfiprintf_r+0xee>
 8004dea:	2300      	movs	r3, #0
 8004dec:	ad06      	add	r5, sp, #24
 8004dee:	616b      	str	r3, [r5, #20]
 8004df0:	3320      	adds	r3, #32
 8004df2:	766b      	strb	r3, [r5, #25]
 8004df4:	3310      	adds	r3, #16
 8004df6:	76ab      	strb	r3, [r5, #26]
 8004df8:	9402      	str	r4, [sp, #8]
 8004dfa:	9c02      	ldr	r4, [sp, #8]
 8004dfc:	7823      	ldrb	r3, [r4, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d15d      	bne.n	8004ebe <_vfiprintf_r+0x102>
 8004e02:	9b02      	ldr	r3, [sp, #8]
 8004e04:	1ae3      	subs	r3, r4, r3
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	d00d      	beq.n	8004e26 <_vfiprintf_r+0x6a>
 8004e0a:	9b04      	ldr	r3, [sp, #16]
 8004e0c:	9a02      	ldr	r2, [sp, #8]
 8004e0e:	0039      	movs	r1, r7
 8004e10:	0030      	movs	r0, r6
 8004e12:	f7ff ffc0 	bl	8004d96 <__sfputs_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d100      	bne.n	8004e1c <_vfiprintf_r+0x60>
 8004e1a:	e0cc      	b.n	8004fb6 <_vfiprintf_r+0x1fa>
 8004e1c:	696a      	ldr	r2, [r5, #20]
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	4694      	mov	ip, r2
 8004e22:	4463      	add	r3, ip
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	7823      	ldrb	r3, [r4, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d100      	bne.n	8004e2e <_vfiprintf_r+0x72>
 8004e2c:	e0c3      	b.n	8004fb6 <_vfiprintf_r+0x1fa>
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2300      	movs	r3, #0
 8004e32:	4252      	negs	r2, r2
 8004e34:	606a      	str	r2, [r5, #4]
 8004e36:	a902      	add	r1, sp, #8
 8004e38:	3254      	adds	r2, #84	; 0x54
 8004e3a:	1852      	adds	r2, r2, r1
 8004e3c:	3401      	adds	r4, #1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	60eb      	str	r3, [r5, #12]
 8004e42:	60ab      	str	r3, [r5, #8]
 8004e44:	7013      	strb	r3, [r2, #0]
 8004e46:	65ab      	str	r3, [r5, #88]	; 0x58
 8004e48:	7821      	ldrb	r1, [r4, #0]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	4862      	ldr	r0, [pc, #392]	; (8004fd8 <_vfiprintf_r+0x21c>)
 8004e4e:	f000 fcdf 	bl	8005810 <memchr>
 8004e52:	1c63      	adds	r3, r4, #1
 8004e54:	469c      	mov	ip, r3
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d135      	bne.n	8004ec6 <_vfiprintf_r+0x10a>
 8004e5a:	6829      	ldr	r1, [r5, #0]
 8004e5c:	06cb      	lsls	r3, r1, #27
 8004e5e:	d504      	bpl.n	8004e6a <_vfiprintf_r+0xae>
 8004e60:	2353      	movs	r3, #83	; 0x53
 8004e62:	aa02      	add	r2, sp, #8
 8004e64:	3020      	adds	r0, #32
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	7018      	strb	r0, [r3, #0]
 8004e6a:	070b      	lsls	r3, r1, #28
 8004e6c:	d504      	bpl.n	8004e78 <_vfiprintf_r+0xbc>
 8004e6e:	2353      	movs	r3, #83	; 0x53
 8004e70:	202b      	movs	r0, #43	; 0x2b
 8004e72:	aa02      	add	r2, sp, #8
 8004e74:	189b      	adds	r3, r3, r2
 8004e76:	7018      	strb	r0, [r3, #0]
 8004e78:	7823      	ldrb	r3, [r4, #0]
 8004e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e7c:	d02c      	beq.n	8004ed8 <_vfiprintf_r+0x11c>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	210a      	movs	r1, #10
 8004e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e84:	7822      	ldrb	r2, [r4, #0]
 8004e86:	3a30      	subs	r2, #48	; 0x30
 8004e88:	2a09      	cmp	r2, #9
 8004e8a:	d800      	bhi.n	8004e8e <_vfiprintf_r+0xd2>
 8004e8c:	e06b      	b.n	8004f66 <_vfiprintf_r+0x1aa>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d02a      	beq.n	8004ee8 <_vfiprintf_r+0x12c>
 8004e92:	9309      	str	r3, [sp, #36]	; 0x24
 8004e94:	e028      	b.n	8004ee8 <_vfiprintf_r+0x12c>
 8004e96:	4b51      	ldr	r3, [pc, #324]	; (8004fdc <_vfiprintf_r+0x220>)
 8004e98:	429f      	cmp	r7, r3
 8004e9a:	d101      	bne.n	8004ea0 <_vfiprintf_r+0xe4>
 8004e9c:	68b7      	ldr	r7, [r6, #8]
 8004e9e:	e79e      	b.n	8004dde <_vfiprintf_r+0x22>
 8004ea0:	4b4f      	ldr	r3, [pc, #316]	; (8004fe0 <_vfiprintf_r+0x224>)
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	d19b      	bne.n	8004dde <_vfiprintf_r+0x22>
 8004ea6:	68f7      	ldr	r7, [r6, #12]
 8004ea8:	e799      	b.n	8004dde <_vfiprintf_r+0x22>
 8004eaa:	0039      	movs	r1, r7
 8004eac:	0030      	movs	r0, r6
 8004eae:	f000 faf1 	bl	8005494 <__swsetup_r>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d099      	beq.n	8004dea <_vfiprintf_r+0x2e>
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	4240      	negs	r0, r0
 8004eba:	b01f      	add	sp, #124	; 0x7c
 8004ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ebe:	2b25      	cmp	r3, #37	; 0x25
 8004ec0:	d09f      	beq.n	8004e02 <_vfiprintf_r+0x46>
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	e79a      	b.n	8004dfc <_vfiprintf_r+0x40>
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <_vfiprintf_r+0x21c>)
 8004ec8:	6829      	ldr	r1, [r5, #0]
 8004eca:	1ac0      	subs	r0, r0, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4083      	lsls	r3, r0
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	4664      	mov	r4, ip
 8004ed6:	e7b7      	b.n	8004e48 <_vfiprintf_r+0x8c>
 8004ed8:	9b05      	ldr	r3, [sp, #20]
 8004eda:	1d18      	adds	r0, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9005      	str	r0, [sp, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db3a      	blt.n	8004f5a <_vfiprintf_r+0x19e>
 8004ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee6:	4664      	mov	r4, ip
 8004ee8:	7823      	ldrb	r3, [r4, #0]
 8004eea:	2b2e      	cmp	r3, #46	; 0x2e
 8004eec:	d10b      	bne.n	8004f06 <_vfiprintf_r+0x14a>
 8004eee:	7863      	ldrb	r3, [r4, #1]
 8004ef0:	1c62      	adds	r2, r4, #1
 8004ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef4:	d13f      	bne.n	8004f76 <_vfiprintf_r+0x1ba>
 8004ef6:	9b05      	ldr	r3, [sp, #20]
 8004ef8:	3402      	adds	r4, #2
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	9205      	str	r2, [sp, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db35      	blt.n	8004f70 <_vfiprintf_r+0x1b4>
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	7821      	ldrb	r1, [r4, #0]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	4836      	ldr	r0, [pc, #216]	; (8004fe4 <_vfiprintf_r+0x228>)
 8004f0c:	f000 fc80 	bl	8005810 <memchr>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d007      	beq.n	8004f24 <_vfiprintf_r+0x168>
 8004f14:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <_vfiprintf_r+0x228>)
 8004f16:	682a      	ldr	r2, [r5, #0]
 8004f18:	1ac0      	subs	r0, r0, r3
 8004f1a:	2340      	movs	r3, #64	; 0x40
 8004f1c:	4083      	lsls	r3, r0
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	3401      	adds	r4, #1
 8004f24:	7821      	ldrb	r1, [r4, #0]
 8004f26:	1c63      	adds	r3, r4, #1
 8004f28:	2206      	movs	r2, #6
 8004f2a:	482f      	ldr	r0, [pc, #188]	; (8004fe8 <_vfiprintf_r+0x22c>)
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	7629      	strb	r1, [r5, #24]
 8004f30:	f000 fc6e 	bl	8005810 <memchr>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d044      	beq.n	8004fc2 <_vfiprintf_r+0x206>
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <_vfiprintf_r+0x230>)
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d12f      	bne.n	8004f9e <_vfiprintf_r+0x1e2>
 8004f3e:	6829      	ldr	r1, [r5, #0]
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	2207      	movs	r2, #7
 8004f44:	05c9      	lsls	r1, r1, #23
 8004f46:	d528      	bpl.n	8004f9a <_vfiprintf_r+0x1de>
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	696b      	ldr	r3, [r5, #20]
 8004f52:	9a03      	ldr	r2, [sp, #12]
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	616b      	str	r3, [r5, #20]
 8004f58:	e74f      	b.n	8004dfa <_vfiprintf_r+0x3e>
 8004f5a:	425b      	negs	r3, r3
 8004f5c:	60eb      	str	r3, [r5, #12]
 8004f5e:	2302      	movs	r3, #2
 8004f60:	430b      	orrs	r3, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	e7bf      	b.n	8004ee6 <_vfiprintf_r+0x12a>
 8004f66:	434b      	muls	r3, r1
 8004f68:	3401      	adds	r4, #1
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	e789      	b.n	8004e84 <_vfiprintf_r+0xc8>
 8004f70:	2301      	movs	r3, #1
 8004f72:	425b      	negs	r3, r3
 8004f74:	e7c6      	b.n	8004f04 <_vfiprintf_r+0x148>
 8004f76:	2300      	movs	r3, #0
 8004f78:	0014      	movs	r4, r2
 8004f7a:	200a      	movs	r0, #10
 8004f7c:	001a      	movs	r2, r3
 8004f7e:	606b      	str	r3, [r5, #4]
 8004f80:	7821      	ldrb	r1, [r4, #0]
 8004f82:	3930      	subs	r1, #48	; 0x30
 8004f84:	2909      	cmp	r1, #9
 8004f86:	d903      	bls.n	8004f90 <_vfiprintf_r+0x1d4>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0bc      	beq.n	8004f06 <_vfiprintf_r+0x14a>
 8004f8c:	9207      	str	r2, [sp, #28]
 8004f8e:	e7ba      	b.n	8004f06 <_vfiprintf_r+0x14a>
 8004f90:	4342      	muls	r2, r0
 8004f92:	3401      	adds	r4, #1
 8004f94:	1852      	adds	r2, r2, r1
 8004f96:	2301      	movs	r3, #1
 8004f98:	e7f2      	b.n	8004f80 <_vfiprintf_r+0x1c4>
 8004f9a:	3307      	adds	r3, #7
 8004f9c:	e7d5      	b.n	8004f4a <_vfiprintf_r+0x18e>
 8004f9e:	ab05      	add	r3, sp, #20
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	003a      	movs	r2, r7
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <_vfiprintf_r+0x234>)
 8004fa6:	0029      	movs	r1, r5
 8004fa8:	0030      	movs	r0, r6
 8004faa:	e000      	b.n	8004fae <_vfiprintf_r+0x1f2>
 8004fac:	bf00      	nop
 8004fae:	9003      	str	r0, [sp, #12]
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	d1cc      	bne.n	8004f50 <_vfiprintf_r+0x194>
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	065b      	lsls	r3, r3, #25
 8004fba:	d500      	bpl.n	8004fbe <_vfiprintf_r+0x202>
 8004fbc:	e77b      	b.n	8004eb6 <_vfiprintf_r+0xfa>
 8004fbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fc0:	e77b      	b.n	8004eba <_vfiprintf_r+0xfe>
 8004fc2:	ab05      	add	r3, sp, #20
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	003a      	movs	r2, r7
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <_vfiprintf_r+0x234>)
 8004fca:	0029      	movs	r1, r5
 8004fcc:	0030      	movs	r0, r6
 8004fce:	f000 f87f 	bl	80050d0 <_printf_i>
 8004fd2:	e7ec      	b.n	8004fae <_vfiprintf_r+0x1f2>
 8004fd4:	08005c80 	.word	0x08005c80
 8004fd8:	08005cc4 	.word	0x08005cc4
 8004fdc:	08005ca0 	.word	0x08005ca0
 8004fe0:	08005c60 	.word	0x08005c60
 8004fe4:	08005cca 	.word	0x08005cca
 8004fe8:	08005cce 	.word	0x08005cce
 8004fec:	00000000 	.word	0x00000000
 8004ff0:	08004d97 	.word	0x08004d97

08004ff4 <_printf_common>:
 8004ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff6:	0015      	movs	r5, r2
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	688a      	ldr	r2, [r1, #8]
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	9000      	str	r0, [sp, #0]
 8005000:	000c      	movs	r4, r1
 8005002:	4293      	cmp	r3, r2
 8005004:	da00      	bge.n	8005008 <_printf_common+0x14>
 8005006:	0013      	movs	r3, r2
 8005008:	0022      	movs	r2, r4
 800500a:	602b      	str	r3, [r5, #0]
 800500c:	3243      	adds	r2, #67	; 0x43
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	2a00      	cmp	r2, #0
 8005012:	d001      	beq.n	8005018 <_printf_common+0x24>
 8005014:	3301      	adds	r3, #1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	069b      	lsls	r3, r3, #26
 800501c:	d502      	bpl.n	8005024 <_printf_common+0x30>
 800501e:	682b      	ldr	r3, [r5, #0]
 8005020:	3302      	adds	r3, #2
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	2706      	movs	r7, #6
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	401f      	ands	r7, r3
 800502a:	d027      	beq.n	800507c <_printf_common+0x88>
 800502c:	0023      	movs	r3, r4
 800502e:	3343      	adds	r3, #67	; 0x43
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	4193      	sbcs	r3, r2
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	0692      	lsls	r2, r2, #26
 800503a:	d430      	bmi.n	800509e <_printf_common+0xaa>
 800503c:	0022      	movs	r2, r4
 800503e:	9901      	ldr	r1, [sp, #4]
 8005040:	3243      	adds	r2, #67	; 0x43
 8005042:	9800      	ldr	r0, [sp, #0]
 8005044:	9e08      	ldr	r6, [sp, #32]
 8005046:	47b0      	blx	r6
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d025      	beq.n	8005098 <_printf_common+0xa4>
 800504c:	2306      	movs	r3, #6
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	682a      	ldr	r2, [r5, #0]
 8005052:	68e1      	ldr	r1, [r4, #12]
 8005054:	4003      	ands	r3, r0
 8005056:	2500      	movs	r5, #0
 8005058:	2b04      	cmp	r3, #4
 800505a:	d103      	bne.n	8005064 <_printf_common+0x70>
 800505c:	1a8d      	subs	r5, r1, r2
 800505e:	43eb      	mvns	r3, r5
 8005060:	17db      	asrs	r3, r3, #31
 8005062:	401d      	ands	r5, r3
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	6922      	ldr	r2, [r4, #16]
 8005068:	4293      	cmp	r3, r2
 800506a:	dd01      	ble.n	8005070 <_printf_common+0x7c>
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	18ed      	adds	r5, r5, r3
 8005070:	2700      	movs	r7, #0
 8005072:	42bd      	cmp	r5, r7
 8005074:	d120      	bne.n	80050b8 <_printf_common+0xc4>
 8005076:	2000      	movs	r0, #0
 8005078:	e010      	b.n	800509c <_printf_common+0xa8>
 800507a:	3701      	adds	r7, #1
 800507c:	68e3      	ldr	r3, [r4, #12]
 800507e:	682a      	ldr	r2, [r5, #0]
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	429f      	cmp	r7, r3
 8005084:	dad2      	bge.n	800502c <_printf_common+0x38>
 8005086:	0022      	movs	r2, r4
 8005088:	2301      	movs	r3, #1
 800508a:	3219      	adds	r2, #25
 800508c:	9901      	ldr	r1, [sp, #4]
 800508e:	9800      	ldr	r0, [sp, #0]
 8005090:	9e08      	ldr	r6, [sp, #32]
 8005092:	47b0      	blx	r6
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d1f0      	bne.n	800507a <_printf_common+0x86>
 8005098:	2001      	movs	r0, #1
 800509a:	4240      	negs	r0, r0
 800509c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800509e:	2030      	movs	r0, #48	; 0x30
 80050a0:	18e1      	adds	r1, r4, r3
 80050a2:	3143      	adds	r1, #67	; 0x43
 80050a4:	7008      	strb	r0, [r1, #0]
 80050a6:	0021      	movs	r1, r4
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	3145      	adds	r1, #69	; 0x45
 80050ac:	7809      	ldrb	r1, [r1, #0]
 80050ae:	18a2      	adds	r2, r4, r2
 80050b0:	3243      	adds	r2, #67	; 0x43
 80050b2:	3302      	adds	r3, #2
 80050b4:	7011      	strb	r1, [r2, #0]
 80050b6:	e7c1      	b.n	800503c <_printf_common+0x48>
 80050b8:	0022      	movs	r2, r4
 80050ba:	2301      	movs	r3, #1
 80050bc:	321a      	adds	r2, #26
 80050be:	9901      	ldr	r1, [sp, #4]
 80050c0:	9800      	ldr	r0, [sp, #0]
 80050c2:	9e08      	ldr	r6, [sp, #32]
 80050c4:	47b0      	blx	r6
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	d0e6      	beq.n	8005098 <_printf_common+0xa4>
 80050ca:	3701      	adds	r7, #1
 80050cc:	e7d1      	b.n	8005072 <_printf_common+0x7e>
	...

080050d0 <_printf_i>:
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	b08b      	sub	sp, #44	; 0x2c
 80050d4:	9206      	str	r2, [sp, #24]
 80050d6:	000a      	movs	r2, r1
 80050d8:	3243      	adds	r2, #67	; 0x43
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	9005      	str	r0, [sp, #20]
 80050de:	9204      	str	r2, [sp, #16]
 80050e0:	7e0a      	ldrb	r2, [r1, #24]
 80050e2:	000c      	movs	r4, r1
 80050e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050e6:	2a6e      	cmp	r2, #110	; 0x6e
 80050e8:	d100      	bne.n	80050ec <_printf_i+0x1c>
 80050ea:	e08f      	b.n	800520c <_printf_i+0x13c>
 80050ec:	d817      	bhi.n	800511e <_printf_i+0x4e>
 80050ee:	2a63      	cmp	r2, #99	; 0x63
 80050f0:	d02c      	beq.n	800514c <_printf_i+0x7c>
 80050f2:	d808      	bhi.n	8005106 <_printf_i+0x36>
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d100      	bne.n	80050fa <_printf_i+0x2a>
 80050f8:	e099      	b.n	800522e <_printf_i+0x15e>
 80050fa:	2a58      	cmp	r2, #88	; 0x58
 80050fc:	d054      	beq.n	80051a8 <_printf_i+0xd8>
 80050fe:	0026      	movs	r6, r4
 8005100:	3642      	adds	r6, #66	; 0x42
 8005102:	7032      	strb	r2, [r6, #0]
 8005104:	e029      	b.n	800515a <_printf_i+0x8a>
 8005106:	2a64      	cmp	r2, #100	; 0x64
 8005108:	d001      	beq.n	800510e <_printf_i+0x3e>
 800510a:	2a69      	cmp	r2, #105	; 0x69
 800510c:	d1f7      	bne.n	80050fe <_printf_i+0x2e>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	0608      	lsls	r0, r1, #24
 8005114:	d523      	bpl.n	800515e <_printf_i+0x8e>
 8005116:	1d11      	adds	r1, r2, #4
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	6815      	ldr	r5, [r2, #0]
 800511c:	e025      	b.n	800516a <_printf_i+0x9a>
 800511e:	2a73      	cmp	r2, #115	; 0x73
 8005120:	d100      	bne.n	8005124 <_printf_i+0x54>
 8005122:	e088      	b.n	8005236 <_printf_i+0x166>
 8005124:	d808      	bhi.n	8005138 <_printf_i+0x68>
 8005126:	2a6f      	cmp	r2, #111	; 0x6f
 8005128:	d029      	beq.n	800517e <_printf_i+0xae>
 800512a:	2a70      	cmp	r2, #112	; 0x70
 800512c:	d1e7      	bne.n	80050fe <_printf_i+0x2e>
 800512e:	2220      	movs	r2, #32
 8005130:	6809      	ldr	r1, [r1, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	e003      	b.n	8005140 <_printf_i+0x70>
 8005138:	2a75      	cmp	r2, #117	; 0x75
 800513a:	d020      	beq.n	800517e <_printf_i+0xae>
 800513c:	2a78      	cmp	r2, #120	; 0x78
 800513e:	d1de      	bne.n	80050fe <_printf_i+0x2e>
 8005140:	0022      	movs	r2, r4
 8005142:	2178      	movs	r1, #120	; 0x78
 8005144:	3245      	adds	r2, #69	; 0x45
 8005146:	7011      	strb	r1, [r2, #0]
 8005148:	4a6c      	ldr	r2, [pc, #432]	; (80052fc <_printf_i+0x22c>)
 800514a:	e030      	b.n	80051ae <_printf_i+0xde>
 800514c:	000e      	movs	r6, r1
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	3642      	adds	r6, #66	; 0x42
 8005152:	1d11      	adds	r1, r2, #4
 8005154:	6019      	str	r1, [r3, #0]
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	7033      	strb	r3, [r6, #0]
 800515a:	2301      	movs	r3, #1
 800515c:	e079      	b.n	8005252 <_printf_i+0x182>
 800515e:	0649      	lsls	r1, r1, #25
 8005160:	d5d9      	bpl.n	8005116 <_printf_i+0x46>
 8005162:	1d11      	adds	r1, r2, #4
 8005164:	6019      	str	r1, [r3, #0]
 8005166:	2300      	movs	r3, #0
 8005168:	5ed5      	ldrsh	r5, [r2, r3]
 800516a:	2d00      	cmp	r5, #0
 800516c:	da03      	bge.n	8005176 <_printf_i+0xa6>
 800516e:	232d      	movs	r3, #45	; 0x2d
 8005170:	9a04      	ldr	r2, [sp, #16]
 8005172:	426d      	negs	r5, r5
 8005174:	7013      	strb	r3, [r2, #0]
 8005176:	4b62      	ldr	r3, [pc, #392]	; (8005300 <_printf_i+0x230>)
 8005178:	270a      	movs	r7, #10
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	e02f      	b.n	80051de <_printf_i+0x10e>
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	6819      	ldr	r1, [r3, #0]
 8005182:	0605      	lsls	r5, r0, #24
 8005184:	d503      	bpl.n	800518e <_printf_i+0xbe>
 8005186:	1d08      	adds	r0, r1, #4
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	680d      	ldr	r5, [r1, #0]
 800518c:	e005      	b.n	800519a <_printf_i+0xca>
 800518e:	0640      	lsls	r0, r0, #25
 8005190:	d5f9      	bpl.n	8005186 <_printf_i+0xb6>
 8005192:	680d      	ldr	r5, [r1, #0]
 8005194:	1d08      	adds	r0, r1, #4
 8005196:	6018      	str	r0, [r3, #0]
 8005198:	b2ad      	uxth	r5, r5
 800519a:	4b59      	ldr	r3, [pc, #356]	; (8005300 <_printf_i+0x230>)
 800519c:	2708      	movs	r7, #8
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	2a6f      	cmp	r2, #111	; 0x6f
 80051a2:	d018      	beq.n	80051d6 <_printf_i+0x106>
 80051a4:	270a      	movs	r7, #10
 80051a6:	e016      	b.n	80051d6 <_printf_i+0x106>
 80051a8:	3145      	adds	r1, #69	; 0x45
 80051aa:	700a      	strb	r2, [r1, #0]
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <_printf_i+0x230>)
 80051ae:	9203      	str	r2, [sp, #12]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	6821      	ldr	r1, [r4, #0]
 80051b4:	1d10      	adds	r0, r2, #4
 80051b6:	6018      	str	r0, [r3, #0]
 80051b8:	6815      	ldr	r5, [r2, #0]
 80051ba:	0608      	lsls	r0, r1, #24
 80051bc:	d522      	bpl.n	8005204 <_printf_i+0x134>
 80051be:	07cb      	lsls	r3, r1, #31
 80051c0:	d502      	bpl.n	80051c8 <_printf_i+0xf8>
 80051c2:	2320      	movs	r3, #32
 80051c4:	4319      	orrs	r1, r3
 80051c6:	6021      	str	r1, [r4, #0]
 80051c8:	2710      	movs	r7, #16
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	d103      	bne.n	80051d6 <_printf_i+0x106>
 80051ce:	2320      	movs	r3, #32
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	439a      	bics	r2, r3
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	0023      	movs	r3, r4
 80051d8:	2200      	movs	r2, #0
 80051da:	3343      	adds	r3, #67	; 0x43
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	6863      	ldr	r3, [r4, #4]
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	db5c      	blt.n	80052a0 <_printf_i+0x1d0>
 80051e6:	2204      	movs	r2, #4
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	4391      	bics	r1, r2
 80051ec:	6021      	str	r1, [r4, #0]
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	d158      	bne.n	80052a4 <_printf_i+0x1d4>
 80051f2:	9e04      	ldr	r6, [sp, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d064      	beq.n	80052c2 <_printf_i+0x1f2>
 80051f8:	0026      	movs	r6, r4
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	3642      	adds	r6, #66	; 0x42
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	7033      	strb	r3, [r6, #0]
 8005202:	e05e      	b.n	80052c2 <_printf_i+0x1f2>
 8005204:	0648      	lsls	r0, r1, #25
 8005206:	d5da      	bpl.n	80051be <_printf_i+0xee>
 8005208:	b2ad      	uxth	r5, r5
 800520a:	e7d8      	b.n	80051be <_printf_i+0xee>
 800520c:	6809      	ldr	r1, [r1, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	0608      	lsls	r0, r1, #24
 8005212:	d505      	bpl.n	8005220 <_printf_i+0x150>
 8005214:	1d11      	adds	r1, r2, #4
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	6813      	ldr	r3, [r2, #0]
 800521a:	6962      	ldr	r2, [r4, #20]
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e006      	b.n	800522e <_printf_i+0x15e>
 8005220:	0649      	lsls	r1, r1, #25
 8005222:	d5f7      	bpl.n	8005214 <_printf_i+0x144>
 8005224:	1d11      	adds	r1, r2, #4
 8005226:	6019      	str	r1, [r3, #0]
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	8aa2      	ldrh	r2, [r4, #20]
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	9e04      	ldr	r6, [sp, #16]
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	e054      	b.n	80052e0 <_printf_i+0x210>
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	1d11      	adds	r1, r2, #4
 800523a:	6019      	str	r1, [r3, #0]
 800523c:	6816      	ldr	r6, [r2, #0]
 800523e:	2100      	movs	r1, #0
 8005240:	6862      	ldr	r2, [r4, #4]
 8005242:	0030      	movs	r0, r6
 8005244:	f000 fae4 	bl	8005810 <memchr>
 8005248:	2800      	cmp	r0, #0
 800524a:	d001      	beq.n	8005250 <_printf_i+0x180>
 800524c:	1b80      	subs	r0, r0, r6
 800524e:	6060      	str	r0, [r4, #4]
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	7013      	strb	r3, [r2, #0]
 800525a:	e041      	b.n	80052e0 <_printf_i+0x210>
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	0032      	movs	r2, r6
 8005260:	9906      	ldr	r1, [sp, #24]
 8005262:	9805      	ldr	r0, [sp, #20]
 8005264:	9d07      	ldr	r5, [sp, #28]
 8005266:	47a8      	blx	r5
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d043      	beq.n	80052f4 <_printf_i+0x224>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	2500      	movs	r5, #0
 8005270:	079b      	lsls	r3, r3, #30
 8005272:	d40f      	bmi.n	8005294 <_printf_i+0x1c4>
 8005274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	4298      	cmp	r0, r3
 800527a:	da3d      	bge.n	80052f8 <_printf_i+0x228>
 800527c:	0018      	movs	r0, r3
 800527e:	e03b      	b.n	80052f8 <_printf_i+0x228>
 8005280:	0022      	movs	r2, r4
 8005282:	2301      	movs	r3, #1
 8005284:	3219      	adds	r2, #25
 8005286:	9906      	ldr	r1, [sp, #24]
 8005288:	9805      	ldr	r0, [sp, #20]
 800528a:	9e07      	ldr	r6, [sp, #28]
 800528c:	47b0      	blx	r6
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d030      	beq.n	80052f4 <_printf_i+0x224>
 8005292:	3501      	adds	r5, #1
 8005294:	68e3      	ldr	r3, [r4, #12]
 8005296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	429d      	cmp	r5, r3
 800529c:	dbf0      	blt.n	8005280 <_printf_i+0x1b0>
 800529e:	e7e9      	b.n	8005274 <_printf_i+0x1a4>
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	d0a9      	beq.n	80051f8 <_printf_i+0x128>
 80052a4:	9e04      	ldr	r6, [sp, #16]
 80052a6:	0028      	movs	r0, r5
 80052a8:	0039      	movs	r1, r7
 80052aa:	f7fa ffdb 	bl	8000264 <__aeabi_uidivmod>
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	3e01      	subs	r6, #1
 80052b2:	5c5b      	ldrb	r3, [r3, r1]
 80052b4:	0028      	movs	r0, r5
 80052b6:	7033      	strb	r3, [r6, #0]
 80052b8:	0039      	movs	r1, r7
 80052ba:	f7fa ff4d 	bl	8000158 <__udivsi3>
 80052be:	1e05      	subs	r5, r0, #0
 80052c0:	d1f1      	bne.n	80052a6 <_printf_i+0x1d6>
 80052c2:	2f08      	cmp	r7, #8
 80052c4:	d109      	bne.n	80052da <_printf_i+0x20a>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d506      	bpl.n	80052da <_printf_i+0x20a>
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	6922      	ldr	r2, [r4, #16]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dc02      	bgt.n	80052da <_printf_i+0x20a>
 80052d4:	2330      	movs	r3, #48	; 0x30
 80052d6:	3e01      	subs	r6, #1
 80052d8:	7033      	strb	r3, [r6, #0]
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	1b9b      	subs	r3, r3, r6
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	9b07      	ldr	r3, [sp, #28]
 80052e2:	aa09      	add	r2, sp, #36	; 0x24
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	0021      	movs	r1, r4
 80052e8:	9b06      	ldr	r3, [sp, #24]
 80052ea:	9805      	ldr	r0, [sp, #20]
 80052ec:	f7ff fe82 	bl	8004ff4 <_printf_common>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d1b3      	bne.n	800525c <_printf_i+0x18c>
 80052f4:	2001      	movs	r0, #1
 80052f6:	4240      	negs	r0, r0
 80052f8:	b00b      	add	sp, #44	; 0x2c
 80052fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fc:	08005ce6 	.word	0x08005ce6
 8005300:	08005cd5 	.word	0x08005cd5

08005304 <_sbrk_r>:
 8005304:	2300      	movs	r3, #0
 8005306:	b570      	push	{r4, r5, r6, lr}
 8005308:	4c06      	ldr	r4, [pc, #24]	; (8005324 <_sbrk_r+0x20>)
 800530a:	0005      	movs	r5, r0
 800530c:	0008      	movs	r0, r1
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	f000 fb36 	bl	8005980 <_sbrk>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d103      	bne.n	8005320 <_sbrk_r+0x1c>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <_sbrk_r+0x1c>
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	20000250 	.word	0x20000250

08005328 <__sread>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	000c      	movs	r4, r1
 800532c:	250e      	movs	r5, #14
 800532e:	5f49      	ldrsh	r1, [r1, r5]
 8005330:	f000 fac6 	bl	80058c0 <_read_r>
 8005334:	2800      	cmp	r0, #0
 8005336:	db03      	blt.n	8005340 <__sread+0x18>
 8005338:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800533a:	181b      	adds	r3, r3, r0
 800533c:	6563      	str	r3, [r4, #84]	; 0x54
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	4a02      	ldr	r2, [pc, #8]	; (800534c <__sread+0x24>)
 8005344:	4013      	ands	r3, r2
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	e7f9      	b.n	800533e <__sread+0x16>
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	ffffefff 	.word	0xffffefff

08005350 <__swrite>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	001f      	movs	r7, r3
 8005354:	898b      	ldrh	r3, [r1, #12]
 8005356:	0005      	movs	r5, r0
 8005358:	000c      	movs	r4, r1
 800535a:	0016      	movs	r6, r2
 800535c:	05db      	lsls	r3, r3, #23
 800535e:	d505      	bpl.n	800536c <__swrite+0x1c>
 8005360:	230e      	movs	r3, #14
 8005362:	5ec9      	ldrsh	r1, [r1, r3]
 8005364:	2200      	movs	r2, #0
 8005366:	2302      	movs	r3, #2
 8005368:	f000 f9d2 	bl	8005710 <_lseek_r>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <__swrite+0x34>)
 8005370:	0028      	movs	r0, r5
 8005372:	4013      	ands	r3, r2
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	0032      	movs	r2, r6
 8005378:	230e      	movs	r3, #14
 800537a:	5ee1      	ldrsh	r1, [r4, r3]
 800537c:	003b      	movs	r3, r7
 800537e:	f000 f875 	bl	800546c <_write_r>
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005384:	ffffefff 	.word	0xffffefff

08005388 <__sseek>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	000c      	movs	r4, r1
 800538c:	250e      	movs	r5, #14
 800538e:	5f49      	ldrsh	r1, [r1, r5]
 8005390:	f000 f9be 	bl	8005710 <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	1c42      	adds	r2, r0, #1
 8005398:	d103      	bne.n	80053a2 <__sseek+0x1a>
 800539a:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <__sseek+0x28>)
 800539c:	4013      	ands	r3, r2
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	2280      	movs	r2, #128	; 0x80
 80053a4:	0152      	lsls	r2, r2, #5
 80053a6:	4313      	orrs	r3, r2
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	6560      	str	r0, [r4, #84]	; 0x54
 80053ac:	e7f8      	b.n	80053a0 <__sseek+0x18>
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	ffffefff 	.word	0xffffefff

080053b4 <__sclose>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	230e      	movs	r3, #14
 80053b8:	5ec9      	ldrsh	r1, [r1, r3]
 80053ba:	f000 f8e1 	bl	8005580 <_close_r>
 80053be:	bd10      	pop	{r4, pc}

080053c0 <__swbuf_r>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	0005      	movs	r5, r0
 80053c4:	000e      	movs	r6, r1
 80053c6:	0014      	movs	r4, r2
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d004      	beq.n	80053d6 <__swbuf_r+0x16>
 80053cc:	6983      	ldr	r3, [r0, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <__swbuf_r+0x16>
 80053d2:	f7ff fbcf 	bl	8004b74 <__sinit>
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <__swbuf_r+0xa0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d12d      	bne.n	8005438 <__swbuf_r+0x78>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	d531      	bpl.n	800544c <__swbuf_r+0x8c>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02e      	beq.n	800544c <__swbuf_r+0x8c>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	6922      	ldr	r2, [r4, #16]
 80053f2:	b2f7      	uxtb	r7, r6
 80053f4:	1a98      	subs	r0, r3, r2
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	b2f6      	uxtb	r6, r6
 80053fa:	4298      	cmp	r0, r3
 80053fc:	db05      	blt.n	800540a <__swbuf_r+0x4a>
 80053fe:	0021      	movs	r1, r4
 8005400:	0028      	movs	r0, r5
 8005402:	f000 f959 	bl	80056b8 <_fflush_r>
 8005406:	2800      	cmp	r0, #0
 8005408:	d126      	bne.n	8005458 <__swbuf_r+0x98>
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	3001      	adds	r0, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	701f      	strb	r7, [r3, #0]
 800541a:	6963      	ldr	r3, [r4, #20]
 800541c:	4298      	cmp	r0, r3
 800541e:	d004      	beq.n	800542a <__swbuf_r+0x6a>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	07db      	lsls	r3, r3, #31
 8005424:	d51a      	bpl.n	800545c <__swbuf_r+0x9c>
 8005426:	2e0a      	cmp	r6, #10
 8005428:	d118      	bne.n	800545c <__swbuf_r+0x9c>
 800542a:	0021      	movs	r1, r4
 800542c:	0028      	movs	r0, r5
 800542e:	f000 f943 	bl	80056b8 <_fflush_r>
 8005432:	2800      	cmp	r0, #0
 8005434:	d012      	beq.n	800545c <__swbuf_r+0x9c>
 8005436:	e00f      	b.n	8005458 <__swbuf_r+0x98>
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <__swbuf_r+0xa4>)
 800543a:	429c      	cmp	r4, r3
 800543c:	d101      	bne.n	8005442 <__swbuf_r+0x82>
 800543e:	68ac      	ldr	r4, [r5, #8]
 8005440:	e7cd      	b.n	80053de <__swbuf_r+0x1e>
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <__swbuf_r+0xa8>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d1ca      	bne.n	80053de <__swbuf_r+0x1e>
 8005448:	68ec      	ldr	r4, [r5, #12]
 800544a:	e7c8      	b.n	80053de <__swbuf_r+0x1e>
 800544c:	0021      	movs	r1, r4
 800544e:	0028      	movs	r0, r5
 8005450:	f000 f820 	bl	8005494 <__swsetup_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	d0ca      	beq.n	80053ee <__swbuf_r+0x2e>
 8005458:	2601      	movs	r6, #1
 800545a:	4276      	negs	r6, r6
 800545c:	0030      	movs	r0, r6
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005460:	08005c80 	.word	0x08005c80
 8005464:	08005ca0 	.word	0x08005ca0
 8005468:	08005c60 	.word	0x08005c60

0800546c <_write_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	0005      	movs	r5, r0
 8005470:	0008      	movs	r0, r1
 8005472:	0011      	movs	r1, r2
 8005474:	2200      	movs	r2, #0
 8005476:	4c06      	ldr	r4, [pc, #24]	; (8005490 <_write_r+0x24>)
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	001a      	movs	r2, r3
 800547c:	f7fd fe60 	bl	8003140 <_write>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d103      	bne.n	800548c <_write_r+0x20>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d000      	beq.n	800548c <_write_r+0x20>
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000250 	.word	0x20000250

08005494 <__swsetup_r>:
 8005494:	4b36      	ldr	r3, [pc, #216]	; (8005570 <__swsetup_r+0xdc>)
 8005496:	b570      	push	{r4, r5, r6, lr}
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	0006      	movs	r6, r0
 800549c:	000c      	movs	r4, r1
 800549e:	2d00      	cmp	r5, #0
 80054a0:	d005      	beq.n	80054ae <__swsetup_r+0x1a>
 80054a2:	69ab      	ldr	r3, [r5, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <__swsetup_r+0x1a>
 80054a8:	0028      	movs	r0, r5
 80054aa:	f7ff fb63 	bl	8004b74 <__sinit>
 80054ae:	4b31      	ldr	r3, [pc, #196]	; (8005574 <__swsetup_r+0xe0>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d10f      	bne.n	80054d4 <__swsetup_r+0x40>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	230c      	movs	r3, #12
 80054b8:	5ee2      	ldrsh	r2, [r4, r3]
 80054ba:	b293      	uxth	r3, r2
 80054bc:	0719      	lsls	r1, r3, #28
 80054be:	d42d      	bmi.n	800551c <__swsetup_r+0x88>
 80054c0:	06d9      	lsls	r1, r3, #27
 80054c2:	d411      	bmi.n	80054e8 <__swsetup_r+0x54>
 80054c4:	2309      	movs	r3, #9
 80054c6:	2001      	movs	r0, #1
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	3337      	adds	r3, #55	; 0x37
 80054cc:	4313      	orrs	r3, r2
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	4240      	negs	r0, r0
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	4b28      	ldr	r3, [pc, #160]	; (8005578 <__swsetup_r+0xe4>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d101      	bne.n	80054de <__swsetup_r+0x4a>
 80054da:	68ac      	ldr	r4, [r5, #8]
 80054dc:	e7eb      	b.n	80054b6 <__swsetup_r+0x22>
 80054de:	4b27      	ldr	r3, [pc, #156]	; (800557c <__swsetup_r+0xe8>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	d1e8      	bne.n	80054b6 <__swsetup_r+0x22>
 80054e4:	68ec      	ldr	r4, [r5, #12]
 80054e6:	e7e6      	b.n	80054b6 <__swsetup_r+0x22>
 80054e8:	075b      	lsls	r3, r3, #29
 80054ea:	d513      	bpl.n	8005514 <__swsetup_r+0x80>
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d008      	beq.n	8005504 <__swsetup_r+0x70>
 80054f2:	0023      	movs	r3, r4
 80054f4:	3344      	adds	r3, #68	; 0x44
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d002      	beq.n	8005500 <__swsetup_r+0x6c>
 80054fa:	0030      	movs	r0, r6
 80054fc:	f000 f996 	bl	800582c <_free_r>
 8005500:	2300      	movs	r3, #0
 8005502:	6363      	str	r3, [r4, #52]	; 0x34
 8005504:	2224      	movs	r2, #36	; 0x24
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	4393      	bics	r3, r2
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	2300      	movs	r3, #0
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2308      	movs	r3, #8
 8005516:	89a2      	ldrh	r2, [r4, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <__swsetup_r+0xa6>
 8005522:	21a0      	movs	r1, #160	; 0xa0
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	0089      	lsls	r1, r1, #2
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	400b      	ands	r3, r1
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <__swsetup_r+0xa6>
 8005532:	0021      	movs	r1, r4
 8005534:	0030      	movs	r0, r6
 8005536:	f000 f927 	bl	8005788 <__smakebuf_r>
 800553a:	2301      	movs	r3, #1
 800553c:	89a2      	ldrh	r2, [r4, #12]
 800553e:	4013      	ands	r3, r2
 8005540:	d011      	beq.n	8005566 <__swsetup_r+0xd2>
 8005542:	2300      	movs	r3, #0
 8005544:	60a3      	str	r3, [r4, #8]
 8005546:	6963      	ldr	r3, [r4, #20]
 8005548:	425b      	negs	r3, r3
 800554a:	61a3      	str	r3, [r4, #24]
 800554c:	2000      	movs	r0, #0
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	4283      	cmp	r3, r0
 8005552:	d1be      	bne.n	80054d2 <__swsetup_r+0x3e>
 8005554:	230c      	movs	r3, #12
 8005556:	5ee2      	ldrsh	r2, [r4, r3]
 8005558:	0613      	lsls	r3, r2, #24
 800555a:	d5ba      	bpl.n	80054d2 <__swsetup_r+0x3e>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	4313      	orrs	r3, r2
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	3801      	subs	r0, #1
 8005564:	e7b5      	b.n	80054d2 <__swsetup_r+0x3e>
 8005566:	0792      	lsls	r2, r2, #30
 8005568:	d400      	bmi.n	800556c <__swsetup_r+0xd8>
 800556a:	6963      	ldr	r3, [r4, #20]
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	e7ed      	b.n	800554c <__swsetup_r+0xb8>
 8005570:	20000104 	.word	0x20000104
 8005574:	08005c80 	.word	0x08005c80
 8005578:	08005ca0 	.word	0x08005ca0
 800557c:	08005c60 	.word	0x08005c60

08005580 <_close_r>:
 8005580:	2300      	movs	r3, #0
 8005582:	b570      	push	{r4, r5, r6, lr}
 8005584:	4c06      	ldr	r4, [pc, #24]	; (80055a0 <_close_r+0x20>)
 8005586:	0005      	movs	r5, r0
 8005588:	0008      	movs	r0, r1
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	f000 f9d0 	bl	8005930 <_close>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d103      	bne.n	800559c <_close_r+0x1c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d000      	beq.n	800559c <_close_r+0x1c>
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	20000250 	.word	0x20000250

080055a4 <__sflush_r>:
 80055a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a6:	898a      	ldrh	r2, [r1, #12]
 80055a8:	0005      	movs	r5, r0
 80055aa:	000c      	movs	r4, r1
 80055ac:	0713      	lsls	r3, r2, #28
 80055ae:	d460      	bmi.n	8005672 <__sflush_r+0xce>
 80055b0:	684b      	ldr	r3, [r1, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dc04      	bgt.n	80055c0 <__sflush_r+0x1c>
 80055b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dc01      	bgt.n	80055c0 <__sflush_r+0x1c>
 80055bc:	2000      	movs	r0, #0
 80055be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055c2:	2f00      	cmp	r7, #0
 80055c4:	d0fa      	beq.n	80055bc <__sflush_r+0x18>
 80055c6:	2300      	movs	r3, #0
 80055c8:	682e      	ldr	r6, [r5, #0]
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	015b      	lsls	r3, r3, #5
 80055d0:	401a      	ands	r2, r3
 80055d2:	d034      	beq.n	800563e <__sflush_r+0x9a>
 80055d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	075b      	lsls	r3, r3, #29
 80055da:	d506      	bpl.n	80055ea <__sflush_r+0x46>
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	1ac0      	subs	r0, r0, r3
 80055e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <__sflush_r+0x46>
 80055e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e8:	1ac0      	subs	r0, r0, r3
 80055ea:	0002      	movs	r2, r0
 80055ec:	6a21      	ldr	r1, [r4, #32]
 80055ee:	2300      	movs	r3, #0
 80055f0:	0028      	movs	r0, r5
 80055f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055f4:	47b8      	blx	r7
 80055f6:	89a1      	ldrh	r1, [r4, #12]
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d106      	bne.n	800560a <__sflush_r+0x66>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b1d      	cmp	r3, #29
 8005600:	d831      	bhi.n	8005666 <__sflush_r+0xc2>
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <__sflush_r+0x110>)
 8005604:	40da      	lsrs	r2, r3
 8005606:	07d3      	lsls	r3, r2, #31
 8005608:	d52d      	bpl.n	8005666 <__sflush_r+0xc2>
 800560a:	2300      	movs	r3, #0
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	04cb      	lsls	r3, r1, #19
 8005614:	d505      	bpl.n	8005622 <__sflush_r+0x7e>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <__sflush_r+0x7c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d100      	bne.n	8005622 <__sflush_r+0x7e>
 8005620:	6560      	str	r0, [r4, #84]	; 0x54
 8005622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005624:	602e      	str	r6, [r5, #0]
 8005626:	2900      	cmp	r1, #0
 8005628:	d0c8      	beq.n	80055bc <__sflush_r+0x18>
 800562a:	0023      	movs	r3, r4
 800562c:	3344      	adds	r3, #68	; 0x44
 800562e:	4299      	cmp	r1, r3
 8005630:	d002      	beq.n	8005638 <__sflush_r+0x94>
 8005632:	0028      	movs	r0, r5
 8005634:	f000 f8fa 	bl	800582c <_free_r>
 8005638:	2000      	movs	r0, #0
 800563a:	6360      	str	r0, [r4, #52]	; 0x34
 800563c:	e7bf      	b.n	80055be <__sflush_r+0x1a>
 800563e:	2301      	movs	r3, #1
 8005640:	6a21      	ldr	r1, [r4, #32]
 8005642:	0028      	movs	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	d1c5      	bne.n	80055d6 <__sflush_r+0x32>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0c2      	beq.n	80055d6 <__sflush_r+0x32>
 8005650:	2b1d      	cmp	r3, #29
 8005652:	d001      	beq.n	8005658 <__sflush_r+0xb4>
 8005654:	2b16      	cmp	r3, #22
 8005656:	d101      	bne.n	800565c <__sflush_r+0xb8>
 8005658:	602e      	str	r6, [r5, #0]
 800565a:	e7af      	b.n	80055bc <__sflush_r+0x18>
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	89a2      	ldrh	r2, [r4, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	e7ab      	b.n	80055be <__sflush_r+0x1a>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	430b      	orrs	r3, r1
 800566a:	2001      	movs	r0, #1
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	4240      	negs	r0, r0
 8005670:	e7a5      	b.n	80055be <__sflush_r+0x1a>
 8005672:	690f      	ldr	r7, [r1, #16]
 8005674:	2f00      	cmp	r7, #0
 8005676:	d0a1      	beq.n	80055bc <__sflush_r+0x18>
 8005678:	680b      	ldr	r3, [r1, #0]
 800567a:	600f      	str	r7, [r1, #0]
 800567c:	1bdb      	subs	r3, r3, r7
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	2300      	movs	r3, #0
 8005682:	0792      	lsls	r2, r2, #30
 8005684:	d100      	bne.n	8005688 <__sflush_r+0xe4>
 8005686:	694b      	ldr	r3, [r1, #20]
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	9b01      	ldr	r3, [sp, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dc00      	bgt.n	8005692 <__sflush_r+0xee>
 8005690:	e794      	b.n	80055bc <__sflush_r+0x18>
 8005692:	9b01      	ldr	r3, [sp, #4]
 8005694:	003a      	movs	r2, r7
 8005696:	6a21      	ldr	r1, [r4, #32]
 8005698:	0028      	movs	r0, r5
 800569a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800569c:	47b0      	blx	r6
 800569e:	2800      	cmp	r0, #0
 80056a0:	dc03      	bgt.n	80056aa <__sflush_r+0x106>
 80056a2:	2340      	movs	r3, #64	; 0x40
 80056a4:	89a2      	ldrh	r2, [r4, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	e7df      	b.n	800566a <__sflush_r+0xc6>
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	183f      	adds	r7, r7, r0
 80056ae:	1a1b      	subs	r3, r3, r0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	e7ea      	b.n	800568a <__sflush_r+0xe6>
 80056b4:	20400001 	.word	0x20400001

080056b8 <_fflush_r>:
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	b570      	push	{r4, r5, r6, lr}
 80056bc:	0005      	movs	r5, r0
 80056be:	000c      	movs	r4, r1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <_fflush_r+0x10>
 80056c4:	2000      	movs	r0, #0
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d004      	beq.n	80056d6 <_fflush_r+0x1e>
 80056cc:	6983      	ldr	r3, [r0, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <_fflush_r+0x1e>
 80056d2:	f7ff fa4f 	bl	8004b74 <__sinit>
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <_fflush_r+0x4c>)
 80056d8:	429c      	cmp	r4, r3
 80056da:	d109      	bne.n	80056f0 <_fflush_r+0x38>
 80056dc:	686c      	ldr	r4, [r5, #4]
 80056de:	220c      	movs	r2, #12
 80056e0:	5ea3      	ldrsh	r3, [r4, r2]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ee      	beq.n	80056c4 <_fflush_r+0xc>
 80056e6:	0021      	movs	r1, r4
 80056e8:	0028      	movs	r0, r5
 80056ea:	f7ff ff5b 	bl	80055a4 <__sflush_r>
 80056ee:	e7ea      	b.n	80056c6 <_fflush_r+0xe>
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <_fflush_r+0x50>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	d101      	bne.n	80056fa <_fflush_r+0x42>
 80056f6:	68ac      	ldr	r4, [r5, #8]
 80056f8:	e7f1      	b.n	80056de <_fflush_r+0x26>
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <_fflush_r+0x54>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d1ee      	bne.n	80056de <_fflush_r+0x26>
 8005700:	68ec      	ldr	r4, [r5, #12]
 8005702:	e7ec      	b.n	80056de <_fflush_r+0x26>
 8005704:	08005c80 	.word	0x08005c80
 8005708:	08005ca0 	.word	0x08005ca0
 800570c:	08005c60 	.word	0x08005c60

08005710 <_lseek_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	0005      	movs	r5, r0
 8005714:	0008      	movs	r0, r1
 8005716:	0011      	movs	r1, r2
 8005718:	2200      	movs	r2, #0
 800571a:	4c06      	ldr	r4, [pc, #24]	; (8005734 <_lseek_r+0x24>)
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	001a      	movs	r2, r3
 8005720:	f000 f91e 	bl	8005960 <_lseek>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d103      	bne.n	8005730 <_lseek_r+0x20>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d000      	beq.n	8005730 <_lseek_r+0x20>
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	bd70      	pop	{r4, r5, r6, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	20000250 	.word	0x20000250

08005738 <__swhatbuf_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	000e      	movs	r6, r1
 800573c:	001d      	movs	r5, r3
 800573e:	230e      	movs	r3, #14
 8005740:	5ec9      	ldrsh	r1, [r1, r3]
 8005742:	b090      	sub	sp, #64	; 0x40
 8005744:	0014      	movs	r4, r2
 8005746:	2900      	cmp	r1, #0
 8005748:	da07      	bge.n	800575a <__swhatbuf_r+0x22>
 800574a:	2300      	movs	r3, #0
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	89b3      	ldrh	r3, [r6, #12]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	d411      	bmi.n	8005778 <__swhatbuf_r+0x40>
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	e00f      	b.n	800577a <__swhatbuf_r+0x42>
 800575a:	aa01      	add	r2, sp, #4
 800575c:	f000 f8c4 	bl	80058e8 <_fstat_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	dbf2      	blt.n	800574a <__swhatbuf_r+0x12>
 8005764:	22f0      	movs	r2, #240	; 0xf0
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	0212      	lsls	r2, r2, #8
 800576a:	4013      	ands	r3, r2
 800576c:	4a05      	ldr	r2, [pc, #20]	; (8005784 <__swhatbuf_r+0x4c>)
 800576e:	189b      	adds	r3, r3, r2
 8005770:	425a      	negs	r2, r3
 8005772:	4153      	adcs	r3, r2
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	e7ed      	b.n	8005754 <__swhatbuf_r+0x1c>
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	2000      	movs	r0, #0
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	b010      	add	sp, #64	; 0x40
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	ffffe000 	.word	0xffffe000

08005788 <__smakebuf_r>:
 8005788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578a:	2602      	movs	r6, #2
 800578c:	898b      	ldrh	r3, [r1, #12]
 800578e:	0005      	movs	r5, r0
 8005790:	000c      	movs	r4, r1
 8005792:	4233      	tst	r3, r6
 8005794:	d006      	beq.n	80057a4 <__smakebuf_r+0x1c>
 8005796:	0023      	movs	r3, r4
 8005798:	3347      	adds	r3, #71	; 0x47
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	2301      	movs	r3, #1
 80057a0:	6163      	str	r3, [r4, #20]
 80057a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80057a4:	ab01      	add	r3, sp, #4
 80057a6:	466a      	mov	r2, sp
 80057a8:	f7ff ffc6 	bl	8005738 <__swhatbuf_r>
 80057ac:	9900      	ldr	r1, [sp, #0]
 80057ae:	0007      	movs	r7, r0
 80057b0:	0028      	movs	r0, r5
 80057b2:	f7ff fa7d 	bl	8004cb0 <_malloc_r>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d108      	bne.n	80057cc <__smakebuf_r+0x44>
 80057ba:	220c      	movs	r2, #12
 80057bc:	5ea3      	ldrsh	r3, [r4, r2]
 80057be:	059a      	lsls	r2, r3, #22
 80057c0:	d4ef      	bmi.n	80057a2 <__smakebuf_r+0x1a>
 80057c2:	2203      	movs	r2, #3
 80057c4:	4393      	bics	r3, r2
 80057c6:	431e      	orrs	r6, r3
 80057c8:	81a6      	strh	r6, [r4, #12]
 80057ca:	e7e4      	b.n	8005796 <__smakebuf_r+0xe>
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <__smakebuf_r+0x84>)
 80057ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	89a2      	ldrh	r2, [r4, #12]
 80057d4:	6020      	str	r0, [r4, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	9b00      	ldr	r3, [sp, #0]
 80057dc:	6120      	str	r0, [r4, #16]
 80057de:	6163      	str	r3, [r4, #20]
 80057e0:	9b01      	ldr	r3, [sp, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <__smakebuf_r+0x7a>
 80057e6:	230e      	movs	r3, #14
 80057e8:	5ee1      	ldrsh	r1, [r4, r3]
 80057ea:	0028      	movs	r0, r5
 80057ec:	f000 f88e 	bl	800590c <_isatty_r>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d006      	beq.n	8005802 <__smakebuf_r+0x7a>
 80057f4:	2203      	movs	r2, #3
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	4393      	bics	r3, r2
 80057fa:	001a      	movs	r2, r3
 80057fc:	2301      	movs	r3, #1
 80057fe:	4313      	orrs	r3, r2
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	89a0      	ldrh	r0, [r4, #12]
 8005804:	4338      	orrs	r0, r7
 8005806:	81a0      	strh	r0, [r4, #12]
 8005808:	e7cb      	b.n	80057a2 <__smakebuf_r+0x1a>
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	08004af1 	.word	0x08004af1

08005810 <memchr>:
 8005810:	b2c9      	uxtb	r1, r1
 8005812:	1882      	adds	r2, r0, r2
 8005814:	4290      	cmp	r0, r2
 8005816:	d101      	bne.n	800581c <memchr+0xc>
 8005818:	2000      	movs	r0, #0
 800581a:	4770      	bx	lr
 800581c:	7803      	ldrb	r3, [r0, #0]
 800581e:	428b      	cmp	r3, r1
 8005820:	d0fb      	beq.n	800581a <memchr+0xa>
 8005822:	3001      	adds	r0, #1
 8005824:	e7f6      	b.n	8005814 <memchr+0x4>

08005826 <__malloc_lock>:
 8005826:	4770      	bx	lr

08005828 <__malloc_unlock>:
 8005828:	4770      	bx	lr
	...

0800582c <_free_r>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	0005      	movs	r5, r0
 8005830:	2900      	cmp	r1, #0
 8005832:	d010      	beq.n	8005856 <_free_r+0x2a>
 8005834:	1f0c      	subs	r4, r1, #4
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da00      	bge.n	800583e <_free_r+0x12>
 800583c:	18e4      	adds	r4, r4, r3
 800583e:	0028      	movs	r0, r5
 8005840:	f7ff fff1 	bl	8005826 <__malloc_lock>
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <_free_r+0x90>)
 8005846:	6813      	ldr	r3, [r2, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <_free_r+0x2c>
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	6014      	str	r4, [r2, #0]
 8005850:	0028      	movs	r0, r5
 8005852:	f7ff ffe9 	bl	8005828 <__malloc_unlock>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	42a3      	cmp	r3, r4
 800585a:	d909      	bls.n	8005870 <_free_r+0x44>
 800585c:	6821      	ldr	r1, [r4, #0]
 800585e:	1860      	adds	r0, r4, r1
 8005860:	4283      	cmp	r3, r0
 8005862:	d1f3      	bne.n	800584c <_free_r+0x20>
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	1841      	adds	r1, r0, r1
 800586a:	6021      	str	r1, [r4, #0]
 800586c:	e7ee      	b.n	800584c <_free_r+0x20>
 800586e:	0013      	movs	r3, r2
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	2a00      	cmp	r2, #0
 8005874:	d001      	beq.n	800587a <_free_r+0x4e>
 8005876:	42a2      	cmp	r2, r4
 8005878:	d9f9      	bls.n	800586e <_free_r+0x42>
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	1858      	adds	r0, r3, r1
 800587e:	42a0      	cmp	r0, r4
 8005880:	d10b      	bne.n	800589a <_free_r+0x6e>
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	1809      	adds	r1, r1, r0
 8005886:	1858      	adds	r0, r3, r1
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	4282      	cmp	r2, r0
 800588c:	d1e0      	bne.n	8005850 <_free_r+0x24>
 800588e:	6810      	ldr	r0, [r2, #0]
 8005890:	6852      	ldr	r2, [r2, #4]
 8005892:	1841      	adds	r1, r0, r1
 8005894:	6019      	str	r1, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	e7da      	b.n	8005850 <_free_r+0x24>
 800589a:	42a0      	cmp	r0, r4
 800589c:	d902      	bls.n	80058a4 <_free_r+0x78>
 800589e:	230c      	movs	r3, #12
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	e7d5      	b.n	8005850 <_free_r+0x24>
 80058a4:	6821      	ldr	r1, [r4, #0]
 80058a6:	1860      	adds	r0, r4, r1
 80058a8:	4282      	cmp	r2, r0
 80058aa:	d103      	bne.n	80058b4 <_free_r+0x88>
 80058ac:	6810      	ldr	r0, [r2, #0]
 80058ae:	6852      	ldr	r2, [r2, #4]
 80058b0:	1841      	adds	r1, r0, r1
 80058b2:	6021      	str	r1, [r4, #0]
 80058b4:	6062      	str	r2, [r4, #4]
 80058b6:	605c      	str	r4, [r3, #4]
 80058b8:	e7ca      	b.n	8005850 <_free_r+0x24>
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	20000184 	.word	0x20000184

080058c0 <_read_r>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	0005      	movs	r5, r0
 80058c4:	0008      	movs	r0, r1
 80058c6:	0011      	movs	r1, r2
 80058c8:	2200      	movs	r2, #0
 80058ca:	4c06      	ldr	r4, [pc, #24]	; (80058e4 <_read_r+0x24>)
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	001a      	movs	r2, r3
 80058d0:	f000 f84e 	bl	8005970 <_read>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d103      	bne.n	80058e0 <_read_r+0x20>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d000      	beq.n	80058e0 <_read_r+0x20>
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	20000250 	.word	0x20000250

080058e8 <_fstat_r>:
 80058e8:	2300      	movs	r3, #0
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	4c06      	ldr	r4, [pc, #24]	; (8005908 <_fstat_r+0x20>)
 80058ee:	0005      	movs	r5, r0
 80058f0:	0008      	movs	r0, r1
 80058f2:	0011      	movs	r1, r2
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	f000 f823 	bl	8005940 <_fstat>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d103      	bne.n	8005906 <_fstat_r+0x1e>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d000      	beq.n	8005906 <_fstat_r+0x1e>
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	20000250 	.word	0x20000250

0800590c <_isatty_r>:
 800590c:	2300      	movs	r3, #0
 800590e:	b570      	push	{r4, r5, r6, lr}
 8005910:	4c06      	ldr	r4, [pc, #24]	; (800592c <_isatty_r+0x20>)
 8005912:	0005      	movs	r5, r0
 8005914:	0008      	movs	r0, r1
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f000 f81a 	bl	8005950 <_isatty>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d103      	bne.n	8005928 <_isatty_r+0x1c>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d000      	beq.n	8005928 <_isatty_r+0x1c>
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000250 	.word	0x20000250

08005930 <_close>:
 8005930:	2258      	movs	r2, #88	; 0x58
 8005932:	2001      	movs	r0, #1
 8005934:	4b01      	ldr	r3, [pc, #4]	; (800593c <_close+0xc>)
 8005936:	4240      	negs	r0, r0
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	4770      	bx	lr
 800593c:	20000250 	.word	0x20000250

08005940 <_fstat>:
 8005940:	2258      	movs	r2, #88	; 0x58
 8005942:	2001      	movs	r0, #1
 8005944:	4b01      	ldr	r3, [pc, #4]	; (800594c <_fstat+0xc>)
 8005946:	4240      	negs	r0, r0
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	4770      	bx	lr
 800594c:	20000250 	.word	0x20000250

08005950 <_isatty>:
 8005950:	2258      	movs	r2, #88	; 0x58
 8005952:	4b02      	ldr	r3, [pc, #8]	; (800595c <_isatty+0xc>)
 8005954:	2000      	movs	r0, #0
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	4770      	bx	lr
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	20000250 	.word	0x20000250

08005960 <_lseek>:
 8005960:	2258      	movs	r2, #88	; 0x58
 8005962:	2001      	movs	r0, #1
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <_lseek+0xc>)
 8005966:	4240      	negs	r0, r0
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	4770      	bx	lr
 800596c:	20000250 	.word	0x20000250

08005970 <_read>:
 8005970:	2258      	movs	r2, #88	; 0x58
 8005972:	2001      	movs	r0, #1
 8005974:	4b01      	ldr	r3, [pc, #4]	; (800597c <_read+0xc>)
 8005976:	4240      	negs	r0, r0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	4770      	bx	lr
 800597c:	20000250 	.word	0x20000250

08005980 <_sbrk>:
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <_sbrk+0x18>)
 8005982:	0002      	movs	r2, r0
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	2900      	cmp	r1, #0
 8005988:	d101      	bne.n	800598e <_sbrk+0xe>
 800598a:	4904      	ldr	r1, [pc, #16]	; (800599c <_sbrk+0x1c>)
 800598c:	6019      	str	r1, [r3, #0]
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	1882      	adds	r2, r0, r2
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	4770      	bx	lr
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	2000018c 	.word	0x2000018c
 800599c:	20000254 	.word	0x20000254

080059a0 <_init>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr

080059ac <_fini>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr
