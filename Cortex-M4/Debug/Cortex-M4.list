
Cortex-M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ef8  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002070  20000000  0800695c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00022070  2**0
                  CONTENTS
  8 .bss          00000074  20002070  20002070  00022070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200020e4  200020e4  00022070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00022070  2**0
                  CONTENTS, READONLY
 11 .debug_info   000102dc  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001d14  00000000  00000000  0003237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000938  00000000  00000000  00034090  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000810  00000000  00000000  000349c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005443  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003dc9  00000000  00000000  0003a61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  0003e3e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bf8  00000000  00000000  0003e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001908  00000000  00000000  000410c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  000429d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  00042a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002070 	.word	0x20002070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a3c 	.word	0x08003a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002074 	.word	0x20002074
 80001cc:	08003a3c 	.word	0x08003a3c

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b97a 	b.w	800063c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	468c      	mov	ip, r1
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	9e08      	ldr	r6, [sp, #32]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d151      	bne.n	8000414 <__udivmoddi4+0xb4>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d96d      	bls.n	8000452 <__udivmoddi4+0xf2>
 8000376:	fab2 fe82 	clz	lr, r2
 800037a:	f1be 0f00 	cmp.w	lr, #0
 800037e:	d00b      	beq.n	8000398 <__udivmoddi4+0x38>
 8000380:	f1ce 0c20 	rsb	ip, lr, #32
 8000384:	fa01 f50e 	lsl.w	r5, r1, lr
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000390:	ea4c 0c05 	orr.w	ip, ip, r5
 8000394:	fa00 f40e 	lsl.w	r4, r0, lr
 8000398:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800039c:	0c25      	lsrs	r5, r4, #16
 800039e:	fbbc f8fa 	udiv	r8, ip, sl
 80003a2:	fa1f f987 	uxth.w	r9, r7
 80003a6:	fb0a cc18 	mls	ip, sl, r8, ip
 80003aa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003ae:	fb08 f309 	mul.w	r3, r8, r9
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x6c>
 80003b6:	19ed      	adds	r5, r5, r7
 80003b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80003bc:	f080 8123 	bcs.w	8000606 <__udivmoddi4+0x2a6>
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	f240 8120 	bls.w	8000606 <__udivmoddi4+0x2a6>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aed      	subs	r5, r5, r3
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003d4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb00 f909 	mul.w	r9, r0, r9
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x98>
 80003e4:	19e4      	adds	r4, r4, r7
 80003e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ea:	f080 810a 	bcs.w	8000602 <__udivmoddi4+0x2a2>
 80003ee:	45a1      	cmp	r9, r4
 80003f0:	f240 8107 	bls.w	8000602 <__udivmoddi4+0x2a2>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	eba4 0409 	sub.w	r4, r4, r9
 80003fc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000400:	2100      	movs	r1, #0
 8000402:	2e00      	cmp	r6, #0
 8000404:	d061      	beq.n	80004ca <__udivmoddi4+0x16a>
 8000406:	fa24 f40e 	lsr.w	r4, r4, lr
 800040a:	2300      	movs	r3, #0
 800040c:	6034      	str	r4, [r6, #0]
 800040e:	6073      	str	r3, [r6, #4]
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	428b      	cmp	r3, r1
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0xc8>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d054      	beq.n	80004c6 <__udivmoddi4+0x166>
 800041c:	2100      	movs	r1, #0
 800041e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000422:	4608      	mov	r0, r1
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	fab3 f183 	clz	r1, r3
 800042c:	2900      	cmp	r1, #0
 800042e:	f040 808e 	bne.w	800054e <__udivmoddi4+0x1ee>
 8000432:	42ab      	cmp	r3, r5
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xdc>
 8000436:	4282      	cmp	r2, r0
 8000438:	f200 80fa 	bhi.w	8000630 <__udivmoddi4+0x2d0>
 800043c:	1a84      	subs	r4, r0, r2
 800043e:	eb65 0503 	sbc.w	r5, r5, r3
 8000442:	2001      	movs	r0, #1
 8000444:	46ac      	mov	ip, r5
 8000446:	2e00      	cmp	r6, #0
 8000448:	d03f      	beq.n	80004ca <__udivmoddi4+0x16a>
 800044a:	e886 1010 	stmia.w	r6, {r4, ip}
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	b912      	cbnz	r2, 800045a <__udivmoddi4+0xfa>
 8000454:	2701      	movs	r7, #1
 8000456:	fbb7 f7f2 	udiv	r7, r7, r2
 800045a:	fab7 fe87 	clz	lr, r7
 800045e:	f1be 0f00 	cmp.w	lr, #0
 8000462:	d134      	bne.n	80004ce <__udivmoddi4+0x16e>
 8000464:	1beb      	subs	r3, r5, r7
 8000466:	0c3a      	lsrs	r2, r7, #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	2101      	movs	r1, #1
 800046e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000472:	0c25      	lsrs	r5, r4, #16
 8000474:	fb02 3318 	mls	r3, r2, r8, r3
 8000478:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047c:	fb0c f308 	mul.w	r3, ip, r8
 8000480:	42ab      	cmp	r3, r5
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x134>
 8000484:	19ed      	adds	r5, r5, r7
 8000486:	f108 30ff 	add.w	r0, r8, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x132>
 800048c:	42ab      	cmp	r3, r5
 800048e:	f200 80d1 	bhi.w	8000634 <__udivmoddi4+0x2d4>
 8000492:	4680      	mov	r8, r0
 8000494:	1aed      	subs	r5, r5, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb5 f0f2 	udiv	r0, r5, r2
 800049c:	fb02 5510 	mls	r5, r2, r0, r5
 80004a0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80004a4:	fb0c fc00 	mul.w	ip, ip, r0
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x15c>
 80004ac:	19e4      	adds	r4, r4, r7
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x15a>
 80004b4:	45a4      	cmp	ip, r4
 80004b6:	f200 80b8 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 040c 	sub.w	r4, r4, ip
 80004c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c4:	e79d      	b.n	8000402 <__udivmoddi4+0xa2>
 80004c6:	4631      	mov	r1, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1ce 0420 	rsb	r4, lr, #32
 80004d2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004d6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004da:	fa20 f804 	lsr.w	r8, r0, r4
 80004de:	0c3a      	lsrs	r2, r7, #16
 80004e0:	fa25 f404 	lsr.w	r4, r5, r4
 80004e4:	ea48 0803 	orr.w	r8, r8, r3
 80004e8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ec:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004f0:	fb02 4411 	mls	r4, r2, r1, r4
 80004f4:	fa1f fc87 	uxth.w	ip, r7
 80004f8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004fc:	fb01 f30c 	mul.w	r3, r1, ip
 8000500:	42ab      	cmp	r3, r5
 8000502:	fa00 f40e 	lsl.w	r4, r0, lr
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x1bc>
 8000508:	19ed      	adds	r5, r5, r7
 800050a:	f101 30ff 	add.w	r0, r1, #4294967295
 800050e:	f080 808a 	bcs.w	8000626 <__udivmoddi4+0x2c6>
 8000512:	42ab      	cmp	r3, r5
 8000514:	f240 8087 	bls.w	8000626 <__udivmoddi4+0x2c6>
 8000518:	3902      	subs	r1, #2
 800051a:	443d      	add	r5, r7
 800051c:	1aeb      	subs	r3, r5, r3
 800051e:	fa1f f588 	uxth.w	r5, r8
 8000522:	fbb3 f0f2 	udiv	r0, r3, r2
 8000526:	fb02 3310 	mls	r3, r2, r0, r3
 800052a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800052e:	fb00 f30c 	mul.w	r3, r0, ip
 8000532:	42ab      	cmp	r3, r5
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x1e6>
 8000536:	19ed      	adds	r5, r5, r7
 8000538:	f100 38ff 	add.w	r8, r0, #4294967295
 800053c:	d26f      	bcs.n	800061e <__udivmoddi4+0x2be>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d96d      	bls.n	800061e <__udivmoddi4+0x2be>
 8000542:	3802      	subs	r0, #2
 8000544:	443d      	add	r5, r7
 8000546:	1aeb      	subs	r3, r5, r3
 8000548:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800054c:	e78f      	b.n	800046e <__udivmoddi4+0x10e>
 800054e:	f1c1 0720 	rsb	r7, r1, #32
 8000552:	fa22 f807 	lsr.w	r8, r2, r7
 8000556:	408b      	lsls	r3, r1
 8000558:	fa05 f401 	lsl.w	r4, r5, r1
 800055c:	ea48 0303 	orr.w	r3, r8, r3
 8000560:	fa20 fe07 	lsr.w	lr, r0, r7
 8000564:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000568:	40fd      	lsrs	r5, r7
 800056a:	ea4e 0e04 	orr.w	lr, lr, r4
 800056e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000572:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000576:	fb0c 5519 	mls	r5, ip, r9, r5
 800057a:	fa1f f883 	uxth.w	r8, r3
 800057e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000582:	fb09 f408 	mul.w	r4, r9, r8
 8000586:	42ac      	cmp	r4, r5
 8000588:	fa02 f201 	lsl.w	r2, r2, r1
 800058c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x244>
 8000592:	18ed      	adds	r5, r5, r3
 8000594:	f109 30ff 	add.w	r0, r9, #4294967295
 8000598:	d243      	bcs.n	8000622 <__udivmoddi4+0x2c2>
 800059a:	42ac      	cmp	r4, r5
 800059c:	d941      	bls.n	8000622 <__udivmoddi4+0x2c2>
 800059e:	f1a9 0902 	sub.w	r9, r9, #2
 80005a2:	441d      	add	r5, r3
 80005a4:	1b2d      	subs	r5, r5, r4
 80005a6:	fa1f fe8e 	uxth.w	lr, lr
 80005aa:	fbb5 f0fc 	udiv	r0, r5, ip
 80005ae:	fb0c 5510 	mls	r5, ip, r0, r5
 80005b2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80005b6:	fb00 f808 	mul.w	r8, r0, r8
 80005ba:	45a0      	cmp	r8, r4
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x26e>
 80005be:	18e4      	adds	r4, r4, r3
 80005c0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005c4:	d229      	bcs.n	800061a <__udivmoddi4+0x2ba>
 80005c6:	45a0      	cmp	r8, r4
 80005c8:	d927      	bls.n	800061a <__udivmoddi4+0x2ba>
 80005ca:	3802      	subs	r0, #2
 80005cc:	441c      	add	r4, r3
 80005ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005d2:	eba4 0408 	sub.w	r4, r4, r8
 80005d6:	fba0 8902 	umull	r8, r9, r0, r2
 80005da:	454c      	cmp	r4, r9
 80005dc:	46c6      	mov	lr, r8
 80005de:	464d      	mov	r5, r9
 80005e0:	d315      	bcc.n	800060e <__udivmoddi4+0x2ae>
 80005e2:	d012      	beq.n	800060a <__udivmoddi4+0x2aa>
 80005e4:	b156      	cbz	r6, 80005fc <__udivmoddi4+0x29c>
 80005e6:	ebba 030e 	subs.w	r3, sl, lr
 80005ea:	eb64 0405 	sbc.w	r4, r4, r5
 80005ee:	fa04 f707 	lsl.w	r7, r4, r7
 80005f2:	40cb      	lsrs	r3, r1
 80005f4:	431f      	orrs	r7, r3
 80005f6:	40cc      	lsrs	r4, r1
 80005f8:	6037      	str	r7, [r6, #0]
 80005fa:	6074      	str	r4, [r6, #4]
 80005fc:	2100      	movs	r1, #0
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	4618      	mov	r0, r3
 8000604:	e6f8      	b.n	80003f8 <__udivmoddi4+0x98>
 8000606:	4690      	mov	r8, r2
 8000608:	e6e0      	b.n	80003cc <__udivmoddi4+0x6c>
 800060a:	45c2      	cmp	sl, r8
 800060c:	d2ea      	bcs.n	80005e4 <__udivmoddi4+0x284>
 800060e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000612:	eb69 0503 	sbc.w	r5, r9, r3
 8000616:	3801      	subs	r0, #1
 8000618:	e7e4      	b.n	80005e4 <__udivmoddi4+0x284>
 800061a:	4628      	mov	r0, r5
 800061c:	e7d7      	b.n	80005ce <__udivmoddi4+0x26e>
 800061e:	4640      	mov	r0, r8
 8000620:	e791      	b.n	8000546 <__udivmoddi4+0x1e6>
 8000622:	4681      	mov	r9, r0
 8000624:	e7be      	b.n	80005a4 <__udivmoddi4+0x244>
 8000626:	4601      	mov	r1, r0
 8000628:	e778      	b.n	800051c <__udivmoddi4+0x1bc>
 800062a:	3802      	subs	r0, #2
 800062c:	443c      	add	r4, r7
 800062e:	e745      	b.n	80004bc <__udivmoddi4+0x15c>
 8000630:	4608      	mov	r0, r1
 8000632:	e708      	b.n	8000446 <__udivmoddi4+0xe6>
 8000634:	f1a8 0802 	sub.w	r8, r8, #2
 8000638:	443d      	add	r5, r7
 800063a:	e72b      	b.n	8000494 <__udivmoddi4+0x134>

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000644:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_Init+0x40>)
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_Init+0x40>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_Init+0x40>)
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_Init+0x40>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_Init+0x40>)
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x40>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f929 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f001 fab4 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023c00 	.word	0x40023c00

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f941 	bl	800092a <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f909 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20002008 	.word	0x20002008
 80006dc:	20000004 	.word	0x20000004
 80006e0:	20000000 	.word	0x20000000

080006e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_IncTick+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_IncTick+0x24>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000004 	.word	0x20000004
 8000708:	20002098 	.word	0x20002098

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_GetTick+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20002098 	.word	0x20002098

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	4909      	ldr	r1, [pc, #36]	; (80007c0 <__NVIC_EnableIRQ+0x38>)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	095b      	lsrs	r3, r3, #5
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	f002 021f 	and.w	r2, r2, #31
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	490d      	ldr	r1, [pc, #52]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	4909      	ldr	r1, [pc, #36]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	2201      	movs	r2, #1
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	401a      	ands	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085e:	2101      	movs	r1, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	1e59      	subs	r1, r3, #1
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff2b 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff40 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff33 	bl	8000788 <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b04      	cmp	r3, #4
 8000950:	d106      	bne.n	8000960 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800095e:	e005      	b.n	800096c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f023 0304 	bic.w	r3, r3, #4
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000980:	f000 f802 	bl	8000988 <HAL_SYSTICK_Callback>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e22d      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d075      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009b6:	4ba3      	ldr	r3, [pc, #652]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f003 030c 	and.w	r3, r3, #12
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d00c      	beq.n	80009dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009c2:	4ba0      	ldr	r3, [pc, #640]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d112      	bne.n	80009f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009ce:	4b9d      	ldr	r3, [pc, #628]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009da:	d10b      	bne.n	80009f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009dc:	4b99      	ldr	r3, [pc, #612]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d05b      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x108>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d157      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e208      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009fc:	d106      	bne.n	8000a0c <HAL_RCC_OscConfig+0x74>
 80009fe:	4a91      	ldr	r2, [pc, #580]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a00:	4b90      	ldr	r3, [pc, #576]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e01d      	b.n	8000a48 <HAL_RCC_OscConfig+0xb0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a14:	d10c      	bne.n	8000a30 <HAL_RCC_OscConfig+0x98>
 8000a16:	4a8b      	ldr	r2, [pc, #556]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a18:	4b8a      	ldr	r3, [pc, #552]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	4a88      	ldr	r2, [pc, #544]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a24:	4b87      	ldr	r3, [pc, #540]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e00b      	b.n	8000a48 <HAL_RCC_OscConfig+0xb0>
 8000a30:	4a84      	ldr	r2, [pc, #528]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a32:	4b84      	ldr	r3, [pc, #528]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4a81      	ldr	r2, [pc, #516]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a3e:	4b81      	ldr	r3, [pc, #516]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d013      	beq.n	8000a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a50:	f7ff fe5c 	bl	800070c <HAL_GetTick>
 8000a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	e008      	b.n	8000a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a58:	f7ff fe58 	bl	800070c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b64      	cmp	r3, #100	; 0x64
 8000a64:	d901      	bls.n	8000a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e1cd      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6a:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f0      	beq.n	8000a58 <HAL_RCC_OscConfig+0xc0>
 8000a76:	e014      	b.n	8000aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a78:	f7ff fe48 	bl	800070c <HAL_GetTick>
 8000a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7e:	e008      	b.n	8000a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a80:	f7ff fe44 	bl	800070c <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b64      	cmp	r3, #100	; 0x64
 8000a8c:	d901      	bls.n	8000a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e1b9      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a92:	4b6c      	ldr	r3, [pc, #432]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f0      	bne.n	8000a80 <HAL_RCC_OscConfig+0xe8>
 8000a9e:	e000      	b.n	8000aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d063      	beq.n	8000b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000aae:	4b65      	ldr	r3, [pc, #404]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000aba:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d11c      	bne.n	8000b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d116      	bne.n	8000b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ad2:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <HAL_RCC_OscConfig+0x152>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d001      	beq.n	8000aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e18d      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aea:	4956      	ldr	r1, [pc, #344]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afe:	e03a      	b.n	8000b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d020      	beq.n	8000b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b08:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <HAL_RCC_OscConfig+0x2b0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fdfd 	bl	800070c <HAL_GetTick>
 8000b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b14:	e008      	b.n	8000b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b16:	f7ff fdf9 	bl	800070c <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d901      	bls.n	8000b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e16e      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b28:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f0      	beq.n	8000b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b34:	4943      	ldr	r1, [pc, #268]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000b36:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
 8000b48:	e015      	b.n	8000b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <HAL_RCC_OscConfig+0x2b0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b50:	f7ff fddc 	bl	800070c <HAL_GetTick>
 8000b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b56:	e008      	b.n	8000b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b58:	f7ff fdd8 	bl	800070c <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d901      	bls.n	8000b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e14d      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f0      	bne.n	8000b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d030      	beq.n	8000be4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d016      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_RCC_OscConfig+0x2b4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b90:	f7ff fdbc 	bl	800070c <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b98:	f7ff fdb8 	bl	800070c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e12d      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0f0      	beq.n	8000b98 <HAL_RCC_OscConfig+0x200>
 8000bb6:	e015      	b.n	8000be4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_RCC_OscConfig+0x2b4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbe:	f7ff fda5 	bl	800070c <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fda1 	bl	800070c <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e116      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f0      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 80a0 	beq.w	8000d32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10f      	bne.n	8000c22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_RCC_OscConfig+0x2b8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d121      	bne.n	8000c72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_RCC_OscConfig+0x2b8>)
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_RCC_OscConfig+0x2b8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fd67 	bl	800070c <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c40:	e011      	b.n	8000c66 <HAL_RCC_OscConfig+0x2ce>
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	42470000 	.word	0x42470000
 8000c4c:	42470e80 	.word	0x42470e80
 8000c50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c54:	f7ff fd5a 	bl	800070c <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e0cf      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c66:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <HAL_RCC_OscConfig+0x478>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f0      	beq.n	8000c54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d106      	bne.n	8000c88 <HAL_RCC_OscConfig+0x2f0>
 8000c7a:	4a66      	ldr	r2, [pc, #408]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000c7c:	4b65      	ldr	r3, [pc, #404]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6713      	str	r3, [r2, #112]	; 0x70
 8000c86:	e01c      	b.n	8000cc2 <HAL_RCC_OscConfig+0x32a>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d10c      	bne.n	8000caa <HAL_RCC_OscConfig+0x312>
 8000c90:	4a60      	ldr	r2, [pc, #384]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000c92:	4b60      	ldr	r3, [pc, #384]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000c9c:	4a5d      	ldr	r2, [pc, #372]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ca8:	e00b      	b.n	8000cc2 <HAL_RCC_OscConfig+0x32a>
 8000caa:	4a5a      	ldr	r2, [pc, #360]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000cac:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8000cb6:	4a57      	ldr	r2, [pc, #348]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000cb8:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	f023 0304 	bic.w	r3, r3, #4
 8000cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d015      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cca:	f7ff fd1f 	bl	800070c <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd0:	e00a      	b.n	8000ce8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd2:	f7ff fd1b 	bl	800070c <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e08e      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0ee      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x33a>
 8000cf4:	e014      	b.n	8000d20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fd09 	bl	800070c <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cfc:	e00a      	b.n	8000d14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cfe:	f7ff fd05 	bl	800070c <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e078      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1ee      	bne.n	8000cfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d105      	bne.n	8000d32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d26:	4a3b      	ldr	r2, [pc, #236]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d064      	beq.n	8000e04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d05c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d141      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <HAL_RCC_OscConfig+0x480>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fcda 	bl	800070c <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5c:	f7ff fcd6 	bl	800070c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e04b      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d7a:	4926      	ldr	r1, [pc, #152]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69da      	ldr	r2, [r3, #28]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	019b      	lsls	r3, r3, #6
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	085b      	lsrs	r3, r3, #1
 8000d94:	3b01      	subs	r3, #1
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	061b      	lsls	r3, r3, #24
 8000da0:	4313      	orrs	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_RCC_OscConfig+0x480>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000daa:	f7ff fcaf 	bl	800070c <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db2:	f7ff fcab 	bl	800070c <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e020      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f0      	beq.n	8000db2 <HAL_RCC_OscConfig+0x41a>
 8000dd0:	e018      	b.n	8000e04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_RCC_OscConfig+0x480>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc98 	bl	800070c <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de0:	f7ff fc94 	bl	800070c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e009      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_RCC_OscConfig+0x47c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x448>
 8000dfe:	e001      	b.n	8000e04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40007000 	.word	0x40007000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	42470060 	.word	0x42470060

08000e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0ca      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e30:	4b67      	ldr	r3, [pc, #412]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 020f 	and.w	r2, r3, #15
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d20c      	bcs.n	8000e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3e:	4b64      	ldr	r3, [pc, #400]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e46:	4b62      	ldr	r3, [pc, #392]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 020f 	and.w	r2, r3, #15
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e0b6      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d020      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e70:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e72:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e8a:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e94:	494f      	ldr	r1, [pc, #316]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d044      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d119      	bne.n	8000efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e07d      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d003      	beq.n	8000eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d107      	bne.n	8000eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d109      	bne.n	8000efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e06d      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e065      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000efa:	4936      	ldr	r1, [pc, #216]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f023 0203 	bic.w	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f0c:	f7ff fbfe 	bl	800070c <HAL_GetTick>
 8000f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f14:	f7ff fbfa 	bl	800070c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e04d      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 020c 	and.w	r2, r3, #12
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d1eb      	bne.n	8000f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 020f 	and.w	r2, r3, #15
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d90c      	bls.n	8000f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 020f 	and.w	r2, r3, #15
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d001      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e030      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f70:	4918      	ldr	r1, [pc, #96]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f8e:	4911      	ldr	r1, [pc, #68]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fa2:	f000 f81d 	bl	8000fe0 <HAL_RCC_GetSysClockFreq>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_RCC_ClockConfig+0x1c0>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fb60 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	08003a84 	.word	0x08003a84
 8000fdc:	20002008 	.word	0x20002008

08000fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60fa      	str	r2, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	617a      	str	r2, [r7, #20]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 8000ffa:	6892      	ldr	r2, [r2, #8]
 8000ffc:	f002 020c 	and.w	r2, r2, #12
 8001000:	2a04      	cmp	r2, #4
 8001002:	d007      	beq.n	8001014 <HAL_RCC_GetSysClockFreq+0x34>
 8001004:	2a08      	cmp	r2, #8
 8001006:	d008      	beq.n	800101a <HAL_RCC_GetSysClockFreq+0x3a>
 8001008:	2a00      	cmp	r2, #0
 800100a:	f040 8090 	bne.w	800112e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800100e:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <HAL_RCC_GetSysClockFreq+0x164>)
 8001010:	613b      	str	r3, [r7, #16]
       break;
 8001012:	e08f      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001014:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <HAL_RCC_GetSysClockFreq+0x168>)
 8001016:	613b      	str	r3, [r7, #16]
      break;
 8001018:	e08c      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800101a:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 800101c:	6852      	ldr	r2, [r2, #4]
 800101e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001022:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001024:	4a46      	ldr	r2, [pc, #280]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 8001026:	6852      	ldr	r2, [r2, #4]
 8001028:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800102c:	2a00      	cmp	r2, #0
 800102e:	d023      	beq.n	8001078 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	099b      	lsrs	r3, r3, #6
 8001036:	f04f 0400 	mov.w	r4, #0
 800103a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	ea03 0301 	and.w	r3, r3, r1
 8001046:	ea04 0402 	and.w	r4, r4, r2
 800104a:	4a3f      	ldr	r2, [pc, #252]	; (8001148 <HAL_RCC_GetSysClockFreq+0x168>)
 800104c:	fb02 f104 	mul.w	r1, r2, r4
 8001050:	2200      	movs	r2, #0
 8001052:	fb02 f203 	mul.w	r2, r2, r3
 8001056:	440a      	add	r2, r1
 8001058:	493b      	ldr	r1, [pc, #236]	; (8001148 <HAL_RCC_GetSysClockFreq+0x168>)
 800105a:	fba3 0101 	umull	r0, r1, r3, r1
 800105e:	1853      	adds	r3, r2, r1
 8001060:	4619      	mov	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f04f 0400 	mov.w	r4, #0
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	f7ff f960 	bl	8000330 <__aeabi_uldivmod>
 8001070:	4603      	mov	r3, r0
 8001072:	460c      	mov	r4, r1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e04c      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001078:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 800107a:	6852      	ldr	r2, [r2, #4]
 800107c:	0992      	lsrs	r2, r2, #6
 800107e:	4611      	mov	r1, r2
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001088:	f04f 0600 	mov.w	r6, #0
 800108c:	ea05 0501 	and.w	r5, r5, r1
 8001090:	ea06 0602 	and.w	r6, r6, r2
 8001094:	4629      	mov	r1, r5
 8001096:	4632      	mov	r2, r6
 8001098:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 800109c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80010a0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80010a4:	4651      	mov	r1, sl
 80010a6:	465a      	mov	r2, fp
 80010a8:	46aa      	mov	sl, r5
 80010aa:	46b3      	mov	fp, r6
 80010ac:	4655      	mov	r5, sl
 80010ae:	465e      	mov	r6, fp
 80010b0:	1b4d      	subs	r5, r1, r5
 80010b2:	eb62 0606 	sbc.w	r6, r2, r6
 80010b6:	4629      	mov	r1, r5
 80010b8:	4632      	mov	r2, r6
 80010ba:	0194      	lsls	r4, r2, #6
 80010bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010c0:	018b      	lsls	r3, r1, #6
 80010c2:	1a5b      	subs	r3, r3, r1
 80010c4:	eb64 0402 	sbc.w	r4, r4, r2
 80010c8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80010cc:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80010d0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80010d4:	4643      	mov	r3, r8
 80010d6:	464c      	mov	r4, r9
 80010d8:	4655      	mov	r5, sl
 80010da:	465e      	mov	r6, fp
 80010dc:	18ed      	adds	r5, r5, r3
 80010de:	eb46 0604 	adc.w	r6, r6, r4
 80010e2:	462b      	mov	r3, r5
 80010e4:	4634      	mov	r4, r6
 80010e6:	02a2      	lsls	r2, r4, #10
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f04f 0400 	mov.w	r4, #0
 8001104:	461a      	mov	r2, r3
 8001106:	4623      	mov	r3, r4
 8001108:	f7ff f912 	bl	8000330 <__aeabi_uldivmod>
 800110c:	4603      	mov	r3, r0
 800110e:	460c      	mov	r4, r1
 8001110:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_GetSysClockFreq+0x160>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	3301      	adds	r3, #1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	613b      	str	r3, [r7, #16]
      break;
 800112c:	e002      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_RCC_GetSysClockFreq+0x164>)
 8001130:	613b      	str	r3, [r7, #16]
      break;
 8001132:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001134:	693b      	ldr	r3, [r7, #16]
}
 8001136:	4618      	mov	r0, r3
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	00f42400 	.word	0x00f42400
 8001148:	017d7840 	.word	0x017d7840

0800114c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_RCC_GetHCLKFreq+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20002008 	.word	0x20002008

08001164 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e01d      	b.n	80011b2 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fe12 	bl	8001db4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2202      	movs	r2, #2
 8001194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3304      	adds	r3, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f000 fa30 	bl	8001608 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	68d2      	ldr	r2, [r2, #12]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f042 0201 	orr.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d122      	bne.n	800124c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b02      	cmp	r3, #2
 8001212:	d11b      	bne.n	800124c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0202 	mvn.w	r2, #2
 800121c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f9c9 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001238:	e005      	b.n	8001246 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f9bb 	bl	80015b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f9cc 	bl	80015de <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b04      	cmp	r3, #4
 8001258:	d122      	bne.n	80012a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b04      	cmp	r3, #4
 8001266:	d11b      	bne.n	80012a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f06f 0204 	mvn.w	r2, #4
 8001270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2202      	movs	r2, #2
 8001276:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f99f 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 800128c:	e005      	b.n	800129a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f991 	bl	80015b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f9a2 	bl	80015de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d122      	bne.n	80012f4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d11b      	bne.n	80012f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f06f 0208 	mvn.w	r2, #8
 80012c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2204      	movs	r2, #4
 80012ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f975 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 80012e0:	e005      	b.n	80012ee <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f967 	bl	80015b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f978 	bl	80015de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d122      	bne.n	8001348 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b10      	cmp	r3, #16
 800130e:	d11b      	bne.n	8001348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0210 	mvn.w	r2, #16
 8001318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2208      	movs	r2, #8
 800131e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f94b 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001334:	e005      	b.n	8001342 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f93d 	bl	80015b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f94e 	bl	80015de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10e      	bne.n	8001374 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0201 	mvn.w	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fc10 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	2b80      	cmp	r3, #128	; 0x80
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138c:	2b80      	cmp	r3, #128	; 0x80
 800138e:	d107      	bne.n	80013a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001398:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fad6 	bl	800194c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b40      	cmp	r3, #64	; 0x40
 80013ac:	d10e      	bne.n	80013cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	2b40      	cmp	r3, #64	; 0x40
 80013ba:	d107      	bne.n	80013cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f913 	bl	80015f2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d10e      	bne.n	80013f8 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d107      	bne.n	80013f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0220 	mvn.w	r2, #32
 80013f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 faa0 	bl	8001938 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_TIM_ConfigClockSource+0x1c>
 8001418:	2302      	movs	r3, #2
 800141a:	e0c8      	b.n	80015ae <HAL_TIM_ConfigClockSource+0x1ae>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800143a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001442:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	d077      	beq.n	8001544 <HAL_TIM_ConfigClockSource+0x144>
 8001454:	2b40      	cmp	r3, #64	; 0x40
 8001456:	d80e      	bhi.n	8001476 <HAL_TIM_ConfigClockSource+0x76>
 8001458:	2b10      	cmp	r3, #16
 800145a:	f000 808a 	beq.w	8001572 <HAL_TIM_ConfigClockSource+0x172>
 800145e:	2b10      	cmp	r3, #16
 8001460:	d802      	bhi.n	8001468 <HAL_TIM_ConfigClockSource+0x68>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d07e      	beq.n	8001564 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8001466:	e099      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001468:	2b20      	cmp	r3, #32
 800146a:	f000 8089 	beq.w	8001580 <HAL_TIM_ConfigClockSource+0x180>
 800146e:	2b30      	cmp	r3, #48	; 0x30
 8001470:	f000 808d 	beq.w	800158e <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8001474:	e092      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001476:	2b70      	cmp	r3, #112	; 0x70
 8001478:	d016      	beq.n	80014a8 <HAL_TIM_ConfigClockSource+0xa8>
 800147a:	2b70      	cmp	r3, #112	; 0x70
 800147c:	d804      	bhi.n	8001488 <HAL_TIM_ConfigClockSource+0x88>
 800147e:	2b50      	cmp	r3, #80	; 0x50
 8001480:	d040      	beq.n	8001504 <HAL_TIM_ConfigClockSource+0x104>
 8001482:	2b60      	cmp	r3, #96	; 0x60
 8001484:	d04e      	beq.n	8001524 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8001486:	e089      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800148c:	d003      	beq.n	8001496 <HAL_TIM_ConfigClockSource+0x96>
 800148e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001492:	d024      	beq.n	80014de <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8001494:	e082      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	f022 0207 	bic.w	r2, r2, #7
 80014a4:	609a      	str	r2, [r3, #8]
    break;
 80014a6:	e079      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f000 f9d7 	bl	800186a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80014ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	609a      	str	r2, [r3, #8]
    break;
 80014dc:	e05e      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f000 f9bc 	bl	800186a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6892      	ldr	r2, [r2, #8]
 80014fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001500:	609a      	str	r2, [r3, #8]
    break;
 8001502:	e04b      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	f000 f923 	bl	800175c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2150      	movs	r1, #80	; 0x50
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f984 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 8001522:	e03b      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	461a      	mov	r2, r3
 8001532:	f000 f946 	bl	80017c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2160      	movs	r1, #96	; 0x60
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f974 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 8001542:	e02b      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	461a      	mov	r2, r3
 8001552:	f000 f903 	bl	800175c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f964 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 8001562:	e01b      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f95d 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 8001570:	e014      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2110      	movs	r1, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f956 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 800157e:	e00d      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2120      	movs	r1, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f94f 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 800158c:	e006      	b.n	800159c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2130      	movs	r1, #48	; 0x30
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f948 	bl	800182a <TIM_ITRx_SetConfig>
    break;
 800159a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a44      	ldr	r2, [pc, #272]	; (8001730 <TIM_Base_SetConfig+0x128>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <TIM_Base_SetConfig+0x44>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d00f      	beq.n	800164c <TIM_Base_SetConfig+0x44>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a41      	ldr	r2, [pc, #260]	; (8001734 <TIM_Base_SetConfig+0x12c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00b      	beq.n	800164c <TIM_Base_SetConfig+0x44>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a40      	ldr	r2, [pc, #256]	; (8001738 <TIM_Base_SetConfig+0x130>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d007      	beq.n	800164c <TIM_Base_SetConfig+0x44>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <TIM_Base_SetConfig+0x134>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d003      	beq.n	800164c <TIM_Base_SetConfig+0x44>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <TIM_Base_SetConfig+0x138>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <TIM_Base_SetConfig+0x48>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <TIM_Base_SetConfig+0x4a>
 8001650:	2300      	movs	r3, #0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <TIM_Base_SetConfig+0x128>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d02b      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d027      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <TIM_Base_SetConfig+0x12c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d023      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <TIM_Base_SetConfig+0x130>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d01f      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <TIM_Base_SetConfig+0x134>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d01b      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <TIM_Base_SetConfig+0x138>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d017      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <TIM_Base_SetConfig+0x13c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d013      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <TIM_Base_SetConfig+0x140>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00f      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a28      	ldr	r2, [pc, #160]	; (800174c <TIM_Base_SetConfig+0x144>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00b      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a27      	ldr	r2, [pc, #156]	; (8001750 <TIM_Base_SetConfig+0x148>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a26      	ldr	r2, [pc, #152]	; (8001754 <TIM_Base_SetConfig+0x14c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d003      	beq.n	80016c8 <TIM_Base_SetConfig+0xc0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <TIM_Base_SetConfig+0x150>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <TIM_Base_SetConfig+0xc4>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <TIM_Base_SetConfig+0xc6>
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <TIM_Base_SetConfig+0x128>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <TIM_Base_SetConfig+0x102>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <TIM_Base_SetConfig+0x138>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <TIM_Base_SetConfig+0x106>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <TIM_Base_SetConfig+0x108>
 800170e:	2300      	movs	r3, #0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	615a      	str	r2, [r3, #20]
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40010000 	.word	0x40010000
 8001734:	40000400 	.word	0x40000400
 8001738:	40000800 	.word	0x40000800
 800173c:	40000c00 	.word	0x40000c00
 8001740:	40010400 	.word	0x40010400
 8001744:	40014000 	.word	0x40014000
 8001748:	40014400 	.word	0x40014400
 800174c:	40014800 	.word	0x40014800
 8001750:	40001800 	.word	0x40001800
 8001754:	40001c00 	.word	0x40001c00
 8001758:	40002000 	.word	0x40002000

0800175c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f023 0201 	bic.w	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800178e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f023 030a 	bic.w	r3, r3, #10
 80017a0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	621a      	str	r2, [r3, #32]
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f023 0210 	bic.w	r2, r3, #16
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80017f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	031b      	lsls	r3, r3, #12
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	621a      	str	r2, [r3, #32]
}
 800181e:	bf00      	nop
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	f043 0307 	orr.w	r3, r3, #7
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	609a      	str	r2, [r3, #8]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001888:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	431a      	orrs	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4313      	orrs	r3, r2
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	609a      	str	r2, [r3, #8]
} 
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e032      	b.n	800192c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	6852      	ldr	r2, [r2, #4]
 80018e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018e4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	6851      	ldr	r1, [r2, #4]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	6892      	ldr	r2, [r2, #8]
 8001902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001906:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	6891      	ldr	r1, [r2, #8]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	6852      	ldr	r2, [r2, #4]
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
} 
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <MX_GPIO_Init+0x68>)
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_GPIO_Init+0x68>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_GPIO_Init+0x68>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <MX_GPIO_Init+0x68>)
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_GPIO_Init+0x68>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_GPIO_Init+0x68>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <MX_GPIO_Init+0x68>)
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_GPIO_Init+0x68>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_GPIO_Init+0x68>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019f4:	e000      	b.n	80019f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f9      	beq.n	80019f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_write>:
/*
 * Printf in Serial 2 (Virtual serial of Nucleo-64 with STLINK)
 */

int _write(int file,char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e009      	b.n	8001a40 <_write+0x26>
	 ITM_SendChar((*ptr++));
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffc9 	bl	80019cc <ITM_SendChar>
	 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf1      	blt.n	8001a2c <_write+0x12>
	 }
	return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5a:	f7fe fdf1 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5e:	f000 f821 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a62:	f7ff ff7d 	bl	8001960 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a66:	f000 f95d 	bl	8001d24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);//Start 1s timer
 8001a6a:	480a      	ldr	r0, [pc, #40]	; (8001a94 <main+0x40>)
 8001a6c:	f7ff fba5 	bl	80011ba <HAL_TIM_Base_Start_IT>



#ifdef milvintequatro
  uint32_t ifftFlag = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  uint32_t doBitReverse = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	603b      	str	r3, [r7, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len512, senoide_input, ifftFlag, doBitReverse);
	  FFT_result++;
#endif

#ifdef milvintequatro
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4905      	ldr	r1, [pc, #20]	; (8001a98 <main+0x44>)
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <main+0x48>)
 8001a84:	f000 fd14 	bl	80024b0 <arm_cfft_f32>
	  FFT_result++;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <main+0x4c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <main+0x4c>)
 8001a90:	6013      	str	r3, [r2, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8001a92:	e7f1      	b.n	8001a78 <main+0x24>
 8001a94:	200020a4 	.word	0x200020a4
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	08003a94 	.word	0x08003a94
 8001aa0:	2000209c 	.word	0x2000209c

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <SystemClock_Config+0xe0>)
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <SystemClock_Config+0xe0>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <SystemClock_Config+0xe0>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <SystemClock_Config+0xe4>)
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <SystemClock_Config+0xe4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <SystemClock_Config+0xe4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001af6:	2319      	movs	r3, #25
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001afa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b04:	2304      	movs	r3, #4
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe ff43 	bl	8000998 <HAL_RCC_OscConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b18:	f240 2135 	movw	r1, #565	; 0x235
 8001b1c:	481b      	ldr	r0, [pc, #108]	; (8001b8c <SystemClock_Config+0xe8>)
 8001b1e:	f000 f859 	bl	8001bd4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	230f      	movs	r3, #15
 8001b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2105      	movs	r1, #5
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f96b 	bl	8000e1c <HAL_RCC_ClockConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <SystemClock_Config+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b4c:	f240 2143 	movw	r1, #579	; 0x243
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <SystemClock_Config+0xe8>)
 8001b52:	f000 f83f 	bl	8001bd4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b56:	f7ff faf9 	bl	800114c <HAL_RCC_GetHCLKFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <SystemClock_Config+0xec>)
 8001b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fee0 	bl	800092a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b6a:	2004      	movs	r0, #4
 8001b6c:	f7fe feea 	bl	8000944 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7fe fead 	bl	80008d6 <HAL_NVIC_SetPriority>
}
 8001b7c:	bf00      	nop
 8001b7e:	3750      	adds	r7, #80	; 0x50
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	08003a54 	.word	0x08003a54
 8001b90:	10624dd3 	.word	0x10624dd3

08001b94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2c>

	  printf("FFT/s: %i \r\n", (FFT_result-FFT_old));
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bb4:	f001 f80c 	bl	8002bd0 <iprintf>
	  FFT_old = FFT_result;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bbe:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000209c 	.word	0x2000209c
 8001bcc:	200020a0 	.word	0x200020a0
 8001bd0:	08003a64 	.word	0x08003a64

08001bd4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001bde:	e7fe      	b.n	8001bde <_Error_Handler+0xa>

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7fe fe6b 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	f06f 000b 	mvn.w	r0, #11
 8001bf2:	f7fe fe70 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	f06f 000a 	mvn.w	r0, #10
 8001bfe:	f7fe fe6a 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	f06f 0009 	mvn.w	r0, #9
 8001c0a:	f7fe fe64 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	f06f 0004 	mvn.w	r0, #4
 8001c16:	f7fe fe5e 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f06f 0003 	mvn.w	r0, #3
 8001c22:	f7fe fe58 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f06f 0001 	mvn.w	r0, #1
 8001c2e:	f7fe fe52 	bl	80008d6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	f7fe fe4c 	bl	80008d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <HardFault_Handler+0x4>

08001c56 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <MemManage_Handler+0x4>

08001c5c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <BusFault_Handler+0x4>

08001c62 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <UsageFault_Handler+0x4>

08001c68 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f7fe fd25 	bl	80006e4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001c9a:	f7fe fe6f 	bl	800097c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM2_IRQHandler+0x10>)
 8001caa:	f7ff faa1 	bl	80011f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200020a4 	.word	0x200020a4

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <SystemInit+0x60>)
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <SystemInit+0x60>)
 8001cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <SystemInit+0x64>)
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <SystemInit+0x64>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <SystemInit+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <SystemInit+0x64>)
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <SystemInit+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <SystemInit+0x64>)
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <SystemInit+0x68>)
 8001cf2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <SystemInit+0x64>)
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <SystemInit+0x64>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <SystemInit+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SystemInit+0x60>)
 8001d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	24003010 	.word	0x24003010

08001d24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0xDAC0;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d34:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 8001d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d4e:	4817      	ldr	r0, [pc, #92]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d50:	f7ff fa08 	bl	8001164 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <MX_TIM2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d5a:	213e      	movs	r1, #62	; 0x3e
 8001d5c:	4814      	ldr	r0, [pc, #80]	; (8001db0 <MX_TIM2_Init+0x8c>)
 8001d5e:	f7ff ff39 	bl	8001bd4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d70:	f7ff fb46 	bl	8001400 <HAL_TIM_ConfigClockSource>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <MX_TIM2_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d7a:	2144      	movs	r1, #68	; 0x44
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM2_Init+0x8c>)
 8001d7e:	f7ff ff29 	bl	8001bd4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM2_Init+0x88>)
 8001d90:	f7ff fd8d 	bl	80018ae <HAL_TIMEx_MasterConfigSynchronization>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <MX_TIM2_Init+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d9a:	214b      	movs	r1, #75	; 0x4b
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_TIM2_Init+0x8c>)
 8001d9e:	f7ff ff19 	bl	8001bd4 <_Error_Handler>
  }

}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200020a4 	.word	0x200020a4
 8001db0:	08003a74 	.word	0x08003a74

08001db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d115      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_TIM_Base_MspInit+0x48>)
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_TIM_Base_MspInit+0x48>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_TIM_Base_MspInit+0x48>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	201c      	movs	r0, #28
 8001de8:	f7fe fd75 	bl	80008d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dec:	201c      	movs	r0, #28
 8001dee:	f7fe fd8e 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
  ldr  r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff ff45 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f000 feab 	bl	8002b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fe0f 	bl	8001a54 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e3c:	0800695c 	.word	0x0800695c
  ldr  r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e44:	20002070 	.word	0x20002070
  ldr  r2, =_sbss
 8001e48:	20002070 	.word	0x20002070
  ldr  r3, = _ebss
 8001e4c:	200020e4 	.word	0x200020e4

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <arm_cfft_radix8by2_f32>:
 8001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e58:	ed2d 8b08 	vpush	{d8-d11}
 8001e5c:	4607      	mov	r7, r0
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f8b7 e000 	ldrh.w	lr, [r7]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8001e6a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8001e6e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8001e72:	f000 80b0 	beq.w	8001fd6 <arm_cfft_radix8by2_f32+0x182>
 8001e76:	008b      	lsls	r3, r1, #2
 8001e78:	3310      	adds	r3, #16
 8001e7a:	18c6      	adds	r6, r0, r3
 8001e7c:	3210      	adds	r2, #16
 8001e7e:	4443      	add	r3, r8
 8001e80:	f100 0510 	add.w	r5, r0, #16
 8001e84:	f108 0410 	add.w	r4, r8, #16
 8001e88:	ed54 1a04 	vldr	s3, [r4, #-16]
 8001e8c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8001e90:	ed13 4a04 	vldr	s8, [r3, #-16]
 8001e94:	ed53 3a03 	vldr	s7, [r3, #-12]
 8001e98:	ed53 5a02 	vldr	s11, [r3, #-8]
 8001e9c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8001ea0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8001ea4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8001ea8:	ed16 2a04 	vldr	s4, [r6, #-16]
 8001eac:	ed56 2a03 	vldr	s5, [r6, #-12]
 8001eb0:	ed15 6a03 	vldr	s12, [r5, #-12]
 8001eb4:	ed15 7a01 	vldr	s14, [r5, #-4]
 8001eb8:	ed15 3a04 	vldr	s6, [r5, #-16]
 8001ebc:	ed56 0a02 	vldr	s1, [r6, #-8]
 8001ec0:	ed16 1a01 	vldr	s2, [r6, #-4]
 8001ec4:	ed55 4a02 	vldr	s9, [r5, #-8]
 8001ec8:	ee73 ba21 	vadd.f32	s23, s6, s3
 8001ecc:	ee36 ba26 	vadd.f32	s22, s12, s13
 8001ed0:	ee37 aa27 	vadd.f32	s20, s14, s15
 8001ed4:	ee72 9a04 	vadd.f32	s19, s4, s8
 8001ed8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8001edc:	ee31 8a05 	vadd.f32	s16, s2, s10
 8001ee0:	ee74 aa80 	vadd.f32	s21, s9, s0
 8001ee4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8001ee8:	ed45 ba04 	vstr	s23, [r5, #-16]
 8001eec:	ed05 ba03 	vstr	s22, [r5, #-12]
 8001ef0:	ed45 aa02 	vstr	s21, [r5, #-8]
 8001ef4:	ed05 aa01 	vstr	s20, [r5, #-4]
 8001ef8:	ed06 8a01 	vstr	s16, [r6, #-4]
 8001efc:	ed46 9a04 	vstr	s19, [r6, #-16]
 8001f00:	ed06 9a03 	vstr	s18, [r6, #-12]
 8001f04:	ed46 8a02 	vstr	s17, [r6, #-8]
 8001f08:	ee76 6a66 	vsub.f32	s13, s12, s13
 8001f0c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8001f10:	ed12 6a03 	vldr	s12, [r2, #-12]
 8001f14:	ed52 2a04 	vldr	s5, [r2, #-16]
 8001f18:	ee33 3a61 	vsub.f32	s6, s6, s3
 8001f1c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8001f20:	ee26 8a86 	vmul.f32	s16, s13, s12
 8001f24:	ee24 2a06 	vmul.f32	s4, s8, s12
 8001f28:	ee63 1a22 	vmul.f32	s3, s6, s5
 8001f2c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8001f30:	ee23 3a06 	vmul.f32	s6, s6, s12
 8001f34:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8001f38:	ee23 6a86 	vmul.f32	s12, s7, s12
 8001f3c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8001f40:	ee36 6a04 	vadd.f32	s12, s12, s8
 8001f44:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8001f48:	ee72 3a63 	vsub.f32	s7, s4, s7
 8001f4c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8001f50:	ed44 6a03 	vstr	s13, [r4, #-12]
 8001f54:	ed44 2a04 	vstr	s5, [r4, #-16]
 8001f58:	ed43 3a04 	vstr	s7, [r3, #-16]
 8001f5c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8001f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f64:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8001f68:	ed12 7a01 	vldr	s14, [r2, #-4]
 8001f6c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8001f70:	ee35 6a41 	vsub.f32	s12, s10, s2
 8001f74:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8001f78:	ee67 3a87 	vmul.f32	s7, s15, s14
 8001f7c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8001f80:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8001f84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001f88:	ee64 4a87 	vmul.f32	s9, s9, s14
 8001f8c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001f90:	ee26 7a07 	vmul.f32	s14, s12, s14
 8001f94:	ee26 6a25 	vmul.f32	s12, s12, s11
 8001f98:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8001f9c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8001fa0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8001fa4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001fa8:	f1be 0e01 	subs.w	lr, lr, #1
 8001fac:	ed44 5a02 	vstr	s11, [r4, #-8]
 8001fb0:	f105 0510 	add.w	r5, r5, #16
 8001fb4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8001fb8:	f106 0610 	add.w	r6, r6, #16
 8001fbc:	ed03 6a02 	vstr	s12, [r3, #-8]
 8001fc0:	ed03 7a01 	vstr	s14, [r3, #-4]
 8001fc4:	f102 0210 	add.w	r2, r2, #16
 8001fc8:	f104 0410 	add.w	r4, r4, #16
 8001fcc:	f103 0310 	add.w	r3, r3, #16
 8001fd0:	f47f af5a 	bne.w	8001e88 <arm_cfft_radix8by2_f32+0x34>
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	b28c      	uxth	r4, r1
 8001fd8:	4621      	mov	r1, r4
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f000 fae2 	bl	80025a4 <arm_radix8_butterfly_f32>
 8001fe0:	ecbd 8b08 	vpop	{d8-d11}
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4640      	mov	r0, r8
 8001fea:	2302      	movs	r3, #2
 8001fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff0:	f000 bad8 	b.w	80025a4 <arm_radix8_butterfly_f32>

08001ff4 <arm_cfft_radix8by4_f32>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	ed2d 8b0a 	vpush	{d8-d12}
 8001ffc:	8802      	ldrh	r2, [r0, #0]
 8001ffe:	ed91 6a00 	vldr	s12, [r1]
 8002002:	b08f      	sub	sp, #60	; 0x3c
 8002004:	460f      	mov	r7, r1
 8002006:	0852      	lsrs	r2, r2, #1
 8002008:	6841      	ldr	r1, [r0, #4]
 800200a:	900c      	str	r0, [sp, #48]	; 0x30
 800200c:	0093      	lsls	r3, r2, #2
 800200e:	4638      	mov	r0, r7
 8002010:	4418      	add	r0, r3
 8002012:	4606      	mov	r6, r0
 8002014:	9009      	str	r0, [sp, #36]	; 0x24
 8002016:	4418      	add	r0, r3
 8002018:	edd0 6a00 	vldr	s13, [r0]
 800201c:	ed96 4a00 	vldr	s8, [r6]
 8002020:	edd6 2a01 	vldr	s5, [r6, #4]
 8002024:	edd0 7a01 	vldr	s15, [r0, #4]
 8002028:	900a      	str	r0, [sp, #40]	; 0x28
 800202a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800202e:	4604      	mov	r4, r0
 8002030:	4625      	mov	r5, r4
 8002032:	441c      	add	r4, r3
 8002034:	edd4 4a00 	vldr	s9, [r4]
 8002038:	ed97 7a01 	vldr	s14, [r7, #4]
 800203c:	ed94 3a01 	vldr	s6, [r4, #4]
 8002040:	9401      	str	r4, [sp, #4]
 8002042:	ee35 5a84 	vadd.f32	s10, s11, s8
 8002046:	4630      	mov	r0, r6
 8002048:	ee35 5a24 	vadd.f32	s10, s10, s9
 800204c:	463e      	mov	r6, r7
 800204e:	ee15 ea10 	vmov	lr, s10
 8002052:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002056:	f846 eb08 	str.w	lr, [r6], #8
 800205a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800205e:	ed90 5a01 	vldr	s10, [r0, #4]
 8002062:	9605      	str	r6, [sp, #20]
 8002064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002068:	9e01      	ldr	r6, [sp, #4]
 800206a:	9707      	str	r7, [sp, #28]
 800206c:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8002070:	ed96 2a01 	vldr	s4, [r6, #4]
 8002074:	ee36 7a05 	vadd.f32	s14, s12, s10
 8002078:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800207c:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8002080:	ee77 7a84 	vadd.f32	s15, s15, s8
 8002084:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8002088:	4604      	mov	r4, r0
 800208a:	46a3      	mov	fp, r4
 800208c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8002090:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002094:	ee14 8a10 	vmov	r8, s8
 8002098:	46a4      	mov	ip, r4
 800209a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800209e:	ed87 7a01 	vstr	s14, [r7, #4]
 80020a2:	f84b 8b08 	str.w	r8, [fp], #8
 80020a6:	f1ac 0704 	sub.w	r7, ip, #4
 80020aa:	ed8c 5a01 	vstr	s10, [ip, #4]
 80020ae:	f101 0c08 	add.w	ip, r1, #8
 80020b2:	462c      	mov	r4, r5
 80020b4:	f8cd c010 	str.w	ip, [sp, #16]
 80020b8:	ee15 ca90 	vmov	ip, s11
 80020bc:	ee36 6a62 	vsub.f32	s12, s12, s5
 80020c0:	f844 cb08 	str.w	ip, [r4], #8
 80020c4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80020c8:	ee36 6a43 	vsub.f32	s12, s12, s6
 80020cc:	9406      	str	r4, [sp, #24]
 80020ce:	ee76 6a83 	vadd.f32	s13, s13, s6
 80020d2:	f101 0410 	add.w	r4, r1, #16
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	9402      	str	r4, [sp, #8]
 80020da:	ed85 6a01 	vstr	s12, [r5, #4]
 80020de:	462c      	mov	r4, r5
 80020e0:	f101 0518 	add.w	r5, r1, #24
 80020e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80020e6:	46b2      	mov	sl, r6
 80020e8:	9503      	str	r5, [sp, #12]
 80020ea:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80020ee:	3a02      	subs	r2, #2
 80020f0:	ee16 5a90 	vmov	r5, s13
 80020f4:	46b6      	mov	lr, r6
 80020f6:	4630      	mov	r0, r6
 80020f8:	0852      	lsrs	r2, r2, #1
 80020fa:	f84a 5b08 	str.w	r5, [sl], #8
 80020fe:	f1a0 0604 	sub.w	r6, r0, #4
 8002102:	edce 7a01 	vstr	s15, [lr, #4]
 8002106:	9208      	str	r2, [sp, #32]
 8002108:	f000 8130 	beq.w	800236c <arm_cfft_radix8by4_f32+0x378>
 800210c:	4691      	mov	r9, r2
 800210e:	9a07      	ldr	r2, [sp, #28]
 8002110:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8002114:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002118:	3b08      	subs	r3, #8
 800211a:	f102 0510 	add.w	r5, r2, #16
 800211e:	f101 0c20 	add.w	ip, r1, #32
 8002122:	f1a4 020c 	sub.w	r2, r4, #12
 8002126:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800212a:	4433      	add	r3, r6
 800212c:	3410      	adds	r4, #16
 800212e:	4650      	mov	r0, sl
 8002130:	4659      	mov	r1, fp
 8002132:	ed55 3a02 	vldr	s7, [r5, #-8]
 8002136:	ed14 5a02 	vldr	s10, [r4, #-8]
 800213a:	ed91 7a00 	vldr	s14, [r1]
 800213e:	edd0 7a00 	vldr	s15, [r0]
 8002142:	ed54 5a01 	vldr	s11, [r4, #-4]
 8002146:	ed15 4a01 	vldr	s8, [r5, #-4]
 800214a:	edd0 6a01 	vldr	s13, [r0, #4]
 800214e:	ed91 6a01 	vldr	s12, [r1, #4]
 8002152:	ee33 8a85 	vadd.f32	s16, s7, s10
 8002156:	ee34 0a25 	vadd.f32	s0, s8, s11
 800215a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800215e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8002162:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002166:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800216a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800216e:	edd1 4a01 	vldr	s9, [r1, #4]
 8002172:	ed90 4a01 	vldr	s8, [r0, #4]
 8002176:	ee70 4a24 	vadd.f32	s9, s0, s9
 800217a:	ee75 aa06 	vadd.f32	s21, s10, s12
 800217e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8002182:	ee35 aac7 	vsub.f32	s20, s11, s14
 8002186:	ed45 4a01 	vstr	s9, [r5, #-4]
 800218a:	edd6 1a00 	vldr	s3, [r6]
 800218e:	edd7 0a00 	vldr	s1, [r7]
 8002192:	ed92 4a02 	vldr	s8, [r2, #8]
 8002196:	edd3 3a02 	vldr	s7, [r3, #8]
 800219a:	ed93 2a01 	vldr	s4, [r3, #4]
 800219e:	ed16 1a01 	vldr	s2, [r6, #-4]
 80021a2:	edd2 2a01 	vldr	s5, [r2, #4]
 80021a6:	ed57 9a01 	vldr	s19, [r7, #-4]
 80021aa:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80021ae:	ee39 3a81 	vadd.f32	s6, s19, s2
 80021b2:	ee74 8a84 	vadd.f32	s17, s9, s8
 80021b6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80021ba:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80021be:	ee7a aae6 	vsub.f32	s21, s21, s13
 80021c2:	ee18 aa90 	vmov	sl, s17
 80021c6:	f847 a908 	str.w	sl, [r7], #-8
 80021ca:	edd2 8a01 	vldr	s17, [r2, #4]
 80021ce:	ed93 9a01 	vldr	s18, [r3, #4]
 80021d2:	ee73 8a28 	vadd.f32	s17, s6, s17
 80021d6:	ee3a aa27 	vadd.f32	s20, s20, s15
 80021da:	ee78 8a89 	vadd.f32	s17, s17, s18
 80021de:	ee74 0a63 	vsub.f32	s1, s8, s7
 80021e2:	edc7 8a01 	vstr	s17, [r7, #4]
 80021e6:	ed18 ba02 	vldr	s22, [r8, #-8]
 80021ea:	ed58 8a01 	vldr	s17, [r8, #-4]
 80021ee:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80021f2:	ee6a ba28 	vmul.f32	s23, s20, s17
 80021f6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80021fa:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80021fe:	ee31 9a20 	vadd.f32	s18, s2, s1
 8002202:	ee79 9a82 	vadd.f32	s19, s19, s4
 8002206:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800220a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800220e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8002212:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8002216:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800221a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800221e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8002222:	ee1c aa10 	vmov	sl, s24
 8002226:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800222a:	f841 ab08 	str.w	sl, [r1], #8
 800222e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8002232:	ee3b bacb 	vsub.f32	s22, s23, s22
 8002236:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800223a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800223e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8002242:	edc2 8a01 	vstr	s17, [r2, #4]
 8002246:	ed82 ba02 	vstr	s22, [r2, #8]
 800224a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800224e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8002252:	ee38 8a47 	vsub.f32	s16, s16, s14
 8002256:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800225a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800225e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8002262:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002266:	ee30 0a66 	vsub.f32	s0, s0, s13
 800226a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800226e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8002272:	ee28 aa24 	vmul.f32	s20, s16, s9
 8002276:	ee60 9a04 	vmul.f32	s19, s0, s8
 800227a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800227e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8002282:	ee63 3a84 	vmul.f32	s7, s7, s8
 8002286:	ee39 4a68 	vsub.f32	s8, s18, s17
 800228a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800228e:	ee14 aa10 	vmov	sl, s8
 8002292:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002296:	ee63 4a24 	vmul.f32	s9, s6, s9
 800229a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800229e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80022a2:	ed04 0a01 	vstr	s0, [r4, #-4]
 80022a6:	f846 a908 	str.w	sl, [r6], #-8
 80022aa:	ee35 6a46 	vsub.f32	s12, s10, s12
 80022ae:	ee35 7a87 	vadd.f32	s14, s11, s14
 80022b2:	edc6 3a01 	vstr	s7, [r6, #4]
 80022b6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80022ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022be:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80022c2:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80022c6:	ee67 5a86 	vmul.f32	s11, s15, s12
 80022ca:	ee26 5a87 	vmul.f32	s10, s13, s14
 80022ce:	ee72 2a62 	vsub.f32	s5, s4, s5
 80022d2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80022d6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80022da:	ee75 5a25 	vadd.f32	s11, s10, s11
 80022de:	ee62 0a86 	vmul.f32	s1, s5, s12
 80022e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	ee21 6a06 	vmul.f32	s12, s2, s12
 80022ee:	ee62 2a87 	vmul.f32	s5, s5, s14
 80022f2:	ee21 1a07 	vmul.f32	s2, s2, s14
 80022f6:	ee15 aa90 	vmov	sl, s11
 80022fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022fe:	f840 ab08 	str.w	sl, [r0], #8
 8002302:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8002306:	ee76 2a22 	vadd.f32	s5, s12, s5
 800230a:	f1b9 0901 	subs.w	r9, r9, #1
 800230e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8002312:	f105 0508 	add.w	r5, r5, #8
 8002316:	ed83 1a02 	vstr	s2, [r3, #8]
 800231a:	edc3 2a01 	vstr	s5, [r3, #4]
 800231e:	f108 0808 	add.w	r8, r8, #8
 8002322:	f1a2 0208 	sub.w	r2, r2, #8
 8002326:	f10c 0c10 	add.w	ip, ip, #16
 800232a:	f104 0408 	add.w	r4, r4, #8
 800232e:	f10e 0e18 	add.w	lr, lr, #24
 8002332:	f1a3 0308 	sub.w	r3, r3, #8
 8002336:	f47f aefc 	bne.w	8002132 <arm_cfft_radix8by4_f32+0x13e>
 800233a:	9908      	ldr	r1, [sp, #32]
 800233c:	9802      	ldr	r0, [sp, #8]
 800233e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002348:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800234c:	9102      	str	r1, [sp, #8]
 800234e:	9905      	ldr	r1, [sp, #20]
 8002350:	4419      	add	r1, r3
 8002352:	9105      	str	r1, [sp, #20]
 8002354:	9904      	ldr	r1, [sp, #16]
 8002356:	4419      	add	r1, r3
 8002358:	9104      	str	r1, [sp, #16]
 800235a:	9906      	ldr	r1, [sp, #24]
 800235c:	449b      	add	fp, r3
 800235e:	4419      	add	r1, r3
 8002360:	449a      	add	sl, r3
 8002362:	9b03      	ldr	r3, [sp, #12]
 8002364:	9106      	str	r1, [sp, #24]
 8002366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	9a05      	ldr	r2, [sp, #20]
 800236e:	9806      	ldr	r0, [sp, #24]
 8002370:	ed92 4a00 	vldr	s8, [r2]
 8002374:	ed90 7a00 	vldr	s14, [r0]
 8002378:	ed9b 3a00 	vldr	s6, [fp]
 800237c:	edda 3a00 	vldr	s7, [sl]
 8002380:	edd2 4a01 	vldr	s9, [r2, #4]
 8002384:	edd0 6a01 	vldr	s13, [r0, #4]
 8002388:	ed9a 2a01 	vldr	s4, [sl, #4]
 800238c:	eddb 7a01 	vldr	s15, [fp, #4]
 8002390:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8002394:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002396:	ee34 6a07 	vadd.f32	s12, s8, s14
 800239a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800239e:	ee36 5a03 	vadd.f32	s10, s12, s6
 80023a2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80023a6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80023aa:	ee34 7a47 	vsub.f32	s14, s8, s14
 80023ae:	ed82 5a00 	vstr	s10, [r2]
 80023b2:	ed9b 5a01 	vldr	s10, [fp, #4]
 80023b6:	edda 4a01 	vldr	s9, [sl, #4]
 80023ba:	ee35 5a85 	vadd.f32	s10, s11, s10
 80023be:	ee37 4a27 	vadd.f32	s8, s14, s15
 80023c2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80023c6:	ee76 4ac3 	vsub.f32	s9, s13, s6
 80023ca:	ed82 5a01 	vstr	s10, [r2, #4]
 80023ce:	9a04      	ldr	r2, [sp, #16]
 80023d0:	ee34 5aa3 	vadd.f32	s10, s9, s7
 80023d4:	edd2 1a00 	vldr	s3, [r2]
 80023d8:	edd2 2a01 	vldr	s5, [r2, #4]
 80023dc:	9a02      	ldr	r2, [sp, #8]
 80023de:	ee34 4a42 	vsub.f32	s8, s8, s4
 80023e2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80023e6:	ee64 4a21 	vmul.f32	s9, s8, s3
 80023ea:	ee24 4a22 	vmul.f32	s8, s8, s5
 80023ee:	ee65 2a22 	vmul.f32	s5, s10, s5
 80023f2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80023f6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80023fa:	ee35 5a44 	vsub.f32	s10, s10, s8
 80023fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002402:	edcb 2a00 	vstr	s5, [fp]
 8002406:	ed8b 5a01 	vstr	s10, [fp, #4]
 800240a:	ed92 4a01 	vldr	s8, [r2, #4]
 800240e:	ed92 5a00 	vldr	s10, [r2]
 8002412:	9a03      	ldr	r2, [sp, #12]
 8002414:	ee36 6a63 	vsub.f32	s12, s12, s7
 8002418:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800241c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8002420:	ee25 5a85 	vmul.f32	s10, s11, s10
 8002424:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002428:	ee65 5a84 	vmul.f32	s11, s11, s8
 800242c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002430:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8002434:	ee76 6a83 	vadd.f32	s13, s13, s6
 8002438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243c:	ed80 6a01 	vstr	s12, [r0, #4]
 8002440:	edc0 5a00 	vstr	s11, [r0]
 8002444:	edd2 5a01 	vldr	s11, [r2, #4]
 8002448:	9807      	ldr	r0, [sp, #28]
 800244a:	ee77 7a02 	vadd.f32	s15, s14, s4
 800244e:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8002452:	edd2 6a00 	vldr	s13, [r2]
 8002456:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800245a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800245e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002462:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002466:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800246a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800246e:	edca 7a01 	vstr	s15, [sl, #4]
 8002472:	ed8a 7a00 	vstr	s14, [sl]
 8002476:	6872      	ldr	r2, [r6, #4]
 8002478:	4621      	mov	r1, r4
 800247a:	2304      	movs	r3, #4
 800247c:	f000 f892 	bl	80025a4 <arm_radix8_butterfly_f32>
 8002480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002482:	6872      	ldr	r2, [r6, #4]
 8002484:	4621      	mov	r1, r4
 8002486:	2304      	movs	r3, #4
 8002488:	f000 f88c 	bl	80025a4 <arm_radix8_butterfly_f32>
 800248c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800248e:	6872      	ldr	r2, [r6, #4]
 8002490:	4621      	mov	r1, r4
 8002492:	2304      	movs	r3, #4
 8002494:	f000 f886 	bl	80025a4 <arm_radix8_butterfly_f32>
 8002498:	6872      	ldr	r2, [r6, #4]
 800249a:	9801      	ldr	r0, [sp, #4]
 800249c:	4621      	mov	r1, r4
 800249e:	2304      	movs	r3, #4
 80024a0:	b00f      	add	sp, #60	; 0x3c
 80024a2:	ecbd 8b0a 	vpop	{d8-d12}
 80024a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024aa:	f000 b87b 	b.w	80025a4 <arm_radix8_butterfly_f32>
 80024ae:	bf00      	nop

080024b0 <arm_cfft_f32>:
 80024b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b4:	2a01      	cmp	r2, #1
 80024b6:	4606      	mov	r6, r0
 80024b8:	4617      	mov	r7, r2
 80024ba:	460c      	mov	r4, r1
 80024bc:	4698      	mov	r8, r3
 80024be:	8805      	ldrh	r5, [r0, #0]
 80024c0:	d054      	beq.n	800256c <arm_cfft_f32+0xbc>
 80024c2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80024c6:	d04c      	beq.n	8002562 <arm_cfft_f32+0xb2>
 80024c8:	d916      	bls.n	80024f8 <arm_cfft_f32+0x48>
 80024ca:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80024ce:	d01a      	beq.n	8002506 <arm_cfft_f32+0x56>
 80024d0:	d95c      	bls.n	800258c <arm_cfft_f32+0xdc>
 80024d2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80024d6:	d044      	beq.n	8002562 <arm_cfft_f32+0xb2>
 80024d8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80024dc:	d105      	bne.n	80024ea <arm_cfft_f32+0x3a>
 80024de:	2301      	movs	r3, #1
 80024e0:	6872      	ldr	r2, [r6, #4]
 80024e2:	4629      	mov	r1, r5
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 f85d 	bl	80025a4 <arm_radix8_butterfly_f32>
 80024ea:	f1b8 0f00 	cmp.w	r8, #0
 80024ee:	d111      	bne.n	8002514 <arm_cfft_f32+0x64>
 80024f0:	2f01      	cmp	r7, #1
 80024f2:	d016      	beq.n	8002522 <arm_cfft_f32+0x72>
 80024f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d032      	beq.n	8002562 <arm_cfft_f32+0xb2>
 80024fc:	d94a      	bls.n	8002594 <arm_cfft_f32+0xe4>
 80024fe:	2d40      	cmp	r5, #64	; 0x40
 8002500:	d0ed      	beq.n	80024de <arm_cfft_f32+0x2e>
 8002502:	2d80      	cmp	r5, #128	; 0x80
 8002504:	d1f1      	bne.n	80024ea <arm_cfft_f32+0x3a>
 8002506:	4621      	mov	r1, r4
 8002508:	4630      	mov	r0, r6
 800250a:	f7ff fca3 	bl	8001e54 <arm_cfft_radix8by2_f32>
 800250e:	f1b8 0f00 	cmp.w	r8, #0
 8002512:	d0ed      	beq.n	80024f0 <arm_cfft_f32+0x40>
 8002514:	68b2      	ldr	r2, [r6, #8]
 8002516:	89b1      	ldrh	r1, [r6, #12]
 8002518:	4620      	mov	r0, r4
 800251a:	f7fd fe59 	bl	80001d0 <arm_bitreversal_32>
 800251e:	2f01      	cmp	r7, #1
 8002520:	d1e8      	bne.n	80024f4 <arm_cfft_f32+0x44>
 8002522:	ee07 5a90 	vmov	s15, r5
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800252e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002532:	2d00      	cmp	r5, #0
 8002534:	d0de      	beq.n	80024f4 <arm_cfft_f32+0x44>
 8002536:	f104 0108 	add.w	r1, r4, #8
 800253a:	2300      	movs	r3, #0
 800253c:	3301      	adds	r3, #1
 800253e:	429d      	cmp	r5, r3
 8002540:	f101 0108 	add.w	r1, r1, #8
 8002544:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002548:	ed51 7a03 	vldr	s15, [r1, #-12]
 800254c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002550:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002554:	ed01 7a04 	vstr	s14, [r1, #-16]
 8002558:	ed41 7a03 	vstr	s15, [r1, #-12]
 800255c:	d1ee      	bne.n	800253c <arm_cfft_f32+0x8c>
 800255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002562:	4621      	mov	r1, r4
 8002564:	4630      	mov	r0, r6
 8002566:	f7ff fd45 	bl	8001ff4 <arm_cfft_radix8by4_f32>
 800256a:	e7be      	b.n	80024ea <arm_cfft_f32+0x3a>
 800256c:	b1ad      	cbz	r5, 800259a <arm_cfft_f32+0xea>
 800256e:	f101 030c 	add.w	r3, r1, #12
 8002572:	2200      	movs	r2, #0
 8002574:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002578:	3201      	adds	r2, #1
 800257a:	eef1 7a67 	vneg.f32	s15, s15
 800257e:	4295      	cmp	r5, r2
 8002580:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002584:	f103 0308 	add.w	r3, r3, #8
 8002588:	d1f4      	bne.n	8002574 <arm_cfft_f32+0xc4>
 800258a:	e79a      	b.n	80024c2 <arm_cfft_f32+0x12>
 800258c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002590:	d0a5      	beq.n	80024de <arm_cfft_f32+0x2e>
 8002592:	e7aa      	b.n	80024ea <arm_cfft_f32+0x3a>
 8002594:	2d10      	cmp	r5, #16
 8002596:	d0b6      	beq.n	8002506 <arm_cfft_f32+0x56>
 8002598:	e7a7      	b.n	80024ea <arm_cfft_f32+0x3a>
 800259a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800259e:	d894      	bhi.n	80024ca <arm_cfft_f32+0x1a>
 80025a0:	e7aa      	b.n	80024f8 <arm_cfft_f32+0x48>
 80025a2:	bf00      	nop

080025a4 <arm_radix8_butterfly_f32>:
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	ed2d 8b10 	vpush	{d8-d15}
 80025ac:	461c      	mov	r4, r3
 80025ae:	b09d      	sub	sp, #116	; 0x74
 80025b0:	4603      	mov	r3, r0
 80025b2:	3304      	adds	r3, #4
 80025b4:	ed9f bac4 	vldr	s22, [pc, #784]	; 80028c8 <arm_radix8_butterfly_f32+0x324>
 80025b8:	9019      	str	r0, [sp, #100]	; 0x64
 80025ba:	921a      	str	r2, [sp, #104]	; 0x68
 80025bc:	468b      	mov	fp, r1
 80025be:	931b      	str	r3, [sp, #108]	; 0x6c
 80025c0:	468a      	mov	sl, r1
 80025c2:	46a1      	mov	r9, r4
 80025c4:	4607      	mov	r7, r0
 80025c6:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80025ca:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80025ce:	eb03 0508 	add.w	r5, r3, r8
 80025d2:	195c      	adds	r4, r3, r5
 80025d4:	00de      	lsls	r6, r3, #3
 80025d6:	191a      	adds	r2, r3, r4
 80025d8:	9600      	str	r6, [sp, #0]
 80025da:	1898      	adds	r0, r3, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	9e00      	ldr	r6, [sp, #0]
 80025e0:	9311      	str	r3, [sp, #68]	; 0x44
 80025e2:	4401      	add	r1, r0
 80025e4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80025e8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80025ec:	19be      	adds	r6, r7, r6
 80025ee:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80025f2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80025f6:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80025fa:	9f00      	ldr	r7, [sp, #0]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	eb06 0e07 	add.w	lr, r6, r7
 8002602:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	3204      	adds	r2, #4
 8002608:	3104      	adds	r1, #4
 800260a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800260e:	f04f 0c00 	mov.w	ip, #0
 8002612:	edde 7a00 	vldr	s15, [lr]
 8002616:	edd6 6a00 	vldr	s13, [r6]
 800261a:	ed95 2a00 	vldr	s4, [r5]
 800261e:	ed17 aa01 	vldr	s20, [r7, #-4]
 8002622:	edd4 4a00 	vldr	s9, [r4]
 8002626:	ed90 5a00 	vldr	s10, [r0]
 800262a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800262e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8002632:	ee77 8a85 	vadd.f32	s17, s15, s10
 8002636:	ee76 3a87 	vadd.f32	s7, s13, s14
 800263a:	ee32 4a20 	vadd.f32	s8, s4, s1
 800263e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8002642:	ee33 6a84 	vadd.f32	s12, s7, s8
 8002646:	ee73 5a28 	vadd.f32	s11, s6, s17
 800264a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800264e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8002652:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8002656:	ed47 6a01 	vstr	s13, [r7, #-4]
 800265a:	edc4 5a00 	vstr	s11, [r4]
 800265e:	ed92 9a00 	vldr	s18, [r2]
 8002662:	ed95 1a01 	vldr	s2, [r5, #4]
 8002666:	edd6 5a01 	vldr	s11, [r6, #4]
 800266a:	ed91 6a00 	vldr	s12, [r1]
 800266e:	edd7 2a00 	vldr	s5, [r7]
 8002672:	edd4 1a01 	vldr	s3, [r4, #4]
 8002676:	edde 6a01 	vldr	s13, [lr, #4]
 800267a:	edd0 9a01 	vldr	s19, [r0, #4]
 800267e:	ee72 0a60 	vsub.f32	s1, s4, s1
 8002682:	ee71 aa46 	vsub.f32	s21, s2, s12
 8002686:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800268a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800268e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8002692:	ee37 7a20 	vadd.f32	s14, s14, s1
 8002696:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800269a:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800269e:	ee75 5a89 	vadd.f32	s11, s11, s18
 80026a2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80026a6:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80026aa:	ee31 6a06 	vadd.f32	s12, s2, s12
 80026ae:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80026b2:	ee32 1aa1 	vadd.f32	s2, s5, s3
 80026b6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80026ba:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80026be:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80026c2:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80026c6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80026ca:	ee33 3a68 	vsub.f32	s6, s6, s17
 80026ce:	ee36 0a88 	vadd.f32	s0, s13, s16
 80026d2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80026d6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80026da:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80026de:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80026e2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80026e6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80026ea:	ee75 4a27 	vadd.f32	s9, s10, s15
 80026ee:	ee71 5a49 	vsub.f32	s11, s2, s18
 80026f2:	ee31 2a09 	vadd.f32	s4, s2, s18
 80026f6:	ee75 7a67 	vsub.f32	s15, s10, s15
 80026fa:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80026fe:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8002702:	ee73 0a06 	vadd.f32	s1, s6, s12
 8002706:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800270a:	ee36 5a87 	vadd.f32	s10, s13, s14
 800270e:	ee32 8a28 	vadd.f32	s16, s4, s17
 8002712:	ee33 6a46 	vsub.f32	s12, s6, s12
 8002716:	ee34 4a25 	vadd.f32	s8, s8, s11
 800271a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800271e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002722:	ee71 5a64 	vsub.f32	s11, s2, s9
 8002726:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800272a:	ee32 2a68 	vsub.f32	s4, s4, s17
 800272e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8002732:	ee74 4a81 	vadd.f32	s9, s9, s2
 8002736:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800273a:	44dc      	add	ip, fp
 800273c:	45e2      	cmp	sl, ip
 800273e:	ed87 8a00 	vstr	s16, [r7]
 8002742:	ed84 2a01 	vstr	s4, [r4, #4]
 8002746:	441f      	add	r7, r3
 8002748:	edce 0a00 	vstr	s1, [lr]
 800274c:	441c      	add	r4, r3
 800274e:	ed80 6a00 	vstr	s12, [r0]
 8002752:	edce 1a01 	vstr	s3, [lr, #4]
 8002756:	ed80 4a01 	vstr	s8, [r0, #4]
 800275a:	449e      	add	lr, r3
 800275c:	ed86 3a00 	vstr	s6, [r6]
 8002760:	4418      	add	r0, r3
 8002762:	ed41 3a01 	vstr	s7, [r1, #-4]
 8002766:	ed02 5a01 	vstr	s10, [r2, #-4]
 800276a:	ed85 7a00 	vstr	s14, [r5]
 800276e:	edc6 5a01 	vstr	s11, [r6, #4]
 8002772:	edc1 4a00 	vstr	s9, [r1]
 8002776:	441e      	add	r6, r3
 8002778:	edc2 6a00 	vstr	s13, [r2]
 800277c:	4419      	add	r1, r3
 800277e:	edc5 7a01 	vstr	s15, [r5, #4]
 8002782:	441a      	add	r2, r3
 8002784:	441d      	add	r5, r3
 8002786:	f63f af44 	bhi.w	8002612 <arm_radix8_butterfly_f32+0x6e>
 800278a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800278c:	2a07      	cmp	r2, #7
 800278e:	f240 81f5 	bls.w	8002b7c <arm_radix8_butterfly_f32+0x5d8>
 8002792:	f108 0101 	add.w	r1, r8, #1
 8002796:	188f      	adds	r7, r1, r2
 8002798:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800279c:	19d6      	adds	r6, r2, r7
 800279e:	eb08 0c09 	add.w	ip, r8, r9
 80027a2:	1994      	adds	r4, r2, r6
 80027a4:	eb0c 0e09 	add.w	lr, ip, r9
 80027a8:	4610      	mov	r0, r2
 80027aa:	9701      	str	r7, [sp, #4]
 80027ac:	4420      	add	r0, r4
 80027ae:	eb0e 0709 	add.w	r7, lr, r9
 80027b2:	1815      	adds	r5, r2, r0
 80027b4:	eb07 0209 	add.w	r2, r7, r9
 80027b8:	9203      	str	r2, [sp, #12]
 80027ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80027bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80027c2:	440a      	add	r2, r1
 80027c4:	9900      	ldr	r1, [sp, #0]
 80027c6:	3108      	adds	r1, #8
 80027c8:	9100      	str	r1, [sp, #0]
 80027ca:	9902      	ldr	r1, [sp, #8]
 80027cc:	3108      	adds	r1, #8
 80027ce:	9102      	str	r1, [sp, #8]
 80027d0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80027d2:	00ff      	lsls	r7, r7, #3
 80027d4:	9715      	str	r7, [sp, #84]	; 0x54
 80027d6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80027da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80027de:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80027e2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80027e4:	9903      	ldr	r1, [sp, #12]
 80027e6:	19d7      	adds	r7, r2, r7
 80027e8:	00c9      	lsls	r1, r1, #3
 80027ea:	9114      	str	r1, [sp, #80]	; 0x50
 80027ec:	9710      	str	r7, [sp, #64]	; 0x40
 80027ee:	9919      	ldr	r1, [sp, #100]	; 0x64
 80027f0:	9f00      	ldr	r7, [sp, #0]
 80027f2:	19cf      	adds	r7, r1, r7
 80027f4:	970d      	str	r7, [sp, #52]	; 0x34
 80027f6:	9f02      	ldr	r7, [sp, #8]
 80027f8:	19cf      	adds	r7, r1, r7
 80027fa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80027fe:	970c      	str	r7, [sp, #48]	; 0x30
 8002800:	9f01      	ldr	r7, [sp, #4]
 8002802:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8002806:	3504      	adds	r5, #4
 8002808:	3004      	adds	r0, #4
 800280a:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800280e:	9508      	str	r5, [sp, #32]
 8002810:	9009      	str	r0, [sp, #36]	; 0x24
 8002812:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002814:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002816:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800281a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800281e:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8002822:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8002824:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8002828:	1945      	adds	r5, r0, r5
 800282a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800282e:	460f      	mov	r7, r1
 8002830:	3404      	adds	r4, #4
 8002832:	4641      	mov	r1, r8
 8002834:	1841      	adds	r1, r0, r1
 8002836:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800283a:	940a      	str	r4, [sp, #40]	; 0x28
 800283c:	eb00 0c06 	add.w	ip, r0, r6
 8002840:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002844:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002846:	9506      	str	r5, [sp, #24]
 8002848:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800284a:	9105      	str	r1, [sp, #20]
 800284c:	4639      	mov	r1, r7
 800284e:	1905      	adds	r5, r0, r4
 8002850:	3108      	adds	r1, #8
 8002852:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002854:	9507      	str	r5, [sp, #28]
 8002856:	910f      	str	r1, [sp, #60]	; 0x3c
 8002858:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800285c:	2101      	movs	r1, #1
 800285e:	eb00 0e06 	add.w	lr, r0, r6
 8002862:	9518      	str	r5, [sp, #96]	; 0x60
 8002864:	9404      	str	r4, [sp, #16]
 8002866:	9103      	str	r1, [sp, #12]
 8002868:	4620      	mov	r0, r4
 800286a:	4689      	mov	r9, r1
 800286c:	9e06      	ldr	r6, [sp, #24]
 800286e:	ed90 fa00 	vldr	s30, [r0]
 8002872:	edd6 7a01 	vldr	s15, [r6, #4]
 8002876:	edd0 ba01 	vldr	s23, [r0, #4]
 800287a:	edcd 7a00 	vstr	s15, [sp]
 800287e:	a80d      	add	r0, sp, #52	; 0x34
 8002880:	edde 7a01 	vldr	s15, [lr, #4]
 8002884:	9c05      	ldr	r4, [sp, #20]
 8002886:	9d07      	ldr	r5, [sp, #28]
 8002888:	edd2 fa00 	vldr	s31, [r2]
 800288c:	ed92 ca01 	vldr	s24, [r2, #4]
 8002890:	edcd 7a01 	vstr	s15, [sp, #4]
 8002894:	c807      	ldmia	r0, {r0, r1, r2}
 8002896:	eddc 7a01 	vldr	s15, [ip, #4]
 800289a:	edd4 ea00 	vldr	s29, [r4]
 800289e:	ed95 ea00 	vldr	s28, [r5]
 80028a2:	edd6 da00 	vldr	s27, [r6]
 80028a6:	edd4 aa01 	vldr	s21, [r4, #4]
 80028aa:	ed95 aa01 	vldr	s20, [r5, #4]
 80028ae:	ed9e da00 	vldr	s26, [lr]
 80028b2:	eddc ca00 	vldr	s25, [ip]
 80028b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80028bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80028be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80028c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80028c2:	edcd 7a02 	vstr	s15, [sp, #8]
 80028c6:	e001      	b.n	80028cc <arm_radix8_butterfly_f32+0x328>
 80028c8:	3f3504f3 	.word	0x3f3504f3
 80028cc:	ed16 6a01 	vldr	s12, [r6, #-4]
 80028d0:	ed91 5a00 	vldr	s10, [r1]
 80028d4:	ed57 9a01 	vldr	s19, [r7, #-4]
 80028d8:	edd5 7a00 	vldr	s15, [r5]
 80028dc:	ed18 7a01 	vldr	s14, [r8, #-4]
 80028e0:	edd2 3a00 	vldr	s7, [r2]
 80028e4:	ed94 3a00 	vldr	s6, [r4]
 80028e8:	ed90 2a00 	vldr	s4, [r0]
 80028ec:	ed92 0a01 	vldr	s0, [r2, #4]
 80028f0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80028f4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80028f8:	ee33 4a29 	vadd.f32	s8, s6, s19
 80028fc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8002900:	ee78 1a04 	vadd.f32	s3, s16, s8
 8002904:	ee71 6a24 	vadd.f32	s13, s2, s9
 8002908:	ee32 2a46 	vsub.f32	s4, s4, s12
 800290c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8002910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002914:	ed82 6a00 	vstr	s12, [r2]
 8002918:	edd5 8a01 	vldr	s17, [r5, #4]
 800291c:	ed90 9a01 	vldr	s18, [r0, #4]
 8002920:	edd6 2a00 	vldr	s5, [r6]
 8002924:	ed98 7a00 	vldr	s14, [r8]
 8002928:	edd4 0a01 	vldr	s1, [r4, #4]
 800292c:	ed91 6a01 	vldr	s12, [r1, #4]
 8002930:	edd7 5a00 	vldr	s11, [r7]
 8002934:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8002938:	ee33 3a69 	vsub.f32	s6, s6, s19
 800293c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8002940:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8002944:	ee38 4a44 	vsub.f32	s8, s16, s8
 8002948:	ee38 7a87 	vadd.f32	s14, s17, s14
 800294c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8002950:	ee79 2a22 	vadd.f32	s5, s18, s5
 8002954:	ee75 8a69 	vsub.f32	s17, s10, s19
 8002958:	ee32 9a27 	vadd.f32	s18, s4, s15
 800295c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8002960:	ee72 7a67 	vsub.f32	s15, s4, s15
 8002964:	ee30 2a06 	vadd.f32	s4, s0, s12
 8002968:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800296c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8002970:	ee32 9a08 	vadd.f32	s18, s4, s16
 8002974:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8002978:	ee32 2a48 	vsub.f32	s4, s4, s16
 800297c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8002980:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8002984:	ee32 1a87 	vadd.f32	s2, s5, s14
 8002988:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800298c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8002990:	ee30 6a46 	vsub.f32	s12, s0, s12
 8002994:	ee73 0a29 	vadd.f32	s1, s6, s19
 8002998:	ee36 0a28 	vadd.f32	s0, s12, s17
 800299c:	ee33 3a69 	vsub.f32	s6, s6, s19
 80029a0:	ee32 7a64 	vsub.f32	s14, s4, s9
 80029a4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80029a8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80029ac:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80029b0:	ee75 8a85 	vadd.f32	s17, s11, s10
 80029b4:	ee74 3a22 	vadd.f32	s7, s8, s5
 80029b8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80029bc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80029c0:	ee79 1a41 	vsub.f32	s3, s18, s2
 80029c4:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80029c8:	ee76 5a43 	vsub.f32	s11, s12, s6
 80029cc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80029d0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80029d4:	ee30 4a60 	vsub.f32	s8, s0, s1
 80029d8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80029dc:	ee30 0a80 	vadd.f32	s0, s1, s0
 80029e0:	ee77 9a85 	vadd.f32	s19, s15, s10
 80029e4:	ee33 6a06 	vadd.f32	s12, s6, s12
 80029e8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80029ec:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80029f0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80029f4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80029f8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80029fc:	ee39 1a01 	vadd.f32	s2, s18, s2
 8002a00:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8002a04:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8002a08:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8002a0c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8002a10:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8002a14:	ee35 3a03 	vadd.f32	s6, s10, s6
 8002a18:	ee72 6a66 	vsub.f32	s13, s4, s13
 8002a1c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8002a20:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8002a24:	ed9d 4a02 	vldr	s8, [sp, #8]
 8002a28:	ed82 1a01 	vstr	s2, [r2, #4]
 8002a2c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8002a30:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8002a34:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002a38:	ed81 3a00 	vstr	s6, [r1]
 8002a3c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8002a40:	ee32 2a05 	vadd.f32	s4, s4, s10
 8002a44:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8002a48:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8002a4c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8002a50:	ee64 1a00 	vmul.f32	s3, s8, s0
 8002a54:	ee27 7a24 	vmul.f32	s14, s14, s9
 8002a58:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8002a5c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8002a60:	ee64 8a28 	vmul.f32	s17, s8, s17
 8002a64:	ed9d 4a00 	vldr	s8, [sp]
 8002a68:	edc1 6a01 	vstr	s13, [r1, #4]
 8002a6c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8002a70:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8002a74:	ee64 9a29 	vmul.f32	s19, s8, s19
 8002a78:	ee24 4a25 	vmul.f32	s8, s8, s11
 8002a7c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8002a80:	ee74 4a84 	vadd.f32	s9, s9, s8
 8002a84:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8002a88:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8002a8c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8002a90:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8002a94:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8002a98:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8002a9c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8002aa0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8002aa4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8002aa8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8002aac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002ab0:	44d9      	add	r9, fp
 8002ab2:	45ca      	cmp	sl, r9
 8002ab4:	ed84 9a00 	vstr	s18, [r4]
 8002ab8:	edc4 3a01 	vstr	s7, [r4, #4]
 8002abc:	441a      	add	r2, r3
 8002abe:	ed07 7a01 	vstr	s14, [r7, #-4]
 8002ac2:	edc7 2a00 	vstr	s5, [r7]
 8002ac6:	4419      	add	r1, r3
 8002ac8:	ed80 2a00 	vstr	s4, [r0]
 8002acc:	ed80 8a01 	vstr	s16, [r0, #4]
 8002ad0:	441c      	add	r4, r3
 8002ad2:	ed48 1a01 	vstr	s3, [r8, #-4]
 8002ad6:	ed88 0a00 	vstr	s0, [r8]
 8002ada:	441f      	add	r7, r3
 8002adc:	ed46 4a01 	vstr	s9, [r6, #-4]
 8002ae0:	4418      	add	r0, r3
 8002ae2:	edc6 9a00 	vstr	s19, [r6]
 8002ae6:	4498      	add	r8, r3
 8002ae8:	edc5 0a00 	vstr	s1, [r5]
 8002aec:	ed85 6a01 	vstr	s12, [r5, #4]
 8002af0:	441e      	add	r6, r3
 8002af2:	441d      	add	r5, r3
 8002af4:	f63f aeea 	bhi.w	80028cc <arm_radix8_butterfly_f32+0x328>
 8002af8:	9a03      	ldr	r2, [sp, #12]
 8002afa:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002afc:	3201      	adds	r2, #1
 8002afe:	4611      	mov	r1, r2
 8002b00:	9203      	str	r2, [sp, #12]
 8002b02:	9a04      	ldr	r2, [sp, #16]
 8002b04:	4402      	add	r2, r0
 8002b06:	9204      	str	r2, [sp, #16]
 8002b08:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002b0a:	9a05      	ldr	r2, [sp, #20]
 8002b0c:	4402      	add	r2, r0
 8002b0e:	9205      	str	r2, [sp, #20]
 8002b10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002b12:	9a07      	ldr	r2, [sp, #28]
 8002b14:	4402      	add	r2, r0
 8002b16:	9207      	str	r2, [sp, #28]
 8002b18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002b1a:	9a06      	ldr	r2, [sp, #24]
 8002b1c:	4402      	add	r2, r0
 8002b1e:	9206      	str	r2, [sp, #24]
 8002b20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b22:	4496      	add	lr, r2
 8002b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002b26:	4494      	add	ip, r2
 8002b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	920f      	str	r2, [sp, #60]	; 0x3c
 8002b2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b30:	3208      	adds	r2, #8
 8002b32:	920e      	str	r2, [sp, #56]	; 0x38
 8002b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b36:	3208      	adds	r2, #8
 8002b38:	920d      	str	r2, [sp, #52]	; 0x34
 8002b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	920c      	str	r2, [sp, #48]	; 0x30
 8002b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b42:	3208      	adds	r2, #8
 8002b44:	920b      	str	r2, [sp, #44]	; 0x2c
 8002b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b48:	3208      	adds	r2, #8
 8002b4a:	920a      	str	r2, [sp, #40]	; 0x28
 8002b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b4e:	3208      	adds	r2, #8
 8002b50:	9209      	str	r2, [sp, #36]	; 0x24
 8002b52:	9a08      	ldr	r2, [sp, #32]
 8002b54:	3208      	adds	r2, #8
 8002b56:	9208      	str	r2, [sp, #32]
 8002b58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002b5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002b5c:	4288      	cmp	r0, r1
 8002b5e:	4622      	mov	r2, r4
 8002b60:	d007      	beq.n	8002b72 <arm_radix8_butterfly_f32+0x5ce>
 8002b62:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002b64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4401      	add	r1, r0
 8002b6c:	9110      	str	r1, [sp, #64]	; 0x40
 8002b6e:	9804      	ldr	r0, [sp, #16]
 8002b70:	e67c      	b.n	800286c <arm_radix8_butterfly_f32+0x2c8>
 8002b72:	4683      	mov	fp, r0
 8002b74:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8002b78:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002b7a:	e524      	b.n	80025c6 <arm_radix8_butterfly_f32+0x22>
 8002b7c:	b01d      	add	sp, #116	; 0x74
 8002b7e:	ecbd 8b10 	vpop	{d8-d15}
 8002b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b86:	bf00      	nop

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	4e0d      	ldr	r6, [pc, #52]	; (8002bc0 <__libc_init_array+0x38>)
 8002b8c:	4c0d      	ldr	r4, [pc, #52]	; (8002bc4 <__libc_init_array+0x3c>)
 8002b8e:	1ba4      	subs	r4, r4, r6
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	2500      	movs	r5, #0
 8002b94:	42a5      	cmp	r5, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	4e0b      	ldr	r6, [pc, #44]	; (8002bc8 <__libc_init_array+0x40>)
 8002b9a:	4c0c      	ldr	r4, [pc, #48]	; (8002bcc <__libc_init_array+0x44>)
 8002b9c:	f000 ff4e 	bl	8003a3c <_init>
 8002ba0:	1ba4      	subs	r4, r4, r6
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	2500      	movs	r5, #0
 8002ba6:	42a5      	cmp	r5, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb0:	4798      	blx	r3
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bba:	4798      	blx	r3
 8002bbc:	3501      	adds	r5, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08006954 	.word	0x08006954
 8002bc4:	08006954 	.word	0x08006954
 8002bc8:	08006954 	.word	0x08006954
 8002bcc:	08006958 	.word	0x08006958

08002bd0 <iprintf>:
 8002bd0:	b40f      	push	{r0, r1, r2, r3}
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <iprintf+0x2c>)
 8002bd4:	b513      	push	{r0, r1, r4, lr}
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	b124      	cbz	r4, 8002be4 <iprintf+0x14>
 8002bda:	69a3      	ldr	r3, [r4, #24]
 8002bdc:	b913      	cbnz	r3, 8002be4 <iprintf+0x14>
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 f84e 	bl	8002c80 <__sinit>
 8002be4:	ab05      	add	r3, sp, #20
 8002be6:	9a04      	ldr	r2, [sp, #16]
 8002be8:	68a1      	ldr	r1, [r4, #8]
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	4620      	mov	r0, r4
 8002bee:	f000 f961 	bl	8002eb4 <_vfiprintf_r>
 8002bf2:	b002      	add	sp, #8
 8002bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf8:	b004      	add	sp, #16
 8002bfa:	4770      	bx	lr
 8002bfc:	2000200c 	.word	0x2000200c

08002c00 <_cleanup_r>:
 8002c00:	4901      	ldr	r1, [pc, #4]	; (8002c08 <_cleanup_r+0x8>)
 8002c02:	f000 b8a9 	b.w	8002d58 <_fwalk_reent>
 8002c06:	bf00      	nop
 8002c08:	08003789 	.word	0x08003789

08002c0c <std.isra.0>:
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
 8002c12:	6003      	str	r3, [r0, #0]
 8002c14:	6043      	str	r3, [r0, #4]
 8002c16:	6083      	str	r3, [r0, #8]
 8002c18:	8181      	strh	r1, [r0, #12]
 8002c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8002c1c:	81c2      	strh	r2, [r0, #14]
 8002c1e:	6103      	str	r3, [r0, #16]
 8002c20:	6143      	str	r3, [r0, #20]
 8002c22:	6183      	str	r3, [r0, #24]
 8002c24:	4619      	mov	r1, r3
 8002c26:	2208      	movs	r2, #8
 8002c28:	305c      	adds	r0, #92	; 0x5c
 8002c2a:	f000 f8b3 	bl	8002d94 <memset>
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <std.isra.0+0x38>)
 8002c30:	6263      	str	r3, [r4, #36]	; 0x24
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <std.isra.0+0x3c>)
 8002c34:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <std.isra.0+0x40>)
 8002c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <std.isra.0+0x44>)
 8002c3c:	6224      	str	r4, [r4, #32]
 8002c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	bf00      	nop
 8002c44:	0800342d 	.word	0x0800342d
 8002c48:	0800344f 	.word	0x0800344f
 8002c4c:	08003487 	.word	0x08003487
 8002c50:	080034ab 	.word	0x080034ab

08002c54 <__sfmoreglue>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	1e4a      	subs	r2, r1, #1
 8002c58:	2568      	movs	r5, #104	; 0x68
 8002c5a:	4355      	muls	r5, r2
 8002c5c:	460e      	mov	r6, r1
 8002c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c62:	f000 f89f 	bl	8002da4 <_malloc_r>
 8002c66:	4604      	mov	r4, r0
 8002c68:	b140      	cbz	r0, 8002c7c <__sfmoreglue+0x28>
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002c70:	300c      	adds	r0, #12
 8002c72:	60a0      	str	r0, [r4, #8]
 8002c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c78:	f000 f88c 	bl	8002d94 <memset>
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}

08002c80 <__sinit>:
 8002c80:	6983      	ldr	r3, [r0, #24]
 8002c82:	b510      	push	{r4, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	bb33      	cbnz	r3, 8002cd6 <__sinit+0x56>
 8002c88:	6483      	str	r3, [r0, #72]	; 0x48
 8002c8a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002c8c:	6503      	str	r3, [r0, #80]	; 0x50
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <__sinit+0x58>)
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <__sinit+0x5c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6282      	str	r2, [r0, #40]	; 0x28
 8002c96:	4298      	cmp	r0, r3
 8002c98:	bf04      	itt	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	6183      	streq	r3, [r0, #24]
 8002c9e:	f000 f81f 	bl	8002ce0 <__sfp>
 8002ca2:	6060      	str	r0, [r4, #4]
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 f81b 	bl	8002ce0 <__sfp>
 8002caa:	60a0      	str	r0, [r4, #8]
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 f817 	bl	8002ce0 <__sfp>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60e0      	str	r0, [r4, #12]
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	6860      	ldr	r0, [r4, #4]
 8002cba:	f7ff ffa7 	bl	8002c0c <std.isra.0>
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2109      	movs	r1, #9
 8002cc2:	68a0      	ldr	r0, [r4, #8]
 8002cc4:	f7ff ffa2 	bl	8002c0c <std.isra.0>
 8002cc8:	2202      	movs	r2, #2
 8002cca:	2112      	movs	r1, #18
 8002ccc:	68e0      	ldr	r0, [r4, #12]
 8002cce:	f7ff ff9d 	bl	8002c0c <std.isra.0>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61a3      	str	r3, [r4, #24]
 8002cd6:	bd10      	pop	{r4, pc}
 8002cd8:	08006914 	.word	0x08006914
 8002cdc:	08002c01 	.word	0x08002c01

08002ce0 <__sfp>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <__sfp+0x74>)
 8002ce4:	681e      	ldr	r6, [r3, #0]
 8002ce6:	69b3      	ldr	r3, [r6, #24]
 8002ce8:	4607      	mov	r7, r0
 8002cea:	b913      	cbnz	r3, 8002cf2 <__sfp+0x12>
 8002cec:	4630      	mov	r0, r6
 8002cee:	f7ff ffc7 	bl	8002c80 <__sinit>
 8002cf2:	3648      	adds	r6, #72	; 0x48
 8002cf4:	68b4      	ldr	r4, [r6, #8]
 8002cf6:	6873      	ldr	r3, [r6, #4]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	d503      	bpl.n	8002d04 <__sfp+0x24>
 8002cfc:	6833      	ldr	r3, [r6, #0]
 8002cfe:	b133      	cbz	r3, 8002d0e <__sfp+0x2e>
 8002d00:	6836      	ldr	r6, [r6, #0]
 8002d02:	e7f7      	b.n	8002cf4 <__sfp+0x14>
 8002d04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d08:	b16d      	cbz	r5, 8002d26 <__sfp+0x46>
 8002d0a:	3468      	adds	r4, #104	; 0x68
 8002d0c:	e7f4      	b.n	8002cf8 <__sfp+0x18>
 8002d0e:	2104      	movs	r1, #4
 8002d10:	4638      	mov	r0, r7
 8002d12:	f7ff ff9f 	bl	8002c54 <__sfmoreglue>
 8002d16:	6030      	str	r0, [r6, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1f1      	bne.n	8002d00 <__sfp+0x20>
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4604      	mov	r4, r0
 8002d22:	4620      	mov	r0, r4
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2a:	81e3      	strh	r3, [r4, #14]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	6665      	str	r5, [r4, #100]	; 0x64
 8002d32:	6025      	str	r5, [r4, #0]
 8002d34:	60a5      	str	r5, [r4, #8]
 8002d36:	6065      	str	r5, [r4, #4]
 8002d38:	6125      	str	r5, [r4, #16]
 8002d3a:	6165      	str	r5, [r4, #20]
 8002d3c:	61a5      	str	r5, [r4, #24]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	4629      	mov	r1, r5
 8002d42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d46:	f000 f825 	bl	8002d94 <memset>
 8002d4a:	6365      	str	r5, [r4, #52]	; 0x34
 8002d4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d52:	e7e6      	b.n	8002d22 <__sfp+0x42>
 8002d54:	08006914 	.word	0x08006914

08002d58 <_fwalk_reent>:
 8002d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d5c:	4680      	mov	r8, r0
 8002d5e:	4689      	mov	r9, r1
 8002d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d64:	2600      	movs	r6, #0
 8002d66:	b914      	cbnz	r4, 8002d6e <_fwalk_reent+0x16>
 8002d68:	4630      	mov	r0, r6
 8002d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6e:	68a5      	ldr	r5, [r4, #8]
 8002d70:	6867      	ldr	r7, [r4, #4]
 8002d72:	3f01      	subs	r7, #1
 8002d74:	d501      	bpl.n	8002d7a <_fwalk_reent+0x22>
 8002d76:	6824      	ldr	r4, [r4, #0]
 8002d78:	e7f5      	b.n	8002d66 <_fwalk_reent+0xe>
 8002d7a:	89ab      	ldrh	r3, [r5, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d907      	bls.n	8002d90 <_fwalk_reent+0x38>
 8002d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d84:	3301      	adds	r3, #1
 8002d86:	d003      	beq.n	8002d90 <_fwalk_reent+0x38>
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	47c8      	blx	r9
 8002d8e:	4306      	orrs	r6, r0
 8002d90:	3568      	adds	r5, #104	; 0x68
 8002d92:	e7ee      	b.n	8002d72 <_fwalk_reent+0x1a>

08002d94 <memset>:
 8002d94:	4402      	add	r2, r0
 8002d96:	4603      	mov	r3, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_malloc_r>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	1ccd      	adds	r5, r1, #3
 8002da8:	f025 0503 	bic.w	r5, r5, #3
 8002dac:	3508      	adds	r5, #8
 8002dae:	2d0c      	cmp	r5, #12
 8002db0:	bf38      	it	cc
 8002db2:	250c      	movcc	r5, #12
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	4606      	mov	r6, r0
 8002db8:	db01      	blt.n	8002dbe <_malloc_r+0x1a>
 8002dba:	42a9      	cmp	r1, r5
 8002dbc:	d903      	bls.n	8002dc6 <_malloc_r+0x22>
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	f000 fd7f 	bl	80038c8 <__malloc_lock>
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <_malloc_r+0xb4>)
 8002dcc:	6814      	ldr	r4, [r2, #0]
 8002dce:	4621      	mov	r1, r4
 8002dd0:	b991      	cbnz	r1, 8002df8 <_malloc_r+0x54>
 8002dd2:	4c22      	ldr	r4, [pc, #136]	; (8002e5c <_malloc_r+0xb8>)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	b91b      	cbnz	r3, 8002de0 <_malloc_r+0x3c>
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f000 fb17 	bl	800340c <_sbrk_r>
 8002dde:	6020      	str	r0, [r4, #0]
 8002de0:	4629      	mov	r1, r5
 8002de2:	4630      	mov	r0, r6
 8002de4:	f000 fb12 	bl	800340c <_sbrk_r>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d126      	bne.n	8002e3a <_malloc_r+0x96>
 8002dec:	230c      	movs	r3, #12
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 fd6a 	bl	80038ca <__malloc_unlock>
 8002df6:	e7e4      	b.n	8002dc2 <_malloc_r+0x1e>
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	1b5b      	subs	r3, r3, r5
 8002dfc:	d41a      	bmi.n	8002e34 <_malloc_r+0x90>
 8002dfe:	2b0b      	cmp	r3, #11
 8002e00:	d90f      	bls.n	8002e22 <_malloc_r+0x7e>
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	50cd      	str	r5, [r1, r3]
 8002e06:	18cc      	adds	r4, r1, r3
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f000 fd5e 	bl	80038ca <__malloc_unlock>
 8002e0e:	f104 000b 	add.w	r0, r4, #11
 8002e12:	1d23      	adds	r3, r4, #4
 8002e14:	f020 0007 	bic.w	r0, r0, #7
 8002e18:	1ac3      	subs	r3, r0, r3
 8002e1a:	d01b      	beq.n	8002e54 <_malloc_r+0xb0>
 8002e1c:	425a      	negs	r2, r3
 8002e1e:	50e2      	str	r2, [r4, r3]
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	428c      	cmp	r4, r1
 8002e24:	bf0d      	iteet	eq
 8002e26:	6863      	ldreq	r3, [r4, #4]
 8002e28:	684b      	ldrne	r3, [r1, #4]
 8002e2a:	6063      	strne	r3, [r4, #4]
 8002e2c:	6013      	streq	r3, [r2, #0]
 8002e2e:	bf18      	it	ne
 8002e30:	460c      	movne	r4, r1
 8002e32:	e7e9      	b.n	8002e08 <_malloc_r+0x64>
 8002e34:	460c      	mov	r4, r1
 8002e36:	6849      	ldr	r1, [r1, #4]
 8002e38:	e7ca      	b.n	8002dd0 <_malloc_r+0x2c>
 8002e3a:	1cc4      	adds	r4, r0, #3
 8002e3c:	f024 0403 	bic.w	r4, r4, #3
 8002e40:	42a0      	cmp	r0, r4
 8002e42:	d005      	beq.n	8002e50 <_malloc_r+0xac>
 8002e44:	1a21      	subs	r1, r4, r0
 8002e46:	4630      	mov	r0, r6
 8002e48:	f000 fae0 	bl	800340c <_sbrk_r>
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d0cd      	beq.n	8002dec <_malloc_r+0x48>
 8002e50:	6025      	str	r5, [r4, #0]
 8002e52:	e7d9      	b.n	8002e08 <_malloc_r+0x64>
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
 8002e56:	bf00      	nop
 8002e58:	2000208c 	.word	0x2000208c
 8002e5c:	20002090 	.word	0x20002090

08002e60 <__sfputc_r>:
 8002e60:	6893      	ldr	r3, [r2, #8]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	b410      	push	{r4}
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	da09      	bge.n	8002e80 <__sfputc_r+0x20>
 8002e6c:	6994      	ldr	r4, [r2, #24]
 8002e6e:	42a3      	cmp	r3, r4
 8002e70:	db02      	blt.n	8002e78 <__sfputc_r+0x18>
 8002e72:	b2cb      	uxtb	r3, r1
 8002e74:	2b0a      	cmp	r3, #10
 8002e76:	d103      	bne.n	8002e80 <__sfputc_r+0x20>
 8002e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e7c:	f000 bb1a 	b.w	80034b4 <__swbuf_r>
 8002e80:	6813      	ldr	r3, [r2, #0]
 8002e82:	1c58      	adds	r0, r3, #1
 8002e84:	6010      	str	r0, [r2, #0]
 8002e86:	7019      	strb	r1, [r3, #0]
 8002e88:	b2c8      	uxtb	r0, r1
 8002e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <__sfputs_r>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	4606      	mov	r6, r0
 8002e94:	460f      	mov	r7, r1
 8002e96:	4614      	mov	r4, r2
 8002e98:	18d5      	adds	r5, r2, r3
 8002e9a:	42ac      	cmp	r4, r5
 8002e9c:	d101      	bne.n	8002ea2 <__sfputs_r+0x12>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e007      	b.n	8002eb2 <__sfputs_r+0x22>
 8002ea2:	463a      	mov	r2, r7
 8002ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f7ff ffd9 	bl	8002e60 <__sfputc_r>
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	d1f3      	bne.n	8002e9a <__sfputs_r+0xa>
 8002eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002eb4 <_vfiprintf_r>:
 8002eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb8:	b09d      	sub	sp, #116	; 0x74
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4617      	mov	r7, r2
 8002ebe:	9303      	str	r3, [sp, #12]
 8002ec0:	4606      	mov	r6, r0
 8002ec2:	b118      	cbz	r0, 8002ecc <_vfiprintf_r+0x18>
 8002ec4:	6983      	ldr	r3, [r0, #24]
 8002ec6:	b90b      	cbnz	r3, 8002ecc <_vfiprintf_r+0x18>
 8002ec8:	f7ff feda 	bl	8002c80 <__sinit>
 8002ecc:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <_vfiprintf_r+0x20c>)
 8002ece:	429c      	cmp	r4, r3
 8002ed0:	d157      	bne.n	8002f82 <_vfiprintf_r+0xce>
 8002ed2:	6874      	ldr	r4, [r6, #4]
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	0718      	lsls	r0, r3, #28
 8002ed8:	d55d      	bpl.n	8002f96 <_vfiprintf_r+0xe2>
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05a      	beq.n	8002f96 <_vfiprintf_r+0xe2>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eea:	2330      	movs	r3, #48	; 0x30
 8002eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ef0:	f04f 0b01 	mov.w	fp, #1
 8002ef4:	46b8      	mov	r8, r7
 8002ef6:	4645      	mov	r5, r8
 8002ef8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d155      	bne.n	8002fac <_vfiprintf_r+0xf8>
 8002f00:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f04:	d00b      	beq.n	8002f1e <_vfiprintf_r+0x6a>
 8002f06:	4653      	mov	r3, sl
 8002f08:	463a      	mov	r2, r7
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7ff ffbf 	bl	8002e90 <__sfputs_r>
 8002f12:	3001      	adds	r0, #1
 8002f14:	f000 80c4 	beq.w	80030a0 <_vfiprintf_r+0x1ec>
 8002f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1a:	4453      	add	r3, sl
 8002f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1e:	f898 3000 	ldrb.w	r3, [r8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80bc 	beq.w	80030a0 <_vfiprintf_r+0x1ec>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2e:	9304      	str	r3, [sp, #16]
 8002f30:	9307      	str	r3, [sp, #28]
 8002f32:	9205      	str	r2, [sp, #20]
 8002f34:	9306      	str	r3, [sp, #24]
 8002f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	7829      	ldrb	r1, [r5, #0]
 8002f40:	4860      	ldr	r0, [pc, #384]	; (80030c4 <_vfiprintf_r+0x210>)
 8002f42:	f7fd f9a5 	bl	8000290 <memchr>
 8002f46:	f105 0801 	add.w	r8, r5, #1
 8002f4a:	9b04      	ldr	r3, [sp, #16]
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d131      	bne.n	8002fb4 <_vfiprintf_r+0x100>
 8002f50:	06d9      	lsls	r1, r3, #27
 8002f52:	bf44      	itt	mi
 8002f54:	2220      	movmi	r2, #32
 8002f56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f5a:	071a      	lsls	r2, r3, #28
 8002f5c:	bf44      	itt	mi
 8002f5e:	222b      	movmi	r2, #43	; 0x2b
 8002f60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f64:	782a      	ldrb	r2, [r5, #0]
 8002f66:	2a2a      	cmp	r2, #42	; 0x2a
 8002f68:	d02c      	beq.n	8002fc4 <_vfiprintf_r+0x110>
 8002f6a:	9a07      	ldr	r2, [sp, #28]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	200a      	movs	r0, #10
 8002f70:	46a8      	mov	r8, r5
 8002f72:	3501      	adds	r5, #1
 8002f74:	f898 3000 	ldrb.w	r3, [r8]
 8002f78:	3b30      	subs	r3, #48	; 0x30
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d96d      	bls.n	800305a <_vfiprintf_r+0x1a6>
 8002f7e:	b371      	cbz	r1, 8002fde <_vfiprintf_r+0x12a>
 8002f80:	e026      	b.n	8002fd0 <_vfiprintf_r+0x11c>
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <_vfiprintf_r+0x214>)
 8002f84:	429c      	cmp	r4, r3
 8002f86:	d101      	bne.n	8002f8c <_vfiprintf_r+0xd8>
 8002f88:	68b4      	ldr	r4, [r6, #8]
 8002f8a:	e7a3      	b.n	8002ed4 <_vfiprintf_r+0x20>
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <_vfiprintf_r+0x218>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	bf08      	it	eq
 8002f92:	68f4      	ldreq	r4, [r6, #12]
 8002f94:	e79e      	b.n	8002ed4 <_vfiprintf_r+0x20>
 8002f96:	4621      	mov	r1, r4
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f000 faef 	bl	800357c <__swsetup_r>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d09e      	beq.n	8002ee0 <_vfiprintf_r+0x2c>
 8002fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa6:	b01d      	add	sp, #116	; 0x74
 8002fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fac:	2b25      	cmp	r3, #37	; 0x25
 8002fae:	d0a7      	beq.n	8002f00 <_vfiprintf_r+0x4c>
 8002fb0:	46a8      	mov	r8, r5
 8002fb2:	e7a0      	b.n	8002ef6 <_vfiprintf_r+0x42>
 8002fb4:	4a43      	ldr	r2, [pc, #268]	; (80030c4 <_vfiprintf_r+0x210>)
 8002fb6:	1a80      	subs	r0, r0, r2
 8002fb8:	fa0b f000 	lsl.w	r0, fp, r0
 8002fbc:	4318      	orrs	r0, r3
 8002fbe:	9004      	str	r0, [sp, #16]
 8002fc0:	4645      	mov	r5, r8
 8002fc2:	e7bb      	b.n	8002f3c <_vfiprintf_r+0x88>
 8002fc4:	9a03      	ldr	r2, [sp, #12]
 8002fc6:	1d11      	adds	r1, r2, #4
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	9103      	str	r1, [sp, #12]
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	db01      	blt.n	8002fd4 <_vfiprintf_r+0x120>
 8002fd0:	9207      	str	r2, [sp, #28]
 8002fd2:	e004      	b.n	8002fde <_vfiprintf_r+0x12a>
 8002fd4:	4252      	negs	r2, r2
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	9207      	str	r2, [sp, #28]
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	f898 3000 	ldrb.w	r3, [r8]
 8002fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fe4:	d110      	bne.n	8003008 <_vfiprintf_r+0x154>
 8002fe6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002fea:	2b2a      	cmp	r3, #42	; 0x2a
 8002fec:	f108 0101 	add.w	r1, r8, #1
 8002ff0:	d137      	bne.n	8003062 <_vfiprintf_r+0x1ae>
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	1d1a      	adds	r2, r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9203      	str	r2, [sp, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfb8      	it	lt
 8002ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003002:	f108 0802 	add.w	r8, r8, #2
 8003006:	9305      	str	r3, [sp, #20]
 8003008:	4d31      	ldr	r5, [pc, #196]	; (80030d0 <_vfiprintf_r+0x21c>)
 800300a:	f898 1000 	ldrb.w	r1, [r8]
 800300e:	2203      	movs	r2, #3
 8003010:	4628      	mov	r0, r5
 8003012:	f7fd f93d 	bl	8000290 <memchr>
 8003016:	b140      	cbz	r0, 800302a <_vfiprintf_r+0x176>
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	1b40      	subs	r0, r0, r5
 800301c:	fa03 f000 	lsl.w	r0, r3, r0
 8003020:	9b04      	ldr	r3, [sp, #16]
 8003022:	4303      	orrs	r3, r0
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	f108 0801 	add.w	r8, r8, #1
 800302a:	f898 1000 	ldrb.w	r1, [r8]
 800302e:	4829      	ldr	r0, [pc, #164]	; (80030d4 <_vfiprintf_r+0x220>)
 8003030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003034:	2206      	movs	r2, #6
 8003036:	f108 0701 	add.w	r7, r8, #1
 800303a:	f7fd f929 	bl	8000290 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d034      	beq.n	80030ac <_vfiprintf_r+0x1f8>
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <_vfiprintf_r+0x224>)
 8003044:	bb03      	cbnz	r3, 8003088 <_vfiprintf_r+0x1d4>
 8003046:	9b03      	ldr	r3, [sp, #12]
 8003048:	3307      	adds	r3, #7
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	3308      	adds	r3, #8
 8003050:	9303      	str	r3, [sp, #12]
 8003052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003054:	444b      	add	r3, r9
 8003056:	9309      	str	r3, [sp, #36]	; 0x24
 8003058:	e74c      	b.n	8002ef4 <_vfiprintf_r+0x40>
 800305a:	fb00 3202 	mla	r2, r0, r2, r3
 800305e:	2101      	movs	r1, #1
 8003060:	e786      	b.n	8002f70 <_vfiprintf_r+0xbc>
 8003062:	2300      	movs	r3, #0
 8003064:	9305      	str	r3, [sp, #20]
 8003066:	4618      	mov	r0, r3
 8003068:	250a      	movs	r5, #10
 800306a:	4688      	mov	r8, r1
 800306c:	3101      	adds	r1, #1
 800306e:	f898 2000 	ldrb.w	r2, [r8]
 8003072:	3a30      	subs	r2, #48	; 0x30
 8003074:	2a09      	cmp	r2, #9
 8003076:	d903      	bls.n	8003080 <_vfiprintf_r+0x1cc>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0c5      	beq.n	8003008 <_vfiprintf_r+0x154>
 800307c:	9005      	str	r0, [sp, #20]
 800307e:	e7c3      	b.n	8003008 <_vfiprintf_r+0x154>
 8003080:	fb05 2000 	mla	r0, r5, r0, r2
 8003084:	2301      	movs	r3, #1
 8003086:	e7f0      	b.n	800306a <_vfiprintf_r+0x1b6>
 8003088:	ab03      	add	r3, sp, #12
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4622      	mov	r2, r4
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <_vfiprintf_r+0x228>)
 8003090:	a904      	add	r1, sp, #16
 8003092:	4630      	mov	r0, r6
 8003094:	f3af 8000 	nop.w
 8003098:	f1b0 3fff 	cmp.w	r0, #4294967295
 800309c:	4681      	mov	r9, r0
 800309e:	d1d8      	bne.n	8003052 <_vfiprintf_r+0x19e>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	065b      	lsls	r3, r3, #25
 80030a4:	f53f af7d 	bmi.w	8002fa2 <_vfiprintf_r+0xee>
 80030a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030aa:	e77c      	b.n	8002fa6 <_vfiprintf_r+0xf2>
 80030ac:	ab03      	add	r3, sp, #12
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4622      	mov	r2, r4
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <_vfiprintf_r+0x228>)
 80030b4:	a904      	add	r1, sp, #16
 80030b6:	4630      	mov	r0, r6
 80030b8:	f000 f888 	bl	80031cc <_printf_i>
 80030bc:	e7ec      	b.n	8003098 <_vfiprintf_r+0x1e4>
 80030be:	bf00      	nop
 80030c0:	080068d4 	.word	0x080068d4
 80030c4:	08006918 	.word	0x08006918
 80030c8:	080068f4 	.word	0x080068f4
 80030cc:	080068b4 	.word	0x080068b4
 80030d0:	0800691e 	.word	0x0800691e
 80030d4:	08006922 	.word	0x08006922
 80030d8:	00000000 	.word	0x00000000
 80030dc:	08002e91 	.word	0x08002e91

080030e0 <_printf_common>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	4691      	mov	r9, r2
 80030e6:	461f      	mov	r7, r3
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bfb8      	it	lt
 80030f4:	4613      	movlt	r3, r2
 80030f6:	f8c9 3000 	str.w	r3, [r9]
 80030fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030fe:	4606      	mov	r6, r0
 8003100:	460c      	mov	r4, r1
 8003102:	b112      	cbz	r2, 800310a <_printf_common+0x2a>
 8003104:	3301      	adds	r3, #1
 8003106:	f8c9 3000 	str.w	r3, [r9]
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	0699      	lsls	r1, r3, #26
 800310e:	bf42      	ittt	mi
 8003110:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003114:	3302      	addmi	r3, #2
 8003116:	f8c9 3000 	strmi.w	r3, [r9]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d107      	bne.n	8003132 <_printf_common+0x52>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	f8d9 2000 	ldr.w	r2, [r9]
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	429d      	cmp	r5, r3
 8003130:	db29      	blt.n	8003186 <_printf_common+0xa6>
 8003132:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	3300      	adds	r3, #0
 800313a:	bf18      	it	ne
 800313c:	2301      	movne	r3, #1
 800313e:	0692      	lsls	r2, r2, #26
 8003140:	d42e      	bmi.n	80031a0 <_printf_common+0xc0>
 8003142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003146:	4639      	mov	r1, r7
 8003148:	4630      	mov	r0, r6
 800314a:	47c0      	blx	r8
 800314c:	3001      	adds	r0, #1
 800314e:	d021      	beq.n	8003194 <_printf_common+0xb4>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	68e5      	ldr	r5, [r4, #12]
 8003154:	f8d9 2000 	ldr.w	r2, [r9]
 8003158:	f003 0306 	and.w	r3, r3, #6
 800315c:	2b04      	cmp	r3, #4
 800315e:	bf08      	it	eq
 8003160:	1aad      	subeq	r5, r5, r2
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	6922      	ldr	r2, [r4, #16]
 8003166:	bf0c      	ite	eq
 8003168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800316c:	2500      	movne	r5, #0
 800316e:	4293      	cmp	r3, r2
 8003170:	bfc4      	itt	gt
 8003172:	1a9b      	subgt	r3, r3, r2
 8003174:	18ed      	addgt	r5, r5, r3
 8003176:	f04f 0900 	mov.w	r9, #0
 800317a:	341a      	adds	r4, #26
 800317c:	454d      	cmp	r5, r9
 800317e:	d11b      	bne.n	80031b8 <_printf_common+0xd8>
 8003180:	2000      	movs	r0, #0
 8003182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003186:	2301      	movs	r3, #1
 8003188:	4652      	mov	r2, sl
 800318a:	4639      	mov	r1, r7
 800318c:	4630      	mov	r0, r6
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d103      	bne.n	800319c <_printf_common+0xbc>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	3501      	adds	r5, #1
 800319e:	e7c2      	b.n	8003126 <_printf_common+0x46>
 80031a0:	18e1      	adds	r1, r4, r3
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	2030      	movs	r0, #48	; 0x30
 80031a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031aa:	4422      	add	r2, r4
 80031ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b4:	3302      	adds	r3, #2
 80031b6:	e7c4      	b.n	8003142 <_printf_common+0x62>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4622      	mov	r2, r4
 80031bc:	4639      	mov	r1, r7
 80031be:	4630      	mov	r0, r6
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d0e6      	beq.n	8003194 <_printf_common+0xb4>
 80031c6:	f109 0901 	add.w	r9, r9, #1
 80031ca:	e7d7      	b.n	800317c <_printf_common+0x9c>

080031cc <_printf_i>:
 80031cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031d0:	4617      	mov	r7, r2
 80031d2:	7e0a      	ldrb	r2, [r1, #24]
 80031d4:	b085      	sub	sp, #20
 80031d6:	2a6e      	cmp	r2, #110	; 0x6e
 80031d8:	4698      	mov	r8, r3
 80031da:	4606      	mov	r6, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80031e4:	f000 80bc 	beq.w	8003360 <_printf_i+0x194>
 80031e8:	d81a      	bhi.n	8003220 <_printf_i+0x54>
 80031ea:	2a63      	cmp	r2, #99	; 0x63
 80031ec:	d02e      	beq.n	800324c <_printf_i+0x80>
 80031ee:	d80a      	bhi.n	8003206 <_printf_i+0x3a>
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	f000 80c8 	beq.w	8003386 <_printf_i+0x1ba>
 80031f6:	2a58      	cmp	r2, #88	; 0x58
 80031f8:	f000 808a 	beq.w	8003310 <_printf_i+0x144>
 80031fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003200:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003204:	e02a      	b.n	800325c <_printf_i+0x90>
 8003206:	2a64      	cmp	r2, #100	; 0x64
 8003208:	d001      	beq.n	800320e <_printf_i+0x42>
 800320a:	2a69      	cmp	r2, #105	; 0x69
 800320c:	d1f6      	bne.n	80031fc <_printf_i+0x30>
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003216:	d023      	beq.n	8003260 <_printf_i+0x94>
 8003218:	1d11      	adds	r1, r2, #4
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	e027      	b.n	8003270 <_printf_i+0xa4>
 8003220:	2a73      	cmp	r2, #115	; 0x73
 8003222:	f000 80b4 	beq.w	800338e <_printf_i+0x1c2>
 8003226:	d808      	bhi.n	800323a <_printf_i+0x6e>
 8003228:	2a6f      	cmp	r2, #111	; 0x6f
 800322a:	d02a      	beq.n	8003282 <_printf_i+0xb6>
 800322c:	2a70      	cmp	r2, #112	; 0x70
 800322e:	d1e5      	bne.n	80031fc <_printf_i+0x30>
 8003230:	680a      	ldr	r2, [r1, #0]
 8003232:	f042 0220 	orr.w	r2, r2, #32
 8003236:	600a      	str	r2, [r1, #0]
 8003238:	e003      	b.n	8003242 <_printf_i+0x76>
 800323a:	2a75      	cmp	r2, #117	; 0x75
 800323c:	d021      	beq.n	8003282 <_printf_i+0xb6>
 800323e:	2a78      	cmp	r2, #120	; 0x78
 8003240:	d1dc      	bne.n	80031fc <_printf_i+0x30>
 8003242:	2278      	movs	r2, #120	; 0x78
 8003244:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003248:	496e      	ldr	r1, [pc, #440]	; (8003404 <_printf_i+0x238>)
 800324a:	e064      	b.n	8003316 <_printf_i+0x14a>
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003252:	1d11      	adds	r1, r2, #4
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800325c:	2301      	movs	r3, #1
 800325e:	e0a3      	b.n	80033a8 <_printf_i+0x1dc>
 8003260:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003264:	f102 0104 	add.w	r1, r2, #4
 8003268:	6019      	str	r1, [r3, #0]
 800326a:	d0d7      	beq.n	800321c <_printf_i+0x50>
 800326c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da03      	bge.n	800327c <_printf_i+0xb0>
 8003274:	222d      	movs	r2, #45	; 0x2d
 8003276:	425b      	negs	r3, r3
 8003278:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800327c:	4962      	ldr	r1, [pc, #392]	; (8003408 <_printf_i+0x23c>)
 800327e:	220a      	movs	r2, #10
 8003280:	e017      	b.n	80032b2 <_printf_i+0xe6>
 8003282:	6820      	ldr	r0, [r4, #0]
 8003284:	6819      	ldr	r1, [r3, #0]
 8003286:	f010 0f80 	tst.w	r0, #128	; 0x80
 800328a:	d003      	beq.n	8003294 <_printf_i+0xc8>
 800328c:	1d08      	adds	r0, r1, #4
 800328e:	6018      	str	r0, [r3, #0]
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	e006      	b.n	80032a2 <_printf_i+0xd6>
 8003294:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003298:	f101 0004 	add.w	r0, r1, #4
 800329c:	6018      	str	r0, [r3, #0]
 800329e:	d0f7      	beq.n	8003290 <_printf_i+0xc4>
 80032a0:	880b      	ldrh	r3, [r1, #0]
 80032a2:	4959      	ldr	r1, [pc, #356]	; (8003408 <_printf_i+0x23c>)
 80032a4:	2a6f      	cmp	r2, #111	; 0x6f
 80032a6:	bf14      	ite	ne
 80032a8:	220a      	movne	r2, #10
 80032aa:	2208      	moveq	r2, #8
 80032ac:	2000      	movs	r0, #0
 80032ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032b2:	6865      	ldr	r5, [r4, #4]
 80032b4:	60a5      	str	r5, [r4, #8]
 80032b6:	2d00      	cmp	r5, #0
 80032b8:	f2c0 809c 	blt.w	80033f4 <_printf_i+0x228>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	f020 0004 	bic.w	r0, r0, #4
 80032c2:	6020      	str	r0, [r4, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13f      	bne.n	8003348 <_printf_i+0x17c>
 80032c8:	2d00      	cmp	r5, #0
 80032ca:	f040 8095 	bne.w	80033f8 <_printf_i+0x22c>
 80032ce:	4675      	mov	r5, lr
 80032d0:	2a08      	cmp	r2, #8
 80032d2:	d10b      	bne.n	80032ec <_printf_i+0x120>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	07da      	lsls	r2, r3, #31
 80032d8:	d508      	bpl.n	80032ec <_printf_i+0x120>
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	6862      	ldr	r2, [r4, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	bfde      	ittt	le
 80032e2:	2330      	movle	r3, #48	; 0x30
 80032e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032ec:	ebae 0305 	sub.w	r3, lr, r5
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	f8cd 8000 	str.w	r8, [sp]
 80032f6:	463b      	mov	r3, r7
 80032f8:	aa03      	add	r2, sp, #12
 80032fa:	4621      	mov	r1, r4
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff feef 	bl	80030e0 <_printf_common>
 8003302:	3001      	adds	r0, #1
 8003304:	d155      	bne.n	80033b2 <_printf_i+0x1e6>
 8003306:	f04f 30ff 	mov.w	r0, #4294967295
 800330a:	b005      	add	sp, #20
 800330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003310:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003314:	493c      	ldr	r1, [pc, #240]	; (8003408 <_printf_i+0x23c>)
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800331e:	f100 0504 	add.w	r5, r0, #4
 8003322:	601d      	str	r5, [r3, #0]
 8003324:	d001      	beq.n	800332a <_printf_i+0x15e>
 8003326:	6803      	ldr	r3, [r0, #0]
 8003328:	e002      	b.n	8003330 <_printf_i+0x164>
 800332a:	0655      	lsls	r5, r2, #25
 800332c:	d5fb      	bpl.n	8003326 <_printf_i+0x15a>
 800332e:	8803      	ldrh	r3, [r0, #0]
 8003330:	07d0      	lsls	r0, r2, #31
 8003332:	bf44      	itt	mi
 8003334:	f042 0220 	orrmi.w	r2, r2, #32
 8003338:	6022      	strmi	r2, [r4, #0]
 800333a:	b91b      	cbnz	r3, 8003344 <_printf_i+0x178>
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	f022 0220 	bic.w	r2, r2, #32
 8003342:	6022      	str	r2, [r4, #0]
 8003344:	2210      	movs	r2, #16
 8003346:	e7b1      	b.n	80032ac <_printf_i+0xe0>
 8003348:	4675      	mov	r5, lr
 800334a:	fbb3 f0f2 	udiv	r0, r3, r2
 800334e:	fb02 3310 	mls	r3, r2, r0, r3
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003358:	4603      	mov	r3, r0
 800335a:	2800      	cmp	r0, #0
 800335c:	d1f5      	bne.n	800334a <_printf_i+0x17e>
 800335e:	e7b7      	b.n	80032d0 <_printf_i+0x104>
 8003360:	6808      	ldr	r0, [r1, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	6949      	ldr	r1, [r1, #20]
 8003366:	f010 0f80 	tst.w	r0, #128	; 0x80
 800336a:	d004      	beq.n	8003376 <_printf_i+0x1aa>
 800336c:	1d10      	adds	r0, r2, #4
 800336e:	6018      	str	r0, [r3, #0]
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	e007      	b.n	8003386 <_printf_i+0x1ba>
 8003376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800337a:	f102 0004 	add.w	r0, r2, #4
 800337e:	6018      	str	r0, [r3, #0]
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	d0f6      	beq.n	8003372 <_printf_i+0x1a6>
 8003384:	8019      	strh	r1, [r3, #0]
 8003386:	2300      	movs	r3, #0
 8003388:	6123      	str	r3, [r4, #16]
 800338a:	4675      	mov	r5, lr
 800338c:	e7b1      	b.n	80032f2 <_printf_i+0x126>
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	1d11      	adds	r1, r2, #4
 8003392:	6019      	str	r1, [r3, #0]
 8003394:	6815      	ldr	r5, [r2, #0]
 8003396:	6862      	ldr	r2, [r4, #4]
 8003398:	2100      	movs	r1, #0
 800339a:	4628      	mov	r0, r5
 800339c:	f7fc ff78 	bl	8000290 <memchr>
 80033a0:	b108      	cbz	r0, 80033a6 <_printf_i+0x1da>
 80033a2:	1b40      	subs	r0, r0, r5
 80033a4:	6060      	str	r0, [r4, #4]
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	2300      	movs	r3, #0
 80033ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b0:	e79f      	b.n	80032f2 <_printf_i+0x126>
 80033b2:	6923      	ldr	r3, [r4, #16]
 80033b4:	462a      	mov	r2, r5
 80033b6:	4639      	mov	r1, r7
 80033b8:	4630      	mov	r0, r6
 80033ba:	47c0      	blx	r8
 80033bc:	3001      	adds	r0, #1
 80033be:	d0a2      	beq.n	8003306 <_printf_i+0x13a>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	079b      	lsls	r3, r3, #30
 80033c4:	d507      	bpl.n	80033d6 <_printf_i+0x20a>
 80033c6:	2500      	movs	r5, #0
 80033c8:	f104 0919 	add.w	r9, r4, #25
 80033cc:	68e3      	ldr	r3, [r4, #12]
 80033ce:	9a03      	ldr	r2, [sp, #12]
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	429d      	cmp	r5, r3
 80033d4:	db05      	blt.n	80033e2 <_printf_i+0x216>
 80033d6:	68e0      	ldr	r0, [r4, #12]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	4298      	cmp	r0, r3
 80033dc:	bfb8      	it	lt
 80033de:	4618      	movlt	r0, r3
 80033e0:	e793      	b.n	800330a <_printf_i+0x13e>
 80033e2:	2301      	movs	r3, #1
 80033e4:	464a      	mov	r2, r9
 80033e6:	4639      	mov	r1, r7
 80033e8:	4630      	mov	r0, r6
 80033ea:	47c0      	blx	r8
 80033ec:	3001      	adds	r0, #1
 80033ee:	d08a      	beq.n	8003306 <_printf_i+0x13a>
 80033f0:	3501      	adds	r5, #1
 80033f2:	e7eb      	b.n	80033cc <_printf_i+0x200>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1a7      	bne.n	8003348 <_printf_i+0x17c>
 80033f8:	780b      	ldrb	r3, [r1, #0]
 80033fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003402:	e765      	b.n	80032d0 <_printf_i+0x104>
 8003404:	0800693a 	.word	0x0800693a
 8003408:	08006929 	.word	0x08006929

0800340c <_sbrk_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4c06      	ldr	r4, [pc, #24]	; (8003428 <_sbrk_r+0x1c>)
 8003410:	2300      	movs	r3, #0
 8003412:	4605      	mov	r5, r0
 8003414:	4608      	mov	r0, r1
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	f000 fb02 	bl	8003a20 <_sbrk>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_sbrk_r+0x1a>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	b103      	cbz	r3, 8003426 <_sbrk_r+0x1a>
 8003424:	602b      	str	r3, [r5, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200020e0 	.word	0x200020e0

0800342c <__sread>:
 800342c:	b510      	push	{r4, lr}
 800342e:	460c      	mov	r4, r1
 8003430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003434:	f000 fa98 	bl	8003968 <_read_r>
 8003438:	2800      	cmp	r0, #0
 800343a:	bfab      	itete	ge
 800343c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800343e:	89a3      	ldrhlt	r3, [r4, #12]
 8003440:	181b      	addge	r3, r3, r0
 8003442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003446:	bfac      	ite	ge
 8003448:	6563      	strge	r3, [r4, #84]	; 0x54
 800344a:	81a3      	strhlt	r3, [r4, #12]
 800344c:	bd10      	pop	{r4, pc}

0800344e <__swrite>:
 800344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003452:	461f      	mov	r7, r3
 8003454:	898b      	ldrh	r3, [r1, #12]
 8003456:	05db      	lsls	r3, r3, #23
 8003458:	4605      	mov	r5, r0
 800345a:	460c      	mov	r4, r1
 800345c:	4616      	mov	r6, r2
 800345e:	d505      	bpl.n	800346c <__swrite+0x1e>
 8003460:	2302      	movs	r3, #2
 8003462:	2200      	movs	r2, #0
 8003464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003468:	f000 f9b8 	bl	80037dc <_lseek_r>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	4632      	mov	r2, r6
 800347a:	463b      	mov	r3, r7
 800347c:	4628      	mov	r0, r5
 800347e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003482:	f000 b869 	b.w	8003558 <_write_r>

08003486 <__sseek>:
 8003486:	b510      	push	{r4, lr}
 8003488:	460c      	mov	r4, r1
 800348a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348e:	f000 f9a5 	bl	80037dc <_lseek_r>
 8003492:	1c43      	adds	r3, r0, #1
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	bf15      	itete	ne
 8003498:	6560      	strne	r0, [r4, #84]	; 0x54
 800349a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800349e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034a2:	81a3      	strheq	r3, [r4, #12]
 80034a4:	bf18      	it	ne
 80034a6:	81a3      	strhne	r3, [r4, #12]
 80034a8:	bd10      	pop	{r4, pc}

080034aa <__sclose>:
 80034aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ae:	f000 b8d3 	b.w	8003658 <_close_r>
	...

080034b4 <__swbuf_r>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	460e      	mov	r6, r1
 80034b8:	4614      	mov	r4, r2
 80034ba:	4605      	mov	r5, r0
 80034bc:	b118      	cbz	r0, 80034c6 <__swbuf_r+0x12>
 80034be:	6983      	ldr	r3, [r0, #24]
 80034c0:	b90b      	cbnz	r3, 80034c6 <__swbuf_r+0x12>
 80034c2:	f7ff fbdd 	bl	8002c80 <__sinit>
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <__swbuf_r+0x98>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	d12a      	bne.n	8003522 <__swbuf_r+0x6e>
 80034cc:	686c      	ldr	r4, [r5, #4]
 80034ce:	69a3      	ldr	r3, [r4, #24]
 80034d0:	60a3      	str	r3, [r4, #8]
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	071a      	lsls	r2, r3, #28
 80034d6:	d52e      	bpl.n	8003536 <__swbuf_r+0x82>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	b363      	cbz	r3, 8003536 <__swbuf_r+0x82>
 80034dc:	6923      	ldr	r3, [r4, #16]
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	1ac0      	subs	r0, r0, r3
 80034e2:	6963      	ldr	r3, [r4, #20]
 80034e4:	b2f6      	uxtb	r6, r6
 80034e6:	4298      	cmp	r0, r3
 80034e8:	4637      	mov	r7, r6
 80034ea:	db04      	blt.n	80034f6 <__swbuf_r+0x42>
 80034ec:	4621      	mov	r1, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f94a 	bl	8003788 <_fflush_r>
 80034f4:	bb28      	cbnz	r0, 8003542 <__swbuf_r+0x8e>
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60a3      	str	r3, [r4, #8]
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	701e      	strb	r6, [r3, #0]
 8003504:	6963      	ldr	r3, [r4, #20]
 8003506:	3001      	adds	r0, #1
 8003508:	4298      	cmp	r0, r3
 800350a:	d004      	beq.n	8003516 <__swbuf_r+0x62>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	07db      	lsls	r3, r3, #31
 8003510:	d519      	bpl.n	8003546 <__swbuf_r+0x92>
 8003512:	2e0a      	cmp	r6, #10
 8003514:	d117      	bne.n	8003546 <__swbuf_r+0x92>
 8003516:	4621      	mov	r1, r4
 8003518:	4628      	mov	r0, r5
 800351a:	f000 f935 	bl	8003788 <_fflush_r>
 800351e:	b190      	cbz	r0, 8003546 <__swbuf_r+0x92>
 8003520:	e00f      	b.n	8003542 <__swbuf_r+0x8e>
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <__swbuf_r+0x9c>)
 8003524:	429c      	cmp	r4, r3
 8003526:	d101      	bne.n	800352c <__swbuf_r+0x78>
 8003528:	68ac      	ldr	r4, [r5, #8]
 800352a:	e7d0      	b.n	80034ce <__swbuf_r+0x1a>
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <__swbuf_r+0xa0>)
 800352e:	429c      	cmp	r4, r3
 8003530:	bf08      	it	eq
 8003532:	68ec      	ldreq	r4, [r5, #12]
 8003534:	e7cb      	b.n	80034ce <__swbuf_r+0x1a>
 8003536:	4621      	mov	r1, r4
 8003538:	4628      	mov	r0, r5
 800353a:	f000 f81f 	bl	800357c <__swsetup_r>
 800353e:	2800      	cmp	r0, #0
 8003540:	d0cc      	beq.n	80034dc <__swbuf_r+0x28>
 8003542:	f04f 37ff 	mov.w	r7, #4294967295
 8003546:	4638      	mov	r0, r7
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354a:	bf00      	nop
 800354c:	080068d4 	.word	0x080068d4
 8003550:	080068f4 	.word	0x080068f4
 8003554:	080068b4 	.word	0x080068b4

08003558 <_write_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4c07      	ldr	r4, [pc, #28]	; (8003578 <_write_r+0x20>)
 800355c:	4605      	mov	r5, r0
 800355e:	4608      	mov	r0, r1
 8003560:	4611      	mov	r1, r2
 8003562:	2200      	movs	r2, #0
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	f7fe fa57 	bl	8001a1a <_write>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d102      	bne.n	8003576 <_write_r+0x1e>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	b103      	cbz	r3, 8003576 <_write_r+0x1e>
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	200020e0 	.word	0x200020e0

0800357c <__swsetup_r>:
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <__swsetup_r+0xcc>)
 800357e:	b570      	push	{r4, r5, r6, lr}
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	4606      	mov	r6, r0
 8003584:	460c      	mov	r4, r1
 8003586:	b125      	cbz	r5, 8003592 <__swsetup_r+0x16>
 8003588:	69ab      	ldr	r3, [r5, #24]
 800358a:	b913      	cbnz	r3, 8003592 <__swsetup_r+0x16>
 800358c:	4628      	mov	r0, r5
 800358e:	f7ff fb77 	bl	8002c80 <__sinit>
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <__swsetup_r+0xd0>)
 8003594:	429c      	cmp	r4, r3
 8003596:	d10f      	bne.n	80035b8 <__swsetup_r+0x3c>
 8003598:	686c      	ldr	r4, [r5, #4]
 800359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	0715      	lsls	r5, r2, #28
 80035a2:	d42c      	bmi.n	80035fe <__swsetup_r+0x82>
 80035a4:	06d0      	lsls	r0, r2, #27
 80035a6:	d411      	bmi.n	80035cc <__swsetup_r+0x50>
 80035a8:	2209      	movs	r2, #9
 80035aa:	6032      	str	r2, [r6, #0]
 80035ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <__swsetup_r+0xd4>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d101      	bne.n	80035c2 <__swsetup_r+0x46>
 80035be:	68ac      	ldr	r4, [r5, #8]
 80035c0:	e7eb      	b.n	800359a <__swsetup_r+0x1e>
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <__swsetup_r+0xd8>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	bf08      	it	eq
 80035c8:	68ec      	ldreq	r4, [r5, #12]
 80035ca:	e7e6      	b.n	800359a <__swsetup_r+0x1e>
 80035cc:	0751      	lsls	r1, r2, #29
 80035ce:	d512      	bpl.n	80035f6 <__swsetup_r+0x7a>
 80035d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d2:	b141      	cbz	r1, 80035e6 <__swsetup_r+0x6a>
 80035d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035d8:	4299      	cmp	r1, r3
 80035da:	d002      	beq.n	80035e2 <__swsetup_r+0x66>
 80035dc:	4630      	mov	r0, r6
 80035de:	f000 f975 	bl	80038cc <_free_r>
 80035e2:	2300      	movs	r3, #0
 80035e4:	6363      	str	r3, [r4, #52]	; 0x34
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	2300      	movs	r3, #0
 80035f0:	6063      	str	r3, [r4, #4]
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	b94b      	cbnz	r3, 8003616 <__swsetup_r+0x9a>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	d003      	beq.n	8003616 <__swsetup_r+0x9a>
 800360e:	4621      	mov	r1, r4
 8003610:	4630      	mov	r0, r6
 8003612:	f000 f919 	bl	8003848 <__smakebuf_r>
 8003616:	89a2      	ldrh	r2, [r4, #12]
 8003618:	f012 0301 	ands.w	r3, r2, #1
 800361c:	d00c      	beq.n	8003638 <__swsetup_r+0xbc>
 800361e:	2300      	movs	r3, #0
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	6963      	ldr	r3, [r4, #20]
 8003624:	425b      	negs	r3, r3
 8003626:	61a3      	str	r3, [r4, #24]
 8003628:	6923      	ldr	r3, [r4, #16]
 800362a:	b953      	cbnz	r3, 8003642 <__swsetup_r+0xc6>
 800362c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003630:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003634:	d1ba      	bne.n	80035ac <__swsetup_r+0x30>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	0792      	lsls	r2, r2, #30
 800363a:	bf58      	it	pl
 800363c:	6963      	ldrpl	r3, [r4, #20]
 800363e:	60a3      	str	r3, [r4, #8]
 8003640:	e7f2      	b.n	8003628 <__swsetup_r+0xac>
 8003642:	2000      	movs	r0, #0
 8003644:	e7f7      	b.n	8003636 <__swsetup_r+0xba>
 8003646:	bf00      	nop
 8003648:	2000200c 	.word	0x2000200c
 800364c:	080068d4 	.word	0x080068d4
 8003650:	080068f4 	.word	0x080068f4
 8003654:	080068b4 	.word	0x080068b4

08003658 <_close_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4c06      	ldr	r4, [pc, #24]	; (8003674 <_close_r+0x1c>)
 800365c:	2300      	movs	r3, #0
 800365e:	4605      	mov	r5, r0
 8003660:	4608      	mov	r0, r1
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	f000 f9b4 	bl	80039d0 <_close>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_close_r+0x1a>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	b103      	cbz	r3, 8003672 <_close_r+0x1a>
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	200020e0 	.word	0x200020e0

08003678 <__sflush_r>:
 8003678:	898a      	ldrh	r2, [r1, #12]
 800367a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367e:	4605      	mov	r5, r0
 8003680:	0710      	lsls	r0, r2, #28
 8003682:	460c      	mov	r4, r1
 8003684:	d45a      	bmi.n	800373c <__sflush_r+0xc4>
 8003686:	684b      	ldr	r3, [r1, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	dc05      	bgt.n	8003698 <__sflush_r+0x20>
 800368c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	dc02      	bgt.n	8003698 <__sflush_r+0x20>
 8003692:	2000      	movs	r0, #0
 8003694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800369a:	2e00      	cmp	r6, #0
 800369c:	d0f9      	beq.n	8003692 <__sflush_r+0x1a>
 800369e:	2300      	movs	r3, #0
 80036a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036a4:	682f      	ldr	r7, [r5, #0]
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	d033      	beq.n	8003712 <__sflush_r+0x9a>
 80036aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	075a      	lsls	r2, r3, #29
 80036b0:	d505      	bpl.n	80036be <__sflush_r+0x46>
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	1ac0      	subs	r0, r0, r3
 80036b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b8:	b10b      	cbz	r3, 80036be <__sflush_r+0x46>
 80036ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036bc:	1ac0      	subs	r0, r0, r3
 80036be:	2300      	movs	r3, #0
 80036c0:	4602      	mov	r2, r0
 80036c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036c4:	6a21      	ldr	r1, [r4, #32]
 80036c6:	4628      	mov	r0, r5
 80036c8:	47b0      	blx	r6
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	d106      	bne.n	80036de <__sflush_r+0x66>
 80036d0:	6829      	ldr	r1, [r5, #0]
 80036d2:	291d      	cmp	r1, #29
 80036d4:	d84b      	bhi.n	800376e <__sflush_r+0xf6>
 80036d6:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <__sflush_r+0x10c>)
 80036d8:	40ca      	lsrs	r2, r1
 80036da:	07d6      	lsls	r6, r2, #31
 80036dc:	d547      	bpl.n	800376e <__sflush_r+0xf6>
 80036de:	2200      	movs	r2, #0
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	04d9      	lsls	r1, r3, #19
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	d504      	bpl.n	80036f4 <__sflush_r+0x7c>
 80036ea:	1c42      	adds	r2, r0, #1
 80036ec:	d101      	bne.n	80036f2 <__sflush_r+0x7a>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	b903      	cbnz	r3, 80036f4 <__sflush_r+0x7c>
 80036f2:	6560      	str	r0, [r4, #84]	; 0x54
 80036f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f6:	602f      	str	r7, [r5, #0]
 80036f8:	2900      	cmp	r1, #0
 80036fa:	d0ca      	beq.n	8003692 <__sflush_r+0x1a>
 80036fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003700:	4299      	cmp	r1, r3
 8003702:	d002      	beq.n	800370a <__sflush_r+0x92>
 8003704:	4628      	mov	r0, r5
 8003706:	f000 f8e1 	bl	80038cc <_free_r>
 800370a:	2000      	movs	r0, #0
 800370c:	6360      	str	r0, [r4, #52]	; 0x34
 800370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	2301      	movs	r3, #1
 8003716:	4628      	mov	r0, r5
 8003718:	47b0      	blx	r6
 800371a:	1c41      	adds	r1, r0, #1
 800371c:	d1c6      	bne.n	80036ac <__sflush_r+0x34>
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0c3      	beq.n	80036ac <__sflush_r+0x34>
 8003724:	2b1d      	cmp	r3, #29
 8003726:	d001      	beq.n	800372c <__sflush_r+0xb4>
 8003728:	2b16      	cmp	r3, #22
 800372a:	d101      	bne.n	8003730 <__sflush_r+0xb8>
 800372c:	602f      	str	r7, [r5, #0]
 800372e:	e7b0      	b.n	8003692 <__sflush_r+0x1a>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800373c:	690f      	ldr	r7, [r1, #16]
 800373e:	2f00      	cmp	r7, #0
 8003740:	d0a7      	beq.n	8003692 <__sflush_r+0x1a>
 8003742:	0793      	lsls	r3, r2, #30
 8003744:	680e      	ldr	r6, [r1, #0]
 8003746:	bf08      	it	eq
 8003748:	694b      	ldreq	r3, [r1, #20]
 800374a:	600f      	str	r7, [r1, #0]
 800374c:	bf18      	it	ne
 800374e:	2300      	movne	r3, #0
 8003750:	eba6 0807 	sub.w	r8, r6, r7
 8003754:	608b      	str	r3, [r1, #8]
 8003756:	f1b8 0f00 	cmp.w	r8, #0
 800375a:	dd9a      	ble.n	8003692 <__sflush_r+0x1a>
 800375c:	4643      	mov	r3, r8
 800375e:	463a      	mov	r2, r7
 8003760:	6a21      	ldr	r1, [r4, #32]
 8003762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003764:	4628      	mov	r0, r5
 8003766:	47b0      	blx	r6
 8003768:	2800      	cmp	r0, #0
 800376a:	dc07      	bgt.n	800377c <__sflush_r+0x104>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800377c:	4407      	add	r7, r0
 800377e:	eba8 0800 	sub.w	r8, r8, r0
 8003782:	e7e8      	b.n	8003756 <__sflush_r+0xde>
 8003784:	20400001 	.word	0x20400001

08003788 <_fflush_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	690b      	ldr	r3, [r1, #16]
 800378c:	4605      	mov	r5, r0
 800378e:	460c      	mov	r4, r1
 8003790:	b1db      	cbz	r3, 80037ca <_fflush_r+0x42>
 8003792:	b118      	cbz	r0, 800379c <_fflush_r+0x14>
 8003794:	6983      	ldr	r3, [r0, #24]
 8003796:	b90b      	cbnz	r3, 800379c <_fflush_r+0x14>
 8003798:	f7ff fa72 	bl	8002c80 <__sinit>
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <_fflush_r+0x48>)
 800379e:	429c      	cmp	r4, r3
 80037a0:	d109      	bne.n	80037b6 <_fflush_r+0x2e>
 80037a2:	686c      	ldr	r4, [r5, #4]
 80037a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a8:	b17b      	cbz	r3, 80037ca <_fflush_r+0x42>
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037b2:	f7ff bf61 	b.w	8003678 <__sflush_r>
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_fflush_r+0x4c>)
 80037b8:	429c      	cmp	r4, r3
 80037ba:	d101      	bne.n	80037c0 <_fflush_r+0x38>
 80037bc:	68ac      	ldr	r4, [r5, #8]
 80037be:	e7f1      	b.n	80037a4 <_fflush_r+0x1c>
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <_fflush_r+0x50>)
 80037c2:	429c      	cmp	r4, r3
 80037c4:	bf08      	it	eq
 80037c6:	68ec      	ldreq	r4, [r5, #12]
 80037c8:	e7ec      	b.n	80037a4 <_fflush_r+0x1c>
 80037ca:	2000      	movs	r0, #0
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	080068d4 	.word	0x080068d4
 80037d4:	080068f4 	.word	0x080068f4
 80037d8:	080068b4 	.word	0x080068b4

080037dc <_lseek_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4c07      	ldr	r4, [pc, #28]	; (80037fc <_lseek_r+0x20>)
 80037e0:	4605      	mov	r5, r0
 80037e2:	4608      	mov	r0, r1
 80037e4:	4611      	mov	r1, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	6022      	str	r2, [r4, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f908 	bl	8003a00 <_lseek>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_lseek_r+0x1e>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_lseek_r+0x1e>
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200020e0 	.word	0x200020e0

08003800 <__swhatbuf_r>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	460e      	mov	r6, r1
 8003804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003808:	2900      	cmp	r1, #0
 800380a:	b090      	sub	sp, #64	; 0x40
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	da07      	bge.n	8003822 <__swhatbuf_r+0x22>
 8003812:	2300      	movs	r3, #0
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	89b3      	ldrh	r3, [r6, #12]
 8003818:	061a      	lsls	r2, r3, #24
 800381a:	d410      	bmi.n	800383e <__swhatbuf_r+0x3e>
 800381c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003820:	e00e      	b.n	8003840 <__swhatbuf_r+0x40>
 8003822:	aa01      	add	r2, sp, #4
 8003824:	f000 f8b2 	bl	800398c <_fstat_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	dbf2      	blt.n	8003812 <__swhatbuf_r+0x12>
 800382c:	9a02      	ldr	r2, [sp, #8]
 800382e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003836:	425a      	negs	r2, r3
 8003838:	415a      	adcs	r2, r3
 800383a:	602a      	str	r2, [r5, #0]
 800383c:	e7ee      	b.n	800381c <__swhatbuf_r+0x1c>
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	2000      	movs	r0, #0
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	b010      	add	sp, #64	; 0x40
 8003846:	bd70      	pop	{r4, r5, r6, pc}

08003848 <__smakebuf_r>:
 8003848:	898b      	ldrh	r3, [r1, #12]
 800384a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800384c:	079d      	lsls	r5, r3, #30
 800384e:	4606      	mov	r6, r0
 8003850:	460c      	mov	r4, r1
 8003852:	d507      	bpl.n	8003864 <__smakebuf_r+0x1c>
 8003854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	2301      	movs	r3, #1
 800385e:	6163      	str	r3, [r4, #20]
 8003860:	b002      	add	sp, #8
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	ab01      	add	r3, sp, #4
 8003866:	466a      	mov	r2, sp
 8003868:	f7ff ffca 	bl	8003800 <__swhatbuf_r>
 800386c:	9900      	ldr	r1, [sp, #0]
 800386e:	4605      	mov	r5, r0
 8003870:	4630      	mov	r0, r6
 8003872:	f7ff fa97 	bl	8002da4 <_malloc_r>
 8003876:	b948      	cbnz	r0, 800388c <__smakebuf_r+0x44>
 8003878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387c:	059a      	lsls	r2, r3, #22
 800387e:	d4ef      	bmi.n	8003860 <__smakebuf_r+0x18>
 8003880:	f023 0303 	bic.w	r3, r3, #3
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7e3      	b.n	8003854 <__smakebuf_r+0xc>
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <__smakebuf_r+0x7c>)
 800388e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	6020      	str	r0, [r4, #0]
 8003894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	9b00      	ldr	r3, [sp, #0]
 800389c:	6163      	str	r3, [r4, #20]
 800389e:	9b01      	ldr	r3, [sp, #4]
 80038a0:	6120      	str	r0, [r4, #16]
 80038a2:	b15b      	cbz	r3, 80038bc <__smakebuf_r+0x74>
 80038a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038a8:	4630      	mov	r0, r6
 80038aa:	f000 f881 	bl	80039b0 <_isatty_r>
 80038ae:	b128      	cbz	r0, 80038bc <__smakebuf_r+0x74>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	431d      	orrs	r5, r3
 80038c0:	81a5      	strh	r5, [r4, #12]
 80038c2:	e7cd      	b.n	8003860 <__smakebuf_r+0x18>
 80038c4:	08002c01 	.word	0x08002c01

080038c8 <__malloc_lock>:
 80038c8:	4770      	bx	lr

080038ca <__malloc_unlock>:
 80038ca:	4770      	bx	lr

080038cc <_free_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4605      	mov	r5, r0
 80038d0:	2900      	cmp	r1, #0
 80038d2:	d045      	beq.n	8003960 <_free_r+0x94>
 80038d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d8:	1f0c      	subs	r4, r1, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bfb8      	it	lt
 80038de:	18e4      	addlt	r4, r4, r3
 80038e0:	f7ff fff2 	bl	80038c8 <__malloc_lock>
 80038e4:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <_free_r+0x98>)
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	4610      	mov	r0, r2
 80038ea:	b933      	cbnz	r3, 80038fa <_free_r+0x2e>
 80038ec:	6063      	str	r3, [r4, #4]
 80038ee:	6014      	str	r4, [r2, #0]
 80038f0:	4628      	mov	r0, r5
 80038f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f6:	f7ff bfe8 	b.w	80038ca <__malloc_unlock>
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	d90c      	bls.n	8003918 <_free_r+0x4c>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	1862      	adds	r2, r4, r1
 8003902:	4293      	cmp	r3, r2
 8003904:	bf04      	itt	eq
 8003906:	681a      	ldreq	r2, [r3, #0]
 8003908:	685b      	ldreq	r3, [r3, #4]
 800390a:	6063      	str	r3, [r4, #4]
 800390c:	bf04      	itt	eq
 800390e:	1852      	addeq	r2, r2, r1
 8003910:	6022      	streq	r2, [r4, #0]
 8003912:	6004      	str	r4, [r0, #0]
 8003914:	e7ec      	b.n	80038f0 <_free_r+0x24>
 8003916:	4613      	mov	r3, r2
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	b10a      	cbz	r2, 8003920 <_free_r+0x54>
 800391c:	42a2      	cmp	r2, r4
 800391e:	d9fa      	bls.n	8003916 <_free_r+0x4a>
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	1858      	adds	r0, r3, r1
 8003924:	42a0      	cmp	r0, r4
 8003926:	d10b      	bne.n	8003940 <_free_r+0x74>
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	4401      	add	r1, r0
 800392c:	1858      	adds	r0, r3, r1
 800392e:	4282      	cmp	r2, r0
 8003930:	6019      	str	r1, [r3, #0]
 8003932:	d1dd      	bne.n	80038f0 <_free_r+0x24>
 8003934:	6810      	ldr	r0, [r2, #0]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	4401      	add	r1, r0
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	e7d7      	b.n	80038f0 <_free_r+0x24>
 8003940:	d902      	bls.n	8003948 <_free_r+0x7c>
 8003942:	230c      	movs	r3, #12
 8003944:	602b      	str	r3, [r5, #0]
 8003946:	e7d3      	b.n	80038f0 <_free_r+0x24>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	1821      	adds	r1, r4, r0
 800394c:	428a      	cmp	r2, r1
 800394e:	bf04      	itt	eq
 8003950:	6811      	ldreq	r1, [r2, #0]
 8003952:	6852      	ldreq	r2, [r2, #4]
 8003954:	6062      	str	r2, [r4, #4]
 8003956:	bf04      	itt	eq
 8003958:	1809      	addeq	r1, r1, r0
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	605c      	str	r4, [r3, #4]
 800395e:	e7c7      	b.n	80038f0 <_free_r+0x24>
 8003960:	bd38      	pop	{r3, r4, r5, pc}
 8003962:	bf00      	nop
 8003964:	2000208c 	.word	0x2000208c

08003968 <_read_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4c07      	ldr	r4, [pc, #28]	; (8003988 <_read_r+0x20>)
 800396c:	4605      	mov	r5, r0
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	2200      	movs	r2, #0
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f000 f84a 	bl	8003a10 <_read>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_read_r+0x1e>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	b103      	cbz	r3, 8003986 <_read_r+0x1e>
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	200020e0 	.word	0x200020e0

0800398c <_fstat_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4c07      	ldr	r4, [pc, #28]	; (80039ac <_fstat_r+0x20>)
 8003990:	2300      	movs	r3, #0
 8003992:	4605      	mov	r5, r0
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	f000 f821 	bl	80039e0 <_fstat>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d102      	bne.n	80039a8 <_fstat_r+0x1c>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	b103      	cbz	r3, 80039a8 <_fstat_r+0x1c>
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	200020e0 	.word	0x200020e0

080039b0 <_isatty_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4c06      	ldr	r4, [pc, #24]	; (80039cc <_isatty_r+0x1c>)
 80039b4:	2300      	movs	r3, #0
 80039b6:	4605      	mov	r5, r0
 80039b8:	4608      	mov	r0, r1
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	f000 f818 	bl	80039f0 <_isatty>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_isatty_r+0x1a>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_isatty_r+0x1a>
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	200020e0 	.word	0x200020e0

080039d0 <_close>:
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <_close+0xc>)
 80039d2:	2258      	movs	r2, #88	; 0x58
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295
 80039da:	4770      	bx	lr
 80039dc:	200020e0 	.word	0x200020e0

080039e0 <_fstat>:
 80039e0:	4b02      	ldr	r3, [pc, #8]	; (80039ec <_fstat+0xc>)
 80039e2:	2258      	movs	r2, #88	; 0x58
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ea:	4770      	bx	lr
 80039ec:	200020e0 	.word	0x200020e0

080039f0 <_isatty>:
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <_isatty+0xc>)
 80039f2:	2258      	movs	r2, #88	; 0x58
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	2000      	movs	r0, #0
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200020e0 	.word	0x200020e0

08003a00 <_lseek>:
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <_lseek+0xc>)
 8003a02:	2258      	movs	r2, #88	; 0x58
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0a:	4770      	bx	lr
 8003a0c:	200020e0 	.word	0x200020e0

08003a10 <_read>:
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <_read+0xc>)
 8003a12:	2258      	movs	r2, #88	; 0x58
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1a:	4770      	bx	lr
 8003a1c:	200020e0 	.word	0x200020e0

08003a20 <_sbrk>:
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <_sbrk+0x14>)
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	4602      	mov	r2, r0
 8003a26:	b909      	cbnz	r1, 8003a2c <_sbrk+0xc>
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <_sbrk+0x18>)
 8003a2a:	6019      	str	r1, [r3, #0]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	4402      	add	r2, r0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4770      	bx	lr
 8003a34:	20002094 	.word	0x20002094
 8003a38:	200020e4 	.word	0x200020e4

08003a3c <_init>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr

08003a48 <_fini>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr
