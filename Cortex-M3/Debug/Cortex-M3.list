
Cortex-M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f24  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007978  08007978  00017978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00002070  20000000  08007980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20002070  080099f0  00022070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002128  080099f0  00022128  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00022070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012eb4  00000000  00000000  00022099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002438  00000000  00000000  00034f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b30  00000000  00000000  00037388  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d8  00000000  00000000  00037eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000061c8  00000000  00000000  00038890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000403e  00000000  00000000  0003ea58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000ea  00000000  00000000  00042a96  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003420  00000000  00000000  00042b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00002672  00000000  00000000  00045fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00048614  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  00048698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20002070 	.word	0x20002070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a3c 	.word	0x08004a3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20002074 	.word	0x20002074
 8000148:	08004a3c 	.word	0x08004a3c

0800014c <arm_bitreversal_32>:
 800014c:	1c4b      	adds	r3, r1, #1
 800014e:	2b01      	cmp	r3, #1
 8000150:	bf98      	it	ls
 8000152:	4770      	bxls	lr
 8000154:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000158:	1c91      	adds	r1, r2, #2
 800015a:	089b      	lsrs	r3, r3, #2

0800015c <arm_bitreversal_32_0>:
 800015c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000160:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000164:	880a      	ldrh	r2, [r1, #0]
 8000166:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800016a:	4480      	add	r8, r0
 800016c:	4481      	add	r9, r0
 800016e:	4402      	add	r2, r0
 8000170:	4484      	add	ip, r0
 8000172:	f8d9 7000 	ldr.w	r7, [r9]
 8000176:	f8d8 6000 	ldr.w	r6, [r8]
 800017a:	6815      	ldr	r5, [r2, #0]
 800017c:	f8dc 4000 	ldr.w	r4, [ip]
 8000180:	f8c9 6000 	str.w	r6, [r9]
 8000184:	f8c8 7000 	str.w	r7, [r8]
 8000188:	f8cc 5000 	str.w	r5, [ip]
 800018c:	6014      	str	r4, [r2, #0]
 800018e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000192:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000196:	6855      	ldr	r5, [r2, #4]
 8000198:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800019c:	f8c9 6004 	str.w	r6, [r9, #4]
 80001a0:	f8c8 7004 	str.w	r7, [r8, #4]
 80001a4:	f8cc 5004 	str.w	r5, [ip, #4]
 80001a8:	6054      	str	r4, [r2, #4]
 80001aa:	3108      	adds	r1, #8
 80001ac:	3b01      	subs	r3, #1
 80001ae:	d1d5      	bne.n	800015c <arm_bitreversal_32_0>
 80001b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80001b4:	4770      	bx	lr

080001b6 <arm_bitreversal_16>:
 80001b6:	1c4b      	adds	r3, r1, #1
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	bf98      	it	ls
 80001bc:	4770      	bxls	lr
 80001be:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001c2:	1c91      	adds	r1, r2, #2
 80001c4:	089b      	lsrs	r3, r3, #2

080001c6 <arm_bitreversal_16_0>:
 80001c6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ca:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001ce:	880a      	ldrh	r2, [r1, #0]
 80001d0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001d4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80001d8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80001dc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80001e0:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80001e4:	f8d9 7000 	ldr.w	r7, [r9]
 80001e8:	f8d8 6000 	ldr.w	r6, [r8]
 80001ec:	6815      	ldr	r5, [r2, #0]
 80001ee:	f8dc 4000 	ldr.w	r4, [ip]
 80001f2:	f8c9 6000 	str.w	r6, [r9]
 80001f6:	f8c8 7000 	str.w	r7, [r8]
 80001fa:	f8cc 5000 	str.w	r5, [ip]
 80001fe:	6014      	str	r4, [r2, #0]
 8000200:	3108      	adds	r1, #8
 8000202:	3b01      	subs	r3, #1
 8000204:	d1df      	bne.n	80001c6 <arm_bitreversal_16_0>
 8000206:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800020a:	4770      	bx	lr

0800020c <__aeabi_frsub>:
 800020c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000210:	e002      	b.n	8000218 <__addsf3>
 8000212:	bf00      	nop

08000214 <__aeabi_fsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000218 <__addsf3>:
 8000218:	0042      	lsls	r2, r0, #1
 800021a:	bf1f      	itttt	ne
 800021c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000220:	ea92 0f03 	teqne	r2, r3
 8000224:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000228:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800022c:	d06a      	beq.n	8000304 <__addsf3+0xec>
 800022e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000232:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000236:	bfc1      	itttt	gt
 8000238:	18d2      	addgt	r2, r2, r3
 800023a:	4041      	eorgt	r1, r0
 800023c:	4048      	eorgt	r0, r1
 800023e:	4041      	eorgt	r1, r0
 8000240:	bfb8      	it	lt
 8000242:	425b      	neglt	r3, r3
 8000244:	2b19      	cmp	r3, #25
 8000246:	bf88      	it	hi
 8000248:	4770      	bxhi	lr
 800024a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800024e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000252:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000256:	bf18      	it	ne
 8000258:	4240      	negne	r0, r0
 800025a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000262:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000266:	bf18      	it	ne
 8000268:	4249      	negne	r1, r1
 800026a:	ea92 0f03 	teq	r2, r3
 800026e:	d03f      	beq.n	80002f0 <__addsf3+0xd8>
 8000270:	f1a2 0201 	sub.w	r2, r2, #1
 8000274:	fa41 fc03 	asr.w	ip, r1, r3
 8000278:	eb10 000c 	adds.w	r0, r0, ip
 800027c:	f1c3 0320 	rsb	r3, r3, #32
 8000280:	fa01 f103 	lsl.w	r1, r1, r3
 8000284:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000288:	d502      	bpl.n	8000290 <__addsf3+0x78>
 800028a:	4249      	negs	r1, r1
 800028c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000290:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000294:	d313      	bcc.n	80002be <__addsf3+0xa6>
 8000296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029a:	d306      	bcc.n	80002aa <__addsf3+0x92>
 800029c:	0840      	lsrs	r0, r0, #1
 800029e:	ea4f 0131 	mov.w	r1, r1, rrx
 80002a2:	f102 0201 	add.w	r2, r2, #1
 80002a6:	2afe      	cmp	r2, #254	; 0xfe
 80002a8:	d251      	bcs.n	800034e <__addsf3+0x136>
 80002aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b2:	bf08      	it	eq
 80002b4:	f020 0001 	biceq.w	r0, r0, #1
 80002b8:	ea40 0003 	orr.w	r0, r0, r3
 80002bc:	4770      	bx	lr
 80002be:	0049      	lsls	r1, r1, #1
 80002c0:	eb40 0000 	adc.w	r0, r0, r0
 80002c4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002c8:	f1a2 0201 	sub.w	r2, r2, #1
 80002cc:	d1ed      	bne.n	80002aa <__addsf3+0x92>
 80002ce:	fab0 fc80 	clz	ip, r0
 80002d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80002d6:	ebb2 020c 	subs.w	r2, r2, ip
 80002da:	fa00 f00c 	lsl.w	r0, r0, ip
 80002de:	bfaa      	itet	ge
 80002e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e4:	4252      	neglt	r2, r2
 80002e6:	4318      	orrge	r0, r3
 80002e8:	bfbc      	itt	lt
 80002ea:	40d0      	lsrlt	r0, r2
 80002ec:	4318      	orrlt	r0, r3
 80002ee:	4770      	bx	lr
 80002f0:	f092 0f00 	teq	r2, #0
 80002f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f8:	bf06      	itte	eq
 80002fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002fe:	3201      	addeq	r2, #1
 8000300:	3b01      	subne	r3, #1
 8000302:	e7b5      	b.n	8000270 <__addsf3+0x58>
 8000304:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000308:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800030c:	bf18      	it	ne
 800030e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000312:	d021      	beq.n	8000358 <__addsf3+0x140>
 8000314:	ea92 0f03 	teq	r2, r3
 8000318:	d004      	beq.n	8000324 <__addsf3+0x10c>
 800031a:	f092 0f00 	teq	r2, #0
 800031e:	bf08      	it	eq
 8000320:	4608      	moveq	r0, r1
 8000322:	4770      	bx	lr
 8000324:	ea90 0f01 	teq	r0, r1
 8000328:	bf1c      	itt	ne
 800032a:	2000      	movne	r0, #0
 800032c:	4770      	bxne	lr
 800032e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000332:	d104      	bne.n	800033e <__addsf3+0x126>
 8000334:	0040      	lsls	r0, r0, #1
 8000336:	bf28      	it	cs
 8000338:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800033c:	4770      	bx	lr
 800033e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000342:	bf3c      	itt	cc
 8000344:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000348:	4770      	bxcc	lr
 800034a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800034e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000352:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000356:	4770      	bx	lr
 8000358:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800035c:	bf16      	itet	ne
 800035e:	4608      	movne	r0, r1
 8000360:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000364:	4601      	movne	r1, r0
 8000366:	0242      	lsls	r2, r0, #9
 8000368:	bf06      	itte	eq
 800036a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800036e:	ea90 0f01 	teqeq	r0, r1
 8000372:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000376:	4770      	bx	lr

08000378 <__aeabi_ui2f>:
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	e004      	b.n	8000388 <__aeabi_i2f+0x8>
 800037e:	bf00      	nop

08000380 <__aeabi_i2f>:
 8000380:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000384:	bf48      	it	mi
 8000386:	4240      	negmi	r0, r0
 8000388:	ea5f 0c00 	movs.w	ip, r0
 800038c:	bf08      	it	eq
 800038e:	4770      	bxeq	lr
 8000390:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000394:	4601      	mov	r1, r0
 8000396:	f04f 0000 	mov.w	r0, #0
 800039a:	e01c      	b.n	80003d6 <__aeabi_l2f+0x2a>

0800039c <__aeabi_ul2f>:
 800039c:	ea50 0201 	orrs.w	r2, r0, r1
 80003a0:	bf08      	it	eq
 80003a2:	4770      	bxeq	lr
 80003a4:	f04f 0300 	mov.w	r3, #0
 80003a8:	e00a      	b.n	80003c0 <__aeabi_l2f+0x14>
 80003aa:	bf00      	nop

080003ac <__aeabi_l2f>:
 80003ac:	ea50 0201 	orrs.w	r2, r0, r1
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b8:	d502      	bpl.n	80003c0 <__aeabi_l2f+0x14>
 80003ba:	4240      	negs	r0, r0
 80003bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c0:	ea5f 0c01 	movs.w	ip, r1
 80003c4:	bf02      	ittt	eq
 80003c6:	4684      	moveq	ip, r0
 80003c8:	4601      	moveq	r1, r0
 80003ca:	2000      	moveq	r0, #0
 80003cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003d0:	bf08      	it	eq
 80003d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003da:	fabc f28c 	clz	r2, ip
 80003de:	3a08      	subs	r2, #8
 80003e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e4:	db10      	blt.n	8000408 <__aeabi_l2f+0x5c>
 80003e6:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ea:	4463      	add	r3, ip
 80003ec:	fa00 fc02 	lsl.w	ip, r0, r2
 80003f0:	f1c2 0220 	rsb	r2, r2, #32
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	fa20 f202 	lsr.w	r2, r0, r2
 80003fc:	eb43 0002 	adc.w	r0, r3, r2
 8000400:	bf08      	it	eq
 8000402:	f020 0001 	biceq.w	r0, r0, #1
 8000406:	4770      	bx	lr
 8000408:	f102 0220 	add.w	r2, r2, #32
 800040c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000410:	f1c2 0220 	rsb	r2, r2, #32
 8000414:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000418:	fa21 f202 	lsr.w	r2, r1, r2
 800041c:	eb43 0002 	adc.w	r0, r3, r2
 8000420:	bf08      	it	eq
 8000422:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000426:	4770      	bx	lr

08000428 <__aeabi_fmul>:
 8000428:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800042c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000430:	bf1e      	ittt	ne
 8000432:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000436:	ea92 0f0c 	teqne	r2, ip
 800043a:	ea93 0f0c 	teqne	r3, ip
 800043e:	d06f      	beq.n	8000520 <__aeabi_fmul+0xf8>
 8000440:	441a      	add	r2, r3
 8000442:	ea80 0c01 	eor.w	ip, r0, r1
 8000446:	0240      	lsls	r0, r0, #9
 8000448:	bf18      	it	ne
 800044a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800044e:	d01e      	beq.n	800048e <__aeabi_fmul+0x66>
 8000450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000454:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000458:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800045c:	fba0 3101 	umull	r3, r1, r0, r1
 8000460:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000464:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000468:	bf3e      	ittt	cc
 800046a:	0049      	lslcc	r1, r1, #1
 800046c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000470:	005b      	lslcc	r3, r3, #1
 8000472:	ea40 0001 	orr.w	r0, r0, r1
 8000476:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800047a:	2afd      	cmp	r2, #253	; 0xfd
 800047c:	d81d      	bhi.n	80004ba <__aeabi_fmul+0x92>
 800047e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000482:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000486:	bf08      	it	eq
 8000488:	f020 0001 	biceq.w	r0, r0, #1
 800048c:	4770      	bx	lr
 800048e:	f090 0f00 	teq	r0, #0
 8000492:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000496:	bf08      	it	eq
 8000498:	0249      	lsleq	r1, r1, #9
 800049a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800049e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004a2:	3a7f      	subs	r2, #127	; 0x7f
 80004a4:	bfc2      	ittt	gt
 80004a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004ae:	4770      	bxgt	lr
 80004b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004b4:	f04f 0300 	mov.w	r3, #0
 80004b8:	3a01      	subs	r2, #1
 80004ba:	dc5d      	bgt.n	8000578 <__aeabi_fmul+0x150>
 80004bc:	f112 0f19 	cmn.w	r2, #25
 80004c0:	bfdc      	itt	le
 80004c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004c6:	4770      	bxle	lr
 80004c8:	f1c2 0200 	rsb	r2, r2, #0
 80004cc:	0041      	lsls	r1, r0, #1
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	f1c2 0220 	rsb	r2, r2, #32
 80004d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80004da:	ea5f 0031 	movs.w	r0, r1, rrx
 80004de:	f140 0000 	adc.w	r0, r0, #0
 80004e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004e6:	bf08      	it	eq
 80004e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ec:	4770      	bx	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004f6:	bf02      	ittt	eq
 80004f8:	0040      	lsleq	r0, r0, #1
 80004fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004fe:	3a01      	subeq	r2, #1
 8000500:	d0f9      	beq.n	80004f6 <__aeabi_fmul+0xce>
 8000502:	ea40 000c 	orr.w	r0, r0, ip
 8000506:	f093 0f00 	teq	r3, #0
 800050a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0049      	lsleq	r1, r1, #1
 8000512:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000516:	3b01      	subeq	r3, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xe6>
 800051a:	ea41 010c 	orr.w	r1, r1, ip
 800051e:	e78f      	b.n	8000440 <__aeabi_fmul+0x18>
 8000520:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000524:	ea92 0f0c 	teq	r2, ip
 8000528:	bf18      	it	ne
 800052a:	ea93 0f0c 	teqne	r3, ip
 800052e:	d00a      	beq.n	8000546 <__aeabi_fmul+0x11e>
 8000530:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000534:	bf18      	it	ne
 8000536:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800053a:	d1d8      	bne.n	80004ee <__aeabi_fmul+0xc6>
 800053c:	ea80 0001 	eor.w	r0, r0, r1
 8000540:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000544:	4770      	bx	lr
 8000546:	f090 0f00 	teq	r0, #0
 800054a:	bf17      	itett	ne
 800054c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000550:	4608      	moveq	r0, r1
 8000552:	f091 0f00 	teqne	r1, #0
 8000556:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800055a:	d014      	beq.n	8000586 <__aeabi_fmul+0x15e>
 800055c:	ea92 0f0c 	teq	r2, ip
 8000560:	d101      	bne.n	8000566 <__aeabi_fmul+0x13e>
 8000562:	0242      	lsls	r2, r0, #9
 8000564:	d10f      	bne.n	8000586 <__aeabi_fmul+0x15e>
 8000566:	ea93 0f0c 	teq	r3, ip
 800056a:	d103      	bne.n	8000574 <__aeabi_fmul+0x14c>
 800056c:	024b      	lsls	r3, r1, #9
 800056e:	bf18      	it	ne
 8000570:	4608      	movne	r0, r1
 8000572:	d108      	bne.n	8000586 <__aeabi_fmul+0x15e>
 8000574:	ea80 0001 	eor.w	r0, r0, r1
 8000578:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800057c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000580:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000584:	4770      	bx	lr
 8000586:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800058a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800058e:	4770      	bx	lr

08000590 <__aeabi_fdiv>:
 8000590:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000594:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000598:	bf1e      	ittt	ne
 800059a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800059e:	ea92 0f0c 	teqne	r2, ip
 80005a2:	ea93 0f0c 	teqne	r3, ip
 80005a6:	d069      	beq.n	800067c <__aeabi_fdiv+0xec>
 80005a8:	eba2 0203 	sub.w	r2, r2, r3
 80005ac:	ea80 0c01 	eor.w	ip, r0, r1
 80005b0:	0249      	lsls	r1, r1, #9
 80005b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005b6:	d037      	beq.n	8000628 <__aeabi_fdiv+0x98>
 80005b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005c8:	428b      	cmp	r3, r1
 80005ca:	bf38      	it	cc
 80005cc:	005b      	lslcc	r3, r3, #1
 80005ce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005d2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005d6:	428b      	cmp	r3, r1
 80005d8:	bf24      	itt	cs
 80005da:	1a5b      	subcs	r3, r3, r1
 80005dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80005e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005e4:	bf24      	itt	cs
 80005e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005f2:	bf24      	itt	cs
 80005f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000600:	bf24      	itt	cs
 8000602:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000606:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800060a:	011b      	lsls	r3, r3, #4
 800060c:	bf18      	it	ne
 800060e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000612:	d1e0      	bne.n	80005d6 <__aeabi_fdiv+0x46>
 8000614:	2afd      	cmp	r2, #253	; 0xfd
 8000616:	f63f af50 	bhi.w	80004ba <__aeabi_fmul+0x92>
 800061a:	428b      	cmp	r3, r1
 800061c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800062c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000630:	327f      	adds	r2, #127	; 0x7f
 8000632:	bfc2      	ittt	gt
 8000634:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000638:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800063c:	4770      	bxgt	lr
 800063e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	3a01      	subs	r2, #1
 8000648:	e737      	b.n	80004ba <__aeabi_fmul+0x92>
 800064a:	f092 0f00 	teq	r2, #0
 800064e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000652:	bf02      	ittt	eq
 8000654:	0040      	lsleq	r0, r0, #1
 8000656:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800065a:	3a01      	subeq	r2, #1
 800065c:	d0f9      	beq.n	8000652 <__aeabi_fdiv+0xc2>
 800065e:	ea40 000c 	orr.w	r0, r0, ip
 8000662:	f093 0f00 	teq	r3, #0
 8000666:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0049      	lsleq	r1, r1, #1
 800066e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000672:	3b01      	subeq	r3, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xda>
 8000676:	ea41 010c 	orr.w	r1, r1, ip
 800067a:	e795      	b.n	80005a8 <__aeabi_fdiv+0x18>
 800067c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000680:	ea92 0f0c 	teq	r2, ip
 8000684:	d108      	bne.n	8000698 <__aeabi_fdiv+0x108>
 8000686:	0242      	lsls	r2, r0, #9
 8000688:	f47f af7d 	bne.w	8000586 <__aeabi_fmul+0x15e>
 800068c:	ea93 0f0c 	teq	r3, ip
 8000690:	f47f af70 	bne.w	8000574 <__aeabi_fmul+0x14c>
 8000694:	4608      	mov	r0, r1
 8000696:	e776      	b.n	8000586 <__aeabi_fmul+0x15e>
 8000698:	ea93 0f0c 	teq	r3, ip
 800069c:	d104      	bne.n	80006a8 <__aeabi_fdiv+0x118>
 800069e:	024b      	lsls	r3, r1, #9
 80006a0:	f43f af4c 	beq.w	800053c <__aeabi_fmul+0x114>
 80006a4:	4608      	mov	r0, r1
 80006a6:	e76e      	b.n	8000586 <__aeabi_fmul+0x15e>
 80006a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006ac:	bf18      	it	ne
 80006ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006b2:	d1ca      	bne.n	800064a <__aeabi_fdiv+0xba>
 80006b4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006b8:	f47f af5c 	bne.w	8000574 <__aeabi_fmul+0x14c>
 80006bc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006c0:	f47f af3c 	bne.w	800053c <__aeabi_fmul+0x114>
 80006c4:	e75f      	b.n	8000586 <__aeabi_fmul+0x15e>
 80006c6:	bf00      	nop

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f91d 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f001 fe74 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f935 	bl	8000982 <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8fd 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20002008 	.word	0x20002008
 800074c:	20000004 	.word	0x20000004
 8000750:	20000000 	.word	0x20000000

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x1c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x20>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_IncTick+0x20>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000004 	.word	0x20000004
 8000774:	20002098 	.word	0x20002098

08000778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_GetTick+0x10>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20002098 	.word	0x20002098

0800078c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <NVIC_EnableIRQ+0x2c>)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	f002 021f 	and.w	r2, r2, #31
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100

08000820 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	da0b      	bge.n	800084c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	490d      	ldr	r1, [pc, #52]	; (800086c <NVIC_SetPriority+0x4c>)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	3b04      	subs	r3, #4
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084a:	e009      	b.n	8000860 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	4908      	ldr	r1, [pc, #32]	; (8000870 <NVIC_SetPriority+0x50>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	e000e100 	.word	0xe000e100

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	2201      	movs	r2, #1
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	401a      	ands	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ba:	2101      	movs	r1, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	1e59      	subs	r1, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff92 	bl	8000820 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff33 	bl	800078c <NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff48 	bl	80007d4 <NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff92 	bl	8000874 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff61 	bl	8000820 <NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff3b 	bl	80007f0 <NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffa2 	bl	80008d4 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d106      	bne.n	80009b8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009b6:	e005      	b.n	80009c4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 0304 	bic.w	r3, r3, #4
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009d8:	f000 f802 	bl	80009e0 <HAL_SYSTICK_Callback>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	e127      	b.n	8000c60 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000a10:	2201      	movs	r2, #1
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	f040 8116 	bne.w	8000c5a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d034      	beq.n	8000aa0 <HAL_GPIO_Init+0xb4>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d80d      	bhi.n	8000a56 <HAL_GPIO_Init+0x6a>
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d02b      	beq.n	8000a96 <HAL_GPIO_Init+0xaa>
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d804      	bhi.n	8000a4c <HAL_GPIO_Init+0x60>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d031      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d01c      	beq.n	8000a84 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a4a:	e048      	b.n	8000ade <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d043      	beq.n	8000ad8 <HAL_GPIO_Init+0xec>
 8000a50:	2b11      	cmp	r3, #17
 8000a52:	d01b      	beq.n	8000a8c <HAL_GPIO_Init+0xa0>
          break;
 8000a54:	e043      	b.n	8000ade <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a56:	4a87      	ldr	r2, [pc, #540]	; (8000c74 <HAL_GPIO_Init+0x288>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d026      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
 8000a5c:	4a85      	ldr	r2, [pc, #532]	; (8000c74 <HAL_GPIO_Init+0x288>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d806      	bhi.n	8000a70 <HAL_GPIO_Init+0x84>
 8000a62:	4a85      	ldr	r2, [pc, #532]	; (8000c78 <HAL_GPIO_Init+0x28c>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d020      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
 8000a68:	4a84      	ldr	r2, [pc, #528]	; (8000c7c <HAL_GPIO_Init+0x290>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d01d      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
          break;
 8000a6e:	e036      	b.n	8000ade <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a70:	4a83      	ldr	r2, [pc, #524]	; (8000c80 <HAL_GPIO_Init+0x294>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d019      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
 8000a76:	4a83      	ldr	r2, [pc, #524]	; (8000c84 <HAL_GPIO_Init+0x298>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d016      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
 8000a7c:	4a82      	ldr	r2, [pc, #520]	; (8000c88 <HAL_GPIO_Init+0x29c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d013      	beq.n	8000aaa <HAL_GPIO_Init+0xbe>
          break;
 8000a82:	e02c      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e028      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	3304      	adds	r3, #4
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e023      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e01e      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	330c      	adds	r3, #12
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e019      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e012      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d105      	bne.n	8000acc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	611a      	str	r2, [r3, #16]
          break;
 8000aca:	e008      	b.n	8000ade <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	615a      	str	r2, [r3, #20]
          break;
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	2bff      	cmp	r3, #255	; 0xff
 8000ae2:	d801      	bhi.n	8000ae8 <HAL_GPIO_Init+0xfc>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	e001      	b.n	8000aec <HAL_GPIO_Init+0x100>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3304      	adds	r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	2bff      	cmp	r3, #255	; 0xff
 8000af2:	d802      	bhi.n	8000afa <HAL_GPIO_Init+0x10e>
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_Init+0x114>
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	3b08      	subs	r3, #8
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	210f      	movs	r1, #15
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	401a      	ands	r2, r3
 8000b12:	6a39      	ldr	r1, [r7, #32]
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8096 	beq.w	8000c5a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2e:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000b30:	4b56      	ldr	r3, [pc, #344]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000b46:	4a52      	ldr	r2, [pc, #328]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b52:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	4013      	ands	r3, r2
 8000b68:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0x1ae>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a48      	ldr	r2, [pc, #288]	; (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d00d      	beq.n	8000b96 <HAL_GPIO_Init+0x1aa>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a47      	ldr	r2, [pc, #284]	; (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d007      	beq.n	8000b92 <HAL_GPIO_Init+0x1a6>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_GPIO_Init+0x1a2>
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x1b0>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e004      	b.n	8000b9c <HAL_GPIO_Init+0x1b0>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_Init+0x1b0>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x1b0>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b9e:	f002 0203 	and.w	r2, r2, #3
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	4093      	lsls	r3, r2
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000bac:	4938      	ldr	r1, [pc, #224]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc6:	4937      	ldr	r1, [pc, #220]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd4:	4933      	ldr	r1, [pc, #204]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4013      	ands	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bee:	492d      	ldr	r1, [pc, #180]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	604b      	str	r3, [r1, #4]
 8000bfa:	e006      	b.n	8000c0a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfc:	4929      	ldr	r1, [pc, #164]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c16:	4923      	ldr	r1, [pc, #140]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	608b      	str	r3, [r1, #8]
 8000c22:	e006      	b.n	8000c32 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c24:	491f      	ldr	r1, [pc, #124]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c3e:	4919      	ldr	r1, [pc, #100]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
 8000c4a:	e006      	b.n	8000c5a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4915      	ldr	r1, [pc, #84]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	f67f aed4 	bls.w	8000a10 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000c68:	bf00      	nop
 8000c6a:	372c      	adds	r7, #44	; 0x2c
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	10210000 	.word	0x10210000
 8000c78:	10110000 	.word	0x10110000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10310000 	.word	0x10310000
 8000c84:	10320000 	.word	0x10320000
 8000c88:	10220000 	.word	0x10220000
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40011400 	.word	0x40011400
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cc4:	e003      	b.n	8000cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	041a      	lsls	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	611a      	str	r2, [r3, #16]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f806 	bl	8000d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 8087 	beq.w	8000e44 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d36:	4b92      	ldr	r3, [pc, #584]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d00c      	beq.n	8000d5c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d42:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d112      	bne.n	8000d74 <HAL_RCC_OscConfig+0x58>
 8000d4e:	4b8c      	ldr	r3, [pc, #560]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5a:	d10b      	bne.n	8000d74 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4b88      	ldr	r3, [pc, #544]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d06c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x126>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d168      	bne.n	8000e42 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e22d      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7c:	d106      	bne.n	8000d8c <HAL_RCC_OscConfig+0x70>
 8000d7e:	4a80      	ldr	r2, [pc, #512]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d80:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e02e      	b.n	8000dea <HAL_RCC_OscConfig+0xce>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10c      	bne.n	8000dae <HAL_RCC_OscConfig+0x92>
 8000d94:	4a7a      	ldr	r2, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d96:	4b7a      	ldr	r3, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4a77      	ldr	r2, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000da2:	4b77      	ldr	r3, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e01d      	b.n	8000dea <HAL_RCC_OscConfig+0xce>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db6:	d10c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0xb6>
 8000db8:	4a71      	ldr	r2, [pc, #452]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dba:	4b71      	ldr	r3, [pc, #452]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dc6:	4b6e      	ldr	r3, [pc, #440]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e00b      	b.n	8000dea <HAL_RCC_OscConfig+0xce>
 8000dd2:	4a6b      	ldr	r2, [pc, #428]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4a68      	ldr	r2, [pc, #416]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000de0:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d013      	beq.n	8000e1a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fcc1 	bl	8000778 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fcbd 	bl	8000778 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b64      	cmp	r3, #100	; 0x64
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e1e1      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0xde>
 8000e18:	e014      	b.n	8000e44 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fcad 	bl	8000778 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fca9 	bl	8000778 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e1cd      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e34:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_RCC_OscConfig+0x106>
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d063      	beq.n	8000f18 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5c:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d11c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x186>
 8000e68:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d116      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e74:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_OscConfig+0x170>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d001      	beq.n	8000e8c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e1a1      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	493c      	ldr	r1, [pc, #240]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea0:	e03a      	b.n	8000f18 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d020      	beq.n	8000eec <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x268>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc62 	bl	8000778 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc5e 	bl	8000778 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e182      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	492a      	ldr	r1, [pc, #168]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_RCC_OscConfig+0x268>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fc41 	bl	8000778 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fc3d 	bl	8000778 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e161      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f0      	bne.n	8000efa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d039      	beq.n	8000f98 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d019      	beq.n	8000f60 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fc21 	bl	8000778 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fc1d 	bl	8000778 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e141      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_RCC_OscConfig+0x264>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f000 facb 	bl	80014f4 <RCC_Delay>
 8000f5e:	e01b      	b.n	8000f98 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fc07 	bl	8000778 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6c:	e00e      	b.n	8000f8c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fc03 	bl	8000778 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d907      	bls.n	8000f8c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e127      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
 8000f80:	40021000 	.word	0x40021000
 8000f84:	42420000 	.word	0x42420000
 8000f88:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1ea      	bne.n	8000f6e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80a6 	beq.w	80010f2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4a88      	ldr	r2, [pc, #544]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fb8:	4b87      	ldr	r3, [pc, #540]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b85      	ldr	r3, [pc, #532]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b82      	ldr	r3, [pc, #520]	; (80011dc <HAL_RCC_OscConfig+0x4c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4a7f      	ldr	r2, [pc, #508]	; (80011dc <HAL_RCC_OscConfig+0x4c0>)
 8000fe0:	4b7e      	ldr	r3, [pc, #504]	; (80011dc <HAL_RCC_OscConfig+0x4c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fbc5 	bl	8000778 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff2:	f7ff fbc1 	bl	8000778 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0e5      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x4c0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x30a>
 8001018:	4a6f      	ldr	r2, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e02d      	b.n	8001082 <HAL_RCC_OscConfig+0x366>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x32c>
 800102e:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001030:	4b69      	ldr	r3, [pc, #420]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4a67      	ldr	r2, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800103c:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	e01c      	b.n	8001082 <HAL_RCC_OscConfig+0x366>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x34e>
 8001050:	4a61      	ldr	r2, [pc, #388]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001052:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	4a5e      	ldr	r2, [pc, #376]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800105e:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e00b      	b.n	8001082 <HAL_RCC_OscConfig+0x366>
 800106a:	4a5b      	ldr	r2, [pc, #364]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800106c:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001078:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d015      	beq.n	80010b6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb75 	bl	8000778 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fb71 	bl	8000778 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e093      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ee      	beq.n	8001092 <HAL_RCC_OscConfig+0x376>
 80010b4:	e014      	b.n	80010e0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb5f 	bl	8000778 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fb5b 	bl	8000778 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e07d      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d4:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ee      	bne.n	80010be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e6:	4a3c      	ldr	r2, [pc, #240]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d069      	beq.n	80011ce <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b08      	cmp	r3, #8
 8001104:	d061      	beq.n	80011ca <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d146      	bne.n	800119c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fb30 	bl	8000778 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fb2c 	bl	8000778 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e050      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d108      	bne.n	8001156 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001144:	4924      	ldr	r1, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001156:	4820      	ldr	r0, [pc, #128]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a19      	ldr	r1, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	430b      	orrs	r3, r1
 800116a:	4313      	orrs	r3, r2
 800116c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fb00 	bl	8000778 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff fafc 	bl	8000778 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e020      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x460>
 800119a:	e018      	b.n	80011ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fae9 	bl	8000778 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fae5 	bl	8000778 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e009      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_RCC_OscConfig+0x4bc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x48e>
 80011c8:	e001      	b.n	80011ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40007000 	.word	0x40007000
 80011e0:	42420060 	.word	0x42420060

080011e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0207 	and.w	r2, r3, #7
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d210      	bcs.n	8001222 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001200:	496e      	ldr	r1, [pc, #440]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001202:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 0207 	bic.w	r2, r3, #7
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0207 	and.w	r2, r3, #7
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d001      	beq.n	8001222 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0c8      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122e:	4964      	ldr	r1, [pc, #400]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001230:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d06a      	beq.n	8001322 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d115      	bne.n	800128c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0a7      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d107      	bne.n	800127c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e09b      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e093      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128c:	494c      	ldr	r1, [pc, #304]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800129e:	f7ff fa6b 	bl	8000778 <HAL_GetTick>
 80012a2:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ae:	f7ff fa63 	bl	8000778 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e077      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d1ee      	bne.n	80012ae <HAL_RCC_ClockConfig+0xca>
 80012d0:	e027      	b.n	8001322 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d11d      	bne.n	8001316 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fa4c 	bl	8000778 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e060      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d1ee      	bne.n	80012dc <HAL_RCC_ClockConfig+0xf8>
 80012fe:	e010      	b.n	8001322 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fa3a 	bl	8000778 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04e      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ee      	bne.n	8001300 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0207 	and.w	r2, r3, #7
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d910      	bls.n	8001352 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001330:	4922      	ldr	r1, [pc, #136]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_ClockConfig+0x1d8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0207 	and.w	r2, r3, #7
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d001      	beq.n	8001352 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e030      	b.n	80013b4 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800135e:	4918      	ldr	r1, [pc, #96]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d009      	beq.n	8001390 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800137c:	4910      	ldr	r1, [pc, #64]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001390:	f000 f81c 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 8001394:	4601      	mov	r1, r0
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_RCC_ClockConfig+0x1dc>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_ClockConfig+0x1e0>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	fa21 f303 	lsr.w	r3, r1, r3
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_RCC_ClockConfig+0x1e4>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff f9a1 	bl	80006f4 <HAL_InitTick>
  
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	08004aa8 	.word	0x08004aa8
 80013c8:	20002008 	.word	0x20002008

080013cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013d4:	1d3c      	adds	r4, r7, #4
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b04      	cmp	r3, #4
 8001404:	d002      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x40>
 8001406:	2b08      	cmp	r3, #8
 8001408:	d003      	beq.n	8001412 <HAL_RCC_GetSysClockFreq+0x46>
 800140a:	e02d      	b.n	8001468 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800140e:	623b      	str	r3, [r7, #32]
      break;
 8001410:	e02d      	b.n	800146e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800141e:	4413      	add	r3, r2
 8001420:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001424:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	0c5b      	lsrs	r3, r3, #17
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800143e:	4413      	add	r3, r2
 8001440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001444:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800144a:	fb02 f203 	mul.w	r2, r2, r3
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	e004      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_RCC_GetSysClockFreq+0xc0>)
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	623b      	str	r3, [r7, #32]
      break;
 8001466:	e002      	b.n	800146e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800146e:	6a3b      	ldr	r3, [r7, #32]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bc90      	pop	{r4, r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	08004a54 	.word	0x08004a54
 8001480:	08004a64 	.word	0x08004a64
 8001484:	40021000 	.word	0x40021000
 8001488:	007a1200 	.word	0x007a1200
 800148c:	003d0900 	.word	0x003d0900

08001490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20002008 	.word	0x20002008

080014a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a8:	f7ff fff2 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014ac:	4601      	mov	r1, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	08004ab8 	.word	0x08004ab8

080014cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d0:	f7ff ffde 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014d4:	4601      	mov	r1, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0adb      	lsrs	r3, r3, #11
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	08004ab8 	.word	0x08004ab8

080014f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <RCC_Delay+0x34>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <RCC_Delay+0x38>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a5b      	lsrs	r3, r3, #9
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001510:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	60fa      	str	r2, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f9      	bne.n	8001510 <RCC_Delay+0x1c>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20002008 	.word	0x20002008
 800152c:	10624dd3 	.word	0x10624dd3

08001530 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01d      	b.n	800157e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f001 f824 	bl	80025a4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3304      	adds	r3, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f000 fa2a 	bl	80019c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	68d2      	ldr	r2, [r2, #12]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d122      	bne.n	8001616 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d11b      	bne.n	8001616 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 0202 	mvn.w	r2, #2
 80015e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f9c8 	bl	8001992 <HAL_TIM_IC_CaptureCallback>
 8001602:	e005      	b.n	8001610 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f9bb 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f9ca 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d122      	bne.n	800166a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b04      	cmp	r3, #4
 8001630:	d11b      	bne.n	800166a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0204 	mvn.w	r2, #4
 800163a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f99e 	bl	8001992 <HAL_TIM_IC_CaptureCallback>
 8001656:	e005      	b.n	8001664 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f991 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f9a0 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b08      	cmp	r3, #8
 8001676:	d122      	bne.n	80016be <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b08      	cmp	r3, #8
 8001684:	d11b      	bne.n	80016be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f06f 0208 	mvn.w	r2, #8
 800168e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f974 	bl	8001992 <HAL_TIM_IC_CaptureCallback>
 80016aa:	e005      	b.n	80016b8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f967 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f976 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d122      	bne.n	8001712 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d11b      	bne.n	8001712 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f06f 0210 	mvn.w	r2, #16
 80016e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2208      	movs	r2, #8
 80016e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f94a 	bl	8001992 <HAL_TIM_IC_CaptureCallback>
 80016fe:	e005      	b.n	800170c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f93d 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f94c 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10e      	bne.n	800173e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f06f 0201 	mvn.w	r2, #1
 8001736:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fdd3 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b80      	cmp	r3, #128	; 0x80
 800174a:	d10e      	bne.n	800176a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d107      	bne.n	800176a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001762:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fa87 	bl	8001c78 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d10e      	bne.n	8001796 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d107      	bne.n	8001796 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800178e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f910 	bl	80019b6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d10e      	bne.n	80017c2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d107      	bne.n	80017c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f06f 0220 	mvn.w	r2, #32
 80017ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fa52 	bl	8001c66 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_TIM_ConfigClockSource+0x1c>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0c8      	b.n	8001978 <HAL_TIM_ConfigClockSource+0x1ae>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001804:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800180c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	d077      	beq.n	800190e <HAL_TIM_ConfigClockSource+0x144>
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d80e      	bhi.n	8001840 <HAL_TIM_ConfigClockSource+0x76>
 8001822:	2b10      	cmp	r3, #16
 8001824:	f000 808a 	beq.w	800193c <HAL_TIM_ConfigClockSource+0x172>
 8001828:	2b10      	cmp	r3, #16
 800182a:	d802      	bhi.n	8001832 <HAL_TIM_ConfigClockSource+0x68>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d07e      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001830:	e099      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001832:	2b20      	cmp	r3, #32
 8001834:	f000 8089 	beq.w	800194a <HAL_TIM_ConfigClockSource+0x180>
 8001838:	2b30      	cmp	r3, #48	; 0x30
 800183a:	f000 808d 	beq.w	8001958 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800183e:	e092      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001840:	2b70      	cmp	r3, #112	; 0x70
 8001842:	d016      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xa8>
 8001844:	2b70      	cmp	r3, #112	; 0x70
 8001846:	d804      	bhi.n	8001852 <HAL_TIM_ConfigClockSource+0x88>
 8001848:	2b50      	cmp	r3, #80	; 0x50
 800184a:	d040      	beq.n	80018ce <HAL_TIM_ConfigClockSource+0x104>
 800184c:	2b60      	cmp	r3, #96	; 0x60
 800184e:	d04e      	beq.n	80018ee <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001850:	e089      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001856:	d003      	beq.n	8001860 <HAL_TIM_ConfigClockSource+0x96>
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185c:	d024      	beq.n	80018a8 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800185e:	e082      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6892      	ldr	r2, [r2, #8]
 800186a:	f022 0207 	bic.w	r2, r2, #7
 800186e:	609a      	str	r2, [r3, #8]
    break;
 8001870:	e079      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f000 f98b 	bl	8001b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001894:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800189c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	609a      	str	r2, [r3, #8]
    break;
 80018a6:	e05e      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f000 f970 	bl	8001b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	6892      	ldr	r2, [r2, #8]
 80018c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018ca:	609a      	str	r2, [r3, #8]
    break;
 80018cc:	e04b      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	f000 f8da 	bl	8001a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2150      	movs	r1, #80	; 0x50
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f939 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 80018ec:	e03b      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f000 f8fc 	bl	8001af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2160      	movs	r1, #96	; 0x60
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f929 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 800190c:	e02b      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	461a      	mov	r2, r3
 800191c:	f000 f8ba 	bl	8001a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f919 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 800192c:	e01b      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f912 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 800193a:	e014      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2110      	movs	r1, #16
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f90b 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 8001948:	e00d      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2120      	movs	r1, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f904 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 8001956:	e006      	b.n	8001966 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2130      	movs	r1, #48	; 0x30
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8fd 	bl	8001b5e <TIM_ITRx_SetConfig>
    break;
 8001964:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <TIM_Base_SetConfig+0xc0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00b      	beq.n	80019fc <TIM_Base_SetConfig+0x34>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d007      	beq.n	80019fc <TIM_Base_SetConfig+0x34>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <TIM_Base_SetConfig+0xc4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <TIM_Base_SetConfig+0x34>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <TIM_Base_SetConfig+0xc8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <TIM_Base_SetConfig+0xc0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x66>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x66>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <TIM_Base_SetConfig+0xc4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x66>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <TIM_Base_SetConfig+0xc8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a46:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <TIM_Base_SetConfig+0xc0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d103      	bne.n	8001a78 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	615a      	str	r2, [r3, #20]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40000800 	.word	0x40000800

08001a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	f023 0201 	bic.w	r2, r3, #1
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f023 030a 	bic.w	r3, r3, #10
 8001ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	621a      	str	r2, [r3, #32]
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f023 0210 	bic.w	r2, r3, #16
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	031b      	lsls	r3, r3, #12
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	621a      	str	r2, [r3, #32]
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	f043 0307 	orr.w	r3, r3, #7
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	609a      	str	r2, [r3, #8]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	021a      	lsls	r2, r3, #8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e032      	b.n	8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	6852      	ldr	r2, [r2, #4]
 8001c10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c14:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	6851      	ldr	r1, [r2, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	6892      	ldr	r2, [r2, #8]
 8001c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c36:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	6891      	ldr	r1, [r2, #8]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e03f      	b.n	8001d1c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fcc9 	bl	8002648 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	68d2      	ldr	r2, [r2, #12]
 8001cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ccc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f928 	bl	8001f24 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	6912      	ldr	r2, [r2, #16]
 8001cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ce2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	6952      	ldr	r2, [r2, #20]
 8001cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	68d2      	ldr	r2, [r2, #12]
 8001cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d02:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	f040 8082 	bne.w	8001e4a <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_UART_Transmit+0x2e>
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07a      	b.n	8001e4c <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_UART_Transmit+0x40>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e073      	b.n	8001e4c <HAL_UART_Transmit+0x128>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2221      	movs	r2, #33	; 0x21
 8001d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d7a:	f7fe fcfd 	bl	8000778 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d8c:	e041      	b.n	8001e12 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da4:	d121      	bne.n	8001dea <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f86c 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e045      	b.n	8001e4c <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd0:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e017      	b.n	8001e12 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	e013      	b.n	8001e12 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f84a 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e023      	b.n	8001e4c <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1b8      	bne.n	8001d8e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f831 	bl	8001e8e <UART_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00a      	b.n	8001e4c <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b2db      	uxtb	r3, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e9e:	e02c      	b.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d028      	beq.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8001eae:	f7fe fc63 	bl	8000778 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d91d      	bls.n	8001efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	68d2      	ldr	r2, [r2, #12]
 8001ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	6952      	ldr	r2, [r2, #20]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e00f      	b.n	8001f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d0c3      	beq.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f6a:	f023 030c 	bic.w	r3, r3, #12
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	6952      	ldr	r2, [r2, #20]
 8001f7e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6992      	ldr	r2, [r2, #24]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6f      	ldr	r2, [pc, #444]	; (800214c <UART_SetConfig+0x228>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d16b      	bne.n	800206c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	f7ff fa98 	bl	80014cc <HAL_RCC_GetPCLK2Freq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009a      	lsls	r2, r3, #2
 8001fa6:	441a      	add	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4a67      	ldr	r2, [pc, #412]	; (8002150 <UART_SetConfig+0x22c>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	011d      	lsls	r5, r3, #4
 8001fbc:	f7ff fa86 	bl	80014cc <HAL_RCC_GetPCLK2Freq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8001fd6:	f7ff fa79 	bl	80014cc <HAL_RCC_GetPCLK2Freq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	4a57      	ldr	r2, [pc, #348]	; (8002150 <UART_SetConfig+0x22c>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2264      	movs	r2, #100	; 0x64
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	1af3      	subs	r3, r6, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <UART_SetConfig+0x22c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	441d      	add	r5, r3
 8002012:	f7ff fa5b 	bl	80014cc <HAL_RCC_GetPCLK2Freq>
 8002016:	4602      	mov	r2, r0
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009a      	lsls	r2, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fbb2 f6f3 	udiv	r6, r2, r3
 800202c:	f7ff fa4e 	bl	80014cc <HAL_RCC_GetPCLK2Freq>
 8002030:	4602      	mov	r2, r0
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	009a      	lsls	r2, r3, #2
 800203a:	441a      	add	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4a42      	ldr	r2, [pc, #264]	; (8002150 <UART_SetConfig+0x22c>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	2264      	movs	r2, #100	; 0x64
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	1af3      	subs	r3, r6, r3
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	3332      	adds	r3, #50	; 0x32
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <UART_SetConfig+0x22c>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	442b      	add	r3, r5
 8002068:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800206a:	e06a      	b.n	8002142 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	f7ff fa18 	bl	80014a4 <HAL_RCC_GetPCLK1Freq>
 8002074:	4602      	mov	r2, r0
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <UART_SetConfig+0x22c>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	011d      	lsls	r5, r3, #4
 8002094:	f7ff fa06 	bl	80014a4 <HAL_RCC_GetPCLK1Freq>
 8002098:	4602      	mov	r2, r0
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80020ae:	f7ff f9f9 	bl	80014a4 <HAL_RCC_GetPCLK1Freq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <UART_SetConfig+0x22c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2264      	movs	r2, #100	; 0x64
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	3332      	adds	r3, #50	; 0x32
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <UART_SetConfig+0x22c>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	441d      	add	r5, r3
 80020ea:	f7ff f9db 	bl	80014a4 <HAL_RCC_GetPCLK1Freq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f6f3 	udiv	r6, r2, r3
 8002104:	f7ff f9ce 	bl	80014a4 <HAL_RCC_GetPCLK1Freq>
 8002108:	4602      	mov	r2, r0
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <UART_SetConfig+0x22c>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2264      	movs	r2, #100	; 0x64
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	1af3      	subs	r3, r6, r3
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <UART_SetConfig+0x22c>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	442b      	add	r3, r5
 8002140:	60a3      	str	r3, [r4, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214a:	bf00      	nop
 800214c:	40013800 	.word	0x40013800
 8002150:	51eb851f 	.word	0x51eb851f

08002154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <MX_GPIO_Init+0xbc>)
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <MX_GPIO_Init+0xbc>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <MX_GPIO_Init+0xbc>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <MX_GPIO_Init+0xbc>)
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <MX_GPIO_Init+0xbc>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	6193      	str	r3, [r2, #24]
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <MX_GPIO_Init+0xbc>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <MX_GPIO_Init+0xbc>)
 800218c:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MX_GPIO_Init+0xbc>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6193      	str	r3, [r2, #24]
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_GPIO_Init+0xbc>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <MX_GPIO_Init+0xbc>)
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_GPIO_Init+0xbc>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_GPIO_Init+0xbc>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2120      	movs	r1, #32
 80021be:	4815      	ldr	r0, [pc, #84]	; (8002214 <MX_GPIO_Init+0xc0>)
 80021c0:	f7fe fd72 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_GPIO_Init+0xc4>)
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4619      	mov	r1, r3
 80021d8:	4810      	ldr	r0, [pc, #64]	; (800221c <MX_GPIO_Init+0xc8>)
 80021da:	f7fe fc07 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021de:	2320      	movs	r3, #32
 80021e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4619      	mov	r1, r3
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <MX_GPIO_Init+0xc0>)
 80021f2:	f7fe fbfb 	bl	80009ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2028      	movs	r0, #40	; 0x28
 80021fc:	f7fe fb97 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002200:	2028      	movs	r0, #40	; 0x28
 8002202:	f7fe fbb0 	bl	8000966 <HAL_NVIC_EnableIRQ>

}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40010800 	.word	0x40010800
 8002218:	10110000 	.word	0x10110000
 800221c:	40011000 	.word	0x40011000

08002220 <__io_putchar>:
/*
 * Printf in Serial 2 (Virtual serial of Nucleo-64 with STLINK)
 */

int __io_putchar(int ch)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	733b      	strb	r3, [r7, #12]

 while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY);//Wait until UART is ready
 800222e:	bf00      	nop
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <__io_putchar+0x34>)
 8002232:	f7ff fe0f 	bl	8001e54 <HAL_UART_GetState>
 8002236:	4603      	mov	r3, r0
 8002238:	2b20      	cmp	r3, #32
 800223a:	d1f9      	bne.n	8002230 <__io_putchar+0x10>
 HAL_UART_Transmit(&huart2, &(*c), 1, 10);
 800223c:	f107 010c 	add.w	r1, r7, #12
 8002240:	230a      	movs	r3, #10
 8002242:	2201      	movs	r2, #1
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <__io_putchar+0x34>)
 8002246:	f7ff fd6d 	bl	8001d24 <HAL_UART_Transmit>
 return ch;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200020e4 	.word	0x200020e4

08002258 <_write>:

int _write(int file,char *ptr, int len)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e009      	b.n	800227e <_write+0x26>
	 __io_putchar(*ptr++);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	60ba      	str	r2, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffd4 	bl	8002220 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	dbf1      	blt.n	800226a <_write+0x12>
	 }
return len;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002296:	f7fe fa17 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229a:	f000 f843 	bl	8002324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229e:	f7ff ff59 	bl	8002154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022a2:	f000 f9a3 	bl	80025ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80022a6:	f000 f933 	bl	8002510 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);//Start 1s timer
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <main+0x44>)
 80022ac:	f7ff f96b 	bl	8001586 <HAL_TIM_Base_Start_IT>



  uint32_t ifftFlag = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	607b      	str	r3, [r7, #4]
  uint32_t doBitReverse = 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  /*
	   * FFT Forever
	   */
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4905      	ldr	r1, [pc, #20]	; (80022d8 <main+0x48>)
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <main+0x4c>)
 80022c4:	f000 fefe 	bl	80030c4 <arm_cfft_f32>
	  FFT_result++;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <main+0x50>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <main+0x50>)
 80022d0:	6013      	str	r3, [r2, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 80022d2:	e7f1      	b.n	80022b8 <main+0x28>
 80022d4:	200020a4 	.word	0x200020a4
 80022d8:	20000008 	.word	0x20000008
 80022dc:	08004ac0 	.word	0x08004ac0
 80022e0:	2000209c 	.word	0x2000209c

080022e4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d10c      	bne.n	8002310 <HAL_TIM_PeriodElapsedCallback+0x2c>

	  printf("FFT/s: %i \r\n", (FFT_result-FFT_old));
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	4619      	mov	r1, r3
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002304:	f001 fc58 	bl	8003bb8 <iprintf>
	  FFT_old = FFT_result;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800230e:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000209c 	.word	0x2000209c
 800231c:	200020a0 	.word	0x200020a0
 8002320:	08004a68 	.word	0x08004a68

08002324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b090      	sub	sp, #64	; 0x40
 8002328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232e:	2301      	movs	r3, #1
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002332:	2310      	movs	r3, #16
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002336:	2302      	movs	r3, #2
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800233e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fce7 	bl	8000d1c <HAL_RCC_OscConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002354:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002358:	4818      	ldr	r0, [pc, #96]	; (80023bc <SystemClock_Config+0x98>)
 800235a:	f000 f833 	bl	80023c4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	230f      	movs	r3, #15
 8002360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	2302      	movs	r3, #2
 8002364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe ff33 	bl	80011e4 <HAL_RCC_ClockConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <SystemClock_Config+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002384:	f240 11e1 	movw	r1, #481	; 0x1e1
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <SystemClock_Config+0x98>)
 800238a:	f000 f81b 	bl	80023c4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800238e:	f7ff f87f 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <SystemClock_Config+0x9c>)
 8002396:	fba3 2302 	umull	r2, r3, r3, r2
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe faf0 	bl	8000982 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023a2:	2004      	movs	r0, #4
 80023a4:	f7fe fafa 	bl	800099c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7fe fabd 	bl	800092e <HAL_NVIC_SetPriority>
}
 80023b4:	bf00      	nop
 80023b6:	3740      	adds	r7, #64	; 0x40
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	08004a78 	.word	0x08004a78
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80023ce:	e7fe      	b.n	80023ce <_Error_Handler+0xa>

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_MspInit+0x9c>)
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_MspInit+0x9c>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_MspInit+0x9c>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f7fe fa92 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	f06f 000b 	mvn.w	r0, #11
 80023fc:	f7fe fa97 	bl	800092e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	f06f 000a 	mvn.w	r0, #10
 8002408:	f7fe fa91 	bl	800092e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	f06f 0009 	mvn.w	r0, #9
 8002414:	f7fe fa8b 	bl	800092e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	f06f 0004 	mvn.w	r0, #4
 8002420:	f7fe fa85 	bl	800092e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	f06f 0003 	mvn.w	r0, #3
 800242c:	f7fe fa7f 	bl	800092e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	f06f 0001 	mvn.w	r0, #1
 8002438:	f7fe fa79 	bl	800092e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7fe fa73 	bl	800092e <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_MspInit+0xa0>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_MspInit+0xa0>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	40010000 	.word	0x40010000

08002474 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002478:	f7fe f96c 	bl	8000754 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800247c:	f7fe faaa 	bl	80009d4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <TIM2_IRQHandler+0x10>)
 800248a:	f7ff f896 	bl	80015ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200020a4 	.word	0x200020a4

08002498 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800249c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a0:	f7fe fc1a 	bl	8000cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <SystemInit+0x5c>)
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <SystemInit+0x5c>)
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <SystemInit+0x60>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <SystemInit+0x5c>)
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <SystemInit+0x5c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <SystemInit+0x5c>)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <SystemInit+0x5c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <SystemInit+0x5c>)
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <SystemInit+0x5c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SystemInit+0x5c>)
 80024ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SystemInit+0x64>)
 80024f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	f8ff0000 	.word	0xf8ff0000
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <MX_TIM2_Init+0x8c>)
 8002518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800251c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0xFA00;
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <MX_TIM2_Init+0x8c>)
 8002520:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002524:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_TIM2_Init+0x8c>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM2_Init+0x8c>)
 800252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM2_Init+0x8c>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_TIM2_Init+0x8c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002540:	4816      	ldr	r0, [pc, #88]	; (800259c <MX_TIM2_Init+0x8c>)
 8002542:	f7fe fff5 	bl	8001530 <HAL_TIM_Base_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800254c:	213f      	movs	r1, #63	; 0x3f
 800254e:	4814      	ldr	r0, [pc, #80]	; (80025a0 <MX_TIM2_Init+0x90>)
 8002550:	f7ff ff38 	bl	80023c4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	4619      	mov	r1, r3
 8002560:	480e      	ldr	r0, [pc, #56]	; (800259c <MX_TIM2_Init+0x8c>)
 8002562:	f7ff f932 	bl	80017ca <HAL_TIM_ConfigClockSource>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800256c:	2145      	movs	r1, #69	; 0x45
 800256e:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_TIM2_Init+0x90>)
 8002570:	f7ff ff28 	bl	80023c4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_TIM2_Init+0x8c>)
 8002582:	f7ff fb2c 	bl	8001bde <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <MX_TIM2_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 800258c:	214c      	movs	r1, #76	; 0x4c
 800258e:	4804      	ldr	r0, [pc, #16]	; (80025a0 <MX_TIM2_Init+0x90>)
 8002590:	f7ff ff18 	bl	80023c4 <_Error_Handler>
  }

}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200020a4 	.word	0x200020a4
 80025a0:	08004a88 	.word	0x08004a88

080025a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d113      	bne.n	80025de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_TIM_Base_MspInit+0x44>)
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_TIM_Base_MspInit+0x44>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	61d3      	str	r3, [r2, #28]
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_TIM_Base_MspInit+0x44>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	201c      	movs	r0, #28
 80025d4:	f7fe f9ab 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025d8:	201c      	movs	r0, #28
 80025da:	f7fe f9c4 	bl	8000966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000

080025ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_USART2_UART_Init+0x50>)
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <MX_USART2_UART_Init+0x54>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART2_UART_Init+0x50>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_USART2_UART_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <MX_USART2_UART_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART2_UART_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_USART2_UART_Init+0x50>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART2_UART_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_USART2_UART_Init+0x50>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_USART2_UART_Init+0x50>)
 8002624:	f7ff fb31 	bl	8001c8a <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800262e:	2142      	movs	r1, #66	; 0x42
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002632:	f7ff fec7 	bl	80023c4 <_Error_Handler>
  }

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200020e4 	.word	0x200020e4
 8002640:	40004400 	.word	0x40004400
 8002644:	08004a98 	.word	0x08004a98

08002648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_UART_MspInit+0x4c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d117      	bne.n	800268a <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_UART_MspInit+0x50>)
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_UART_MspInit+0x50>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_UART_MspInit+0x50>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002672:	230c      	movs	r3, #12
 8002674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_UART_MspInit+0x54>)
 8002686:	f7fe f9b1 	bl	80009ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40004400 	.word	0x40004400
 8002698:	40021000 	.word	0x40021000
 800269c:	40010800 	.word	0x40010800

080026a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026a2:	e003      	b.n	80026ac <LoopCopyDataInit>

080026a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026aa:	3104      	adds	r1, #4

080026ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026b4:	d3f6      	bcc.n	80026a4 <CopyDataInit>
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026b8:	e002      	b.n	80026c0 <LoopFillZerobss>

080026ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026bc:	f842 3b04 	str.w	r3, [r2], #4

080026c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026c4:	d3f9      	bcc.n	80026ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026c6:	f7ff feef 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f001 fa51 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ce:	f7ff fddf 	bl	8002290 <main>
  bx lr
 80026d2:	4770      	bx	lr
  ldr r3, =_sidata
 80026d4:	08007980 	.word	0x08007980
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026dc:	20002070 	.word	0x20002070
  ldr r2, =_sbss
 80026e0:	20002070 	.word	0x20002070
  ldr r3, = _ebss
 80026e4:	20002128 	.word	0x20002128

080026e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC1_2_IRQHandler>
	...

080026ec <arm_cfft_radix8by2_f32>:
 80026ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f0:	460c      	mov	r4, r1
 80026f2:	8803      	ldrh	r3, [r0, #0]
 80026f4:	b093      	sub	sp, #76	; 0x4c
 80026f6:	900e      	str	r0, [sp, #56]	; 0x38
 80026f8:	6842      	ldr	r2, [r0, #4]
 80026fa:	0858      	lsrs	r0, r3, #1
 80026fc:	9111      	str	r1, [sp, #68]	; 0x44
 80026fe:	9010      	str	r0, [sp, #64]	; 0x40
 8002700:	0081      	lsls	r1, r0, #2
 8002702:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	900f      	str	r0, [sp, #60]	; 0x3c
 800270a:	9308      	str	r3, [sp, #32]
 800270c:	f000 8131 	beq.w	8002972 <arm_cfft_radix8by2_f32+0x286>
 8002710:	f101 0310 	add.w	r3, r1, #16
 8002714:	18c7      	adds	r7, r0, r3
 8002716:	46bb      	mov	fp, r7
 8002718:	3210      	adds	r2, #16
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	eb04 0803 	add.w	r8, r4, r3
 8002720:	f104 0610 	add.w	r6, r4, #16
 8002724:	f100 0910 	add.w	r9, r0, #16
 8002728:	f859 2c10 	ldr.w	r2, [r9, #-16]
 800272c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	930d      	str	r3, [sp, #52]	; 0x34
 8002736:	9206      	str	r2, [sp, #24]
 8002738:	f7fd fd6e 	bl	8000218 <__addsf3>
 800273c:	f859 2c08 	ldr.w	r2, [r9, #-8]
 8002740:	f858 1c0c 	ldr.w	r1, [r8, #-12]
 8002744:	f858 ec04 	ldr.w	lr, [r8, #-4]
 8002748:	4614      	mov	r4, r2
 800274a:	f858 2c10 	ldr.w	r2, [r8, #-16]
 800274e:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 8002752:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 8002756:	910b      	str	r1, [sp, #44]	; 0x2c
 8002758:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 800275c:	f85b cc10 	ldr.w	ip, [fp, #-16]
 8002760:	f858 7c08 	ldr.w	r7, [r8, #-8]
 8002764:	920a      	str	r2, [sp, #40]	; 0x28
 8002766:	f8cd e008 	str.w	lr, [sp, #8]
 800276a:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800276e:	f85b ec04 	ldr.w	lr, [fp, #-4]
 8002772:	f859 5c04 	ldr.w	r5, [r9, #-4]
 8002776:	9104      	str	r1, [sp, #16]
 8002778:	f846 0c10 	str.w	r0, [r6, #-16]
 800277c:	4619      	mov	r1, r3
 800277e:	4650      	mov	r0, sl
 8002780:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8002784:	f8cd e014 	str.w	lr, [sp, #20]
 8002788:	9203      	str	r2, [sp, #12]
 800278a:	9307      	str	r3, [sp, #28]
 800278c:	9701      	str	r7, [sp, #4]
 800278e:	f7fd fd43 	bl	8000218 <__addsf3>
 8002792:	f856 7c08 	ldr.w	r7, [r6, #-8]
 8002796:	f846 0c0c 	str.w	r0, [r6, #-12]
 800279a:	4621      	mov	r1, r4
 800279c:	4638      	mov	r0, r7
 800279e:	9409      	str	r4, [sp, #36]	; 0x24
 80027a0:	f7fd fd3a 	bl	8000218 <__addsf3>
 80027a4:	f856 4c04 	ldr.w	r4, [r6, #-4]
 80027a8:	f846 0c08 	str.w	r0, [r6, #-8]
 80027ac:	4629      	mov	r1, r5
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7fd fd32 	bl	8000218 <__addsf3>
 80027b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027b6:	9a06      	ldr	r2, [sp, #24]
 80027b8:	f846 0c04 	str.w	r0, [r6, #-4]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fd28 	bl	8000214 <__aeabi_fsub>
 80027c4:	9907      	ldr	r1, [sp, #28]
 80027c6:	9006      	str	r0, [sp, #24]
 80027c8:	4650      	mov	r0, sl
 80027ca:	f7fd fd23 	bl	8000214 <__aeabi_fsub>
 80027ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027d0:	4682      	mov	sl, r0
 80027d2:	4638      	mov	r0, r7
 80027d4:	f7fd fd1e 	bl	8000214 <__aeabi_fsub>
 80027d8:	4629      	mov	r1, r5
 80027da:	9007      	str	r0, [sp, #28]
 80027dc:	4620      	mov	r0, r4
 80027de:	f7fd fd19 	bl	8000214 <__aeabi_fsub>
 80027e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80027e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80027e6:	4639      	mov	r1, r7
 80027e8:	9009      	str	r0, [sp, #36]	; 0x24
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7fd fd14 	bl	8000218 <__addsf3>
 80027f0:	9903      	ldr	r1, [sp, #12]
 80027f2:	f848 0c10 	str.w	r0, [r8, #-16]
 80027f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80027f8:	3610      	adds	r6, #16
 80027fa:	4628      	mov	r0, r5
 80027fc:	f7fd fd0c 	bl	8000218 <__addsf3>
 8002800:	9904      	ldr	r1, [sp, #16]
 8002802:	f848 0c0c 	str.w	r0, [r8, #-12]
 8002806:	9801      	ldr	r0, [sp, #4]
 8002808:	f7fd fd06 	bl	8000218 <__addsf3>
 800280c:	9905      	ldr	r1, [sp, #20]
 800280e:	f848 0c08 	str.w	r0, [r8, #-8]
 8002812:	9802      	ldr	r0, [sp, #8]
 8002814:	f7fd fd00 	bl	8000218 <__addsf3>
 8002818:	4621      	mov	r1, r4
 800281a:	f848 0c04 	str.w	r0, [r8, #-4]
 800281e:	4638      	mov	r0, r7
 8002820:	f7fd fcf8 	bl	8000214 <__aeabi_fsub>
 8002824:	4629      	mov	r1, r5
 8002826:	4607      	mov	r7, r0
 8002828:	9803      	ldr	r0, [sp, #12]
 800282a:	f7fd fcf3 	bl	8000214 <__aeabi_fsub>
 800282e:	9901      	ldr	r1, [sp, #4]
 8002830:	9003      	str	r0, [sp, #12]
 8002832:	9804      	ldr	r0, [sp, #16]
 8002834:	f7fd fcee 	bl	8000214 <__aeabi_fsub>
 8002838:	9902      	ldr	r1, [sp, #8]
 800283a:	9001      	str	r0, [sp, #4]
 800283c:	9805      	ldr	r0, [sp, #20]
 800283e:	f7fd fce9 	bl	8000214 <__aeabi_fsub>
 8002842:	9a00      	ldr	r2, [sp, #0]
 8002844:	9002      	str	r0, [sp, #8]
 8002846:	f852 4c10 	ldr.w	r4, [r2, #-16]
 800284a:	9806      	ldr	r0, [sp, #24]
 800284c:	4621      	mov	r1, r4
 800284e:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8002852:	f7fd fde9 	bl	8000428 <__aeabi_fmul>
 8002856:	4629      	mov	r1, r5
 8002858:	9004      	str	r0, [sp, #16]
 800285a:	4650      	mov	r0, sl
 800285c:	f7fd fde4 	bl	8000428 <__aeabi_fmul>
 8002860:	9b04      	ldr	r3, [sp, #16]
 8002862:	4601      	mov	r1, r0
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fcd7 	bl	8000218 <__addsf3>
 800286a:	4621      	mov	r1, r4
 800286c:	f849 0c10 	str.w	r0, [r9, #-16]
 8002870:	4650      	mov	r0, sl
 8002872:	f7fd fdd9 	bl	8000428 <__aeabi_fmul>
 8002876:	4629      	mov	r1, r5
 8002878:	4682      	mov	sl, r0
 800287a:	9806      	ldr	r0, [sp, #24]
 800287c:	f7fd fdd4 	bl	8000428 <__aeabi_fmul>
 8002880:	4601      	mov	r1, r0
 8002882:	4650      	mov	r0, sl
 8002884:	f7fd fcc6 	bl	8000214 <__aeabi_fsub>
 8002888:	4629      	mov	r1, r5
 800288a:	f849 0c0c 	str.w	r0, [r9, #-12]
 800288e:	4638      	mov	r0, r7
 8002890:	f7fd fdca 	bl	8000428 <__aeabi_fmul>
 8002894:	4621      	mov	r1, r4
 8002896:	4682      	mov	sl, r0
 8002898:	9803      	ldr	r0, [sp, #12]
 800289a:	f7fd fdc5 	bl	8000428 <__aeabi_fmul>
 800289e:	4601      	mov	r1, r0
 80028a0:	4650      	mov	r0, sl
 80028a2:	f7fd fcb7 	bl	8000214 <__aeabi_fsub>
 80028a6:	4629      	mov	r1, r5
 80028a8:	f84b 0c10 	str.w	r0, [fp, #-16]
 80028ac:	9803      	ldr	r0, [sp, #12]
 80028ae:	f7fd fdbb 	bl	8000428 <__aeabi_fmul>
 80028b2:	4621      	mov	r1, r4
 80028b4:	4605      	mov	r5, r0
 80028b6:	4638      	mov	r0, r7
 80028b8:	f7fd fdb6 	bl	8000428 <__aeabi_fmul>
 80028bc:	4601      	mov	r1, r0
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fd fcaa 	bl	8000218 <__addsf3>
 80028c4:	9a00      	ldr	r2, [sp, #0]
 80028c6:	f84b 0c0c 	str.w	r0, [fp, #-12]
 80028ca:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80028ce:	9807      	ldr	r0, [sp, #28]
 80028d0:	4621      	mov	r1, r4
 80028d2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80028d6:	f7fd fda7 	bl	8000428 <__aeabi_fmul>
 80028da:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80028de:	4607      	mov	r7, r0
 80028e0:	4629      	mov	r1, r5
 80028e2:	4650      	mov	r0, sl
 80028e4:	f7fd fda0 	bl	8000428 <__aeabi_fmul>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4638      	mov	r0, r7
 80028ec:	f7fd fc94 	bl	8000218 <__addsf3>
 80028f0:	4621      	mov	r1, r4
 80028f2:	f849 0c08 	str.w	r0, [r9, #-8]
 80028f6:	4650      	mov	r0, sl
 80028f8:	f7fd fd96 	bl	8000428 <__aeabi_fmul>
 80028fc:	4629      	mov	r1, r5
 80028fe:	4607      	mov	r7, r0
 8002900:	9807      	ldr	r0, [sp, #28]
 8002902:	f7fd fd91 	bl	8000428 <__aeabi_fmul>
 8002906:	4601      	mov	r1, r0
 8002908:	4638      	mov	r0, r7
 800290a:	f7fd fc83 	bl	8000214 <__aeabi_fsub>
 800290e:	4629      	mov	r1, r5
 8002910:	f849 0c04 	str.w	r0, [r9, #-4]
 8002914:	9801      	ldr	r0, [sp, #4]
 8002916:	f7fd fd87 	bl	8000428 <__aeabi_fmul>
 800291a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800291e:	4607      	mov	r7, r0
 8002920:	4621      	mov	r1, r4
 8002922:	4650      	mov	r0, sl
 8002924:	f7fd fd80 	bl	8000428 <__aeabi_fmul>
 8002928:	4601      	mov	r1, r0
 800292a:	4638      	mov	r0, r7
 800292c:	f7fd fc72 	bl	8000214 <__aeabi_fsub>
 8002930:	4629      	mov	r1, r5
 8002932:	f84b 0c08 	str.w	r0, [fp, #-8]
 8002936:	4650      	mov	r0, sl
 8002938:	f7fd fd76 	bl	8000428 <__aeabi_fmul>
 800293c:	4621      	mov	r1, r4
 800293e:	4605      	mov	r5, r0
 8002940:	9801      	ldr	r0, [sp, #4]
 8002942:	f7fd fd71 	bl	8000428 <__aeabi_fmul>
 8002946:	4601      	mov	r1, r0
 8002948:	4628      	mov	r0, r5
 800294a:	f7fd fc65 	bl	8000218 <__addsf3>
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	f84b 0c04 	str.w	r0, [fp, #-4]
 8002954:	3310      	adds	r3, #16
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	9b08      	ldr	r3, [sp, #32]
 800295a:	f108 0810 	add.w	r8, r8, #16
 800295e:	3b01      	subs	r3, #1
 8002960:	f109 0910 	add.w	r9, r9, #16
 8002964:	f10b 0b10 	add.w	fp, fp, #16
 8002968:	9308      	str	r3, [sp, #32]
 800296a:	f47f aedd 	bne.w	8002728 <arm_cfft_radix8by2_f32+0x3c>
 800296e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 8002976:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002978:	4621      	mov	r1, r4
 800297a:	2302      	movs	r3, #2
 800297c:	f000 fc20 	bl	80031c0 <arm_radix8_butterfly_f32>
 8002980:	4621      	mov	r1, r4
 8002982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002984:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	2302      	movs	r3, #2
 800298a:	b013      	add	sp, #76	; 0x4c
 800298c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002990:	f000 bc16 	b.w	80031c0 <arm_radix8_butterfly_f32>

08002994 <arm_cfft_radix8by4_f32>:
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	8804      	ldrh	r4, [r0, #0]
 800299a:	b0a7      	sub	sp, #156	; 0x9c
 800299c:	0864      	lsrs	r4, r4, #1
 800299e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80029a2:	680d      	ldr	r5, [r1, #0]
 80029a4:	911a      	str	r1, [sp, #104]	; 0x68
 80029a6:	4451      	add	r1, sl
 80029a8:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 80029ac:	460f      	mov	r7, r1
 80029ae:	9023      	str	r0, [sp, #140]	; 0x8c
 80029b0:	4631      	mov	r1, r6
 80029b2:	4628      	mov	r0, r5
 80029b4:	f7fd fc30 	bl	8000218 <__addsf3>
 80029b8:	4631      	mov	r1, r6
 80029ba:	4683      	mov	fp, r0
 80029bc:	4628      	mov	r0, r5
 80029be:	9718      	str	r7, [sp, #96]	; 0x60
 80029c0:	f7fd fc28 	bl	8000214 <__aeabi_fsub>
 80029c4:	eb07 060a 	add.w	r6, r7, sl
 80029c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80029ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80029cc:	687d      	ldr	r5, [r7, #4]
 80029ce:	6876      	ldr	r6, [r6, #4]
 80029d0:	9000      	str	r0, [sp, #0]
 80029d2:	4631      	mov	r1, r6
 80029d4:	4628      	mov	r0, r5
 80029d6:	f7fd fc1f 	bl	8000218 <__addsf3>
 80029da:	4631      	mov	r1, r6
 80029dc:	9001      	str	r0, [sp, #4]
 80029de:	4628      	mov	r0, r5
 80029e0:	f7fd fc18 	bl	8000214 <__aeabi_fsub>
 80029e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80029e6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80029e8:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80029ec:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80029f0:	4639      	mov	r1, r7
 80029f2:	9002      	str	r0, [sp, #8]
 80029f4:	4658      	mov	r0, fp
 80029f6:	f7fd fc0f 	bl	8000218 <__addsf3>
 80029fa:	4631      	mov	r1, r6
 80029fc:	f7fd fc0c 	bl	8000218 <__addsf3>
 8002a00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002a02:	46ae      	mov	lr, r5
 8002a04:	4619      	mov	r1, r3
 8002a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a0a:	44d6      	add	lr, sl
 8002a0c:	f8de 8004 	ldr.w	r8, [lr, #4]
 8002a10:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8002a14:	951b      	str	r5, [sp, #108]	; 0x6c
 8002a16:	685d      	ldr	r5, [r3, #4]
 8002a18:	f841 0b08 	str.w	r0, [r1], #8
 8002a1c:	911d      	str	r1, [sp, #116]	; 0x74
 8002a1e:	9801      	ldr	r0, [sp, #4]
 8002a20:	6851      	ldr	r1, [r2, #4]
 8002a22:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8002a26:	f7fd fbf7 	bl	8000218 <__addsf3>
 8002a2a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002a2c:	6849      	ldr	r1, [r1, #4]
 8002a2e:	f7fd fbf3 	bl	8000218 <__addsf3>
 8002a32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002a34:	4649      	mov	r1, r9
 8002a36:	6050      	str	r0, [r2, #4]
 8002a38:	9800      	ldr	r0, [sp, #0]
 8002a3a:	f7fd fbed 	bl	8000218 <__addsf3>
 8002a3e:	4641      	mov	r1, r8
 8002a40:	f7fd fbe8 	bl	8000214 <__aeabi_fsub>
 8002a44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002a46:	4639      	mov	r1, r7
 8002a48:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8002a4c:	9802      	ldr	r0, [sp, #8]
 8002a4e:	f7fd fbe1 	bl	8000214 <__aeabi_fsub>
 8002a52:	4631      	mov	r1, r6
 8002a54:	f7fd fbe0 	bl	8000218 <__addsf3>
 8002a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002a5a:	4639      	mov	r1, r7
 8002a5c:	6058      	str	r0, [r3, #4]
 8002a5e:	4658      	mov	r0, fp
 8002a60:	f7fd fbd8 	bl	8000214 <__aeabi_fsub>
 8002a64:	4631      	mov	r1, r6
 8002a66:	f7fd fbd5 	bl	8000214 <__aeabi_fsub>
 8002a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8002a72:	9801      	ldr	r0, [sp, #4]
 8002a74:	f7fd fbce 	bl	8000214 <__aeabi_fsub>
 8002a78:	4641      	mov	r1, r8
 8002a7a:	f7fd fbcb 	bl	8000214 <__aeabi_fsub>
 8002a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002a80:	4649      	mov	r1, r9
 8002a82:	6058      	str	r0, [r3, #4]
 8002a84:	9800      	ldr	r0, [sp, #0]
 8002a86:	f7fd fbc5 	bl	8000214 <__aeabi_fsub>
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	f7fd fbc4 	bl	8000218 <__addsf3>
 8002a90:	4639      	mov	r1, r7
 8002a92:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002a94:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8002a98:	9802      	ldr	r0, [sp, #8]
 8002a9a:	f7fd fbbd 	bl	8000218 <__addsf3>
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	f7fd fbb8 	bl	8000214 <__aeabi_fsub>
 8002aa4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002aa6:	0864      	lsrs	r4, r4, #1
 8002aa8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002aaa:	6048      	str	r0, [r1, #4]
 8002aac:	1ea3      	subs	r3, r4, #2
 8002aae:	9424      	str	r4, [sp, #144]	; 0x90
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	3108      	adds	r1, #8
 8002ab4:	911c      	str	r1, [sp, #112]	; 0x70
 8002ab6:	4639      	mov	r1, r7
 8002ab8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002aba:	3108      	adds	r1, #8
 8002abc:	911e      	str	r1, [sp, #120]	; 0x78
 8002abe:	4611      	mov	r1, r2
 8002ac0:	3108      	adds	r1, #8
 8002ac2:	f105 0018 	add.w	r0, r5, #24
 8002ac6:	911f      	str	r1, [sp, #124]	; 0x7c
 8002ac8:	f105 0108 	add.w	r1, r5, #8
 8002acc:	9121      	str	r1, [sp, #132]	; 0x84
 8002ace:	9020      	str	r0, [sp, #128]	; 0x80
 8002ad0:	f105 0110 	add.w	r1, r5, #16
 8002ad4:	0858      	lsrs	r0, r3, #1
 8002ad6:	9122      	str	r1, [sp, #136]	; 0x88
 8002ad8:	9025      	str	r0, [sp, #148]	; 0x94
 8002ada:	f000 8207 	beq.w	8002eec <arm_cfft_radix8by4_f32+0x558>
 8002ade:	f1aa 030c 	sub.w	r3, sl, #12
 8002ae2:	9105      	str	r1, [sp, #20]
 8002ae4:	18e1      	adds	r1, r4, r3
 8002ae6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002ae8:	f1a7 0b0c 	sub.w	fp, r7, #12
 8002aec:	3310      	adds	r3, #16
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f102 0310 	add.w	r3, r2, #16
 8002af4:	461a      	mov	r2, r3
 8002af6:	f105 0320 	add.w	r3, r5, #32
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	463b      	mov	r3, r7
 8002b04:	46d8      	mov	r8, fp
 8002b06:	4691      	mov	r9, r2
 8002b08:	3310      	adds	r3, #16
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9014      	str	r0, [sp, #80]	; 0x50
 8002b10:	9102      	str	r1, [sp, #8]
 8002b12:	f104 0a10 	add.w	sl, r4, #16
 8002b16:	9306      	str	r3, [sp, #24]
 8002b18:	9e01      	ldr	r6, [sp, #4]
 8002b1a:	9f00      	ldr	r7, [sp, #0]
 8002b1c:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8002b20:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fb76 	bl	8000218 <__addsf3>
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	9007      	str	r0, [sp, #28]
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fd fb6f 	bl	8000214 <__aeabi_fsub>
 8002b36:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8002b3a:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8002b3e:	9008      	str	r0, [sp, #32]
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	9601      	str	r6, [sp, #4]
 8002b46:	9700      	str	r7, [sp, #0]
 8002b48:	f7fd fb66 	bl	8000218 <__addsf3>
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4607      	mov	r7, r0
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7fd fb5f 	bl	8000214 <__aeabi_fsub>
 8002b56:	f859 bc04 	ldr.w	fp, [r9, #-4]
 8002b5a:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4659      	mov	r1, fp
 8002b62:	9808      	ldr	r0, [sp, #32]
 8002b64:	f7fd fb58 	bl	8000218 <__addsf3>
 8002b68:	4631      	mov	r1, r6
 8002b6a:	f7fd fb53 	bl	8000214 <__aeabi_fsub>
 8002b6e:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8002b72:	9009      	str	r0, [sp, #36]	; 0x24
 8002b74:	940d      	str	r4, [sp, #52]	; 0x34
 8002b76:	4620      	mov	r0, r4
 8002b78:	f85a 4c08 	ldr.w	r4, [sl, #-8]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7fd fb49 	bl	8000214 <__aeabi_fsub>
 8002b82:	4621      	mov	r1, r4
 8002b84:	f7fd fb48 	bl	8000218 <__addsf3>
 8002b88:	4629      	mov	r1, r5
 8002b8a:	900a      	str	r0, [sp, #40]	; 0x28
 8002b8c:	9807      	ldr	r0, [sp, #28]
 8002b8e:	f7fd fb41 	bl	8000214 <__aeabi_fsub>
 8002b92:	4621      	mov	r1, r4
 8002b94:	f7fd fb3e 	bl	8000214 <__aeabi_fsub>
 8002b98:	4659      	mov	r1, fp
 8002b9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	f7fd fb39 	bl	8000214 <__aeabi_fsub>
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	f7fd fb36 	bl	8000214 <__aeabi_fsub>
 8002ba8:	4659      	mov	r1, fp
 8002baa:	900c      	str	r0, [sp, #48]	; 0x30
 8002bac:	9808      	ldr	r0, [sp, #32]
 8002bae:	f7fd fb31 	bl	8000214 <__aeabi_fsub>
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	f7fd fb30 	bl	8000218 <__addsf3>
 8002bb8:	4629      	mov	r1, r5
 8002bba:	9008      	str	r0, [sp, #32]
 8002bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002bbe:	f7fd fb2b 	bl	8000218 <__addsf3>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	f7fd fb26 	bl	8000214 <__aeabi_fsub>
 8002bc8:	4629      	mov	r1, r5
 8002bca:	900d      	str	r0, [sp, #52]	; 0x34
 8002bcc:	9807      	ldr	r0, [sp, #28]
 8002bce:	f7fd fb23 	bl	8000218 <__addsf3>
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	f7fd fb20 	bl	8000218 <__addsf3>
 8002bd8:	9d01      	ldr	r5, [sp, #4]
 8002bda:	f109 0908 	add.w	r9, r9, #8
 8002bde:	f845 0c08 	str.w	r0, [r5, #-8]
 8002be2:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 8002be6:	4638      	mov	r0, r7
 8002be8:	f7fd fb16 	bl	8000218 <__addsf3>
 8002bec:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8002bf0:	f7fd fb12 	bl	8000218 <__addsf3>
 8002bf4:	9a06      	ldr	r2, [sp, #24]
 8002bf6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002bf8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8002bfa:	f845 0c04 	str.w	r0, [r5, #-4]
 8002bfe:	4414      	add	r4, r2
 8002c00:	18b2      	adds	r2, r6, r2
 8002c02:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8002c06:	9501      	str	r5, [sp, #4]
 8002c08:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	4628      	mov	r0, r5
 8002c10:	4617      	mov	r7, r2
 8002c12:	f7fd fb01 	bl	8000218 <__addsf3>
 8002c16:	4631      	mov	r1, r6
 8002c18:	9007      	str	r0, [sp, #28]
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f7fd fafa 	bl	8000214 <__aeabi_fsub>
 8002c20:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8002c24:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8002c28:	4683      	mov	fp, r0
 8002c2a:	4631      	mov	r1, r6
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	9715      	str	r7, [sp, #84]	; 0x54
 8002c30:	f7fd faf2 	bl	8000218 <__addsf3>
 8002c34:	4631      	mov	r1, r6
 8002c36:	900e      	str	r0, [sp, #56]	; 0x38
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7fd faeb 	bl	8000214 <__aeabi_fsub>
 8002c3e:	9f02      	ldr	r7, [sp, #8]
 8002c40:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8002c44:	68bd      	ldr	r5, [r7, #8]
 8002c46:	900f      	str	r0, [sp, #60]	; 0x3c
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f7fd fae2 	bl	8000214 <__aeabi_fsub>
 8002c50:	4601      	mov	r1, r0
 8002c52:	9017      	str	r0, [sp, #92]	; 0x5c
 8002c54:	4658      	mov	r0, fp
 8002c56:	f7fd fadf 	bl	8000218 <__addsf3>
 8002c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002c5e:	9702      	str	r7, [sp, #8]
 8002c60:	687f      	ldr	r7, [r7, #4]
 8002c62:	4619      	mov	r1, r3
 8002c64:	9010      	str	r0, [sp, #64]	; 0x40
 8002c66:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002c68:	9312      	str	r3, [sp, #72]	; 0x48
 8002c6a:	f7fd fad3 	bl	8000214 <__aeabi_fsub>
 8002c6e:	4639      	mov	r1, r7
 8002c70:	f7fd fad2 	bl	8000218 <__addsf3>
 8002c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c76:	9011      	str	r0, [sp, #68]	; 0x44
 8002c78:	4619      	mov	r1, r3
 8002c7a:	9807      	ldr	r0, [sp, #28]
 8002c7c:	9316      	str	r3, [sp, #88]	; 0x58
 8002c7e:	f7fd fac9 	bl	8000214 <__aeabi_fsub>
 8002c82:	4639      	mov	r1, r7
 8002c84:	f7fd fac6 	bl	8000214 <__aeabi_fsub>
 8002c88:	4631      	mov	r1, r6
 8002c8a:	9012      	str	r0, [sp, #72]	; 0x48
 8002c8c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002c8e:	f7fd fac1 	bl	8000214 <__aeabi_fsub>
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fabe 	bl	8000214 <__aeabi_fsub>
 8002c98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002c9a:	4659      	mov	r1, fp
 8002c9c:	9013      	str	r0, [sp, #76]	; 0x4c
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7fd fab8 	bl	8000214 <__aeabi_fsub>
 8002ca4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ca6:	4683      	mov	fp, r0
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4638      	mov	r0, r7
 8002cac:	f7fd fab2 	bl	8000214 <__aeabi_fsub>
 8002cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002cb2:	f7fd faaf 	bl	8000214 <__aeabi_fsub>
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	4607      	mov	r7, r0
 8002cba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002cbc:	f7fd faac 	bl	8000218 <__addsf3>
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f7fd faa9 	bl	8000218 <__addsf3>
 8002cc6:	f844 0c04 	str.w	r0, [r4, #-4]
 8002cca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002cce:	9807      	ldr	r0, [sp, #28]
 8002cd0:	f7fd faa2 	bl	8000218 <__addsf3>
 8002cd4:	9902      	ldr	r1, [sp, #8]
 8002cd6:	f1a8 0808 	sub.w	r8, r8, #8
 8002cda:	6849      	ldr	r1, [r1, #4]
 8002cdc:	f7fd fa9c 	bl	8000218 <__addsf3>
 8002ce0:	9d05      	ldr	r5, [sp, #20]
 8002ce2:	f844 0c08 	str.w	r0, [r4, #-8]
 8002ce6:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8002cea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cec:	4621      	mov	r1, r4
 8002cee:	f7fd fb9b 	bl	8000428 <__aeabi_fmul>
 8002cf2:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cfc:	f7fd fb94 	bl	8000428 <__aeabi_fmul>
 8002d00:	4601      	mov	r1, r0
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7fd fa88 	bl	8000218 <__addsf3>
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f849 0c10 	str.w	r0, [r9, #-16]
 8002d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d10:	f7fd fb8a 	bl	8000428 <__aeabi_fmul>
 8002d14:	4629      	mov	r1, r5
 8002d16:	4606      	mov	r6, r0
 8002d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d1a:	f7fd fb85 	bl	8000428 <__aeabi_fmul>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4630      	mov	r0, r6
 8002d22:	f7fd fa77 	bl	8000214 <__aeabi_fsub>
 8002d26:	4629      	mov	r1, r5
 8002d28:	f849 0c0c 	str.w	r0, [r9, #-12]
 8002d2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002d2e:	f7fd fb7b 	bl	8000428 <__aeabi_fmul>
 8002d32:	4621      	mov	r1, r4
 8002d34:	4606      	mov	r6, r0
 8002d36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002d38:	f7fd fb76 	bl	8000428 <__aeabi_fmul>
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7fd fa68 	bl	8000214 <__aeabi_fsub>
 8002d44:	4629      	mov	r1, r5
 8002d46:	f8c8 0010 	str.w	r0, [r8, #16]
 8002d4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002d4c:	f7fd fb6c 	bl	8000428 <__aeabi_fmul>
 8002d50:	4621      	mov	r1, r4
 8002d52:	4605      	mov	r5, r0
 8002d54:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002d56:	f7fd fb67 	bl	8000428 <__aeabi_fmul>
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f7fd fa5b 	bl	8000218 <__addsf3>
 8002d62:	9904      	ldr	r1, [sp, #16]
 8002d64:	f8c8 000c 	str.w	r0, [r8, #12]
 8002d68:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8002d6c:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 8002d70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002d72:	4621      	mov	r1, r4
 8002d74:	f7fd fb58 	bl	8000428 <__aeabi_fmul>
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d7e:	f7fd fb53 	bl	8000428 <__aeabi_fmul>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4630      	mov	r0, r6
 8002d86:	f7fd fa47 	bl	8000218 <__addsf3>
 8002d8a:	9a00      	ldr	r2, [sp, #0]
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	f842 0c08 	str.w	r0, [r2, #-8]
 8002d92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d94:	f7fd fb48 	bl	8000428 <__aeabi_fmul>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002d9e:	f7fd fb43 	bl	8000428 <__aeabi_fmul>
 8002da2:	4601      	mov	r1, r0
 8002da4:	4630      	mov	r0, r6
 8002da6:	f7fd fa35 	bl	8000214 <__aeabi_fsub>
 8002daa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002dac:	9a00      	ldr	r2, [sp, #0]
 8002dae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002db2:	f842 0c04 	str.w	r0, [r2, #-4]
 8002db6:	4621      	mov	r1, r4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fb35 	bl	8000428 <__aeabi_fmul>
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002dc4:	f7fd fb30 	bl	8000428 <__aeabi_fmul>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	4630      	mov	r0, r6
 8002dcc:	f7fd fa22 	bl	8000214 <__aeabi_fsub>
 8002dd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f846 0c04 	str.w	r0, [r6, #-4]
 8002dd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002dda:	f7fd fb25 	bl	8000428 <__aeabi_fmul>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4605      	mov	r5, r0
 8002de2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002de4:	f7fd fb20 	bl	8000428 <__aeabi_fmul>
 8002de8:	4601      	mov	r1, r0
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7fd fa12 	bl	8000214 <__aeabi_fsub>
 8002df0:	f846 0c08 	str.w	r0, [r6, #-8]
 8002df4:	9e03      	ldr	r6, [sp, #12]
 8002df6:	9808      	ldr	r0, [sp, #32]
 8002df8:	f856 4c18 	ldr.w	r4, [r6, #-24]
 8002dfc:	f856 5c14 	ldr.w	r5, [r6, #-20]
 8002e00:	4621      	mov	r1, r4
 8002e02:	f7fd fb11 	bl	8000428 <__aeabi_fmul>
 8002e06:	4629      	mov	r1, r5
 8002e08:	4606      	mov	r6, r0
 8002e0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e0c:	f7fd fb0c 	bl	8000428 <__aeabi_fmul>
 8002e10:	4601      	mov	r1, r0
 8002e12:	4630      	mov	r0, r6
 8002e14:	f7fd fa00 	bl	8000218 <__addsf3>
 8002e18:	4621      	mov	r1, r4
 8002e1a:	f84a 0c08 	str.w	r0, [sl, #-8]
 8002e1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e20:	f7fd fb02 	bl	8000428 <__aeabi_fmul>
 8002e24:	4629      	mov	r1, r5
 8002e26:	4606      	mov	r6, r0
 8002e28:	9808      	ldr	r0, [sp, #32]
 8002e2a:	f7fd fafd 	bl	8000428 <__aeabi_fmul>
 8002e2e:	4601      	mov	r1, r0
 8002e30:	4630      	mov	r0, r6
 8002e32:	f7fd f9ef 	bl	8000214 <__aeabi_fsub>
 8002e36:	4629      	mov	r1, r5
 8002e38:	f84a 0c04 	str.w	r0, [sl, #-4]
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f7fd faf3 	bl	8000428 <__aeabi_fmul>
 8002e42:	4621      	mov	r1, r4
 8002e44:	4606      	mov	r6, r0
 8002e46:	4658      	mov	r0, fp
 8002e48:	f7fd faee 	bl	8000428 <__aeabi_fmul>
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7fd f9e0 	bl	8000214 <__aeabi_fsub>
 8002e54:	9e02      	ldr	r6, [sp, #8]
 8002e56:	4629      	mov	r1, r5
 8002e58:	60b0      	str	r0, [r6, #8]
 8002e5a:	4658      	mov	r0, fp
 8002e5c:	f7fd fae4 	bl	8000428 <__aeabi_fmul>
 8002e60:	4621      	mov	r1, r4
 8002e62:	4605      	mov	r5, r0
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7fd fadf 	bl	8000428 <__aeabi_fmul>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f7fd f9d3 	bl	8000218 <__addsf3>
 8002e72:	9b01      	ldr	r3, [sp, #4]
 8002e74:	9d05      	ldr	r5, [sp, #20]
 8002e76:	461f      	mov	r7, r3
 8002e78:	9b06      	ldr	r3, [sp, #24]
 8002e7a:	9904      	ldr	r1, [sp, #16]
 8002e7c:	3b08      	subs	r3, #8
 8002e7e:	9306      	str	r3, [sp, #24]
 8002e80:	f105 0308 	add.w	r3, r5, #8
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	3708      	adds	r7, #8
 8002e88:	f101 0310 	add.w	r3, r1, #16
 8002e8c:	9701      	str	r7, [sp, #4]
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	9a00      	ldr	r2, [sp, #0]
 8002e92:	9c03      	ldr	r4, [sp, #12]
 8002e94:	f102 0308 	add.w	r3, r2, #8
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	f104 0318 	add.w	r3, r4, #24
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	f1a6 0308 	sub.w	r3, r6, #8
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ea8:	f10a 0a08 	add.w	sl, sl, #8
 8002eac:	3b01      	subs	r3, #1
 8002eae:	6070      	str	r0, [r6, #4]
 8002eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8002eb2:	f47f ae31 	bne.w	8002b18 <arm_cfft_radix8by4_f32+0x184>
 8002eb6:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002eb8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002eba:	00cb      	lsls	r3, r1, #3
 8002ebc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002ec0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002ec4:	9122      	str	r1, [sp, #136]	; 0x88
 8002ec6:	991d      	ldr	r1, [sp, #116]	; 0x74
 8002ec8:	4419      	add	r1, r3
 8002eca:	911d      	str	r1, [sp, #116]	; 0x74
 8002ecc:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002ece:	4419      	add	r1, r3
 8002ed0:	9121      	str	r1, [sp, #132]	; 0x84
 8002ed2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002ed4:	4419      	add	r1, r3
 8002ed6:	911f      	str	r1, [sp, #124]	; 0x7c
 8002ed8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8002eda:	4419      	add	r1, r3
 8002edc:	911e      	str	r1, [sp, #120]	; 0x78
 8002ede:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002ee0:	4419      	add	r1, r3
 8002ee2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ee4:	911c      	str	r1, [sp, #112]	; 0x70
 8002ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eea:	9320      	str	r3, [sp, #128]	; 0x80
 8002eec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8002eee:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8002ef0:	6834      	ldr	r4, [r6, #0]
 8002ef2:	683d      	ldr	r5, [r7, #0]
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f98e 	bl	8000218 <__addsf3>
 8002efc:	4629      	mov	r1, r5
 8002efe:	4681      	mov	r9, r0
 8002f00:	4620      	mov	r0, r4
 8002f02:	f7fd f987 	bl	8000214 <__aeabi_fsub>
 8002f06:	6874      	ldr	r4, [r6, #4]
 8002f08:	687d      	ldr	r5, [r7, #4]
 8002f0a:	4683      	mov	fp, r0
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	4620      	mov	r0, r4
 8002f10:	961d      	str	r6, [sp, #116]	; 0x74
 8002f12:	971e      	str	r7, [sp, #120]	; 0x78
 8002f14:	f7fd f980 	bl	8000218 <__addsf3>
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4680      	mov	r8, r0
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7fd f979 	bl	8000214 <__aeabi_fsub>
 8002f22:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002f24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002f26:	6867      	ldr	r7, [r4, #4]
 8002f28:	685e      	ldr	r6, [r3, #4]
 8002f2a:	4682      	mov	sl, r0
 8002f2c:	4639      	mov	r1, r7
 8002f2e:	4658      	mov	r0, fp
 8002f30:	f7fd f972 	bl	8000218 <__addsf3>
 8002f34:	4631      	mov	r1, r6
 8002f36:	f7fd f96d 	bl	8000214 <__aeabi_fsub>
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	941f      	str	r4, [sp, #124]	; 0x7c
 8002f3e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8002f40:	9000      	str	r0, [sp, #0]
 8002f42:	6824      	ldr	r4, [r4, #0]
 8002f44:	4629      	mov	r1, r5
 8002f46:	4650      	mov	r0, sl
 8002f48:	f7fd f964 	bl	8000214 <__aeabi_fsub>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	f7fd f963 	bl	8000218 <__addsf3>
 8002f52:	4629      	mov	r1, r5
 8002f54:	9001      	str	r0, [sp, #4]
 8002f56:	4648      	mov	r0, r9
 8002f58:	f7fd f95c 	bl	8000214 <__aeabi_fsub>
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	f7fd f959 	bl	8000214 <__aeabi_fsub>
 8002f62:	4639      	mov	r1, r7
 8002f64:	9002      	str	r0, [sp, #8]
 8002f66:	4640      	mov	r0, r8
 8002f68:	f7fd f954 	bl	8000214 <__aeabi_fsub>
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	f7fd f951 	bl	8000214 <__aeabi_fsub>
 8002f72:	4639      	mov	r1, r7
 8002f74:	9003      	str	r0, [sp, #12]
 8002f76:	4658      	mov	r0, fp
 8002f78:	f7fd f94c 	bl	8000214 <__aeabi_fsub>
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	f7fd f94b 	bl	8000218 <__addsf3>
 8002f82:	4629      	mov	r1, r5
 8002f84:	4606      	mov	r6, r0
 8002f86:	4650      	mov	r0, sl
 8002f88:	f7fd f946 	bl	8000218 <__addsf3>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	f7fd f941 	bl	8000214 <__aeabi_fsub>
 8002f92:	4629      	mov	r1, r5
 8002f94:	4682      	mov	sl, r0
 8002f96:	4648      	mov	r0, r9
 8002f98:	f7fd f93e 	bl	8000218 <__addsf3>
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	f7fd f93b 	bl	8000218 <__addsf3>
 8002fa2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002fa4:	6028      	str	r0, [r5, #0]
 8002fa6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8002fa8:	4640      	mov	r0, r8
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f7fd f934 	bl	8000218 <__addsf3>
 8002fb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002fb2:	6851      	ldr	r1, [r2, #4]
 8002fb4:	f7fd f930 	bl	8000218 <__addsf3>
 8002fb8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8002fba:	6068      	str	r0, [r5, #4]
 8002fbc:	6825      	ldr	r5, [r4, #0]
 8002fbe:	f8dd 9000 	ldr.w	r9, [sp]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4648      	mov	r0, r9
 8002fc6:	f7fd fa2f 	bl	8000428 <__aeabi_fmul>
 8002fca:	6864      	ldr	r4, [r4, #4]
 8002fcc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8002fd0:	4680      	mov	r8, r0
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4658      	mov	r0, fp
 8002fd6:	f7fd fa27 	bl	8000428 <__aeabi_fmul>
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4640      	mov	r0, r8
 8002fde:	f7fd f91b 	bl	8000218 <__addsf3>
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	6038      	str	r0, [r7, #0]
 8002fe6:	4658      	mov	r0, fp
 8002fe8:	f7fd fa1e 	bl	8000428 <__aeabi_fmul>
 8002fec:	4621      	mov	r1, r4
 8002fee:	4605      	mov	r5, r0
 8002ff0:	4648      	mov	r0, r9
 8002ff2:	f7fd fa19 	bl	8000428 <__aeabi_fmul>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f7fd f90b 	bl	8000214 <__aeabi_fsub>
 8002ffe:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6825      	ldr	r5, [r4, #0]
 8003004:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003008:	4629      	mov	r1, r5
 800300a:	4648      	mov	r0, r9
 800300c:	f7fd fa0c 	bl	8000428 <__aeabi_fmul>
 8003010:	6864      	ldr	r4, [r4, #4]
 8003012:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003016:	4607      	mov	r7, r0
 8003018:	4621      	mov	r1, r4
 800301a:	4640      	mov	r0, r8
 800301c:	f7fd fa04 	bl	8000428 <__aeabi_fmul>
 8003020:	4601      	mov	r1, r0
 8003022:	4638      	mov	r0, r7
 8003024:	f7fd f8f8 	bl	8000218 <__addsf3>
 8003028:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800302a:	4629      	mov	r1, r5
 800302c:	6038      	str	r0, [r7, #0]
 800302e:	4640      	mov	r0, r8
 8003030:	f7fd f9fa 	bl	8000428 <__aeabi_fmul>
 8003034:	4621      	mov	r1, r4
 8003036:	4605      	mov	r5, r0
 8003038:	4648      	mov	r0, r9
 800303a:	f7fd f9f5 	bl	8000428 <__aeabi_fmul>
 800303e:	4601      	mov	r1, r0
 8003040:	4628      	mov	r0, r5
 8003042:	f7fd f8e7 	bl	8000214 <__aeabi_fsub>
 8003046:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	680d      	ldr	r5, [r1, #0]
 800304c:	4630      	mov	r0, r6
 800304e:	684c      	ldr	r4, [r1, #4]
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd f9e9 	bl	8000428 <__aeabi_fmul>
 8003056:	4621      	mov	r1, r4
 8003058:	4607      	mov	r7, r0
 800305a:	4650      	mov	r0, sl
 800305c:	f7fd f9e4 	bl	8000428 <__aeabi_fmul>
 8003060:	4601      	mov	r1, r0
 8003062:	4638      	mov	r0, r7
 8003064:	f7fd f8d8 	bl	8000218 <__addsf3>
 8003068:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800306a:	4629      	mov	r1, r5
 800306c:	6038      	str	r0, [r7, #0]
 800306e:	4650      	mov	r0, sl
 8003070:	f7fd f9da 	bl	8000428 <__aeabi_fmul>
 8003074:	4621      	mov	r1, r4
 8003076:	4605      	mov	r5, r0
 8003078:	4630      	mov	r0, r6
 800307a:	f7fd f9d5 	bl	8000428 <__aeabi_fmul>
 800307e:	4601      	mov	r1, r0
 8003080:	4628      	mov	r0, r5
 8003082:	f7fd f8c7 	bl	8000214 <__aeabi_fsub>
 8003086:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 800308a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6872      	ldr	r2, [r6, #4]
 8003090:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003092:	4621      	mov	r1, r4
 8003094:	2304      	movs	r3, #4
 8003096:	f000 f893 	bl	80031c0 <arm_radix8_butterfly_f32>
 800309a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800309c:	4621      	mov	r1, r4
 800309e:	6872      	ldr	r2, [r6, #4]
 80030a0:	2304      	movs	r3, #4
 80030a2:	f000 f88d 	bl	80031c0 <arm_radix8_butterfly_f32>
 80030a6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80030a8:	4621      	mov	r1, r4
 80030aa:	6872      	ldr	r2, [r6, #4]
 80030ac:	2304      	movs	r3, #4
 80030ae:	f000 f887 	bl	80031c0 <arm_radix8_butterfly_f32>
 80030b2:	4621      	mov	r1, r4
 80030b4:	6872      	ldr	r2, [r6, #4]
 80030b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80030b8:	2304      	movs	r3, #4
 80030ba:	b027      	add	sp, #156	; 0x9c
 80030bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c0:	f000 b87e 	b.w	80031c0 <arm_radix8_butterfly_f32>

080030c4 <arm_cfft_f32>:
 80030c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c8:	2a01      	cmp	r2, #1
 80030ca:	4606      	mov	r6, r0
 80030cc:	4617      	mov	r7, r2
 80030ce:	460c      	mov	r4, r1
 80030d0:	4698      	mov	r8, r3
 80030d2:	8805      	ldrh	r5, [r0, #0]
 80030d4:	d058      	beq.n	8003188 <arm_cfft_f32+0xc4>
 80030d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80030da:	d050      	beq.n	800317e <arm_cfft_f32+0xba>
 80030dc:	d916      	bls.n	800310c <arm_cfft_f32+0x48>
 80030de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80030e2:	d01a      	beq.n	800311a <arm_cfft_f32+0x56>
 80030e4:	d960      	bls.n	80031a8 <arm_cfft_f32+0xe4>
 80030e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80030ea:	d048      	beq.n	800317e <arm_cfft_f32+0xba>
 80030ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80030f0:	d105      	bne.n	80030fe <arm_cfft_f32+0x3a>
 80030f2:	2301      	movs	r3, #1
 80030f4:	6872      	ldr	r2, [r6, #4]
 80030f6:	4629      	mov	r1, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 f861 	bl	80031c0 <arm_radix8_butterfly_f32>
 80030fe:	f1b8 0f00 	cmp.w	r8, #0
 8003102:	d111      	bne.n	8003128 <arm_cfft_f32+0x64>
 8003104:	2f01      	cmp	r7, #1
 8003106:	d016      	beq.n	8003136 <arm_cfft_f32+0x72>
 8003108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800310c:	2d20      	cmp	r5, #32
 800310e:	d036      	beq.n	800317e <arm_cfft_f32+0xba>
 8003110:	d94e      	bls.n	80031b0 <arm_cfft_f32+0xec>
 8003112:	2d40      	cmp	r5, #64	; 0x40
 8003114:	d0ed      	beq.n	80030f2 <arm_cfft_f32+0x2e>
 8003116:	2d80      	cmp	r5, #128	; 0x80
 8003118:	d1f1      	bne.n	80030fe <arm_cfft_f32+0x3a>
 800311a:	4621      	mov	r1, r4
 800311c:	4630      	mov	r0, r6
 800311e:	f7ff fae5 	bl	80026ec <arm_cfft_radix8by2_f32>
 8003122:	f1b8 0f00 	cmp.w	r8, #0
 8003126:	d0ed      	beq.n	8003104 <arm_cfft_f32+0x40>
 8003128:	68b2      	ldr	r2, [r6, #8]
 800312a:	89b1      	ldrh	r1, [r6, #12]
 800312c:	4620      	mov	r0, r4
 800312e:	f7fd f80d 	bl	800014c <arm_bitreversal_32>
 8003132:	2f01      	cmp	r7, #1
 8003134:	d1e8      	bne.n	8003108 <arm_cfft_f32+0x44>
 8003136:	4628      	mov	r0, r5
 8003138:	f7fd f91e 	bl	8000378 <__aeabi_ui2f>
 800313c:	4601      	mov	r1, r0
 800313e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003142:	f7fd fa25 	bl	8000590 <__aeabi_fdiv>
 8003146:	4607      	mov	r7, r0
 8003148:	2d00      	cmp	r5, #0
 800314a:	d0dd      	beq.n	8003108 <arm_cfft_f32+0x44>
 800314c:	3408      	adds	r4, #8
 800314e:	2600      	movs	r6, #0
 8003150:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003154:	4639      	mov	r1, r7
 8003156:	f7fd f967 	bl	8000428 <__aeabi_fmul>
 800315a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800315e:	f844 0c08 	str.w	r0, [r4, #-8]
 8003162:	4639      	mov	r1, r7
 8003164:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8003168:	f7fd f95e 	bl	8000428 <__aeabi_fmul>
 800316c:	3601      	adds	r6, #1
 800316e:	42b5      	cmp	r5, r6
 8003170:	f844 0c04 	str.w	r0, [r4, #-4]
 8003174:	f104 0408 	add.w	r4, r4, #8
 8003178:	d1ea      	bne.n	8003150 <arm_cfft_f32+0x8c>
 800317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317e:	4621      	mov	r1, r4
 8003180:	4630      	mov	r0, r6
 8003182:	f7ff fc07 	bl	8002994 <arm_cfft_radix8by4_f32>
 8003186:	e7ba      	b.n	80030fe <arm_cfft_f32+0x3a>
 8003188:	b1ad      	cbz	r5, 80031b6 <arm_cfft_f32+0xf2>
 800318a:	f101 030c 	add.w	r3, r1, #12
 800318e:	2100      	movs	r1, #0
 8003190:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8003194:	3101      	adds	r1, #1
 8003196:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800319a:	428d      	cmp	r5, r1
 800319c:	f843 2c08 	str.w	r2, [r3, #-8]
 80031a0:	f103 0308 	add.w	r3, r3, #8
 80031a4:	d1f4      	bne.n	8003190 <arm_cfft_f32+0xcc>
 80031a6:	e796      	b.n	80030d6 <arm_cfft_f32+0x12>
 80031a8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80031ac:	d0a1      	beq.n	80030f2 <arm_cfft_f32+0x2e>
 80031ae:	e7a6      	b.n	80030fe <arm_cfft_f32+0x3a>
 80031b0:	2d10      	cmp	r5, #16
 80031b2:	d0b2      	beq.n	800311a <arm_cfft_f32+0x56>
 80031b4:	e7a3      	b.n	80030fe <arm_cfft_f32+0x3a>
 80031b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80031ba:	d890      	bhi.n	80030de <arm_cfft_f32+0x1a>
 80031bc:	e7a6      	b.n	800310c <arm_cfft_f32+0x48>
 80031be:	bf00      	nop

080031c0 <arm_radix8_butterfly_f32>:
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	b0b9      	sub	sp, #228	; 0xe4
 80031c6:	9314      	str	r3, [sp, #80]	; 0x50
 80031c8:	4605      	mov	r5, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	9118      	str	r1, [sp, #96]	; 0x60
 80031ce:	902b      	str	r0, [sp, #172]	; 0xac
 80031d0:	9237      	str	r2, [sp, #220]	; 0xdc
 80031d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80031d4:	08db      	lsrs	r3, r3, #3
 80031d6:	00d9      	lsls	r1, r3, #3
 80031d8:	460e      	mov	r6, r1
 80031da:	9116      	str	r1, [sp, #88]	; 0x58
 80031dc:	4629      	mov	r1, r5
 80031de:	461f      	mov	r7, r3
 80031e0:	4431      	add	r1, r6
 80031e2:	9112      	str	r1, [sp, #72]	; 0x48
 80031e4:	005a      	lsls	r2, r3, #1
 80031e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80031e8:	9215      	str	r2, [sp, #84]	; 0x54
 80031ea:	441a      	add	r2, r3
 80031ec:	1986      	adds	r6, r0, r6
 80031ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80031f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80031f4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80031f8:	960a      	str	r6, [sp, #40]	; 0x28
 80031fa:	1d16      	adds	r6, r2, #4
 80031fc:	46b3      	mov	fp, r6
 80031fe:	ebc7 7147 	rsb	r1, r7, r7, lsl #29
 8003202:	eb03 0447 	add.w	r4, r3, r7, lsl #1
 8003206:	00c9      	lsls	r1, r1, #3
 8003208:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800320c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	9103      	str	r1, [sp, #12]
 8003212:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003216:	9202      	str	r2, [sp, #8]
 8003218:	9c03      	ldr	r4, [sp, #12]
 800321a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800321c:	eba7 0087 	sub.w	r0, r7, r7, lsl #2
 8003220:	4422      	add	r2, r4
 8003222:	ebc7 7107 	rsb	r1, r7, r7, lsl #28
 8003226:	9213      	str	r2, [sp, #76]	; 0x4c
 8003228:	00c2      	lsls	r2, r0, #3
 800322a:	9204      	str	r2, [sp, #16]
 800322c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800322e:	010a      	lsls	r2, r1, #4
 8003230:	9507      	str	r5, [sp, #28]
 8003232:	9206      	str	r2, [sp, #24]
 8003234:	013a      	lsls	r2, r7, #4
 8003236:	9205      	str	r2, [sp, #20]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	2200      	movs	r2, #0
 800323c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003240:	9330      	str	r3, [sp, #192]	; 0xc0
 8003242:	9201      	str	r2, [sp, #4]
 8003244:	9311      	str	r3, [sp, #68]	; 0x44
 8003246:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8003248:	9f01      	ldr	r7, [sp, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	9b04      	ldr	r3, [sp, #16]
 800324e:	f852 5037 	ldr.w	r5, [r2, r7, lsl #3]
 8003252:	f85a 6003 	ldr.w	r6, [sl, r3]
 8003256:	4628      	mov	r0, r5
 8003258:	4631      	mov	r1, r6
 800325a:	f7fc ffdd 	bl	8000218 <__addsf3>
 800325e:	4631      	mov	r1, r6
 8003260:	4604      	mov	r4, r0
 8003262:	4628      	mov	r0, r5
 8003264:	f7fc ffd6 	bl	8000214 <__aeabi_fsub>
 8003268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800326a:	9b02      	ldr	r3, [sp, #8]
 800326c:	4611      	mov	r1, r2
 800326e:	9701      	str	r7, [sp, #4]
 8003270:	f851 6037 	ldr.w	r6, [r1, r7, lsl #3]
 8003274:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8003278:	9009      	str	r0, [sp, #36]	; 0x24
 800327a:	4639      	mov	r1, r7
 800327c:	4630      	mov	r0, r6
 800327e:	f7fc ffcb 	bl	8000218 <__addsf3>
 8003282:	4639      	mov	r1, r7
 8003284:	4605      	mov	r5, r0
 8003286:	4630      	mov	r0, r6
 8003288:	f7fc ffc4 	bl	8000214 <__aeabi_fsub>
 800328c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800328e:	9f03      	ldr	r7, [sp, #12]
 8003290:	468e      	mov	lr, r1
 8003292:	9901      	ldr	r1, [sp, #4]
 8003294:	f85a 8007 	ldr.w	r8, [sl, r7]
 8003298:	f85e 6031 	ldr.w	r6, [lr, r1, lsl #3]
 800329c:	900b      	str	r0, [sp, #44]	; 0x2c
 800329e:	4641      	mov	r1, r8
 80032a0:	4630      	mov	r0, r6
 80032a2:	f7fc ffb9 	bl	8000218 <__addsf3>
 80032a6:	4641      	mov	r1, r8
 80032a8:	4607      	mov	r7, r0
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fc ffb2 	bl	8000214 <__aeabi_fsub>
 80032b0:	f85b 8c04 	ldr.w	r8, [fp, #-4]
 80032b4:	f8da 9000 	ldr.w	r9, [sl]
 80032b8:	900c      	str	r0, [sp, #48]	; 0x30
 80032ba:	4649      	mov	r1, r9
 80032bc:	4640      	mov	r0, r8
 80032be:	f7fc ffab 	bl	8000218 <__addsf3>
 80032c2:	4649      	mov	r1, r9
 80032c4:	4606      	mov	r6, r0
 80032c6:	4640      	mov	r0, r8
 80032c8:	f7fc ffa4 	bl	8000214 <__aeabi_fsub>
 80032cc:	4639      	mov	r1, r7
 80032ce:	900d      	str	r0, [sp, #52]	; 0x34
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7fc ff9f 	bl	8000214 <__aeabi_fsub>
 80032d6:	4639      	mov	r1, r7
 80032d8:	900e      	str	r0, [sp, #56]	; 0x38
 80032da:	4620      	mov	r0, r4
 80032dc:	f7fc ff9c 	bl	8000218 <__addsf3>
 80032e0:	4631      	mov	r1, r6
 80032e2:	4604      	mov	r4, r0
 80032e4:	4628      	mov	r0, r5
 80032e6:	f7fc ff95 	bl	8000214 <__aeabi_fsub>
 80032ea:	4631      	mov	r1, r6
 80032ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80032ee:	4628      	mov	r0, r5
 80032f0:	f7fc ff92 	bl	8000218 <__addsf3>
 80032f4:	4605      	mov	r5, r0
 80032f6:	4601      	mov	r1, r0
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7fc ff8d 	bl	8000218 <__addsf3>
 80032fe:	9b01      	ldr	r3, [sp, #4]
 8003300:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8003302:	4629      	mov	r1, r5
 8003304:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8003308:	4620      	mov	r0, r4
 800330a:	f7fc ff83 	bl	8000214 <__aeabi_fsub>
 800330e:	9d04      	ldr	r5, [sp, #16]
 8003310:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003312:	f84a 0005 	str.w	r0, [sl, r5]
 8003316:	f85b 4005 	ldr.w	r4, [fp, r5]
 800331a:	f85b 5031 	ldr.w	r5, [fp, r1, lsl #3]
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fc ff79 	bl	8000218 <__addsf3>
 8003326:	4629      	mov	r1, r5
 8003328:	4607      	mov	r7, r0
 800332a:	4620      	mov	r0, r4
 800332c:	f7fc ff72 	bl	8000214 <__aeabi_fsub>
 8003330:	9e05      	ldr	r6, [sp, #20]
 8003332:	9c06      	ldr	r4, [sp, #24]
 8003334:	f85b 5006 	ldr.w	r5, [fp, r6]
 8003338:	f85b 4004 	ldr.w	r4, [fp, r4]
 800333c:	4629      	mov	r1, r5
 800333e:	9010      	str	r0, [sp, #64]	; 0x40
 8003340:	4620      	mov	r0, r4
 8003342:	f7fc ff69 	bl	8000218 <__addsf3>
 8003346:	4629      	mov	r1, r5
 8003348:	4681      	mov	r9, r0
 800334a:	4620      	mov	r0, r4
 800334c:	f7fc ff62 	bl	8000214 <__aeabi_fsub>
 8003350:	9a02      	ldr	r2, [sp, #8]
 8003352:	9e03      	ldr	r6, [sp, #12]
 8003354:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003356:	f85b 5006 	ldr.w	r5, [fp, r6]
 800335a:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
 800335e:	4604      	mov	r4, r0
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	f7fc ff58 	bl	8000218 <__addsf3>
 8003368:	4631      	mov	r1, r6
 800336a:	4680      	mov	r8, r0
 800336c:	4628      	mov	r0, r5
 800336e:	f7fc ff51 	bl	8000214 <__aeabi_fsub>
 8003372:	9e06      	ldr	r6, [sp, #24]
 8003374:	9d02      	ldr	r5, [sp, #8]
 8003376:	9007      	str	r0, [sp, #28]
 8003378:	59ad      	ldr	r5, [r5, r6]
 800337a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800337e:	4628      	mov	r0, r5
 8003380:	4631      	mov	r1, r6
 8003382:	f7fc ff49 	bl	8000218 <__addsf3>
 8003386:	4631      	mov	r1, r6
 8003388:	9008      	str	r0, [sp, #32]
 800338a:	4628      	mov	r0, r5
 800338c:	f7fc ff42 	bl	8000214 <__aeabi_fsub>
 8003390:	4641      	mov	r1, r8
 8003392:	4606      	mov	r6, r0
 8003394:	4638      	mov	r0, r7
 8003396:	f7fc ff3d 	bl	8000214 <__aeabi_fsub>
 800339a:	4641      	mov	r1, r8
 800339c:	4605      	mov	r5, r0
 800339e:	4638      	mov	r0, r7
 80033a0:	f7fc ff3a 	bl	8000218 <__addsf3>
 80033a4:	9908      	ldr	r1, [sp, #32]
 80033a6:	4680      	mov	r8, r0
 80033a8:	4648      	mov	r0, r9
 80033aa:	f7fc ff33 	bl	8000214 <__aeabi_fsub>
 80033ae:	9908      	ldr	r1, [sp, #32]
 80033b0:	4607      	mov	r7, r0
 80033b2:	4648      	mov	r0, r9
 80033b4:	f7fc ff30 	bl	8000218 <__addsf3>
 80033b8:	4681      	mov	r9, r0
 80033ba:	4601      	mov	r1, r0
 80033bc:	4640      	mov	r0, r8
 80033be:	f7fc ff2b 	bl	8000218 <__addsf3>
 80033c2:	9a04      	ldr	r2, [sp, #16]
 80033c4:	4649      	mov	r1, r9
 80033c6:	f84b 0002 	str.w	r0, [fp, r2]
 80033ca:	4640      	mov	r0, r8
 80033cc:	f7fc ff22 	bl	8000214 <__aeabi_fsub>
 80033d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80033d2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80033d6:	f84b 0032 	str.w	r0, [fp, r2, lsl #3]
 80033da:	4639      	mov	r1, r7
 80033dc:	4640      	mov	r0, r8
 80033de:	f7fc ff1b 	bl	8000218 <__addsf3>
 80033e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033e4:	9a01      	ldr	r2, [sp, #4]
 80033e6:	469e      	mov	lr, r3
 80033e8:	4639      	mov	r1, r7
 80033ea:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7fc ff10 	bl	8000214 <__aeabi_fsub>
 80033f4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80033f8:	9f03      	ldr	r7, [sp, #12]
 80033fa:	4641      	mov	r1, r8
 80033fc:	f84a 0007 	str.w	r0, [sl, r7]
 8003400:	4628      	mov	r0, r5
 8003402:	f7fc ff07 	bl	8000214 <__aeabi_fsub>
 8003406:	9f03      	ldr	r7, [sp, #12]
 8003408:	4629      	mov	r1, r5
 800340a:	f84b 0007 	str.w	r0, [fp, r7]
 800340e:	4640      	mov	r0, r8
 8003410:	f7fc ff02 	bl	8000218 <__addsf3>
 8003414:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003418:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800341c:	9f02      	ldr	r7, [sp, #8]
 800341e:	4629      	mov	r1, r5
 8003420:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8003424:	4640      	mov	r0, r8
 8003426:	f7fc fef5 	bl	8000214 <__aeabi_fsub>
 800342a:	4986      	ldr	r1, [pc, #536]	; (8003644 <arm_radix8_butterfly_f32+0x484>)
 800342c:	f7fc fffc 	bl	8000428 <__aeabi_fmul>
 8003430:	4629      	mov	r1, r5
 8003432:	4681      	mov	r9, r0
 8003434:	4640      	mov	r0, r8
 8003436:	f7fc feef 	bl	8000218 <__addsf3>
 800343a:	4982      	ldr	r1, [pc, #520]	; (8003644 <arm_radix8_butterfly_f32+0x484>)
 800343c:	f7fc fff4 	bl	8000428 <__aeabi_fmul>
 8003440:	4631      	mov	r1, r6
 8003442:	4605      	mov	r5, r0
 8003444:	4620      	mov	r0, r4
 8003446:	f7fc fee5 	bl	8000214 <__aeabi_fsub>
 800344a:	497e      	ldr	r1, [pc, #504]	; (8003644 <arm_radix8_butterfly_f32+0x484>)
 800344c:	f7fc ffec 	bl	8000428 <__aeabi_fmul>
 8003450:	4631      	mov	r1, r6
 8003452:	4607      	mov	r7, r0
 8003454:	4620      	mov	r0, r4
 8003456:	f7fc fedf 	bl	8000218 <__addsf3>
 800345a:	497a      	ldr	r1, [pc, #488]	; (8003644 <arm_radix8_butterfly_f32+0x484>)
 800345c:	f7fc ffe4 	bl	8000428 <__aeabi_fmul>
 8003460:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003462:	4649      	mov	r1, r9
 8003464:	9008      	str	r0, [sp, #32]
 8003466:	4620      	mov	r0, r4
 8003468:	f7fc fed4 	bl	8000214 <__aeabi_fsub>
 800346c:	4649      	mov	r1, r9
 800346e:	4680      	mov	r8, r0
 8003470:	4620      	mov	r0, r4
 8003472:	f7fc fed1 	bl	8000218 <__addsf3>
 8003476:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800347a:	4629      	mov	r1, r5
 800347c:	9009      	str	r0, [sp, #36]	; 0x24
 800347e:	4648      	mov	r0, r9
 8003480:	f7fc fec8 	bl	8000214 <__aeabi_fsub>
 8003484:	4629      	mov	r1, r5
 8003486:	4604      	mov	r4, r0
 8003488:	4648      	mov	r0, r9
 800348a:	f7fc fec5 	bl	8000218 <__addsf3>
 800348e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003492:	4606      	mov	r6, r0
 8003494:	4639      	mov	r1, r7
 8003496:	4648      	mov	r0, r9
 8003498:	f7fc febc 	bl	8000214 <__aeabi_fsub>
 800349c:	4639      	mov	r1, r7
 800349e:	4605      	mov	r5, r0
 80034a0:	4648      	mov	r0, r9
 80034a2:	f7fc feb9 	bl	8000218 <__addsf3>
 80034a6:	9908      	ldr	r1, [sp, #32]
 80034a8:	4607      	mov	r7, r0
 80034aa:	9807      	ldr	r0, [sp, #28]
 80034ac:	f7fc feb2 	bl	8000214 <__aeabi_fsub>
 80034b0:	9908      	ldr	r1, [sp, #32]
 80034b2:	4681      	mov	r9, r0
 80034b4:	9807      	ldr	r0, [sp, #28]
 80034b6:	f7fc feaf 	bl	8000218 <__addsf3>
 80034ba:	4601      	mov	r1, r0
 80034bc:	9007      	str	r0, [sp, #28]
 80034be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034c0:	f7fc feaa 	bl	8000218 <__addsf3>
 80034c4:	9a07      	ldr	r2, [sp, #28]
 80034c6:	9b01      	ldr	r3, [sp, #4]
 80034c8:	4611      	mov	r1, r2
 80034ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80034cc:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
 80034d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034d2:	f7fc fe9f 	bl	8000214 <__aeabi_fsub>
 80034d6:	4649      	mov	r1, r9
 80034d8:	f8ca 0000 	str.w	r0, [sl]
 80034dc:	4640      	mov	r0, r8
 80034de:	f7fc fe9b 	bl	8000218 <__addsf3>
 80034e2:	9a02      	ldr	r2, [sp, #8]
 80034e4:	4649      	mov	r1, r9
 80034e6:	f842 0c04 	str.w	r0, [r2, #-4]
 80034ea:	4640      	mov	r0, r8
 80034ec:	f7fc fe92 	bl	8000214 <__aeabi_fsub>
 80034f0:	4631      	mov	r1, r6
 80034f2:	f84b 0c04 	str.w	r0, [fp, #-4]
 80034f6:	4638      	mov	r0, r7
 80034f8:	f7fc fe8c 	bl	8000214 <__aeabi_fsub>
 80034fc:	4639      	mov	r1, r7
 80034fe:	9f06      	ldr	r7, [sp, #24]
 8003500:	f84b 0007 	str.w	r0, [fp, r7]
 8003504:	4630      	mov	r0, r6
 8003506:	f7fc fe87 	bl	8000218 <__addsf3>
 800350a:	4621      	mov	r1, r4
 800350c:	f8ca 0004 	str.w	r0, [sl, #4]
 8003510:	4628      	mov	r0, r5
 8003512:	f7fc fe7f 	bl	8000214 <__aeabi_fsub>
 8003516:	4629      	mov	r1, r5
 8003518:	9d05      	ldr	r5, [sp, #20]
 800351a:	f84b 0005 	str.w	r0, [fp, r5]
 800351e:	4620      	mov	r0, r4
 8003520:	f7fc fe7a 	bl	8000218 <__addsf3>
 8003524:	9b01      	ldr	r3, [sp, #4]
 8003526:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003528:	9a02      	ldr	r2, [sp, #8]
 800352a:	440b      	add	r3, r1
 800352c:	461c      	mov	r4, r3
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	9f06      	ldr	r7, [sp, #24]
 8003532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003534:	51d0      	str	r0, [r2, r7]
 8003536:	441a      	add	r2, r3
 8003538:	9202      	str	r2, [sp, #8]
 800353a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800353c:	449a      	add	sl, r3
 800353e:	4611      	mov	r1, r2
 8003540:	42a1      	cmp	r1, r4
 8003542:	449b      	add	fp, r3
 8003544:	f63f ae7e 	bhi.w	8003244 <arm_radix8_butterfly_f32+0x84>
 8003548:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800354a:	2c07      	cmp	r4, #7
 800354c:	f240 830b 	bls.w	8003b66 <arm_radix8_butterfly_f32+0x9a6>
 8003550:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003552:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4618      	mov	r0, r3
 800355a:	460a      	mov	r2, r1
 800355c:	9336      	str	r3, [sp, #216]	; 0xd8
 800355e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8003560:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8003564:	4403      	add	r3, r0
 8003566:	187d      	adds	r5, r7, r1
 8003568:	1818      	adds	r0, r3, r0
 800356a:	902e      	str	r0, [sp, #184]	; 0xb8
 800356c:	9026      	str	r0, [sp, #152]	; 0x98
 800356e:	1868      	adds	r0, r5, r1
 8003570:	1841      	adds	r1, r0, r1
 8003572:	eb01 0c02 	add.w	ip, r1, r2
 8003576:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003578:	00c9      	lsls	r1, r1, #3
 800357a:	4616      	mov	r6, r2
 800357c:	4426      	add	r6, r4
 800357e:	4632      	mov	r2, r6
 8003580:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8003582:	912f      	str	r1, [sp, #188]	; 0xbc
 8003584:	ebc4 0e06 	rsb	lr, r4, r6
 8003588:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 800358c:	4634      	mov	r4, r6
 800358e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8003590:	9634      	str	r6, [sp, #208]	; 0xd0
 8003592:	0116      	lsls	r6, r2, #4
 8003594:	9608      	str	r6, [sp, #32]
 8003596:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 800359a:	9607      	str	r6, [sp, #28]
 800359c:	190e      	adds	r6, r1, r4
 800359e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80035a0:	00c0      	lsls	r0, r0, #3
 80035a2:	00ed      	lsls	r5, r5, #3
 80035a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80035a6:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 80035aa:	9035      	str	r0, [sp, #212]	; 0xd4
 80035ac:	9624      	str	r6, [sp, #144]	; 0x90
 80035ae:	1808      	adds	r0, r1, r0
 80035b0:	190e      	adds	r6, r1, r4
 80035b2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80035b4:	9028      	str	r0, [sp, #160]	; 0xa0
 80035b6:	1948      	adds	r0, r1, r5
 80035b8:	962a      	str	r6, [sp, #168]	; 0xa8
 80035ba:	9029      	str	r0, [sp, #164]	; 0xa4
 80035bc:	4646      	mov	r6, r8
 80035be:	0110      	lsls	r0, r2, #4
 80035c0:	0162      	lsls	r2, r4, #5
 80035c2:	464c      	mov	r4, r9
 80035c4:	00ff      	lsls	r7, r7, #3
 80035c6:	4439      	add	r1, r7
 80035c8:	9204      	str	r2, [sp, #16]
 80035ca:	2201      	movs	r2, #1
 80035cc:	9733      	str	r7, [sp, #204]	; 0xcc
 80035ce:	9532      	str	r5, [sp, #200]	; 0xc8
 80035d0:	9031      	str	r0, [sp, #196]	; 0xc4
 80035d2:	9127      	str	r1, [sp, #156]	; 0x9c
 80035d4:	9225      	str	r2, [sp, #148]	; 0x94
 80035d6:	f104 0208 	add.w	r2, r4, #8
 80035da:	922d      	str	r2, [sp, #180]	; 0xb4
 80035dc:	9201      	str	r2, [sp, #4]
 80035de:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80035e0:	f106 0108 	add.w	r1, r6, #8
 80035e4:	920a      	str	r2, [sp, #40]	; 0x28
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80035ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035ee:	912c      	str	r1, [sp, #176]	; 0xb0
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	930e      	str	r3, [sp, #56]	; 0x38
 80035f4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80035fa:	9319      	str	r3, [sp, #100]	; 0x64
 80035fc:	680b      	ldr	r3, [r1, #0]
 80035fe:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003600:	931a      	str	r3, [sp, #104]	; 0x68
 8003602:	6803      	ldr	r3, [r0, #0]
 8003604:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8003606:	930c      	str	r3, [sp, #48]	; 0x30
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	931b      	str	r3, [sp, #108]	; 0x6c
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	921d      	str	r2, [sp, #116]	; 0x74
 8003612:	931c      	str	r3, [sp, #112]	; 0x70
 8003614:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003616:	684a      	ldr	r2, [r1, #4]
 8003618:	f8d3 e000 	ldr.w	lr, [r3]
 800361c:	921e      	str	r2, [sp, #120]	; 0x78
 800361e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8003622:	6842      	ldr	r2, [r0, #4]
 8003624:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003626:	921f      	str	r2, [sp, #124]	; 0x7c
 8003628:	686a      	ldr	r2, [r5, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	9220      	str	r2, [sp, #128]	; 0x80
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	9322      	str	r3, [sp, #136]	; 0x88
 8003632:	f104 030c 	add.w	r3, r4, #12
 8003636:	9221      	str	r2, [sp, #132]	; 0x84
 8003638:	9302      	str	r3, [sp, #8]
 800363a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800363c:	f106 030c 	add.w	r3, r6, #12
 8003640:	9306      	str	r3, [sp, #24]
 8003642:	e001      	b.n	8003648 <arm_radix8_butterfly_f32+0x488>
 8003644:	3f3504f3 	.word	0x3f3504f3
 8003648:	9b02      	ldr	r3, [sp, #8]
 800364a:	9f04      	ldr	r7, [sp, #16]
 800364c:	9216      	str	r2, [sp, #88]	; 0x58
 800364e:	9a01      	ldr	r2, [sp, #4]
 8003650:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8003654:	59d6      	ldr	r6, [r2, r7]
 8003656:	4628      	mov	r0, r5
 8003658:	4631      	mov	r1, r6
 800365a:	f7fc fddd 	bl	8000218 <__addsf3>
 800365e:	4631      	mov	r1, r6
 8003660:	4604      	mov	r4, r0
 8003662:	4628      	mov	r0, r5
 8003664:	f7fc fdd6 	bl	8000214 <__aeabi_fsub>
 8003668:	9d06      	ldr	r5, [sp, #24]
 800366a:	9903      	ldr	r1, [sp, #12]
 800366c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8003670:	9704      	str	r7, [sp, #16]
 8003672:	59cf      	ldr	r7, [r1, r7]
 8003674:	900f      	str	r0, [sp, #60]	; 0x3c
 8003676:	4639      	mov	r1, r7
 8003678:	4630      	mov	r0, r6
 800367a:	f7fc fdcd 	bl	8000218 <__addsf3>
 800367e:	4639      	mov	r1, r7
 8003680:	4605      	mov	r5, r0
 8003682:	4630      	mov	r0, r6
 8003684:	f7fc fdc6 	bl	8000214 <__aeabi_fsub>
 8003688:	9a01      	ldr	r2, [sp, #4]
 800368a:	9e05      	ldr	r6, [sp, #20]
 800368c:	9010      	str	r0, [sp, #64]	; 0x40
 800368e:	5997      	ldr	r7, [r2, r6]
 8003690:	4616      	mov	r6, r2
 8003692:	9a08      	ldr	r2, [sp, #32]
 8003694:	4638      	mov	r0, r7
 8003696:	f856 8002 	ldr.w	r8, [r6, r2]
 800369a:	4641      	mov	r1, r8
 800369c:	f7fc fdbc 	bl	8000218 <__addsf3>
 80036a0:	4641      	mov	r1, r8
 80036a2:	4606      	mov	r6, r0
 80036a4:	4638      	mov	r0, r7
 80036a6:	f7fc fdb5 	bl	8000214 <__aeabi_fsub>
 80036aa:	9903      	ldr	r1, [sp, #12]
 80036ac:	9a01      	ldr	r2, [sp, #4]
 80036ae:	468e      	mov	lr, r1
 80036b0:	9b07      	ldr	r3, [sp, #28]
 80036b2:	9905      	ldr	r1, [sp, #20]
 80036b4:	f852 9003 	ldr.w	r9, [r2, r3]
 80036b8:	f85e 8001 	ldr.w	r8, [lr, r1]
 80036bc:	9011      	str	r0, [sp, #68]	; 0x44
 80036be:	4649      	mov	r1, r9
 80036c0:	4640      	mov	r0, r8
 80036c2:	f7fc fda9 	bl	8000218 <__addsf3>
 80036c6:	4649      	mov	r1, r9
 80036c8:	4607      	mov	r7, r0
 80036ca:	4640      	mov	r0, r8
 80036cc:	f7fc fda2 	bl	8000214 <__aeabi_fsub>
 80036d0:	4631      	mov	r1, r6
 80036d2:	9012      	str	r0, [sp, #72]	; 0x48
 80036d4:	4620      	mov	r0, r4
 80036d6:	f7fc fd9d 	bl	8000214 <__aeabi_fsub>
 80036da:	4631      	mov	r1, r6
 80036dc:	4682      	mov	sl, r0
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fc fd9a 	bl	8000218 <__addsf3>
 80036e4:	4639      	mov	r1, r7
 80036e6:	4604      	mov	r4, r0
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7fc fd93 	bl	8000214 <__aeabi_fsub>
 80036ee:	4639      	mov	r1, r7
 80036f0:	4606      	mov	r6, r0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7fc fd90 	bl	8000218 <__addsf3>
 80036f8:	4605      	mov	r5, r0
 80036fa:	4601      	mov	r1, r0
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7fc fd8b 	bl	8000218 <__addsf3>
 8003702:	9f02      	ldr	r7, [sp, #8]
 8003704:	4629      	mov	r1, r5
 8003706:	f847 0c04 	str.w	r0, [r7, #-4]
 800370a:	4620      	mov	r0, r4
 800370c:	f7fc fd82 	bl	8000214 <__aeabi_fsub>
 8003710:	4639      	mov	r1, r7
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	9702      	str	r7, [sp, #8]
 8003716:	9f04      	ldr	r7, [sp, #16]
 8003718:	685c      	ldr	r4, [r3, #4]
 800371a:	59cf      	ldr	r7, [r1, r7]
 800371c:	4605      	mov	r5, r0
 800371e:	4639      	mov	r1, r7
 8003720:	4620      	mov	r0, r4
 8003722:	f7fc fd79 	bl	8000218 <__addsf3>
 8003726:	4639      	mov	r1, r7
 8003728:	4680      	mov	r8, r0
 800372a:	4620      	mov	r0, r4
 800372c:	f7fc fd72 	bl	8000214 <__aeabi_fsub>
 8003730:	9c03      	ldr	r4, [sp, #12]
 8003732:	9013      	str	r0, [sp, #76]	; 0x4c
 8003734:	6867      	ldr	r7, [r4, #4]
 8003736:	9c06      	ldr	r4, [sp, #24]
 8003738:	4638      	mov	r0, r7
 800373a:	46a6      	mov	lr, r4
 800373c:	9c04      	ldr	r4, [sp, #16]
 800373e:	f85e 9004 	ldr.w	r9, [lr, r4]
 8003742:	4649      	mov	r1, r9
 8003744:	f7fc fd68 	bl	8000218 <__addsf3>
 8003748:	4649      	mov	r1, r9
 800374a:	4604      	mov	r4, r0
 800374c:	4638      	mov	r0, r7
 800374e:	f7fc fd61 	bl	8000214 <__aeabi_fsub>
 8003752:	9b08      	ldr	r3, [sp, #32]
 8003754:	9902      	ldr	r1, [sp, #8]
 8003756:	9f05      	ldr	r7, [sp, #20]
 8003758:	f851 9003 	ldr.w	r9, [r1, r3]
 800375c:	59cf      	ldr	r7, [r1, r7]
 800375e:	9014      	str	r0, [sp, #80]	; 0x50
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	f7fc fd58 	bl	8000218 <__addsf3>
 8003768:	4649      	mov	r1, r9
 800376a:	4683      	mov	fp, r0
 800376c:	4638      	mov	r0, r7
 800376e:	f7fc fd51 	bl	8000214 <__aeabi_fsub>
 8003772:	9a07      	ldr	r2, [sp, #28]
 8003774:	9b06      	ldr	r3, [sp, #24]
 8003776:	9902      	ldr	r1, [sp, #8]
 8003778:	9f05      	ldr	r7, [sp, #20]
 800377a:	9009      	str	r0, [sp, #36]	; 0x24
 800377c:	59df      	ldr	r7, [r3, r7]
 800377e:	588b      	ldr	r3, [r1, r2]
 8003780:	4638      	mov	r0, r7
 8003782:	4619      	mov	r1, r3
 8003784:	9315      	str	r3, [sp, #84]	; 0x54
 8003786:	f7fc fd47 	bl	8000218 <__addsf3>
 800378a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800378c:	4681      	mov	r9, r0
 800378e:	4619      	mov	r1, r3
 8003790:	4638      	mov	r0, r7
 8003792:	f7fc fd3f 	bl	8000214 <__aeabi_fsub>
 8003796:	4659      	mov	r1, fp
 8003798:	9015      	str	r0, [sp, #84]	; 0x54
 800379a:	4640      	mov	r0, r8
 800379c:	f7fc fd3a 	bl	8000214 <__aeabi_fsub>
 80037a0:	4659      	mov	r1, fp
 80037a2:	4607      	mov	r7, r0
 80037a4:	4640      	mov	r0, r8
 80037a6:	f7fc fd37 	bl	8000218 <__addsf3>
 80037aa:	4649      	mov	r1, r9
 80037ac:	4680      	mov	r8, r0
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7fc fd30 	bl	8000214 <__aeabi_fsub>
 80037b4:	4649      	mov	r1, r9
 80037b6:	4683      	mov	fp, r0
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7fc fd2d 	bl	8000218 <__addsf3>
 80037be:	4659      	mov	r1, fp
 80037c0:	4681      	mov	r9, r0
 80037c2:	4650      	mov	r0, sl
 80037c4:	f7fc fd28 	bl	8000218 <__addsf3>
 80037c8:	4659      	mov	r1, fp
 80037ca:	4604      	mov	r4, r0
 80037cc:	4650      	mov	r0, sl
 80037ce:	f7fc fd21 	bl	8000214 <__aeabi_fsub>
 80037d2:	4649      	mov	r1, r9
 80037d4:	4682      	mov	sl, r0
 80037d6:	4640      	mov	r0, r8
 80037d8:	f7fc fd1e 	bl	8000218 <__addsf3>
 80037dc:	9a01      	ldr	r2, [sp, #4]
 80037de:	4649      	mov	r1, r9
 80037e0:	6050      	str	r0, [r2, #4]
 80037e2:	4640      	mov	r0, r8
 80037e4:	f7fc fd16 	bl	8000214 <__aeabi_fsub>
 80037e8:	4631      	mov	r1, r6
 80037ea:	4681      	mov	r9, r0
 80037ec:	4638      	mov	r0, r7
 80037ee:	f7fc fd11 	bl	8000214 <__aeabi_fsub>
 80037f2:	4639      	mov	r1, r7
 80037f4:	4680      	mov	r8, r0
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7fc fd0e 	bl	8000218 <__addsf3>
 80037fc:	4629      	mov	r1, r5
 80037fe:	4606      	mov	r6, r0
 8003800:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003802:	f7fc fe11 	bl	8000428 <__aeabi_fmul>
 8003806:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800380a:	4607      	mov	r7, r0
 800380c:	4649      	mov	r1, r9
 800380e:	4658      	mov	r0, fp
 8003810:	f7fc fe0a 	bl	8000428 <__aeabi_fmul>
 8003814:	4601      	mov	r1, r0
 8003816:	4638      	mov	r0, r7
 8003818:	f7fc fcfe 	bl	8000218 <__addsf3>
 800381c:	9b01      	ldr	r3, [sp, #4]
 800381e:	9a04      	ldr	r2, [sp, #16]
 8003820:	4649      	mov	r1, r9
 8003822:	5098      	str	r0, [r3, r2]
 8003824:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003826:	f7fc fdff 	bl	8000428 <__aeabi_fmul>
 800382a:	4629      	mov	r1, r5
 800382c:	4607      	mov	r7, r0
 800382e:	4658      	mov	r0, fp
 8003830:	f7fc fdfa 	bl	8000428 <__aeabi_fmul>
 8003834:	4601      	mov	r1, r0
 8003836:	4638      	mov	r0, r7
 8003838:	f7fc fcec 	bl	8000214 <__aeabi_fsub>
 800383c:	9f02      	ldr	r7, [sp, #8]
 800383e:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8003842:	9d04      	ldr	r5, [sp, #16]
 8003844:	4621      	mov	r1, r4
 8003846:	5178      	str	r0, [r7, r5]
 8003848:	4658      	mov	r0, fp
 800384a:	f7fc fded 	bl	8000428 <__aeabi_fmul>
 800384e:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8003852:	4605      	mov	r5, r0
 8003854:	4641      	mov	r1, r8
 8003856:	4648      	mov	r0, r9
 8003858:	f7fc fde6 	bl	8000428 <__aeabi_fmul>
 800385c:	4601      	mov	r1, r0
 800385e:	4628      	mov	r0, r5
 8003860:	f7fc fcda 	bl	8000218 <__addsf3>
 8003864:	9a05      	ldr	r2, [sp, #20]
 8003866:	9d01      	ldr	r5, [sp, #4]
 8003868:	4641      	mov	r1, r8
 800386a:	50a8      	str	r0, [r5, r2]
 800386c:	4658      	mov	r0, fp
 800386e:	f7fc fddb 	bl	8000428 <__aeabi_fmul>
 8003872:	4621      	mov	r1, r4
 8003874:	4605      	mov	r5, r0
 8003876:	4648      	mov	r0, r9
 8003878:	f7fc fdd6 	bl	8000428 <__aeabi_fmul>
 800387c:	4601      	mov	r1, r0
 800387e:	4628      	mov	r0, r5
 8003880:	f7fc fcc8 	bl	8000214 <__aeabi_fsub>
 8003884:	9c05      	ldr	r4, [sp, #20]
 8003886:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 800388a:	5138      	str	r0, [r7, r4]
 800388c:	4651      	mov	r1, sl
 800388e:	4658      	mov	r0, fp
 8003890:	f7fc fdca 	bl	8000428 <__aeabi_fmul>
 8003894:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8003898:	4604      	mov	r4, r0
 800389a:	4631      	mov	r1, r6
 800389c:	4648      	mov	r0, r9
 800389e:	f7fc fdc3 	bl	8000428 <__aeabi_fmul>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7fc fcb7 	bl	8000218 <__addsf3>
 80038aa:	463d      	mov	r5, r7
 80038ac:	9a01      	ldr	r2, [sp, #4]
 80038ae:	9f08      	ldr	r7, [sp, #32]
 80038b0:	4631      	mov	r1, r6
 80038b2:	51d0      	str	r0, [r2, r7]
 80038b4:	4658      	mov	r0, fp
 80038b6:	f7fc fdb7 	bl	8000428 <__aeabi_fmul>
 80038ba:	4651      	mov	r1, sl
 80038bc:	4604      	mov	r4, r0
 80038be:	4648      	mov	r0, r9
 80038c0:	f7fc fdb2 	bl	8000428 <__aeabi_fmul>
 80038c4:	4601      	mov	r1, r0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fc fca4 	bl	8000214 <__aeabi_fsub>
 80038cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80038d0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80038d4:	51e8      	str	r0, [r5, r7]
 80038d6:	4651      	mov	r1, sl
 80038d8:	4648      	mov	r0, r9
 80038da:	9502      	str	r5, [sp, #8]
 80038dc:	f7fc fc9a 	bl	8000214 <__aeabi_fsub>
 80038e0:	49a2      	ldr	r1, [pc, #648]	; (8003b6c <arm_radix8_butterfly_f32+0x9ac>)
 80038e2:	f7fc fda1 	bl	8000428 <__aeabi_fmul>
 80038e6:	4651      	mov	r1, sl
 80038e8:	4604      	mov	r4, r0
 80038ea:	4648      	mov	r0, r9
 80038ec:	f7fc fc94 	bl	8000218 <__addsf3>
 80038f0:	499e      	ldr	r1, [pc, #632]	; (8003b6c <arm_radix8_butterfly_f32+0x9ac>)
 80038f2:	f7fc fd99 	bl	8000428 <__aeabi_fmul>
 80038f6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80038fa:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 80038fe:	4607      	mov	r7, r0
 8003900:	4641      	mov	r1, r8
 8003902:	4650      	mov	r0, sl
 8003904:	f7fc fc86 	bl	8000214 <__aeabi_fsub>
 8003908:	4998      	ldr	r1, [pc, #608]	; (8003b6c <arm_radix8_butterfly_f32+0x9ac>)
 800390a:	f7fc fd8d 	bl	8000428 <__aeabi_fmul>
 800390e:	4641      	mov	r1, r8
 8003910:	4681      	mov	r9, r0
 8003912:	4650      	mov	r0, sl
 8003914:	f7fc fc80 	bl	8000218 <__addsf3>
 8003918:	4994      	ldr	r1, [pc, #592]	; (8003b6c <arm_radix8_butterfly_f32+0x9ac>)
 800391a:	f7fc fd85 	bl	8000428 <__aeabi_fmul>
 800391e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003920:	4605      	mov	r5, r0
 8003922:	4621      	mov	r1, r4
 8003924:	4630      	mov	r0, r6
 8003926:	f7fc fc75 	bl	8000214 <__aeabi_fsub>
 800392a:	4621      	mov	r1, r4
 800392c:	4682      	mov	sl, r0
 800392e:	4630      	mov	r0, r6
 8003930:	f7fc fc72 	bl	8000218 <__addsf3>
 8003934:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8003938:	4604      	mov	r4, r0
 800393a:	4639      	mov	r1, r7
 800393c:	4640      	mov	r0, r8
 800393e:	f7fc fc69 	bl	8000214 <__aeabi_fsub>
 8003942:	4639      	mov	r1, r7
 8003944:	4606      	mov	r6, r0
 8003946:	4640      	mov	r0, r8
 8003948:	f7fc fc66 	bl	8000218 <__addsf3>
 800394c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8003950:	4680      	mov	r8, r0
 8003952:	4649      	mov	r1, r9
 8003954:	4658      	mov	r0, fp
 8003956:	f7fc fc5d 	bl	8000214 <__aeabi_fsub>
 800395a:	4649      	mov	r1, r9
 800395c:	4607      	mov	r7, r0
 800395e:	4658      	mov	r0, fp
 8003960:	f7fc fc5a 	bl	8000218 <__addsf3>
 8003964:	4629      	mov	r1, r5
 8003966:	4681      	mov	r9, r0
 8003968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800396a:	f7fc fc53 	bl	8000214 <__aeabi_fsub>
 800396e:	4629      	mov	r1, r5
 8003970:	4683      	mov	fp, r0
 8003972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003974:	f7fc fc50 	bl	8000218 <__addsf3>
 8003978:	4601      	mov	r1, r0
 800397a:	9009      	str	r0, [sp, #36]	; 0x24
 800397c:	4620      	mov	r0, r4
 800397e:	f7fc fc4b 	bl	8000218 <__addsf3>
 8003982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003984:	4605      	mov	r5, r0
 8003986:	4619      	mov	r1, r3
 8003988:	4620      	mov	r0, r4
 800398a:	f7fc fc43 	bl	8000214 <__aeabi_fsub>
 800398e:	4659      	mov	r1, fp
 8003990:	4604      	mov	r4, r0
 8003992:	4650      	mov	r0, sl
 8003994:	f7fc fc40 	bl	8000218 <__addsf3>
 8003998:	4659      	mov	r1, fp
 800399a:	9009      	str	r0, [sp, #36]	; 0x24
 800399c:	4650      	mov	r0, sl
 800399e:	f7fc fc39 	bl	8000214 <__aeabi_fsub>
 80039a2:	4641      	mov	r1, r8
 80039a4:	4683      	mov	fp, r0
 80039a6:	4648      	mov	r0, r9
 80039a8:	f7fc fc34 	bl	8000214 <__aeabi_fsub>
 80039ac:	4649      	mov	r1, r9
 80039ae:	4682      	mov	sl, r0
 80039b0:	4640      	mov	r0, r8
 80039b2:	f7fc fc31 	bl	8000218 <__addsf3>
 80039b6:	4631      	mov	r1, r6
 80039b8:	4681      	mov	r9, r0
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7fc fc2a 	bl	8000214 <__aeabi_fsub>
 80039c0:	4639      	mov	r1, r7
 80039c2:	4680      	mov	r8, r0
 80039c4:	4630      	mov	r0, r6
 80039c6:	f7fc fc27 	bl	8000218 <__addsf3>
 80039ca:	4629      	mov	r1, r5
 80039cc:	4606      	mov	r6, r0
 80039ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039d0:	f7fc fd2a 	bl	8000428 <__aeabi_fmul>
 80039d4:	4651      	mov	r1, sl
 80039d6:	4607      	mov	r7, r0
 80039d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80039da:	f7fc fd25 	bl	8000428 <__aeabi_fmul>
 80039de:	4601      	mov	r1, r0
 80039e0:	4638      	mov	r0, r7
 80039e2:	f7fc fc19 	bl	8000218 <__addsf3>
 80039e6:	9b06      	ldr	r3, [sp, #24]
 80039e8:	4651      	mov	r1, sl
 80039ea:	f843 0c04 	str.w	r0, [r3, #-4]
 80039ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039f0:	f7fc fd1a 	bl	8000428 <__aeabi_fmul>
 80039f4:	4629      	mov	r1, r5
 80039f6:	4607      	mov	r7, r0
 80039f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80039fa:	f7fc fd15 	bl	8000428 <__aeabi_fmul>
 80039fe:	4601      	mov	r1, r0
 8003a00:	4638      	mov	r0, r7
 8003a02:	f7fc fc07 	bl	8000214 <__aeabi_fsub>
 8003a06:	9f03      	ldr	r7, [sp, #12]
 8003a08:	4621      	mov	r1, r4
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a0e:	f7fc fd0b 	bl	8000428 <__aeabi_fmul>
 8003a12:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8003a16:	4605      	mov	r5, r0
 8003a18:	4649      	mov	r1, r9
 8003a1a:	4650      	mov	r0, sl
 8003a1c:	f7fc fd04 	bl	8000428 <__aeabi_fmul>
 8003a20:	4601      	mov	r1, r0
 8003a22:	4628      	mov	r0, r5
 8003a24:	f7fc fbf8 	bl	8000218 <__addsf3>
 8003a28:	9a07      	ldr	r2, [sp, #28]
 8003a2a:	9f01      	ldr	r7, [sp, #4]
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	50b8      	str	r0, [r7, r2]
 8003a30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a32:	f7fc fcf9 	bl	8000428 <__aeabi_fmul>
 8003a36:	4621      	mov	r1, r4
 8003a38:	4605      	mov	r5, r0
 8003a3a:	4650      	mov	r0, sl
 8003a3c:	f7fc fcf4 	bl	8000428 <__aeabi_fmul>
 8003a40:	4601      	mov	r1, r0
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7fc fbe6 	bl	8000214 <__aeabi_fsub>
 8003a48:	9a07      	ldr	r2, [sp, #28]
 8003a4a:	9d02      	ldr	r5, [sp, #8]
 8003a4c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8003a50:	50a8      	str	r0, [r5, r2]
 8003a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a54:	4650      	mov	r0, sl
 8003a56:	f7fc fce7 	bl	8000428 <__aeabi_fmul>
 8003a5a:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8003a5e:	4604      	mov	r4, r0
 8003a60:	4641      	mov	r1, r8
 8003a62:	4648      	mov	r0, r9
 8003a64:	f7fc fce0 	bl	8000428 <__aeabi_fmul>
 8003a68:	4601      	mov	r1, r0
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7fc fbd4 	bl	8000218 <__addsf3>
 8003a70:	9a03      	ldr	r2, [sp, #12]
 8003a72:	9b04      	ldr	r3, [sp, #16]
 8003a74:	4641      	mov	r1, r8
 8003a76:	50d0      	str	r0, [r2, r3]
 8003a78:	4650      	mov	r0, sl
 8003a7a:	f7fc fcd5 	bl	8000428 <__aeabi_fmul>
 8003a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a80:	4604      	mov	r4, r0
 8003a82:	4648      	mov	r0, r9
 8003a84:	f7fc fcd0 	bl	8000428 <__aeabi_fmul>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fc fbc2 	bl	8000214 <__aeabi_fsub>
 8003a90:	9a06      	ldr	r2, [sp, #24]
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8003a98:	50d0      	str	r0, [r2, r3]
 8003a9a:	4659      	mov	r1, fp
 8003a9c:	4648      	mov	r0, r9
 8003a9e:	f7fc fcc3 	bl	8000428 <__aeabi_fmul>
 8003aa2:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	4640      	mov	r0, r8
 8003aac:	f7fc fcbc 	bl	8000428 <__aeabi_fmul>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7fc fbb0 	bl	8000218 <__addsf3>
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	4631      	mov	r1, r6
 8003abc:	469e      	mov	lr, r3
 8003abe:	9e05      	ldr	r6, [sp, #20]
 8003ac0:	f84e 0006 	str.w	r0, [lr, r6]
 8003ac4:	4648      	mov	r0, r9
 8003ac6:	f7fc fcaf 	bl	8000428 <__aeabi_fmul>
 8003aca:	4659      	mov	r1, fp
 8003acc:	4604      	mov	r4, r0
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7fc fcaa 	bl	8000428 <__aeabi_fmul>
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7fc fb9c 	bl	8000214 <__aeabi_fsub>
 8003adc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ade:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003ae0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003ae2:	4421      	add	r1, r4
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	910a      	str	r1, [sp, #40]	; 0x28
 8003aea:	18b9      	adds	r1, r7, r2
 8003aec:	9101      	str	r1, [sp, #4]
 8003aee:	18a9      	adds	r1, r5, r2
 8003af0:	9d06      	ldr	r5, [sp, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	9303      	str	r3, [sp, #12]
 8003af6:	18ab      	adds	r3, r5, r2
 8003af8:	9306      	str	r3, [sp, #24]
 8003afa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003afc:	9102      	str	r1, [sp, #8]
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	51a8      	str	r0, [r5, r6]
 8003b02:	f63f ada1 	bhi.w	8003648 <arm_radix8_butterfly_f32+0x488>
 8003b06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003b08:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	9325      	str	r3, [sp, #148]	; 0x94
 8003b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b12:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8003b14:	440b      	add	r3, r1
 8003b16:	9326      	str	r3, [sp, #152]	; 0x98
 8003b18:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8003b1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003b1c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8003b1e:	440b      	add	r3, r1
 8003b20:	9327      	str	r3, [sp, #156]	; 0x9c
 8003b22:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8003b24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b26:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8003b28:	440b      	add	r3, r1
 8003b2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8003b2c:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8003b2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003b30:	440b      	add	r3, r1
 8003b32:	9328      	str	r3, [sp, #160]	; 0xa0
 8003b34:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8003b36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003b38:	440b      	add	r3, r1
 8003b3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8003b3c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8003b3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003b40:	440b      	add	r3, r1
 8003b42:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003b44:	9324      	str	r3, [sp, #144]	; 0x90
 8003b46:	4291      	cmp	r1, r2
 8003b48:	4603      	mov	r3, r0
 8003b4a:	d004      	beq.n	8003b56 <arm_radix8_butterfly_f32+0x996>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8003b50:	440a      	add	r2, r1
 8003b52:	922e      	str	r2, [sp, #184]	; 0xb8
 8003b54:	e53f      	b.n	80035d6 <arm_radix8_butterfly_f32+0x416>
 8003b56:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 8003b5a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8003b5c:	9314      	str	r3, [sp, #80]	; 0x50
 8003b5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b60:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b62:	f7ff bb37 	b.w	80031d4 <arm_radix8_butterfly_f32+0x14>
 8003b66:	b039      	add	sp, #228	; 0xe4
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	3f3504f3 	.word	0x3f3504f3

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	2500      	movs	r5, #0
 8003b74:	4e0c      	ldr	r6, [pc, #48]	; (8003ba8 <__libc_init_array+0x38>)
 8003b76:	4c0d      	ldr	r4, [pc, #52]	; (8003bac <__libc_init_array+0x3c>)
 8003b78:	1ba4      	subs	r4, r4, r6
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	42a5      	cmp	r5, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	f000 ff5c 	bl	8004a3c <_init>
 8003b84:	2500      	movs	r5, #0
 8003b86:	4e0a      	ldr	r6, [pc, #40]	; (8003bb0 <__libc_init_array+0x40>)
 8003b88:	4c0a      	ldr	r4, [pc, #40]	; (8003bb4 <__libc_init_array+0x44>)
 8003b8a:	1ba4      	subs	r4, r4, r6
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	42a5      	cmp	r5, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b98:	4798      	blx	r3
 8003b9a:	3501      	adds	r5, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba2:	4798      	blx	r3
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08007978 	.word	0x08007978
 8003bac:	08007978 	.word	0x08007978
 8003bb0:	08007978 	.word	0x08007978
 8003bb4:	0800797c 	.word	0x0800797c

08003bb8 <iprintf>:
 8003bb8:	b40f      	push	{r0, r1, r2, r3}
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <iprintf+0x2c>)
 8003bbc:	b513      	push	{r0, r1, r4, lr}
 8003bbe:	681c      	ldr	r4, [r3, #0]
 8003bc0:	b124      	cbz	r4, 8003bcc <iprintf+0x14>
 8003bc2:	69a3      	ldr	r3, [r4, #24]
 8003bc4:	b913      	cbnz	r3, 8003bcc <iprintf+0x14>
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 f84e 	bl	8003c68 <__sinit>
 8003bcc:	ab05      	add	r3, sp, #20
 8003bce:	9a04      	ldr	r2, [sp, #16]
 8003bd0:	68a1      	ldr	r1, [r4, #8]
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	f000 f95f 	bl	8003e98 <_vfiprintf_r>
 8003bda:	b002      	add	sp, #8
 8003bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be0:	b004      	add	sp, #16
 8003be2:	4770      	bx	lr
 8003be4:	2000200c 	.word	0x2000200c

08003be8 <_cleanup_r>:
 8003be8:	4901      	ldr	r1, [pc, #4]	; (8003bf0 <_cleanup_r+0x8>)
 8003bea:	f000 b8a9 	b.w	8003d40 <_fwalk_reent>
 8003bee:	bf00      	nop
 8003bf0:	08004771 	.word	0x08004771

08003bf4 <std.isra.0>:
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	6003      	str	r3, [r0, #0]
 8003bfc:	6043      	str	r3, [r0, #4]
 8003bfe:	6083      	str	r3, [r0, #8]
 8003c00:	8181      	strh	r1, [r0, #12]
 8003c02:	6643      	str	r3, [r0, #100]	; 0x64
 8003c04:	81c2      	strh	r2, [r0, #14]
 8003c06:	6103      	str	r3, [r0, #16]
 8003c08:	6143      	str	r3, [r0, #20]
 8003c0a:	6183      	str	r3, [r0, #24]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	2208      	movs	r2, #8
 8003c10:	305c      	adds	r0, #92	; 0x5c
 8003c12:	f000 f8b3 	bl	8003d7c <memset>
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <std.isra.0+0x38>)
 8003c18:	6224      	str	r4, [r4, #32]
 8003c1a:	6263      	str	r3, [r4, #36]	; 0x24
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <std.isra.0+0x3c>)
 8003c1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <std.isra.0+0x40>)
 8003c22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <std.isra.0+0x44>)
 8003c26:	6323      	str	r3, [r4, #48]	; 0x30
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08004415 	.word	0x08004415
 8003c30:	08004437 	.word	0x08004437
 8003c34:	0800446f 	.word	0x0800446f
 8003c38:	08004493 	.word	0x08004493

08003c3c <__sfmoreglue>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2568      	movs	r5, #104	; 0x68
 8003c40:	1e4a      	subs	r2, r1, #1
 8003c42:	4355      	muls	r5, r2
 8003c44:	460e      	mov	r6, r1
 8003c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c4a:	f000 f89f 	bl	8003d8c <_malloc_r>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	b140      	cbz	r0, 8003c64 <__sfmoreglue+0x28>
 8003c52:	2100      	movs	r1, #0
 8003c54:	e880 0042 	stmia.w	r0, {r1, r6}
 8003c58:	300c      	adds	r0, #12
 8003c5a:	60a0      	str	r0, [r4, #8]
 8003c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c60:	f000 f88c 	bl	8003d7c <memset>
 8003c64:	4620      	mov	r0, r4
 8003c66:	bd70      	pop	{r4, r5, r6, pc}

08003c68 <__sinit>:
 8003c68:	6983      	ldr	r3, [r0, #24]
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	bb33      	cbnz	r3, 8003cbe <__sinit+0x56>
 8003c70:	6483      	str	r3, [r0, #72]	; 0x48
 8003c72:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003c74:	6503      	str	r3, [r0, #80]	; 0x50
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <__sinit+0x58>)
 8003c78:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <__sinit+0x5c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6282      	str	r2, [r0, #40]	; 0x28
 8003c7e:	4298      	cmp	r0, r3
 8003c80:	bf04      	itt	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	6183      	streq	r3, [r0, #24]
 8003c86:	f000 f81f 	bl	8003cc8 <__sfp>
 8003c8a:	6060      	str	r0, [r4, #4]
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 f81b 	bl	8003cc8 <__sfp>
 8003c92:	60a0      	str	r0, [r4, #8]
 8003c94:	4620      	mov	r0, r4
 8003c96:	f000 f817 	bl	8003cc8 <__sfp>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60e0      	str	r0, [r4, #12]
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	6860      	ldr	r0, [r4, #4]
 8003ca2:	f7ff ffa7 	bl	8003bf4 <std.isra.0>
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	2109      	movs	r1, #9
 8003caa:	68a0      	ldr	r0, [r4, #8]
 8003cac:	f7ff ffa2 	bl	8003bf4 <std.isra.0>
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	2112      	movs	r1, #18
 8003cb4:	68e0      	ldr	r0, [r4, #12]
 8003cb6:	f7ff ff9d 	bl	8003bf4 <std.isra.0>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61a3      	str	r3, [r4, #24]
 8003cbe:	bd10      	pop	{r4, pc}
 8003cc0:	08007940 	.word	0x08007940
 8003cc4:	08003be9 	.word	0x08003be9

08003cc8 <__sfp>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <__sfp+0x74>)
 8003ccc:	4607      	mov	r7, r0
 8003cce:	681e      	ldr	r6, [r3, #0]
 8003cd0:	69b3      	ldr	r3, [r6, #24]
 8003cd2:	b913      	cbnz	r3, 8003cda <__sfp+0x12>
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f7ff ffc7 	bl	8003c68 <__sinit>
 8003cda:	3648      	adds	r6, #72	; 0x48
 8003cdc:	68b4      	ldr	r4, [r6, #8]
 8003cde:	6873      	ldr	r3, [r6, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	d503      	bpl.n	8003cec <__sfp+0x24>
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	b133      	cbz	r3, 8003cf6 <__sfp+0x2e>
 8003ce8:	6836      	ldr	r6, [r6, #0]
 8003cea:	e7f7      	b.n	8003cdc <__sfp+0x14>
 8003cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cf0:	b16d      	cbz	r5, 8003d0e <__sfp+0x46>
 8003cf2:	3468      	adds	r4, #104	; 0x68
 8003cf4:	e7f4      	b.n	8003ce0 <__sfp+0x18>
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	f7ff ff9f 	bl	8003c3c <__sfmoreglue>
 8003cfe:	6030      	str	r0, [r6, #0]
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1f1      	bne.n	8003ce8 <__sfp+0x20>
 8003d04:	230c      	movs	r3, #12
 8003d06:	4604      	mov	r4, r0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d12:	81e3      	strh	r3, [r4, #14]
 8003d14:	2301      	movs	r3, #1
 8003d16:	6665      	str	r5, [r4, #100]	; 0x64
 8003d18:	81a3      	strh	r3, [r4, #12]
 8003d1a:	6025      	str	r5, [r4, #0]
 8003d1c:	60a5      	str	r5, [r4, #8]
 8003d1e:	6065      	str	r5, [r4, #4]
 8003d20:	6125      	str	r5, [r4, #16]
 8003d22:	6165      	str	r5, [r4, #20]
 8003d24:	61a5      	str	r5, [r4, #24]
 8003d26:	2208      	movs	r2, #8
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d2e:	f000 f825 	bl	8003d7c <memset>
 8003d32:	6365      	str	r5, [r4, #52]	; 0x34
 8003d34:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d36:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d38:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d3a:	e7e6      	b.n	8003d0a <__sfp+0x42>
 8003d3c:	08007940 	.word	0x08007940

08003d40 <_fwalk_reent>:
 8003d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	4680      	mov	r8, r0
 8003d46:	4689      	mov	r9, r1
 8003d48:	2600      	movs	r6, #0
 8003d4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d4e:	b914      	cbnz	r4, 8003d56 <_fwalk_reent+0x16>
 8003d50:	4630      	mov	r0, r6
 8003d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d56:	68a5      	ldr	r5, [r4, #8]
 8003d58:	6867      	ldr	r7, [r4, #4]
 8003d5a:	3f01      	subs	r7, #1
 8003d5c:	d501      	bpl.n	8003d62 <_fwalk_reent+0x22>
 8003d5e:	6824      	ldr	r4, [r4, #0]
 8003d60:	e7f5      	b.n	8003d4e <_fwalk_reent+0xe>
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d907      	bls.n	8003d78 <_fwalk_reent+0x38>
 8003d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	d003      	beq.n	8003d78 <_fwalk_reent+0x38>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4640      	mov	r0, r8
 8003d74:	47c8      	blx	r9
 8003d76:	4306      	orrs	r6, r0
 8003d78:	3568      	adds	r5, #104	; 0x68
 8003d7a:	e7ee      	b.n	8003d5a <_fwalk_reent+0x1a>

08003d7c <memset>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_malloc_r>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	1ccd      	adds	r5, r1, #3
 8003d90:	f025 0503 	bic.w	r5, r5, #3
 8003d94:	3508      	adds	r5, #8
 8003d96:	2d0c      	cmp	r5, #12
 8003d98:	bf38      	it	cc
 8003d9a:	250c      	movcc	r5, #12
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	4606      	mov	r6, r0
 8003da0:	db01      	blt.n	8003da6 <_malloc_r+0x1a>
 8003da2:	42a9      	cmp	r1, r5
 8003da4:	d903      	bls.n	8003dae <_malloc_r+0x22>
 8003da6:	230c      	movs	r3, #12
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	2000      	movs	r0, #0
 8003dac:	bd70      	pop	{r4, r5, r6, pc}
 8003dae:	f000 fd8d 	bl	80048cc <__malloc_lock>
 8003db2:	4a23      	ldr	r2, [pc, #140]	; (8003e40 <_malloc_r+0xb4>)
 8003db4:	6814      	ldr	r4, [r2, #0]
 8003db6:	4621      	mov	r1, r4
 8003db8:	b991      	cbnz	r1, 8003de0 <_malloc_r+0x54>
 8003dba:	4c22      	ldr	r4, [pc, #136]	; (8003e44 <_malloc_r+0xb8>)
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	b91b      	cbnz	r3, 8003dc8 <_malloc_r+0x3c>
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 fb17 	bl	80043f4 <_sbrk_r>
 8003dc6:	6020      	str	r0, [r4, #0]
 8003dc8:	4629      	mov	r1, r5
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 fb12 	bl	80043f4 <_sbrk_r>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d126      	bne.n	8003e22 <_malloc_r+0x96>
 8003dd4:	230c      	movs	r3, #12
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	f000 fd78 	bl	80048ce <__malloc_unlock>
 8003dde:	e7e4      	b.n	8003daa <_malloc_r+0x1e>
 8003de0:	680b      	ldr	r3, [r1, #0]
 8003de2:	1b5b      	subs	r3, r3, r5
 8003de4:	d41a      	bmi.n	8003e1c <_malloc_r+0x90>
 8003de6:	2b0b      	cmp	r3, #11
 8003de8:	d90f      	bls.n	8003e0a <_malloc_r+0x7e>
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	18cc      	adds	r4, r1, r3
 8003dee:	50cd      	str	r5, [r1, r3]
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 fd6c 	bl	80048ce <__malloc_unlock>
 8003df6:	f104 000b 	add.w	r0, r4, #11
 8003dfa:	1d23      	adds	r3, r4, #4
 8003dfc:	f020 0007 	bic.w	r0, r0, #7
 8003e00:	1ac3      	subs	r3, r0, r3
 8003e02:	d01b      	beq.n	8003e3c <_malloc_r+0xb0>
 8003e04:	425a      	negs	r2, r3
 8003e06:	50e2      	str	r2, [r4, r3]
 8003e08:	bd70      	pop	{r4, r5, r6, pc}
 8003e0a:	428c      	cmp	r4, r1
 8003e0c:	bf0b      	itete	eq
 8003e0e:	6863      	ldreq	r3, [r4, #4]
 8003e10:	684b      	ldrne	r3, [r1, #4]
 8003e12:	6013      	streq	r3, [r2, #0]
 8003e14:	6063      	strne	r3, [r4, #4]
 8003e16:	bf18      	it	ne
 8003e18:	460c      	movne	r4, r1
 8003e1a:	e7e9      	b.n	8003df0 <_malloc_r+0x64>
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	6849      	ldr	r1, [r1, #4]
 8003e20:	e7ca      	b.n	8003db8 <_malloc_r+0x2c>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d005      	beq.n	8003e38 <_malloc_r+0xac>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 fae0 	bl	80043f4 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d0cd      	beq.n	8003dd4 <_malloc_r+0x48>
 8003e38:	6025      	str	r5, [r4, #0]
 8003e3a:	e7d9      	b.n	8003df0 <_malloc_r+0x64>
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000208c 	.word	0x2000208c
 8003e44:	20002090 	.word	0x20002090

08003e48 <__sfputc_r>:
 8003e48:	6893      	ldr	r3, [r2, #8]
 8003e4a:	b410      	push	{r4}
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	da08      	bge.n	8003e66 <__sfputc_r+0x1e>
 8003e54:	6994      	ldr	r4, [r2, #24]
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	db02      	blt.n	8003e60 <__sfputc_r+0x18>
 8003e5a:	b2cb      	uxtb	r3, r1
 8003e5c:	2b0a      	cmp	r3, #10
 8003e5e:	d102      	bne.n	8003e66 <__sfputc_r+0x1e>
 8003e60:	bc10      	pop	{r4}
 8003e62:	f000 bb1b 	b.w	800449c <__swbuf_r>
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	1c58      	adds	r0, r3, #1
 8003e6a:	6010      	str	r0, [r2, #0]
 8003e6c:	7019      	strb	r1, [r3, #0]
 8003e6e:	b2c8      	uxtb	r0, r1
 8003e70:	bc10      	pop	{r4}
 8003e72:	4770      	bx	lr

08003e74 <__sfputs_r>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	4606      	mov	r6, r0
 8003e78:	460f      	mov	r7, r1
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	18d5      	adds	r5, r2, r3
 8003e7e:	42ac      	cmp	r4, r5
 8003e80:	d101      	bne.n	8003e86 <__sfputs_r+0x12>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e007      	b.n	8003e96 <__sfputs_r+0x22>
 8003e86:	463a      	mov	r2, r7
 8003e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7ff ffdb 	bl	8003e48 <__sfputc_r>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	d1f3      	bne.n	8003e7e <__sfputs_r+0xa>
 8003e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e98 <_vfiprintf_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	b09d      	sub	sp, #116	; 0x74
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4617      	mov	r7, r2
 8003ea2:	9303      	str	r3, [sp, #12]
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	b118      	cbz	r0, 8003eb0 <_vfiprintf_r+0x18>
 8003ea8:	6983      	ldr	r3, [r0, #24]
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <_vfiprintf_r+0x18>
 8003eac:	f7ff fedc 	bl	8003c68 <__sinit>
 8003eb0:	4b7c      	ldr	r3, [pc, #496]	; (80040a4 <_vfiprintf_r+0x20c>)
 8003eb2:	429c      	cmp	r4, r3
 8003eb4:	d157      	bne.n	8003f66 <_vfiprintf_r+0xce>
 8003eb6:	6874      	ldr	r4, [r6, #4]
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	0718      	lsls	r0, r3, #28
 8003ebc:	d55d      	bpl.n	8003f7a <_vfiprintf_r+0xe2>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05a      	beq.n	8003f7a <_vfiprintf_r+0xe2>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec8:	2320      	movs	r3, #32
 8003eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ece:	2330      	movs	r3, #48	; 0x30
 8003ed0:	f04f 0b01 	mov.w	fp, #1
 8003ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ed8:	46b8      	mov	r8, r7
 8003eda:	4645      	mov	r5, r8
 8003edc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d155      	bne.n	8003f90 <_vfiprintf_r+0xf8>
 8003ee4:	ebb8 0a07 	subs.w	sl, r8, r7
 8003ee8:	d00b      	beq.n	8003f02 <_vfiprintf_r+0x6a>
 8003eea:	4653      	mov	r3, sl
 8003eec:	463a      	mov	r2, r7
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f7ff ffbf 	bl	8003e74 <__sfputs_r>
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	f000 80c4 	beq.w	8004084 <_vfiprintf_r+0x1ec>
 8003efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efe:	4453      	add	r3, sl
 8003f00:	9309      	str	r3, [sp, #36]	; 0x24
 8003f02:	f898 3000 	ldrb.w	r3, [r8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80bc 	beq.w	8004084 <_vfiprintf_r+0x1ec>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	9307      	str	r3, [sp, #28]
 8003f16:	9205      	str	r2, [sp, #20]
 8003f18:	9306      	str	r3, [sp, #24]
 8003f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f20:	2205      	movs	r2, #5
 8003f22:	7829      	ldrb	r1, [r5, #0]
 8003f24:	4860      	ldr	r0, [pc, #384]	; (80040a8 <_vfiprintf_r+0x210>)
 8003f26:	f000 fcc3 	bl	80048b0 <memchr>
 8003f2a:	f105 0801 	add.w	r8, r5, #1
 8003f2e:	9b04      	ldr	r3, [sp, #16]
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d131      	bne.n	8003f98 <_vfiprintf_r+0x100>
 8003f34:	06d9      	lsls	r1, r3, #27
 8003f36:	bf44      	itt	mi
 8003f38:	2220      	movmi	r2, #32
 8003f3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f3e:	071a      	lsls	r2, r3, #28
 8003f40:	bf44      	itt	mi
 8003f42:	222b      	movmi	r2, #43	; 0x2b
 8003f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f48:	782a      	ldrb	r2, [r5, #0]
 8003f4a:	2a2a      	cmp	r2, #42	; 0x2a
 8003f4c:	d02c      	beq.n	8003fa8 <_vfiprintf_r+0x110>
 8003f4e:	2100      	movs	r1, #0
 8003f50:	200a      	movs	r0, #10
 8003f52:	9a07      	ldr	r2, [sp, #28]
 8003f54:	46a8      	mov	r8, r5
 8003f56:	f898 3000 	ldrb.w	r3, [r8]
 8003f5a:	3501      	adds	r5, #1
 8003f5c:	3b30      	subs	r3, #48	; 0x30
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d96d      	bls.n	800403e <_vfiprintf_r+0x1a6>
 8003f62:	b371      	cbz	r1, 8003fc2 <_vfiprintf_r+0x12a>
 8003f64:	e026      	b.n	8003fb4 <_vfiprintf_r+0x11c>
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <_vfiprintf_r+0x214>)
 8003f68:	429c      	cmp	r4, r3
 8003f6a:	d101      	bne.n	8003f70 <_vfiprintf_r+0xd8>
 8003f6c:	68b4      	ldr	r4, [r6, #8]
 8003f6e:	e7a3      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003f70:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <_vfiprintf_r+0x218>)
 8003f72:	429c      	cmp	r4, r3
 8003f74:	bf08      	it	eq
 8003f76:	68f4      	ldreq	r4, [r6, #12]
 8003f78:	e79e      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 faf1 	bl	8004564 <__swsetup_r>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d09e      	beq.n	8003ec4 <_vfiprintf_r+0x2c>
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b01d      	add	sp, #116	; 0x74
 8003f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f90:	2b25      	cmp	r3, #37	; 0x25
 8003f92:	d0a7      	beq.n	8003ee4 <_vfiprintf_r+0x4c>
 8003f94:	46a8      	mov	r8, r5
 8003f96:	e7a0      	b.n	8003eda <_vfiprintf_r+0x42>
 8003f98:	4a43      	ldr	r2, [pc, #268]	; (80040a8 <_vfiprintf_r+0x210>)
 8003f9a:	4645      	mov	r5, r8
 8003f9c:	1a80      	subs	r0, r0, r2
 8003f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8003fa2:	4318      	orrs	r0, r3
 8003fa4:	9004      	str	r0, [sp, #16]
 8003fa6:	e7bb      	b.n	8003f20 <_vfiprintf_r+0x88>
 8003fa8:	9a03      	ldr	r2, [sp, #12]
 8003faa:	1d11      	adds	r1, r2, #4
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	9103      	str	r1, [sp, #12]
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	db01      	blt.n	8003fb8 <_vfiprintf_r+0x120>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e004      	b.n	8003fc2 <_vfiprintf_r+0x12a>
 8003fb8:	4252      	negs	r2, r2
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	f898 3000 	ldrb.w	r3, [r8]
 8003fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc8:	d110      	bne.n	8003fec <_vfiprintf_r+0x154>
 8003fca:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003fce:	f108 0101 	add.w	r1, r8, #1
 8003fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd4:	d137      	bne.n	8004046 <_vfiprintf_r+0x1ae>
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	f108 0802 	add.w	r8, r8, #2
 8003fdc:	1d1a      	adds	r2, r3, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9203      	str	r2, [sp, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfb8      	it	lt
 8003fe6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	4d31      	ldr	r5, [pc, #196]	; (80040b4 <_vfiprintf_r+0x21c>)
 8003fee:	2203      	movs	r2, #3
 8003ff0:	f898 1000 	ldrb.w	r1, [r8]
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 fc5b 	bl	80048b0 <memchr>
 8003ffa:	b140      	cbz	r0, 800400e <_vfiprintf_r+0x176>
 8003ffc:	2340      	movs	r3, #64	; 0x40
 8003ffe:	1b40      	subs	r0, r0, r5
 8004000:	fa03 f000 	lsl.w	r0, r3, r0
 8004004:	9b04      	ldr	r3, [sp, #16]
 8004006:	f108 0801 	add.w	r8, r8, #1
 800400a:	4303      	orrs	r3, r0
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	f898 1000 	ldrb.w	r1, [r8]
 8004012:	2206      	movs	r2, #6
 8004014:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_vfiprintf_r+0x220>)
 8004016:	f108 0701 	add.w	r7, r8, #1
 800401a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800401e:	f000 fc47 	bl	80048b0 <memchr>
 8004022:	2800      	cmp	r0, #0
 8004024:	d034      	beq.n	8004090 <_vfiprintf_r+0x1f8>
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <_vfiprintf_r+0x224>)
 8004028:	bb03      	cbnz	r3, 800406c <_vfiprintf_r+0x1d4>
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	3307      	adds	r3, #7
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	3308      	adds	r3, #8
 8004034:	9303      	str	r3, [sp, #12]
 8004036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004038:	444b      	add	r3, r9
 800403a:	9309      	str	r3, [sp, #36]	; 0x24
 800403c:	e74c      	b.n	8003ed8 <_vfiprintf_r+0x40>
 800403e:	fb00 3202 	mla	r2, r0, r2, r3
 8004042:	2101      	movs	r1, #1
 8004044:	e786      	b.n	8003f54 <_vfiprintf_r+0xbc>
 8004046:	2300      	movs	r3, #0
 8004048:	250a      	movs	r5, #10
 800404a:	4618      	mov	r0, r3
 800404c:	9305      	str	r3, [sp, #20]
 800404e:	4688      	mov	r8, r1
 8004050:	f898 2000 	ldrb.w	r2, [r8]
 8004054:	3101      	adds	r1, #1
 8004056:	3a30      	subs	r2, #48	; 0x30
 8004058:	2a09      	cmp	r2, #9
 800405a:	d903      	bls.n	8004064 <_vfiprintf_r+0x1cc>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0c5      	beq.n	8003fec <_vfiprintf_r+0x154>
 8004060:	9005      	str	r0, [sp, #20]
 8004062:	e7c3      	b.n	8003fec <_vfiprintf_r+0x154>
 8004064:	fb05 2000 	mla	r0, r5, r0, r2
 8004068:	2301      	movs	r3, #1
 800406a:	e7f0      	b.n	800404e <_vfiprintf_r+0x1b6>
 800406c:	ab03      	add	r3, sp, #12
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4622      	mov	r2, r4
 8004072:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <_vfiprintf_r+0x228>)
 8004074:	a904      	add	r1, sp, #16
 8004076:	4630      	mov	r0, r6
 8004078:	f3af 8000 	nop.w
 800407c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004080:	4681      	mov	r9, r0
 8004082:	d1d8      	bne.n	8004036 <_vfiprintf_r+0x19e>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	065b      	lsls	r3, r3, #25
 8004088:	f53f af7d 	bmi.w	8003f86 <_vfiprintf_r+0xee>
 800408c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408e:	e77c      	b.n	8003f8a <_vfiprintf_r+0xf2>
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4622      	mov	r2, r4
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <_vfiprintf_r+0x228>)
 8004098:	a904      	add	r1, sp, #16
 800409a:	4630      	mov	r0, r6
 800409c:	f000 f88a 	bl	80041b4 <_printf_i>
 80040a0:	e7ec      	b.n	800407c <_vfiprintf_r+0x1e4>
 80040a2:	bf00      	nop
 80040a4:	08007900 	.word	0x08007900
 80040a8:	08007944 	.word	0x08007944
 80040ac:	08007920 	.word	0x08007920
 80040b0:	080078e0 	.word	0x080078e0
 80040b4:	0800794a 	.word	0x0800794a
 80040b8:	0800794e 	.word	0x0800794e
 80040bc:	00000000 	.word	0x00000000
 80040c0:	08003e75 	.word	0x08003e75

080040c4 <_printf_common>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	4691      	mov	r9, r2
 80040ca:	461f      	mov	r7, r3
 80040cc:	688a      	ldr	r2, [r1, #8]
 80040ce:	690b      	ldr	r3, [r1, #16]
 80040d0:	4606      	mov	r6, r0
 80040d2:	4293      	cmp	r3, r2
 80040d4:	bfb8      	it	lt
 80040d6:	4613      	movlt	r3, r2
 80040d8:	f8c9 3000 	str.w	r3, [r9]
 80040dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040e0:	460c      	mov	r4, r1
 80040e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040e6:	b112      	cbz	r2, 80040ee <_printf_common+0x2a>
 80040e8:	3301      	adds	r3, #1
 80040ea:	f8c9 3000 	str.w	r3, [r9]
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	0699      	lsls	r1, r3, #26
 80040f2:	bf42      	ittt	mi
 80040f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040f8:	3302      	addmi	r3, #2
 80040fa:	f8c9 3000 	strmi.w	r3, [r9]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	f015 0506 	ands.w	r5, r5, #6
 8004104:	d107      	bne.n	8004116 <_printf_common+0x52>
 8004106:	f104 0a19 	add.w	sl, r4, #25
 800410a:	68e3      	ldr	r3, [r4, #12]
 800410c:	f8d9 2000 	ldr.w	r2, [r9]
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	429d      	cmp	r5, r3
 8004114:	db2a      	blt.n	800416c <_printf_common+0xa8>
 8004116:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	3300      	adds	r3, #0
 800411e:	bf18      	it	ne
 8004120:	2301      	movne	r3, #1
 8004122:	0692      	lsls	r2, r2, #26
 8004124:	d42f      	bmi.n	8004186 <_printf_common+0xc2>
 8004126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800412a:	4639      	mov	r1, r7
 800412c:	4630      	mov	r0, r6
 800412e:	47c0      	blx	r8
 8004130:	3001      	adds	r0, #1
 8004132:	d022      	beq.n	800417a <_printf_common+0xb6>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	68e5      	ldr	r5, [r4, #12]
 8004138:	f003 0306 	and.w	r3, r3, #6
 800413c:	2b04      	cmp	r3, #4
 800413e:	bf18      	it	ne
 8004140:	2500      	movne	r5, #0
 8004142:	f8d9 2000 	ldr.w	r2, [r9]
 8004146:	f04f 0900 	mov.w	r9, #0
 800414a:	bf08      	it	eq
 800414c:	1aad      	subeq	r5, r5, r2
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	bf08      	it	eq
 8004154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004158:	4293      	cmp	r3, r2
 800415a:	bfc4      	itt	gt
 800415c:	1a9b      	subgt	r3, r3, r2
 800415e:	18ed      	addgt	r5, r5, r3
 8004160:	341a      	adds	r4, #26
 8004162:	454d      	cmp	r5, r9
 8004164:	d11b      	bne.n	800419e <_printf_common+0xda>
 8004166:	2000      	movs	r0, #0
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416c:	2301      	movs	r3, #1
 800416e:	4652      	mov	r2, sl
 8004170:	4639      	mov	r1, r7
 8004172:	4630      	mov	r0, r6
 8004174:	47c0      	blx	r8
 8004176:	3001      	adds	r0, #1
 8004178:	d103      	bne.n	8004182 <_printf_common+0xbe>
 800417a:	f04f 30ff 	mov.w	r0, #4294967295
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	3501      	adds	r5, #1
 8004184:	e7c1      	b.n	800410a <_printf_common+0x46>
 8004186:	2030      	movs	r0, #48	; 0x30
 8004188:	18e1      	adds	r1, r4, r3
 800418a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004194:	4422      	add	r2, r4
 8004196:	3302      	adds	r3, #2
 8004198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800419c:	e7c3      	b.n	8004126 <_printf_common+0x62>
 800419e:	2301      	movs	r3, #1
 80041a0:	4622      	mov	r2, r4
 80041a2:	4639      	mov	r1, r7
 80041a4:	4630      	mov	r0, r6
 80041a6:	47c0      	blx	r8
 80041a8:	3001      	adds	r0, #1
 80041aa:	d0e6      	beq.n	800417a <_printf_common+0xb6>
 80041ac:	f109 0901 	add.w	r9, r9, #1
 80041b0:	e7d7      	b.n	8004162 <_printf_common+0x9e>
	...

080041b4 <_printf_i>:
 80041b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041b8:	4617      	mov	r7, r2
 80041ba:	7e0a      	ldrb	r2, [r1, #24]
 80041bc:	b085      	sub	sp, #20
 80041be:	2a6e      	cmp	r2, #110	; 0x6e
 80041c0:	4698      	mov	r8, r3
 80041c2:	4606      	mov	r6, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80041cc:	f000 80bc 	beq.w	8004348 <_printf_i+0x194>
 80041d0:	d81a      	bhi.n	8004208 <_printf_i+0x54>
 80041d2:	2a63      	cmp	r2, #99	; 0x63
 80041d4:	d02e      	beq.n	8004234 <_printf_i+0x80>
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x3a>
 80041d8:	2a00      	cmp	r2, #0
 80041da:	f000 80c8 	beq.w	800436e <_printf_i+0x1ba>
 80041de:	2a58      	cmp	r2, #88	; 0x58
 80041e0:	f000 808a 	beq.w	80042f8 <_printf_i+0x144>
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80041ec:	e02a      	b.n	8004244 <_printf_i+0x90>
 80041ee:	2a64      	cmp	r2, #100	; 0x64
 80041f0:	d001      	beq.n	80041f6 <_printf_i+0x42>
 80041f2:	2a69      	cmp	r2, #105	; 0x69
 80041f4:	d1f6      	bne.n	80041e4 <_printf_i+0x30>
 80041f6:	6821      	ldr	r1, [r4, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041fe:	d023      	beq.n	8004248 <_printf_i+0x94>
 8004200:	1d11      	adds	r1, r2, #4
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	e027      	b.n	8004258 <_printf_i+0xa4>
 8004208:	2a73      	cmp	r2, #115	; 0x73
 800420a:	f000 80b4 	beq.w	8004376 <_printf_i+0x1c2>
 800420e:	d808      	bhi.n	8004222 <_printf_i+0x6e>
 8004210:	2a6f      	cmp	r2, #111	; 0x6f
 8004212:	d02a      	beq.n	800426a <_printf_i+0xb6>
 8004214:	2a70      	cmp	r2, #112	; 0x70
 8004216:	d1e5      	bne.n	80041e4 <_printf_i+0x30>
 8004218:	680a      	ldr	r2, [r1, #0]
 800421a:	f042 0220 	orr.w	r2, r2, #32
 800421e:	600a      	str	r2, [r1, #0]
 8004220:	e003      	b.n	800422a <_printf_i+0x76>
 8004222:	2a75      	cmp	r2, #117	; 0x75
 8004224:	d021      	beq.n	800426a <_printf_i+0xb6>
 8004226:	2a78      	cmp	r2, #120	; 0x78
 8004228:	d1dc      	bne.n	80041e4 <_printf_i+0x30>
 800422a:	2278      	movs	r2, #120	; 0x78
 800422c:	496f      	ldr	r1, [pc, #444]	; (80043ec <_printf_i+0x238>)
 800422e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004232:	e064      	b.n	80042fe <_printf_i+0x14a>
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800423a:	1d11      	adds	r1, r2, #4
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004244:	2301      	movs	r3, #1
 8004246:	e0a3      	b.n	8004390 <_printf_i+0x1dc>
 8004248:	f011 0f40 	tst.w	r1, #64	; 0x40
 800424c:	f102 0104 	add.w	r1, r2, #4
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	d0d7      	beq.n	8004204 <_printf_i+0x50>
 8004254:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da03      	bge.n	8004264 <_printf_i+0xb0>
 800425c:	222d      	movs	r2, #45	; 0x2d
 800425e:	425b      	negs	r3, r3
 8004260:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004264:	4962      	ldr	r1, [pc, #392]	; (80043f0 <_printf_i+0x23c>)
 8004266:	220a      	movs	r2, #10
 8004268:	e017      	b.n	800429a <_printf_i+0xe6>
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004272:	d003      	beq.n	800427c <_printf_i+0xc8>
 8004274:	1d08      	adds	r0, r1, #4
 8004276:	6018      	str	r0, [r3, #0]
 8004278:	680b      	ldr	r3, [r1, #0]
 800427a:	e006      	b.n	800428a <_printf_i+0xd6>
 800427c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004280:	f101 0004 	add.w	r0, r1, #4
 8004284:	6018      	str	r0, [r3, #0]
 8004286:	d0f7      	beq.n	8004278 <_printf_i+0xc4>
 8004288:	880b      	ldrh	r3, [r1, #0]
 800428a:	2a6f      	cmp	r2, #111	; 0x6f
 800428c:	bf14      	ite	ne
 800428e:	220a      	movne	r2, #10
 8004290:	2208      	moveq	r2, #8
 8004292:	4957      	ldr	r1, [pc, #348]	; (80043f0 <_printf_i+0x23c>)
 8004294:	2000      	movs	r0, #0
 8004296:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800429a:	6865      	ldr	r5, [r4, #4]
 800429c:	2d00      	cmp	r5, #0
 800429e:	60a5      	str	r5, [r4, #8]
 80042a0:	f2c0 809c 	blt.w	80043dc <_printf_i+0x228>
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	f020 0004 	bic.w	r0, r0, #4
 80042aa:	6020      	str	r0, [r4, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13f      	bne.n	8004330 <_printf_i+0x17c>
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	f040 8095 	bne.w	80043e0 <_printf_i+0x22c>
 80042b6:	4675      	mov	r5, lr
 80042b8:	2a08      	cmp	r2, #8
 80042ba:	d10b      	bne.n	80042d4 <_printf_i+0x120>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d508      	bpl.n	80042d4 <_printf_i+0x120>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bfde      	ittt	le
 80042ca:	2330      	movle	r3, #48	; 0x30
 80042cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042d4:	ebae 0305 	sub.w	r3, lr, r5
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	f8cd 8000 	str.w	r8, [sp]
 80042de:	463b      	mov	r3, r7
 80042e0:	aa03      	add	r2, sp, #12
 80042e2:	4621      	mov	r1, r4
 80042e4:	4630      	mov	r0, r6
 80042e6:	f7ff feed 	bl	80040c4 <_printf_common>
 80042ea:	3001      	adds	r0, #1
 80042ec:	d155      	bne.n	800439a <_printf_i+0x1e6>
 80042ee:	f04f 30ff 	mov.w	r0, #4294967295
 80042f2:	b005      	add	sp, #20
 80042f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042fc:	493c      	ldr	r1, [pc, #240]	; (80043f0 <_printf_i+0x23c>)
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004306:	f100 0504 	add.w	r5, r0, #4
 800430a:	601d      	str	r5, [r3, #0]
 800430c:	d001      	beq.n	8004312 <_printf_i+0x15e>
 800430e:	6803      	ldr	r3, [r0, #0]
 8004310:	e002      	b.n	8004318 <_printf_i+0x164>
 8004312:	0655      	lsls	r5, r2, #25
 8004314:	d5fb      	bpl.n	800430e <_printf_i+0x15a>
 8004316:	8803      	ldrh	r3, [r0, #0]
 8004318:	07d0      	lsls	r0, r2, #31
 800431a:	bf44      	itt	mi
 800431c:	f042 0220 	orrmi.w	r2, r2, #32
 8004320:	6022      	strmi	r2, [r4, #0]
 8004322:	b91b      	cbnz	r3, 800432c <_printf_i+0x178>
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	f022 0220 	bic.w	r2, r2, #32
 800432a:	6022      	str	r2, [r4, #0]
 800432c:	2210      	movs	r2, #16
 800432e:	e7b1      	b.n	8004294 <_printf_i+0xe0>
 8004330:	4675      	mov	r5, lr
 8004332:	fbb3 f0f2 	udiv	r0, r3, r2
 8004336:	fb02 3310 	mls	r3, r2, r0, r3
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004340:	4603      	mov	r3, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d1f5      	bne.n	8004332 <_printf_i+0x17e>
 8004346:	e7b7      	b.n	80042b8 <_printf_i+0x104>
 8004348:	6808      	ldr	r0, [r1, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004350:	6949      	ldr	r1, [r1, #20]
 8004352:	d004      	beq.n	800435e <_printf_i+0x1aa>
 8004354:	1d10      	adds	r0, r2, #4
 8004356:	6018      	str	r0, [r3, #0]
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	6019      	str	r1, [r3, #0]
 800435c:	e007      	b.n	800436e <_printf_i+0x1ba>
 800435e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004362:	f102 0004 	add.w	r0, r2, #4
 8004366:	6018      	str	r0, [r3, #0]
 8004368:	6813      	ldr	r3, [r2, #0]
 800436a:	d0f6      	beq.n	800435a <_printf_i+0x1a6>
 800436c:	8019      	strh	r1, [r3, #0]
 800436e:	2300      	movs	r3, #0
 8004370:	4675      	mov	r5, lr
 8004372:	6123      	str	r3, [r4, #16]
 8004374:	e7b1      	b.n	80042da <_printf_i+0x126>
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	1d11      	adds	r1, r2, #4
 800437a:	6019      	str	r1, [r3, #0]
 800437c:	6815      	ldr	r5, [r2, #0]
 800437e:	2100      	movs	r1, #0
 8004380:	6862      	ldr	r2, [r4, #4]
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fa94 	bl	80048b0 <memchr>
 8004388:	b108      	cbz	r0, 800438e <_printf_i+0x1da>
 800438a:	1b40      	subs	r0, r0, r5
 800438c:	6060      	str	r0, [r4, #4]
 800438e:	6863      	ldr	r3, [r4, #4]
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	2300      	movs	r3, #0
 8004394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004398:	e79f      	b.n	80042da <_printf_i+0x126>
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	462a      	mov	r2, r5
 800439e:	4639      	mov	r1, r7
 80043a0:	4630      	mov	r0, r6
 80043a2:	47c0      	blx	r8
 80043a4:	3001      	adds	r0, #1
 80043a6:	d0a2      	beq.n	80042ee <_printf_i+0x13a>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	079b      	lsls	r3, r3, #30
 80043ac:	d507      	bpl.n	80043be <_printf_i+0x20a>
 80043ae:	2500      	movs	r5, #0
 80043b0:	f104 0919 	add.w	r9, r4, #25
 80043b4:	68e3      	ldr	r3, [r4, #12]
 80043b6:	9a03      	ldr	r2, [sp, #12]
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	429d      	cmp	r5, r3
 80043bc:	db05      	blt.n	80043ca <_printf_i+0x216>
 80043be:	68e0      	ldr	r0, [r4, #12]
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	4298      	cmp	r0, r3
 80043c4:	bfb8      	it	lt
 80043c6:	4618      	movlt	r0, r3
 80043c8:	e793      	b.n	80042f2 <_printf_i+0x13e>
 80043ca:	2301      	movs	r3, #1
 80043cc:	464a      	mov	r2, r9
 80043ce:	4639      	mov	r1, r7
 80043d0:	4630      	mov	r0, r6
 80043d2:	47c0      	blx	r8
 80043d4:	3001      	adds	r0, #1
 80043d6:	d08a      	beq.n	80042ee <_printf_i+0x13a>
 80043d8:	3501      	adds	r5, #1
 80043da:	e7eb      	b.n	80043b4 <_printf_i+0x200>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1a7      	bne.n	8004330 <_printf_i+0x17c>
 80043e0:	780b      	ldrb	r3, [r1, #0]
 80043e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043ea:	e765      	b.n	80042b8 <_printf_i+0x104>
 80043ec:	08007966 	.word	0x08007966
 80043f0:	08007955 	.word	0x08007955

080043f4 <_sbrk_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	2300      	movs	r3, #0
 80043f8:	4c05      	ldr	r4, [pc, #20]	; (8004410 <_sbrk_r+0x1c>)
 80043fa:	4605      	mov	r5, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	f000 fb0e 	bl	8004a20 <_sbrk>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_sbrk_r+0x1a>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	b103      	cbz	r3, 800440e <_sbrk_r+0x1a>
 800440c:	602b      	str	r3, [r5, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20002124 	.word	0x20002124

08004414 <__sread>:
 8004414:	b510      	push	{r4, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	f000 faa4 	bl	8004968 <_read_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bfab      	itete	ge
 8004424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004426:	89a3      	ldrhlt	r3, [r4, #12]
 8004428:	181b      	addge	r3, r3, r0
 800442a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800442e:	bfac      	ite	ge
 8004430:	6563      	strge	r3, [r4, #84]	; 0x54
 8004432:	81a3      	strhlt	r3, [r4, #12]
 8004434:	bd10      	pop	{r4, pc}

08004436 <__swrite>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	461f      	mov	r7, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	4605      	mov	r5, r0
 8004440:	05db      	lsls	r3, r3, #23
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d505      	bpl.n	8004454 <__swrite+0x1e>
 8004448:	2302      	movs	r3, #2
 800444a:	2200      	movs	r2, #0
 800444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004450:	f000 f9b8 	bl	80047c4 <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	4632      	mov	r2, r6
 8004458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004462:	463b      	mov	r3, r7
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f000 b869 	b.w	8004540 <_write_r>

0800446e <__sseek>:
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 f9a5 	bl	80047c4 <_lseek_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	bf15      	itete	ne
 8004480:	6560      	strne	r0, [r4, #84]	; 0x54
 8004482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800448a:	81a3      	strheq	r3, [r4, #12]
 800448c:	bf18      	it	ne
 800448e:	81a3      	strhne	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__sclose>:
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 b8d3 	b.w	8004640 <_close_r>
	...

0800449c <__swbuf_r>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	460e      	mov	r6, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	4605      	mov	r5, r0
 80044a4:	b118      	cbz	r0, 80044ae <__swbuf_r+0x12>
 80044a6:	6983      	ldr	r3, [r0, #24]
 80044a8:	b90b      	cbnz	r3, 80044ae <__swbuf_r+0x12>
 80044aa:	f7ff fbdd 	bl	8003c68 <__sinit>
 80044ae:	4b21      	ldr	r3, [pc, #132]	; (8004534 <__swbuf_r+0x98>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	d12a      	bne.n	800450a <__swbuf_r+0x6e>
 80044b4:	686c      	ldr	r4, [r5, #4]
 80044b6:	69a3      	ldr	r3, [r4, #24]
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	071a      	lsls	r2, r3, #28
 80044be:	d52e      	bpl.n	800451e <__swbuf_r+0x82>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	b363      	cbz	r3, 800451e <__swbuf_r+0x82>
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	b2f6      	uxtb	r6, r6
 80044ca:	1ac0      	subs	r0, r0, r3
 80044cc:	6963      	ldr	r3, [r4, #20]
 80044ce:	4637      	mov	r7, r6
 80044d0:	4298      	cmp	r0, r3
 80044d2:	db04      	blt.n	80044de <__swbuf_r+0x42>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f94a 	bl	8004770 <_fflush_r>
 80044dc:	bb28      	cbnz	r0, 800452a <__swbuf_r+0x8e>
 80044de:	68a3      	ldr	r3, [r4, #8]
 80044e0:	3001      	adds	r0, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	701e      	strb	r6, [r3, #0]
 80044ee:	6963      	ldr	r3, [r4, #20]
 80044f0:	4298      	cmp	r0, r3
 80044f2:	d004      	beq.n	80044fe <__swbuf_r+0x62>
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	07db      	lsls	r3, r3, #31
 80044f8:	d519      	bpl.n	800452e <__swbuf_r+0x92>
 80044fa:	2e0a      	cmp	r6, #10
 80044fc:	d117      	bne.n	800452e <__swbuf_r+0x92>
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	f000 f935 	bl	8004770 <_fflush_r>
 8004506:	b190      	cbz	r0, 800452e <__swbuf_r+0x92>
 8004508:	e00f      	b.n	800452a <__swbuf_r+0x8e>
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <__swbuf_r+0x9c>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d101      	bne.n	8004514 <__swbuf_r+0x78>
 8004510:	68ac      	ldr	r4, [r5, #8]
 8004512:	e7d0      	b.n	80044b6 <__swbuf_r+0x1a>
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <__swbuf_r+0xa0>)
 8004516:	429c      	cmp	r4, r3
 8004518:	bf08      	it	eq
 800451a:	68ec      	ldreq	r4, [r5, #12]
 800451c:	e7cb      	b.n	80044b6 <__swbuf_r+0x1a>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 f81f 	bl	8004564 <__swsetup_r>
 8004526:	2800      	cmp	r0, #0
 8004528:	d0cc      	beq.n	80044c4 <__swbuf_r+0x28>
 800452a:	f04f 37ff 	mov.w	r7, #4294967295
 800452e:	4638      	mov	r0, r7
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	bf00      	nop
 8004534:	08007900 	.word	0x08007900
 8004538:	08007920 	.word	0x08007920
 800453c:	080078e0 	.word	0x080078e0

08004540 <_write_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4605      	mov	r5, r0
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	2200      	movs	r2, #0
 800454a:	4c05      	ldr	r4, [pc, #20]	; (8004560 <_write_r+0x20>)
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd fe82 	bl	8002258 <_write>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_write_r+0x1e>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	b103      	cbz	r3, 800455e <_write_r+0x1e>
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20002124 	.word	0x20002124

08004564 <__swsetup_r>:
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <__swsetup_r+0xcc>)
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	4606      	mov	r6, r0
 800456c:	460c      	mov	r4, r1
 800456e:	b125      	cbz	r5, 800457a <__swsetup_r+0x16>
 8004570:	69ab      	ldr	r3, [r5, #24]
 8004572:	b913      	cbnz	r3, 800457a <__swsetup_r+0x16>
 8004574:	4628      	mov	r0, r5
 8004576:	f7ff fb77 	bl	8003c68 <__sinit>
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <__swsetup_r+0xd0>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d10f      	bne.n	80045a0 <__swsetup_r+0x3c>
 8004580:	686c      	ldr	r4, [r5, #4]
 8004582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004586:	b29a      	uxth	r2, r3
 8004588:	0715      	lsls	r5, r2, #28
 800458a:	d42c      	bmi.n	80045e6 <__swsetup_r+0x82>
 800458c:	06d0      	lsls	r0, r2, #27
 800458e:	d411      	bmi.n	80045b4 <__swsetup_r+0x50>
 8004590:	2209      	movs	r2, #9
 8004592:	6032      	str	r2, [r6, #0]
 8004594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004598:	81a3      	strh	r3, [r4, #12]
 800459a:	f04f 30ff 	mov.w	r0, #4294967295
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <__swsetup_r+0xd4>)
 80045a2:	429c      	cmp	r4, r3
 80045a4:	d101      	bne.n	80045aa <__swsetup_r+0x46>
 80045a6:	68ac      	ldr	r4, [r5, #8]
 80045a8:	e7eb      	b.n	8004582 <__swsetup_r+0x1e>
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <__swsetup_r+0xd8>)
 80045ac:	429c      	cmp	r4, r3
 80045ae:	bf08      	it	eq
 80045b0:	68ec      	ldreq	r4, [r5, #12]
 80045b2:	e7e6      	b.n	8004582 <__swsetup_r+0x1e>
 80045b4:	0751      	lsls	r1, r2, #29
 80045b6:	d512      	bpl.n	80045de <__swsetup_r+0x7a>
 80045b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ba:	b141      	cbz	r1, 80045ce <__swsetup_r+0x6a>
 80045bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d002      	beq.n	80045ca <__swsetup_r+0x66>
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 f983 	bl	80048d0 <_free_r>
 80045ca:	2300      	movs	r3, #0
 80045cc:	6363      	str	r3, [r4, #52]	; 0x34
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	2300      	movs	r3, #0
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	b94b      	cbnz	r3, 80045fe <__swsetup_r+0x9a>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d003      	beq.n	80045fe <__swsetup_r+0x9a>
 80045f6:	4621      	mov	r1, r4
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f919 	bl	8004830 <__smakebuf_r>
 80045fe:	89a2      	ldrh	r2, [r4, #12]
 8004600:	f012 0301 	ands.w	r3, r2, #1
 8004604:	d00c      	beq.n	8004620 <__swsetup_r+0xbc>
 8004606:	2300      	movs	r3, #0
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	6963      	ldr	r3, [r4, #20]
 800460c:	425b      	negs	r3, r3
 800460e:	61a3      	str	r3, [r4, #24]
 8004610:	6923      	ldr	r3, [r4, #16]
 8004612:	b953      	cbnz	r3, 800462a <__swsetup_r+0xc6>
 8004614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004618:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800461c:	d1ba      	bne.n	8004594 <__swsetup_r+0x30>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	0792      	lsls	r2, r2, #30
 8004622:	bf58      	it	pl
 8004624:	6963      	ldrpl	r3, [r4, #20]
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	e7f2      	b.n	8004610 <__swsetup_r+0xac>
 800462a:	2000      	movs	r0, #0
 800462c:	e7f7      	b.n	800461e <__swsetup_r+0xba>
 800462e:	bf00      	nop
 8004630:	2000200c 	.word	0x2000200c
 8004634:	08007900 	.word	0x08007900
 8004638:	08007920 	.word	0x08007920
 800463c:	080078e0 	.word	0x080078e0

08004640 <_close_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	2300      	movs	r3, #0
 8004644:	4c05      	ldr	r4, [pc, #20]	; (800465c <_close_r+0x1c>)
 8004646:	4605      	mov	r5, r0
 8004648:	4608      	mov	r0, r1
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	f000 f9c0 	bl	80049d0 <_close>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_close_r+0x1a>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	b103      	cbz	r3, 800465a <_close_r+0x1a>
 8004658:	602b      	str	r3, [r5, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20002124 	.word	0x20002124

08004660 <__sflush_r>:
 8004660:	898a      	ldrh	r2, [r1, #12]
 8004662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004666:	4605      	mov	r5, r0
 8004668:	0710      	lsls	r0, r2, #28
 800466a:	460c      	mov	r4, r1
 800466c:	d45a      	bmi.n	8004724 <__sflush_r+0xc4>
 800466e:	684b      	ldr	r3, [r1, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	dc05      	bgt.n	8004680 <__sflush_r+0x20>
 8004674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	dc02      	bgt.n	8004680 <__sflush_r+0x20>
 800467a:	2000      	movs	r0, #0
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004682:	2e00      	cmp	r6, #0
 8004684:	d0f9      	beq.n	800467a <__sflush_r+0x1a>
 8004686:	2300      	movs	r3, #0
 8004688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800468c:	682f      	ldr	r7, [r5, #0]
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	d033      	beq.n	80046fa <__sflush_r+0x9a>
 8004692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	075a      	lsls	r2, r3, #29
 8004698:	d505      	bpl.n	80046a6 <__sflush_r+0x46>
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	1ac0      	subs	r0, r0, r3
 800469e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046a0:	b10b      	cbz	r3, 80046a6 <__sflush_r+0x46>
 80046a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a4:	1ac0      	subs	r0, r0, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	4602      	mov	r2, r0
 80046aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ac:	6a21      	ldr	r1, [r4, #32]
 80046ae:	4628      	mov	r0, r5
 80046b0:	47b0      	blx	r6
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	d106      	bne.n	80046c6 <__sflush_r+0x66>
 80046b8:	6829      	ldr	r1, [r5, #0]
 80046ba:	291d      	cmp	r1, #29
 80046bc:	d84b      	bhi.n	8004756 <__sflush_r+0xf6>
 80046be:	4a2b      	ldr	r2, [pc, #172]	; (800476c <__sflush_r+0x10c>)
 80046c0:	40ca      	lsrs	r2, r1
 80046c2:	07d6      	lsls	r6, r2, #31
 80046c4:	d547      	bpl.n	8004756 <__sflush_r+0xf6>
 80046c6:	2200      	movs	r2, #0
 80046c8:	6062      	str	r2, [r4, #4]
 80046ca:	6922      	ldr	r2, [r4, #16]
 80046cc:	04d9      	lsls	r1, r3, #19
 80046ce:	6022      	str	r2, [r4, #0]
 80046d0:	d504      	bpl.n	80046dc <__sflush_r+0x7c>
 80046d2:	1c42      	adds	r2, r0, #1
 80046d4:	d101      	bne.n	80046da <__sflush_r+0x7a>
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	b903      	cbnz	r3, 80046dc <__sflush_r+0x7c>
 80046da:	6560      	str	r0, [r4, #84]	; 0x54
 80046dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046de:	602f      	str	r7, [r5, #0]
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d0ca      	beq.n	800467a <__sflush_r+0x1a>
 80046e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e8:	4299      	cmp	r1, r3
 80046ea:	d002      	beq.n	80046f2 <__sflush_r+0x92>
 80046ec:	4628      	mov	r0, r5
 80046ee:	f000 f8ef 	bl	80048d0 <_free_r>
 80046f2:	2000      	movs	r0, #0
 80046f4:	6360      	str	r0, [r4, #52]	; 0x34
 80046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fa:	6a21      	ldr	r1, [r4, #32]
 80046fc:	2301      	movs	r3, #1
 80046fe:	4628      	mov	r0, r5
 8004700:	47b0      	blx	r6
 8004702:	1c41      	adds	r1, r0, #1
 8004704:	d1c6      	bne.n	8004694 <__sflush_r+0x34>
 8004706:	682b      	ldr	r3, [r5, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0c3      	beq.n	8004694 <__sflush_r+0x34>
 800470c:	2b1d      	cmp	r3, #29
 800470e:	d001      	beq.n	8004714 <__sflush_r+0xb4>
 8004710:	2b16      	cmp	r3, #22
 8004712:	d101      	bne.n	8004718 <__sflush_r+0xb8>
 8004714:	602f      	str	r7, [r5, #0]
 8004716:	e7b0      	b.n	800467a <__sflush_r+0x1a>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004724:	690f      	ldr	r7, [r1, #16]
 8004726:	2f00      	cmp	r7, #0
 8004728:	d0a7      	beq.n	800467a <__sflush_r+0x1a>
 800472a:	0793      	lsls	r3, r2, #30
 800472c:	bf18      	it	ne
 800472e:	2300      	movne	r3, #0
 8004730:	680e      	ldr	r6, [r1, #0]
 8004732:	bf08      	it	eq
 8004734:	694b      	ldreq	r3, [r1, #20]
 8004736:	eba6 0807 	sub.w	r8, r6, r7
 800473a:	600f      	str	r7, [r1, #0]
 800473c:	608b      	str	r3, [r1, #8]
 800473e:	f1b8 0f00 	cmp.w	r8, #0
 8004742:	dd9a      	ble.n	800467a <__sflush_r+0x1a>
 8004744:	4643      	mov	r3, r8
 8004746:	463a      	mov	r2, r7
 8004748:	6a21      	ldr	r1, [r4, #32]
 800474a:	4628      	mov	r0, r5
 800474c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800474e:	47b0      	blx	r6
 8004750:	2800      	cmp	r0, #0
 8004752:	dc07      	bgt.n	8004764 <__sflush_r+0x104>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004764:	4407      	add	r7, r0
 8004766:	eba8 0800 	sub.w	r8, r8, r0
 800476a:	e7e8      	b.n	800473e <__sflush_r+0xde>
 800476c:	20400001 	.word	0x20400001

08004770 <_fflush_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	690b      	ldr	r3, [r1, #16]
 8004774:	4605      	mov	r5, r0
 8004776:	460c      	mov	r4, r1
 8004778:	b1db      	cbz	r3, 80047b2 <_fflush_r+0x42>
 800477a:	b118      	cbz	r0, 8004784 <_fflush_r+0x14>
 800477c:	6983      	ldr	r3, [r0, #24]
 800477e:	b90b      	cbnz	r3, 8004784 <_fflush_r+0x14>
 8004780:	f7ff fa72 	bl	8003c68 <__sinit>
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <_fflush_r+0x48>)
 8004786:	429c      	cmp	r4, r3
 8004788:	d109      	bne.n	800479e <_fflush_r+0x2e>
 800478a:	686c      	ldr	r4, [r5, #4]
 800478c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004790:	b17b      	cbz	r3, 80047b2 <_fflush_r+0x42>
 8004792:	4621      	mov	r1, r4
 8004794:	4628      	mov	r0, r5
 8004796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800479a:	f7ff bf61 	b.w	8004660 <__sflush_r>
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <_fflush_r+0x4c>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d101      	bne.n	80047a8 <_fflush_r+0x38>
 80047a4:	68ac      	ldr	r4, [r5, #8]
 80047a6:	e7f1      	b.n	800478c <_fflush_r+0x1c>
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <_fflush_r+0x50>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	bf08      	it	eq
 80047ae:	68ec      	ldreq	r4, [r5, #12]
 80047b0:	e7ec      	b.n	800478c <_fflush_r+0x1c>
 80047b2:	2000      	movs	r0, #0
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	08007900 	.word	0x08007900
 80047bc:	08007920 	.word	0x08007920
 80047c0:	080078e0 	.word	0x080078e0

080047c4 <_lseek_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	2200      	movs	r2, #0
 80047ce:	4c05      	ldr	r4, [pc, #20]	; (80047e4 <_lseek_r+0x20>)
 80047d0:	6022      	str	r2, [r4, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f914 	bl	8004a00 <_lseek>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_lseek_r+0x1e>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_lseek_r+0x1e>
 80047e0:	602b      	str	r3, [r5, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	20002124 	.word	0x20002124

080047e8 <__swhatbuf_r>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	460e      	mov	r6, r1
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	b090      	sub	sp, #64	; 0x40
 80047f2:	2900      	cmp	r1, #0
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	da07      	bge.n	800480a <__swhatbuf_r+0x22>
 80047fa:	2300      	movs	r3, #0
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	89b3      	ldrh	r3, [r6, #12]
 8004800:	061a      	lsls	r2, r3, #24
 8004802:	d410      	bmi.n	8004826 <__swhatbuf_r+0x3e>
 8004804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004808:	e00e      	b.n	8004828 <__swhatbuf_r+0x40>
 800480a:	aa01      	add	r2, sp, #4
 800480c:	f000 f8be 	bl	800498c <_fstat_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	dbf2      	blt.n	80047fa <__swhatbuf_r+0x12>
 8004814:	9a02      	ldr	r2, [sp, #8]
 8004816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800481a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800481e:	425a      	negs	r2, r3
 8004820:	415a      	adcs	r2, r3
 8004822:	602a      	str	r2, [r5, #0]
 8004824:	e7ee      	b.n	8004804 <__swhatbuf_r+0x1c>
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	2000      	movs	r0, #0
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	b010      	add	sp, #64	; 0x40
 800482e:	bd70      	pop	{r4, r5, r6, pc}

08004830 <__smakebuf_r>:
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004834:	079d      	lsls	r5, r3, #30
 8004836:	4606      	mov	r6, r0
 8004838:	460c      	mov	r4, r1
 800483a:	d507      	bpl.n	800484c <__smakebuf_r+0x1c>
 800483c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2301      	movs	r3, #1
 8004846:	6163      	str	r3, [r4, #20]
 8004848:	b002      	add	sp, #8
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	ab01      	add	r3, sp, #4
 800484e:	466a      	mov	r2, sp
 8004850:	f7ff ffca 	bl	80047e8 <__swhatbuf_r>
 8004854:	9900      	ldr	r1, [sp, #0]
 8004856:	4605      	mov	r5, r0
 8004858:	4630      	mov	r0, r6
 800485a:	f7ff fa97 	bl	8003d8c <_malloc_r>
 800485e:	b948      	cbnz	r0, 8004874 <__smakebuf_r+0x44>
 8004860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004864:	059a      	lsls	r2, r3, #22
 8004866:	d4ef      	bmi.n	8004848 <__smakebuf_r+0x18>
 8004868:	f023 0303 	bic.w	r3, r3, #3
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	e7e3      	b.n	800483c <__smakebuf_r+0xc>
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <__smakebuf_r+0x7c>)
 8004876:	62b3      	str	r3, [r6, #40]	; 0x28
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	6020      	str	r0, [r4, #0]
 800487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	6120      	str	r0, [r4, #16]
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	b15b      	cbz	r3, 80048a4 <__smakebuf_r+0x74>
 800488c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004890:	4630      	mov	r0, r6
 8004892:	f000 f88d 	bl	80049b0 <_isatty_r>
 8004896:	b128      	cbz	r0, 80048a4 <__smakebuf_r+0x74>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	431d      	orrs	r5, r3
 80048a8:	81a5      	strh	r5, [r4, #12]
 80048aa:	e7cd      	b.n	8004848 <__smakebuf_r+0x18>
 80048ac:	08003be9 	.word	0x08003be9

080048b0 <memchr>:
 80048b0:	b510      	push	{r4, lr}
 80048b2:	b2c9      	uxtb	r1, r1
 80048b4:	4402      	add	r2, r0
 80048b6:	4290      	cmp	r0, r2
 80048b8:	4603      	mov	r3, r0
 80048ba:	d101      	bne.n	80048c0 <memchr+0x10>
 80048bc:	2000      	movs	r0, #0
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	781c      	ldrb	r4, [r3, #0]
 80048c2:	3001      	adds	r0, #1
 80048c4:	428c      	cmp	r4, r1
 80048c6:	d1f6      	bne.n	80048b6 <memchr+0x6>
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd10      	pop	{r4, pc}

080048cc <__malloc_lock>:
 80048cc:	4770      	bx	lr

080048ce <__malloc_unlock>:
 80048ce:	4770      	bx	lr

080048d0 <_free_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4605      	mov	r5, r0
 80048d4:	2900      	cmp	r1, #0
 80048d6:	d043      	beq.n	8004960 <_free_r+0x90>
 80048d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048dc:	1f0c      	subs	r4, r1, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfb8      	it	lt
 80048e2:	18e4      	addlt	r4, r4, r3
 80048e4:	f7ff fff2 	bl	80048cc <__malloc_lock>
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <_free_r+0x94>)
 80048ea:	6813      	ldr	r3, [r2, #0]
 80048ec:	4610      	mov	r0, r2
 80048ee:	b933      	cbnz	r3, 80048fe <_free_r+0x2e>
 80048f0:	6063      	str	r3, [r4, #4]
 80048f2:	6014      	str	r4, [r2, #0]
 80048f4:	4628      	mov	r0, r5
 80048f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048fa:	f7ff bfe8 	b.w	80048ce <__malloc_unlock>
 80048fe:	42a3      	cmp	r3, r4
 8004900:	d90b      	bls.n	800491a <_free_r+0x4a>
 8004902:	6821      	ldr	r1, [r4, #0]
 8004904:	1862      	adds	r2, r4, r1
 8004906:	4293      	cmp	r3, r2
 8004908:	bf01      	itttt	eq
 800490a:	681a      	ldreq	r2, [r3, #0]
 800490c:	685b      	ldreq	r3, [r3, #4]
 800490e:	1852      	addeq	r2, r2, r1
 8004910:	6022      	streq	r2, [r4, #0]
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	6004      	str	r4, [r0, #0]
 8004916:	e7ed      	b.n	80048f4 <_free_r+0x24>
 8004918:	4613      	mov	r3, r2
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	b10a      	cbz	r2, 8004922 <_free_r+0x52>
 800491e:	42a2      	cmp	r2, r4
 8004920:	d9fa      	bls.n	8004918 <_free_r+0x48>
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	1858      	adds	r0, r3, r1
 8004926:	42a0      	cmp	r0, r4
 8004928:	d10b      	bne.n	8004942 <_free_r+0x72>
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	4401      	add	r1, r0
 800492e:	1858      	adds	r0, r3, r1
 8004930:	4282      	cmp	r2, r0
 8004932:	6019      	str	r1, [r3, #0]
 8004934:	d1de      	bne.n	80048f4 <_free_r+0x24>
 8004936:	6810      	ldr	r0, [r2, #0]
 8004938:	6852      	ldr	r2, [r2, #4]
 800493a:	4401      	add	r1, r0
 800493c:	6019      	str	r1, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	e7d8      	b.n	80048f4 <_free_r+0x24>
 8004942:	d902      	bls.n	800494a <_free_r+0x7a>
 8004944:	230c      	movs	r3, #12
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	e7d4      	b.n	80048f4 <_free_r+0x24>
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1821      	adds	r1, r4, r0
 800494e:	428a      	cmp	r2, r1
 8004950:	bf01      	itttt	eq
 8004952:	6811      	ldreq	r1, [r2, #0]
 8004954:	6852      	ldreq	r2, [r2, #4]
 8004956:	1809      	addeq	r1, r1, r0
 8004958:	6021      	streq	r1, [r4, #0]
 800495a:	6062      	str	r2, [r4, #4]
 800495c:	605c      	str	r4, [r3, #4]
 800495e:	e7c9      	b.n	80048f4 <_free_r+0x24>
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	2000208c 	.word	0x2000208c

08004968 <_read_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4605      	mov	r5, r0
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	2200      	movs	r2, #0
 8004972:	4c05      	ldr	r4, [pc, #20]	; (8004988 <_read_r+0x20>)
 8004974:	6022      	str	r2, [r4, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 f84a 	bl	8004a10 <_read>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_read_r+0x1e>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	b103      	cbz	r3, 8004986 <_read_r+0x1e>
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20002124 	.word	0x20002124

0800498c <_fstat_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	2300      	movs	r3, #0
 8004990:	4c06      	ldr	r4, [pc, #24]	; (80049ac <_fstat_r+0x20>)
 8004992:	4605      	mov	r5, r0
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	f000 f821 	bl	80049e0 <_fstat>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d102      	bne.n	80049a8 <_fstat_r+0x1c>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	b103      	cbz	r3, 80049a8 <_fstat_r+0x1c>
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	bd38      	pop	{r3, r4, r5, pc}
 80049aa:	bf00      	nop
 80049ac:	20002124 	.word	0x20002124

080049b0 <_isatty_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	2300      	movs	r3, #0
 80049b4:	4c05      	ldr	r4, [pc, #20]	; (80049cc <_isatty_r+0x1c>)
 80049b6:	4605      	mov	r5, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	f000 f818 	bl	80049f0 <_isatty>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_isatty_r+0x1a>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_isatty_r+0x1a>
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20002124 	.word	0x20002124

080049d0 <_close>:
 80049d0:	2258      	movs	r2, #88	; 0x58
 80049d2:	4b02      	ldr	r3, [pc, #8]	; (80049dc <_close+0xc>)
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	4770      	bx	lr
 80049dc:	20002124 	.word	0x20002124

080049e0 <_fstat>:
 80049e0:	2258      	movs	r2, #88	; 0x58
 80049e2:	4b02      	ldr	r3, [pc, #8]	; (80049ec <_fstat+0xc>)
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	4770      	bx	lr
 80049ec:	20002124 	.word	0x20002124

080049f0 <_isatty>:
 80049f0:	2258      	movs	r2, #88	; 0x58
 80049f2:	4b02      	ldr	r3, [pc, #8]	; (80049fc <_isatty+0xc>)
 80049f4:	2000      	movs	r0, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20002124 	.word	0x20002124

08004a00 <_lseek>:
 8004a00:	2258      	movs	r2, #88	; 0x58
 8004a02:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <_lseek+0xc>)
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	4770      	bx	lr
 8004a0c:	20002124 	.word	0x20002124

08004a10 <_read>:
 8004a10:	2258      	movs	r2, #88	; 0x58
 8004a12:	4b02      	ldr	r3, [pc, #8]	; (8004a1c <_read+0xc>)
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	4770      	bx	lr
 8004a1c:	20002124 	.word	0x20002124

08004a20 <_sbrk>:
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <_sbrk+0x14>)
 8004a22:	4602      	mov	r2, r0
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	b909      	cbnz	r1, 8004a2c <_sbrk+0xc>
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <_sbrk+0x18>)
 8004a2a:	6019      	str	r1, [r3, #0]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	4402      	add	r2, r0
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	4770      	bx	lr
 8004a34:	20002094 	.word	0x20002094
 8004a38:	20002128 	.word	0x20002128

08004a3c <_init>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr

08004a48 <_fini>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr
