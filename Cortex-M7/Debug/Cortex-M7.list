
Cortex-M7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f20  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1ec  0800a1ec  0001a1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002074  20000000  0800a1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  20002074  0800c264  00022074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000216c  0800c264  0002216c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019d51  00000000  00000000  000220a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002915  00000000  00000000  0003bdf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d20  00000000  00000000  0003e708  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  0003f428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007db5  00000000  00000000  0003ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005eb6  00000000  00000000  00047d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ea  00000000  00000000  0004dc4b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d20  00000000  00000000  0004dd38  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00001d2f  00000000  00000000  00051a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  00053788  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0005380c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20002074 	.word	0x20002074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080072a8 	.word	0x080072a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20002078 	.word	0x20002078
 80002dc:	080072a8 	.word	0x080072a8

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b97a 	b.w	800074c <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	468c      	mov	ip, r1
 8000476:	460d      	mov	r5, r1
 8000478:	4604      	mov	r4, r0
 800047a:	9e08      	ldr	r6, [sp, #32]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d151      	bne.n	8000524 <__udivmoddi4+0xb4>
 8000480:	428a      	cmp	r2, r1
 8000482:	4617      	mov	r7, r2
 8000484:	d96d      	bls.n	8000562 <__udivmoddi4+0xf2>
 8000486:	fab2 fe82 	clz	lr, r2
 800048a:	f1be 0f00 	cmp.w	lr, #0
 800048e:	d00b      	beq.n	80004a8 <__udivmoddi4+0x38>
 8000490:	f1ce 0c20 	rsb	ip, lr, #32
 8000494:	fa01 f50e 	lsl.w	r5, r1, lr
 8000498:	fa20 fc0c 	lsr.w	ip, r0, ip
 800049c:	fa02 f70e 	lsl.w	r7, r2, lr
 80004a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80004a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80004a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80004ac:	0c25      	lsrs	r5, r4, #16
 80004ae:	fbbc f8fa 	udiv	r8, ip, sl
 80004b2:	fa1f f987 	uxth.w	r9, r7
 80004b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80004ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80004be:	fb08 f309 	mul.w	r3, r8, r9
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d90a      	bls.n	80004dc <__udivmoddi4+0x6c>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80004cc:	f080 8123 	bcs.w	8000716 <__udivmoddi4+0x2a6>
 80004d0:	42ab      	cmp	r3, r5
 80004d2:	f240 8120 	bls.w	8000716 <__udivmoddi4+0x2a6>
 80004d6:	f1a8 0802 	sub.w	r8, r8, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aed      	subs	r5, r5, r3
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80004e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80004e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004ec:	fb00 f909 	mul.w	r9, r0, r9
 80004f0:	45a1      	cmp	r9, r4
 80004f2:	d909      	bls.n	8000508 <__udivmoddi4+0x98>
 80004f4:	19e4      	adds	r4, r4, r7
 80004f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fa:	f080 810a 	bcs.w	8000712 <__udivmoddi4+0x2a2>
 80004fe:	45a1      	cmp	r9, r4
 8000500:	f240 8107 	bls.w	8000712 <__udivmoddi4+0x2a2>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	eba4 0409 	sub.w	r4, r4, r9
 800050c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000510:	2100      	movs	r1, #0
 8000512:	2e00      	cmp	r6, #0
 8000514:	d061      	beq.n	80005da <__udivmoddi4+0x16a>
 8000516:	fa24 f40e 	lsr.w	r4, r4, lr
 800051a:	2300      	movs	r3, #0
 800051c:	6034      	str	r4, [r6, #0]
 800051e:	6073      	str	r3, [r6, #4]
 8000520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000524:	428b      	cmp	r3, r1
 8000526:	d907      	bls.n	8000538 <__udivmoddi4+0xc8>
 8000528:	2e00      	cmp	r6, #0
 800052a:	d054      	beq.n	80005d6 <__udivmoddi4+0x166>
 800052c:	2100      	movs	r1, #0
 800052e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000532:	4608      	mov	r0, r1
 8000534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000538:	fab3 f183 	clz	r1, r3
 800053c:	2900      	cmp	r1, #0
 800053e:	f040 808e 	bne.w	800065e <__udivmoddi4+0x1ee>
 8000542:	42ab      	cmp	r3, r5
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xdc>
 8000546:	4282      	cmp	r2, r0
 8000548:	f200 80fa 	bhi.w	8000740 <__udivmoddi4+0x2d0>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb65 0503 	sbc.w	r5, r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	46ac      	mov	ip, r5
 8000556:	2e00      	cmp	r6, #0
 8000558:	d03f      	beq.n	80005da <__udivmoddi4+0x16a>
 800055a:	e886 1010 	stmia.w	r6, {r4, ip}
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	b912      	cbnz	r2, 800056a <__udivmoddi4+0xfa>
 8000564:	2701      	movs	r7, #1
 8000566:	fbb7 f7f2 	udiv	r7, r7, r2
 800056a:	fab7 fe87 	clz	lr, r7
 800056e:	f1be 0f00 	cmp.w	lr, #0
 8000572:	d134      	bne.n	80005de <__udivmoddi4+0x16e>
 8000574:	1beb      	subs	r3, r5, r7
 8000576:	0c3a      	lsrs	r2, r7, #16
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	2101      	movs	r1, #1
 800057e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000582:	0c25      	lsrs	r5, r4, #16
 8000584:	fb02 3318 	mls	r3, r2, r8, r3
 8000588:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058c:	fb0c f308 	mul.w	r3, ip, r8
 8000590:	42ab      	cmp	r3, r5
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x134>
 8000594:	19ed      	adds	r5, r5, r7
 8000596:	f108 30ff 	add.w	r0, r8, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x132>
 800059c:	42ab      	cmp	r3, r5
 800059e:	f200 80d1 	bhi.w	8000744 <__udivmoddi4+0x2d4>
 80005a2:	4680      	mov	r8, r0
 80005a4:	1aed      	subs	r5, r5, r3
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80005ac:	fb02 5510 	mls	r5, r2, r0, r5
 80005b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80005b4:	fb0c fc00 	mul.w	ip, ip, r0
 80005b8:	45a4      	cmp	ip, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x15c>
 80005bc:	19e4      	adds	r4, r4, r7
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x15a>
 80005c4:	45a4      	cmp	ip, r4
 80005c6:	f200 80b8 	bhi.w	800073a <__udivmoddi4+0x2ca>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 040c 	sub.w	r4, r4, ip
 80005d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d4:	e79d      	b.n	8000512 <__udivmoddi4+0xa2>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005de:	f1ce 0420 	rsb	r4, lr, #32
 80005e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80005e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80005ea:	fa20 f804 	lsr.w	r8, r0, r4
 80005ee:	0c3a      	lsrs	r2, r7, #16
 80005f0:	fa25 f404 	lsr.w	r4, r5, r4
 80005f4:	ea48 0803 	orr.w	r8, r8, r3
 80005f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80005fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000600:	fb02 4411 	mls	r4, r2, r1, r4
 8000604:	fa1f fc87 	uxth.w	ip, r7
 8000608:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800060c:	fb01 f30c 	mul.w	r3, r1, ip
 8000610:	42ab      	cmp	r3, r5
 8000612:	fa00 f40e 	lsl.w	r4, r0, lr
 8000616:	d909      	bls.n	800062c <__udivmoddi4+0x1bc>
 8000618:	19ed      	adds	r5, r5, r7
 800061a:	f101 30ff 	add.w	r0, r1, #4294967295
 800061e:	f080 808a 	bcs.w	8000736 <__udivmoddi4+0x2c6>
 8000622:	42ab      	cmp	r3, r5
 8000624:	f240 8087 	bls.w	8000736 <__udivmoddi4+0x2c6>
 8000628:	3902      	subs	r1, #2
 800062a:	443d      	add	r5, r7
 800062c:	1aeb      	subs	r3, r5, r3
 800062e:	fa1f f588 	uxth.w	r5, r8
 8000632:	fbb3 f0f2 	udiv	r0, r3, r2
 8000636:	fb02 3310 	mls	r3, r2, r0, r3
 800063a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800063e:	fb00 f30c 	mul.w	r3, r0, ip
 8000642:	42ab      	cmp	r3, r5
 8000644:	d907      	bls.n	8000656 <__udivmoddi4+0x1e6>
 8000646:	19ed      	adds	r5, r5, r7
 8000648:	f100 38ff 	add.w	r8, r0, #4294967295
 800064c:	d26f      	bcs.n	800072e <__udivmoddi4+0x2be>
 800064e:	42ab      	cmp	r3, r5
 8000650:	d96d      	bls.n	800072e <__udivmoddi4+0x2be>
 8000652:	3802      	subs	r0, #2
 8000654:	443d      	add	r5, r7
 8000656:	1aeb      	subs	r3, r5, r3
 8000658:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800065c:	e78f      	b.n	800057e <__udivmoddi4+0x10e>
 800065e:	f1c1 0720 	rsb	r7, r1, #32
 8000662:	fa22 f807 	lsr.w	r8, r2, r7
 8000666:	408b      	lsls	r3, r1
 8000668:	fa05 f401 	lsl.w	r4, r5, r1
 800066c:	ea48 0303 	orr.w	r3, r8, r3
 8000670:	fa20 fe07 	lsr.w	lr, r0, r7
 8000674:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000678:	40fd      	lsrs	r5, r7
 800067a:	ea4e 0e04 	orr.w	lr, lr, r4
 800067e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000682:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000686:	fb0c 5519 	mls	r5, ip, r9, r5
 800068a:	fa1f f883 	uxth.w	r8, r3
 800068e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000692:	fb09 f408 	mul.w	r4, r9, r8
 8000696:	42ac      	cmp	r4, r5
 8000698:	fa02 f201 	lsl.w	r2, r2, r1
 800069c:	fa00 fa01 	lsl.w	sl, r0, r1
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x244>
 80006a2:	18ed      	adds	r5, r5, r3
 80006a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80006a8:	d243      	bcs.n	8000732 <__udivmoddi4+0x2c2>
 80006aa:	42ac      	cmp	r4, r5
 80006ac:	d941      	bls.n	8000732 <__udivmoddi4+0x2c2>
 80006ae:	f1a9 0902 	sub.w	r9, r9, #2
 80006b2:	441d      	add	r5, r3
 80006b4:	1b2d      	subs	r5, r5, r4
 80006b6:	fa1f fe8e 	uxth.w	lr, lr
 80006ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80006be:	fb0c 5510 	mls	r5, ip, r0, r5
 80006c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80006c6:	fb00 f808 	mul.w	r8, r0, r8
 80006ca:	45a0      	cmp	r8, r4
 80006cc:	d907      	bls.n	80006de <__udivmoddi4+0x26e>
 80006ce:	18e4      	adds	r4, r4, r3
 80006d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d4:	d229      	bcs.n	800072a <__udivmoddi4+0x2ba>
 80006d6:	45a0      	cmp	r8, r4
 80006d8:	d927      	bls.n	800072a <__udivmoddi4+0x2ba>
 80006da:	3802      	subs	r0, #2
 80006dc:	441c      	add	r4, r3
 80006de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006e2:	eba4 0408 	sub.w	r4, r4, r8
 80006e6:	fba0 8902 	umull	r8, r9, r0, r2
 80006ea:	454c      	cmp	r4, r9
 80006ec:	46c6      	mov	lr, r8
 80006ee:	464d      	mov	r5, r9
 80006f0:	d315      	bcc.n	800071e <__udivmoddi4+0x2ae>
 80006f2:	d012      	beq.n	800071a <__udivmoddi4+0x2aa>
 80006f4:	b156      	cbz	r6, 800070c <__udivmoddi4+0x29c>
 80006f6:	ebba 030e 	subs.w	r3, sl, lr
 80006fa:	eb64 0405 	sbc.w	r4, r4, r5
 80006fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000702:	40cb      	lsrs	r3, r1
 8000704:	431f      	orrs	r7, r3
 8000706:	40cc      	lsrs	r4, r1
 8000708:	6037      	str	r7, [r6, #0]
 800070a:	6074      	str	r4, [r6, #4]
 800070c:	2100      	movs	r1, #0
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	4618      	mov	r0, r3
 8000714:	e6f8      	b.n	8000508 <__udivmoddi4+0x98>
 8000716:	4690      	mov	r8, r2
 8000718:	e6e0      	b.n	80004dc <__udivmoddi4+0x6c>
 800071a:	45c2      	cmp	sl, r8
 800071c:	d2ea      	bcs.n	80006f4 <__udivmoddi4+0x284>
 800071e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000722:	eb69 0503 	sbc.w	r5, r9, r3
 8000726:	3801      	subs	r0, #1
 8000728:	e7e4      	b.n	80006f4 <__udivmoddi4+0x284>
 800072a:	4628      	mov	r0, r5
 800072c:	e7d7      	b.n	80006de <__udivmoddi4+0x26e>
 800072e:	4640      	mov	r0, r8
 8000730:	e791      	b.n	8000656 <__udivmoddi4+0x1e6>
 8000732:	4681      	mov	r9, r0
 8000734:	e7be      	b.n	80006b4 <__udivmoddi4+0x244>
 8000736:	4601      	mov	r1, r0
 8000738:	e778      	b.n	800062c <__udivmoddi4+0x1bc>
 800073a:	3802      	subs	r0, #2
 800073c:	443c      	add	r4, r7
 800073e:	e745      	b.n	80005cc <__udivmoddi4+0x15c>
 8000740:	4608      	mov	r0, r1
 8000742:	e708      	b.n	8000556 <__udivmoddi4+0xe6>
 8000744:	f1a8 0802 	sub.w	r8, r8, #2
 8000748:	443d      	add	r5, r7
 800074a:	e72b      	b.n	80005a4 <__udivmoddi4+0x134>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f92b 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f80a 	bl	8000774 <HAL_InitTick>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e002      	b.n	8000770 <HAL_Init+0x20>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800076a:	f004 fdf1 	bl	8005350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f941 	bl	8000a1a <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f909 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20002008 	.word	0x20002008
 80007cc:	20000004 	.word	0x20000004
 80007d0:	20000000 	.word	0x20000000

080007d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000004 	.word	0x20000004
 80007f8:	20002090 	.word	0x20002090

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20002090 	.word	0x20002090

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <__NVIC_SetPriorityGrouping+0x40>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	4313      	orrs	r3, r2
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x40>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	05fa0000 	.word	0x05fa0000

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0b      	blt.n	80008a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088a:	4909      	ldr	r1, [pc, #36]	; (80008b0 <__NVIC_EnableIRQ+0x38>)
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000890:	095b      	lsrs	r3, r3, #5
 8000892:	88fa      	ldrh	r2, [r7, #6]
 8000894:	f002 021f 	and.w	r2, r2, #31
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f202 	lsl.w	r2, r0, r2
 800089e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	4909      	ldr	r1, [pc, #36]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	2201      	movs	r2, #1
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	401a      	ands	r2, r3
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094e:	2101      	movs	r1, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	1e59      	subs	r1, r3, #1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff2b 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff40 	bl	800085c <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff33 	bl	8000878 <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d106      	bne.n	8000a50 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a4e:	e005      	b.n	8000a5c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 0304 	bic.w	r3, r3, #4
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a70:	f000 f802 	bl	8000a78 <HAL_SYSTICK_Callback>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 
 8000aa2:	4b8b      	ldr	r3, [pc, #556]	; (8000cd0 <HAL_GPIO_Init+0x248>)
 8000aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e196      	b.n	8000dda <HAL_GPIO_Init+0x352>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000aac:	2201      	movs	r2, #1
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f040 8185 	bne.w	8000dd4 <HAL_GPIO_Init+0x34c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x52>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d123      	bne.n	8000b22 <HAL_GPIO_Init+0x9a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	69b9      	ldr	r1, [r7, #24]
 8000b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	4013      	ands	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0203 	and.w	r2, r3, #3
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d00b      	beq.n	8000b76 <HAL_GPIO_Init+0xee>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6a:	2b11      	cmp	r3, #17
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b12      	cmp	r3, #18
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0x150>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80df 	beq.w	8000dd4 <HAL_GPIO_Init+0x34c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x24c>)
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_GPIO_Init+0x24c>)
 8000c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_GPIO_Init+0x24c>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <HAL_GPIO_Init+0x250>)
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_GPIO_Init+0x254>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d051      	beq.n	8000d04 <HAL_GPIO_Init+0x27c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_GPIO_Init+0x258>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d031      	beq.n	8000ccc <HAL_GPIO_Init+0x244>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_GPIO_Init+0x25c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d02b      	beq.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_GPIO_Init+0x260>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x23c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_GPIO_Init+0x264>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x238>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <HAL_GPIO_Init+0x268>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x234>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_GPIO_Init+0x26c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x230>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_GPIO_Init+0x270>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x22c>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_GPIO_Init+0x274>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_GPIO_Init+0x278>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x224>
 8000ca8:	2309      	movs	r3, #9
 8000caa:	e02c      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cac:	230a      	movs	r3, #10
 8000cae:	e02a      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	e028      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	e026      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cb8:	2306      	movs	r3, #6
 8000cba:	e024      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	e022      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e020      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e01e      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e01c      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e01a      	b.n	8000d06 <HAL_GPIO_Init+0x27e>
 8000cd0:	58000080 	.word	0x58000080
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58000400 	.word	0x58000400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58020800 	.word	0x58020800
 8000ce8:	58020c00 	.word	0x58020c00
 8000cec:	58021000 	.word	0x58021000
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58021800 	.word	0x58021800
 8000cf8:	58021c00 	.word	0x58021c00
 8000cfc:	58022000 	.word	0x58022000
 8000d00:	58022400 	.word	0x58022400
 8000d04:	2300      	movs	r3, #0
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d16:	4936      	ldr	r1, [pc, #216]	; (8000df0 <HAL_GPIO_Init+0x368>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->IMR1 = temp;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_Ptr->EMR1;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x2ea>
        {
          temp |= iocurrent;
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->EMR1 = temp;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x316>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x344>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	f67f ae65 	bls.w	8000aac <HAL_GPIO_Init+0x24>
      }      
    }
  }
}
 8000de2:	bf00      	nop
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	58000400 	.word	0x58000400

08000df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e04:	787b      	ldrb	r3, [r7, #1]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	887a      	ldrh	r2, [r7, #2]
 8000e16:	835a      	strh	r2, [r3, #26]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 8086 	beq.w	8000f4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e3e:	4b93      	ldr	r3, [pc, #588]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e46:	2b10      	cmp	r3, #16
 8000e48:	d00b      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3e>
 8000e4a:	4b90      	ldr	r3, [pc, #576]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e52:	2b18      	cmp	r3, #24
 8000e54:	d111      	bne.n	8000e7a <HAL_RCC_OscConfig+0x56>
 8000e56:	4b8d      	ldr	r3, [pc, #564]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d10b      	bne.n	8000e7a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	4b8a      	ldr	r3, [pc, #552]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d06c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x124>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d168      	bne.n	8000f48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e364      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x6e>
 8000e84:	4a81      	ldr	r2, [pc, #516]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e86:	4b81      	ldr	r3, [pc, #516]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e02e      	b.n	8000ef0 <HAL_RCC_OscConfig+0xcc>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x90>
 8000e9a:	4a7c      	ldr	r2, [pc, #496]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e9c:	4b7b      	ldr	r3, [pc, #492]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4a79      	ldr	r2, [pc, #484]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ea8:	4b78      	ldr	r3, [pc, #480]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01d      	b.n	8000ef0 <HAL_RCC_OscConfig+0xcc>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xb4>
 8000ebe:	4a73      	ldr	r2, [pc, #460]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ec0:	4b72      	ldr	r3, [pc, #456]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4a70      	ldr	r2, [pc, #448]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ecc:	4b6f      	ldr	r3, [pc, #444]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0xcc>
 8000ed8:	4a6c      	ldr	r2, [pc, #432]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000eda:	4b6c      	ldr	r3, [pc, #432]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4a69      	ldr	r2, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc80 	bl	80007fc <HAL_GetTick>
 8000efc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xee>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fc7c 	bl	80007fc <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e318      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	4b5e      	ldr	r3, [pc, #376]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0xdc>
 8000f1e:	e014      	b.n	8000f4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc6c 	bl	80007fc <HAL_GetTick>
 8000f24:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x116>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fc68 	bl	80007fc <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e304      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x104>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80a2 	beq.w	800109c <HAL_RCC_OscConfig+0x278>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <HAL_RCC_OscConfig+0x158>
 8000f64:	4b49      	ldr	r3, [pc, #292]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f6c:	2b18      	cmp	r3, #24
 8000f6e:	d143      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1d4>
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d13d      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1d4>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x170>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e2d7      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f94:	493d      	ldr	r1, [pc, #244]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 0219 	bic.w	r2, r3, #25
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc29 	bl	80007fc <HAL_GetTick>
 8000faa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x19c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc25 	bl	80007fc <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e2c1      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x18a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	482f      	ldr	r0, [pc, #188]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8000fde:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fe2:	fa91 f1a1 	rbit	r1, r1
 8000fe6:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fea:	fab1 f181 	clz	r1, r1
 8000fee:	b2c9      	uxtb	r1, r1
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff6:	e051      	b.n	800109c <HAL_RCC_OscConfig+0x278>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d031      	beq.n	8001064 <HAL_RCC_OscConfig+0x240>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001000:	4922      	ldr	r1, [pc, #136]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0219 	bic.w	r2, r3, #25
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff fbf3 	bl	80007fc <HAL_GetTick>
 8001016:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x208>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fbef 	bl	80007fc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e28b      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_RCC_OscConfig+0x268>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <HAL_RCC_OscConfig+0x268>)
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_RCC_OscConfig+0x268>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 800104a:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800104e:	fa91 f1a1 	rbit	r1, r1
 8001052:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001056:	fab1 f181 	clz	r1, r1
 800105a:	b2c9      	uxtb	r1, r1
 800105c:	408b      	lsls	r3, r1
 800105e:	4313      	orrs	r3, r2
 8001060:	6043      	str	r3, [r0, #4]
 8001062:	e01b      	b.n	800109c <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_RCC_OscConfig+0x268>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fbc4 	bl	80007fc <HAL_GetTick>
 8001074:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0x26c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff fbc0 	bl	80007fc <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d904      	bls.n	8001090 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e25c      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
 800108a:	bf00      	nop
 800108c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001090:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ed      	bne.n	8001078 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d07f      	beq.n	80011a8 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80010a8:	4b9a      	ldr	r3, [pc, #616]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d00b      	beq.n	80010cc <HAL_RCC_OscConfig+0x2a8>
 80010b4:	4b97      	ldr	r3, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010bc:	2b18      	cmp	r3, #24
 80010be:	d127      	bne.n	8001110 <HAL_RCC_OscConfig+0x2ec>
 80010c0:	4b94      	ldr	r3, [pc, #592]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d121      	bne.n	8001110 <HAL_RCC_OscConfig+0x2ec>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010cc:	4b91      	ldr	r3, [pc, #580]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2c0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b80      	cmp	r3, #128	; 0x80
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2c0>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e22f      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010e4:	488b      	ldr	r0, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010e6:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	f04f 41f8 	mov.w	r1, #2080374784	; 0x7c000000
 80010f6:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	fa91 f1a1 	rbit	r1, r1
 80010fe:	61f9      	str	r1, [r7, #28]
  return result;
 8001100:	69f9      	ldr	r1, [r7, #28]
 8001102:	fab1 f181 	clz	r1, r1
 8001106:	b2c9      	uxtb	r1, r1
 8001108:	408b      	lsls	r3, r1
 800110a:	4313      	orrs	r3, r2
 800110c:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800110e:	e04b      	b.n	80011a8 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02e      	beq.n	8001176 <HAL_RCC_OscConfig+0x352>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001118:	4a7e      	ldr	r2, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800111a:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb6a 	bl	80007fc <HAL_GetTick>
 8001128:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x31a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800112c:	f7ff fb66 	bl	80007fc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e202      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800113e:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800114a:	4872      	ldr	r0, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800114c:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f04f 41f8 	mov.w	r1, #2080374784	; 0x7c000000
 800115c:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	fa91 f1a1 	rbit	r1, r1
 8001164:	6179      	str	r1, [r7, #20]
  return result;
 8001166:	6979      	ldr	r1, [r7, #20]
 8001168:	fab1 f181 	clz	r1, r1
 800116c:	b2c9      	uxtb	r1, r1
 800116e:	408b      	lsls	r3, r1
 8001170:	4313      	orrs	r3, r2
 8001172:	6043      	str	r3, [r0, #4]
 8001174:	e018      	b.n	80011a8 <HAL_RCC_OscConfig+0x384>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001176:	4a67      	ldr	r2, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001178:	4b66      	ldr	r3, [pc, #408]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fb3b 	bl	80007fc <HAL_GetTick>
 8001186:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x378>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800118a:	f7ff fb37 	bl	80007fc <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e1d3      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d036      	beq.n	8001222 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80011c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff fb18 	bl	80007fc <HAL_GetTick>
 80011cc:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fb14 	bl	80007fc <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1b0      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80011e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x3ac>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80011f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff fafe 	bl	80007fc <HAL_GetTick>
 8001200:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x3f2>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fafa 	bl	80007fc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e196      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x3e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d036      	beq.n	800129c <HAL_RCC_OscConfig+0x478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d019      	beq.n	800126a <HAL_RCC_OscConfig+0x446>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001236:	4a37      	ldr	r2, [pc, #220]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001240:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8001242:	f7ff fadb 	bl	80007fc <HAL_GetTick>
 8001246:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800124a:	f7ff fad7 	bl	80007fc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e173      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x426>
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x478>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001274:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8001276:	f7ff fac1 	bl	80007fc <HAL_GetTick>
 800127a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800127e:	f7ff fabd 	bl	80007fc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e159      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x45a>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8085 	beq.w	80013b4 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012b6:	f7ff faa1 	bl	80007fc <HAL_GetTick>
 80012ba:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x4ac>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fa9d 	bl	80007fc <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x4ac>
      {
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e139      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x49a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4ce>
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
 80012f0:	e031      	b.n	8001356 <HAL_RCC_OscConfig+0x532>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d110      	bne.n	800131c <HAL_RCC_OscConfig+0x4f8>
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_RCC_OscConfig+0x4f0>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	e020      	b.n	8001356 <HAL_RCC_OscConfig+0x532>
 8001314:	58024400 	.word	0x58024400
 8001318:	58024800 	.word	0x58024800
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x51a>
 8001324:	4a89      	ldr	r2, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	4a86      	ldr	r2, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001332:	4b86      	ldr	r3, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x532>
 800133e:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001340:	4b82      	ldr	r3, [pc, #520]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800134c:	4b7f      	ldr	r3, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff fa4d 	bl	80007fc <HAL_GetTick>
 8001362:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x558>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fa49 	bl	80007fc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0e3      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ee      	beq.n	8001366 <HAL_RCC_OscConfig+0x542>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fa37 	bl	80007fc <HAL_GetTick>
 800138e:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x584>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fa33 	bl	80007fc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0cd      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x56e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80c2 	beq.w	8001542 <HAL_RCC_OscConfig+0x71e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c6:	2b18      	cmp	r3, #24
 80013c8:	f000 80b9 	beq.w	800153e <HAL_RCC_OscConfig+0x71a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	f040 809a 	bne.w	800150a <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4a5d      	ldr	r2, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80013d8:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fa0b 	bl	80007fc <HAL_GetTick>
 80013e6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x5d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fa07 	bl	80007fc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0a3      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4850      	ldr	r0, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140e:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_OscConfig+0x72c>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	430a      	orrs	r2, r1
 800141e:	4313      	orrs	r3, r2
 8001420:	6283      	str	r3, [r0, #40]	; 0x28
 8001422:	494a      	ldr	r1, [pc, #296]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	3b01      	subs	r3, #1
 800142a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	3b01      	subs	r3, #1
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	b29b      	uxth	r3, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	3b01      	subs	r3, #1
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	3b01      	subs	r3, #1
 800144e:	061b      	lsls	r3, r3, #24
 8001450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001454:	4313      	orrs	r3, r2
 8001456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800145a:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800145c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x730>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001466:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800146a:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	fa91 f1a1 	rbit	r1, r1
 8001472:	60f9      	str	r1, [r7, #12]
  return result;
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	fab1 f181 	clz	r1, r1
 800147a:	b2c9      	uxtb	r1, r1
 800147c:	408a      	lsls	r2, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	6343      	str	r3, [r0, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */ 
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001482:	4932      	ldr	r1, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f023 020c 	bic.w	r2, r3, #12
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4313      	orrs	r3, r2
 8001492:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001494:	492d      	ldr	r1, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	f023 0202 	bic.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4313      	orrs	r3, r2
 80014a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80014a6:	4a29      	ldr	r2, [pc, #164]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014b2:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 
        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80014ca:	4a20      	ldr	r2, [pc, #128]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff f98b 	bl	80007fc <HAL_GetTick>
 80014e6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x6d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff f987 	bl	80007fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e023      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x728>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x6c6>
 8001508:	e01b      	b.n	8001542 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x728>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff f971 	bl	80007fc <HAL_GetTick>
 800151a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x70c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f96d 	bl	80007fc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e009      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_RCC_OscConfig+0x728>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x6fa>
 800153c:	e001      	b.n	8001542 <HAL_RCC_OscConfig+0x71e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x720>
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3738      	adds	r7, #56	; 0x38
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	58024400 	.word	0x58024400
 8001550:	fffffc0c 	.word	0xfffffc0c
 8001554:	ffff0007 	.word	0xffff0007

08001558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001566:	4b9d      	ldr	r3, [pc, #628]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0207 	and.w	r2, r3, #7
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d210      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001574:	4999      	ldr	r1, [pc, #612]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001576:	4b99      	ldr	r3, [pc, #612]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001584:	4b95      	ldr	r3, [pc, #596]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0207 	and.w	r2, r3, #7
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e11d      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
    }

  }
   /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x5c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a2:	498f      	ldr	r1, [pc, #572]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015a4:	4b8e      	ldr	r3, [pc, #568]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f023 020f 	bic.w	r2, r3, #15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	618b      	str	r3, [r1, #24]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8097 	beq.w	80016f0 <HAL_RCC_ClockConfig+0x198>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80015c2:	4987      	ldr	r1, [pc, #540]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015c4:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d107      	bne.n	80015ec <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015dc:	4b80      	ldr	r3, [pc, #512]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d121      	bne.n	800162c <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0f2      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_ClockConfig+0xac>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	4b7a      	ldr	r3, [pc, #488]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d115      	bne.n	800162c <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0e6      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_ClockConfig+0xc4>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800160c:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0da      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0d2      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800162c:	496c      	ldr	r1, [pc, #432]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800162e:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f023 0207 	bic.w	r2, r3, #7
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4313      	orrs	r3, r2
 800163c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff f8dd 	bl	80007fc <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d112      	bne.n	8001672 <HAL_RCC_ClockConfig+0x11a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_ClockConfig+0x10c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164e:	f7ff f8d5 	bl	80007fc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_ClockConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0b6      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001664:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800166c:	2b10      	cmp	r3, #16
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_ClockConfig+0xf6>
 8001670:	e03e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x148>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x13a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f8be 	bl	80007fc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x13a>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e09f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001692:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800169a:	2b18      	cmp	r3, #24
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_ClockConfig+0x124>
 800169e:	e027      	b.n	80016f0 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d11d      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x18c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_ClockConfig+0x168>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7ff f8a7 	bl	80007fc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x168>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e088      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_ClockConfig+0x152>
 80016cc:	e010      	b.n	80016f0 <HAL_RCC_ClockConfig+0x198>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7ff f895 	bl	80007fc <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e076      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_ClockConfig+0x176>
        }
      }
    }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0207 	and.w	r2, r3, #7
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d910      	bls.n	8001720 <HAL_RCC_ClockConfig+0x1c8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 0207 	bic.w	r2, r3, #7
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0207 	and.w	r2, r3, #7
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x1c8>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e058      	b.n	80017d2 <HAL_RCC_ClockConfig+0x27a>
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x1e6>
  {
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800172c:	492c      	ldr	r1, [pc, #176]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	618b      	str	r3, [r1, #24]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800174a:	4925      	ldr	r1, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	61cb      	str	r3, [r1, #28]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x222>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001768:	491d      	ldr	r1, [pc, #116]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61cb      	str	r3, [r1, #28]
  }


  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_RCC_ClockConfig+0x240>
  {
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001786:	4916      	ldr	r1, [pc, #88]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4313      	orrs	r3, r2
 8001796:	620b      	str	r3, [r1, #32]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001798:	f000 f828 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 800179c:	4601      	mov	r1, r0
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80017a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	fa92 f2a2 	rbit	r2, r2
 80017b2:	60fa      	str	r2, [r7, #12]
  return result;
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	fab2 f282 	clz	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	40d3      	lsrs	r3, r2
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x28c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	fa21 f303 	lsr.w	r3, r1, r3
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_RCC_ClockConfig+0x290>)
 80017c8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7fe ffd2 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	52002000 	.word	0x52002000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	08007318 	.word	0x08007318
 80017e8:	20002008 	.word	0x20002008

080017ec <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	2301      	movs	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 float fracn1=0, pllvco = 0;
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 uint32_t sysclockfreq = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001816:	4ba8      	ldr	r3, [pc, #672]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181e:	2b18      	cmp	r3, #24
 8001820:	f200 813f 	bhi.w	8001aa2 <HAL_RCC_GetSysClockFreq+0x2b6>
 8001824:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_RCC_GetSysClockFreq+0x40>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	08001891 	.word	0x08001891
 8001830:	08001aa3 	.word	0x08001aa3
 8001834:	08001aa3 	.word	0x08001aa3
 8001838:	08001aa3 	.word	0x08001aa3
 800183c:	08001aa3 	.word	0x08001aa3
 8001840:	08001aa3 	.word	0x08001aa3
 8001844:	08001aa3 	.word	0x08001aa3
 8001848:	08001aa3 	.word	0x08001aa3
 800184c:	080018b7 	.word	0x080018b7
 8001850:	08001aa3 	.word	0x08001aa3
 8001854:	08001aa3 	.word	0x08001aa3
 8001858:	08001aa3 	.word	0x08001aa3
 800185c:	08001aa3 	.word	0x08001aa3
 8001860:	08001aa3 	.word	0x08001aa3
 8001864:	08001aa3 	.word	0x08001aa3
 8001868:	08001aa3 	.word	0x08001aa3
 800186c:	080018bd 	.word	0x080018bd
 8001870:	08001aa3 	.word	0x08001aa3
 8001874:	08001aa3 	.word	0x08001aa3
 8001878:	08001aa3 	.word	0x08001aa3
 800187c:	08001aa3 	.word	0x08001aa3
 8001880:	08001aa3 	.word	0x08001aa3
 8001884:	08001aa3 	.word	0x08001aa3
 8001888:	08001aa3 	.word	0x08001aa3
 800188c:	080018c3 	.word	0x080018c3
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001890:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0xc4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800189c:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	4a85      	ldr	r2, [pc, #532]	; (8001abc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }
      
    break;
 80018ae:	e0fb      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x2bc>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80018b0:	4b82      	ldr	r3, [pc, #520]	; (8001abc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80018b2:	61bb      	str	r3, [r7, #24]
    break;
 80018b4:	e0f8      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018b8:	61bb      	str	r3, [r7, #24]
    break;
 80018ba:	e0f5      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80018bc:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018be:	61bb      	str	r3, [r7, #24]
    break;
 80018c0:	e0f2      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x2bc>
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d6:	60fb      	str	r3, [r7, #12]
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80018d8:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80018e2:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	08db      	lsrs	r3, r3, #3
 80018e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	edc7 7a00 	vstr	s15, [r7]

    switch (pllsource)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d055      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x1c4>
 8001904:	2b01      	cmp	r3, #1
 8001906:	d302      	bcc.n	800190e <HAL_RCC_GetSysClockFreq+0x122>
 8001908:	2b02      	cmp	r3, #2
 800190a:	d072      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x206>
 800190c:	e092      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x248>
    {
    case 0x00:  /* HSI used as PLL clock source */

     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d029      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x182>
      {
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	607b      	str	r3, [r7, #4]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800193c:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800194c:	ed97 6a00 	vldr	s12, [r7]
 8001950:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8001ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800195c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      }
      break;
 800196c:	e083      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x28a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800196e:	4a53      	ldr	r2, [pc, #332]	; (8001abc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800198e:	ed97 6a00 	vldr	s12, [r7]
 8001992:	eddf 5a4d 	vldr	s11, [pc, #308]	; 8001ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800199a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800199e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80019ae:	e062      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x01:  /* CSI used as PLL clock source */
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80019b0:	4a43      	ldr	r2, [pc, #268]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019d0:	ed97 6a00 	vldr	s12, [r7]
 80019d4:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8001ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80019d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80019f0:	e041      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a12:	ed97 6a00 	vldr	s12, [r7]
 8001a16:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8001ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001a32:	e020      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x28a>

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a54:	ed97 6a00 	vldr	s12, [r7]
 8001a58:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8001ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8001a74:	bf00      	nop
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9a:	ee17 3a90 	vmov	r3, s15
 8001a9e:	61bb      	str	r3, [r7, #24]
    break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x2bc>

  default:
    sysclockfreq = CSI_VALUE;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa4:	61bb      	str	r3, [r7, #24]
    break;
 8001aa6:	bf00      	nop
  }

  return sysclockfreq;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	03d09000 	.word	0x03d09000
 8001ac0:	003d0900 	.word	0x003d0900
 8001ac4:	007a1200 	.word	0x007a1200
 8001ac8:	46000000 	.word	0x46000000

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8001ad2:	f001 fad5 	bl	8003080 <HAL_RCCEx_GetD1SysClockFreq>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x44>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	fa92 f2a2 	rbit	r2, r2
 8001aea:	603a      	str	r2, [r7, #0]
  return result;
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	40d3      	lsrs	r3, r2
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x48>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	fa21 f303 	lsr.w	r3, r1, r3
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001b00:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	08007318 	.word	0x08007318
 8001b18:	2000200c 	.word	0x2000200c

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8001b22:	f7ff ffd3 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b26:	4601      	mov	r1, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b30:	2210      	movs	r2, #16
 8001b32:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	fa92 f2a2 	rbit	r2, r2
 8001b3a:	603a      	str	r2, [r7, #0]
  return result;
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	fab2 f282 	clz	r2, r2
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	40d3      	lsrs	r3, r2
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	08007318 	.word	0x08007318

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8001b66:	f7ff ffb1 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	fa92 f2a2 	rbit	r2, r2
 8001b80:	603a      	str	r2, [r7, #0]
  return result;
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	40d3      	lsrs	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	08007318 	.word	0x08007318

08001ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d049      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bd0:	d013      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bd6:	d802      	bhi.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001bdc:	e029      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001be2:	d018      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001be8:	d026      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001bea:	e022      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bec:	4aa9      	ldr	r2, [pc, #676]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bee:	4ba9      	ldr	r3, [pc, #676]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001bf8:	e01f      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      
    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001bfa:	4aa6      	ldr	r2, [pc, #664]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfc:	4ba5      	ldr	r3, [pc, #660]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c04:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fa60 	bl	80030d0 <RCCEx_PLL2_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001c14:	e011      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      
    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001c16:	4a9f      	ldr	r2, [pc, #636]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c18:	4b9e      	ldr	r3, [pc, #632]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c20:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3324      	adds	r3, #36	; 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fad2 	bl	80031d0 <RCCEx_PLL3_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001c30:	e003      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
      break;
 8001c36:	e000      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      break;
 8001c38:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001c40:	4994      	ldr	r1, [pc, #592]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c42:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	650b      	str	r3, [r1, #80]	; 0x50
 8001c52:	e003      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001c54:	7dba      	ldrb	r2, [r7, #22]
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI1 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d049      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d830      	bhi.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c8d 	.word	0x08001c8d
 8001c7c:	08001c9b 	.word	0x08001c9b
 8001c80:	08001cb7 	.word	0x08001cb7
 8001c84:	08001cd9 	.word	0x08001cd9
 8001c88:	08001cd9 	.word	0x08001cd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c8c:	4a81      	ldr	r2, [pc, #516]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001c98:	e01f      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x136>
      
    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	4b7d      	ldr	r3, [pc, #500]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 fa10 	bl	80030d0 <RCCEx_PLL2_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001cb4:	e011      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x136>
      
    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb8:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3324      	adds	r3, #36	; 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fa82 	bl	80031d0 <RCCEx_PLL3_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001cd0:	e003      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x136>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8001cd6:	e000      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x136>
      break;
 8001cd8:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce0:	496c      	ldr	r1, [pc, #432]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8001cf2:	e003      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001cf4:	7dba      	ldrb	r2, [r7, #22]
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d04a      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d021      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d804      	bhi.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d00d      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8001d1c:	e028      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8001d20:	d029      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d028      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8001d28:	e022      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2a:	4a5a      	ldr	r2, [pc, #360]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001d36:	e021      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      
    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d42:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 f9c1 	bl	80030d0 <RCCEx_PLL2_Config>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001d52:	e013      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      
    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001d54:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d56:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3324      	adds	r3, #36	; 0x24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fa33 	bl	80031d0 <RCCEx_PLL3_Config>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      break;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      break;
 8001d7a:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001d82:	4944      	ldr	r1, [pc, #272]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4313      	orrs	r3, r2
 8001d92:	650b      	str	r3, [r1, #80]	; 0x50
 8001d94:	e003      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001d96:	7dba      	ldrb	r2, [r7, #22]
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SAI4A configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d050      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db4:	d024      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8001db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dba:	d805      	bhi.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8001dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc4:	d00e      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001dc6:	e029      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8001dc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001dcc:	d029      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8001dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd2:	d028      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8001dd4:	e022      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001de2:	e021      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      
    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dee:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f96b 	bl	80030d0 <RCCEx_PLL2_Config>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001dfe:	e013      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      
    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3324      	adds	r3, #36	; 0x24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 f9dd 	bl	80031d0 <RCCEx_PLL3_Config>
 8001e16:	4603      	mov	r3, r0
 8001e18:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001e20:	e002      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      break;
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      break;
 8001e26:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001e2e:	4919      	ldr	r1, [pc, #100]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	658b      	str	r3, [r1, #88]	; 0x58
 8001e42:	e003      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001e44:	7dba      	ldrb	r2, [r7, #22]
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d053      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e62:	d027      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e68:	d805      	bhi.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8001e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e72:	d011      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001e74:	e02c      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8001e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e80:	d02b      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001e82:	e025      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e86:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e90:	e024      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x338>
 8001e92:	bf00      	nop
 8001e94:	58024400 	.word	0x58024400
      
    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e98:	4aac      	ldr	r2, [pc, #688]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e9a:	4bac      	ldr	r3, [pc, #688]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 f911 	bl	80030d0 <RCCEx_PLL2_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	75fb      	strb	r3, [r7, #23]
      
      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001eb2:	e013      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x338>
      
    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001eb4:	4aa5      	ldr	r2, [pc, #660]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001eb6:	4ba5      	ldr	r3, [pc, #660]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3324      	adds	r3, #36	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 f983 	bl	80031d0 <RCCEx_PLL3_Config>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]
      
      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ece:	e005      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x338>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ed4:	e002      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x338>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x338>
      break;
 8001eda:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001ee2:	499a      	ldr	r1, [pc, #616]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001ee4:	4b99      	ldr	r3, [pc, #612]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8001ef6:	e003      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001ef8:	7dba      	ldrb	r2, [r7, #22]
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d039      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d009      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d802      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01d      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8001f1c:	e019      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d009      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001f22:	2b30      	cmp	r3, #48	; 0x30
 8001f24:	d01a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001f26:	e014      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f28:	4a88      	ldr	r2, [pc, #544]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f32:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001f34:	e013      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      
    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001f36:	4a85      	ldr	r2, [pc, #532]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f38:	4b84      	ldr	r3, [pc, #528]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f40:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 f8c2 	bl	80030d0 <RCCEx_PLL2_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]
      
      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001f50:	e005      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;
      
    default:
      ret = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      break;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      break;
 8001f5c:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001f64:	4979      	ldr	r1, [pc, #484]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	4313      	orrs	r3, r2
 8001f74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001f76:	e003      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8001f78:	7dba      	ldrb	r2, [r7, #22]
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d04e      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f94:	d024      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8001f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9a:	d805      	bhi.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001fa6:	e029      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x458>
 8001fa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001fac:	d029      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8001fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb2:	d028      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8001fb4:	e022      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001fc2:	e021      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      
    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001fc4:	4a61      	ldr	r2, [pc, #388]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fc6:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 f87b 	bl	80030d0 <RCCEx_PLL2_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001fde:	e013      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      
    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001fe0:	4a5a      	ldr	r2, [pc, #360]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fe2:	4b5a      	ldr	r3, [pc, #360]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fea:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3324      	adds	r3, #36	; 0x24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 f8ed 	bl	80031d0 <RCCEx_PLL3_Config>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	75fb      	strb	r3, [r7, #23]
      
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8002000:	e002      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      break;
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x464>
      break;
 8002006:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800200e:	494f      	ldr	r1, [pc, #316]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002010:	4b4e      	ldr	r3, [pc, #312]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002014:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	4313      	orrs	r3, r2
 800201e:	650b      	str	r3, [r1, #80]	; 0x50
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002022:	7dba      	ldrb	r2, [r7, #22]
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	4313      	orrs	r3, r2
 8002028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04e      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800203e:	d020      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002044:	d805      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02c      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002050:	e025      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002056:	d027      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205c:	d026      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800205e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002062:	d025      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002064:	e01b      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
      
    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002066:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002070:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f82a 	bl	80030d0 <RCCEx_PLL2_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	75fb      	strb	r3, [r7, #23]
      
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002080:	e017      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3324      	adds	r3, #36	; 0x24
 8002092:	4618      	mov	r0, r3
 8002094:	f001 f89c 	bl	80031d0 <RCCEx_PLL3_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800209c:	e009      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
      break;
 80020a2:	e006      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 80020a4:	bf00      	nop
 80020a6:	e004      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 80020a8:	bf00      	nop
 80020aa:	e002      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      break;
 80020b0:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x528>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80020b8:	4924      	ldr	r1, [pc, #144]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4313      	orrs	r3, r2
 80020c8:	650b      	str	r3, [r1, #80]	; 0x50
 80020ca:	e003      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80020cc:	7dba      	ldrb	r2, [r7, #22]
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- SPI6 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d053      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80020e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ea:	d020      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80020ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f0:	d805      	bhi.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02f      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80020f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80020fc:	e028      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d02a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8002104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002108:	d029      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800210a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800210e:	d028      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002110:	e01e      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
      
    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800211c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	4618      	mov	r0, r3
 8002124:	f000 ffd4 	bl	80030d0 <RCCEx_PLL2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	75fb      	strb	r3, [r7, #23]
      
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800212c:	e01a      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002138:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3324      	adds	r3, #36	; 0x24
 800213e:	4618      	mov	r0, r3
 8002140:	f001 f846 	bl	80031d0 <RCCEx_PLL3_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002148:	e00c      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800214a:	bf00      	nop
 800214c:	58024400 	.word	0x58024400
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
      break;
 8002154:	e006      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      break;
 8002162:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800216a:	498b      	ldr	r1, [pc, #556]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800216c:	4b8a      	ldr	r3, [pc, #552]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800217a:	4313      	orrs	r3, r2
 800217c:	658b      	str	r3, [r1, #88]	; 0x58
 800217e:	e003      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002180:	7dba      	ldrb	r2, [r7, #22]
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	4313      	orrs	r3, r2
 8002186:	75bb      	strb	r3, [r7, #22]
  }
  
  
#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d034      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800219c:	d005      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x606>
 800219e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x636>
 80021a8:	e014      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80021b6:	e011      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      
    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021ba:	4b77      	ldr	r3, [pc, #476]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 ff81 	bl	80030d0 <RCCEx_PLL2_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]
      
      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80021d2:	e003      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
      break;
 80021d8:	e000      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      break;
 80021da:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021e2:	496d      	ldr	r1, [pc, #436]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f0:	4313      	orrs	r3, r2
 80021f2:	650b      	str	r3, [r1, #80]	; 0x50
 80021f4:	e003      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80021f6:	7dba      	ldrb	r2, [r7, #22]
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  
#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d038      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	2b03      	cmp	r3, #3
 8002210:	d81f      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002259 	.word	0x08002259
 800221c:	08002229 	.word	0x08002229
 8002220:	08002237 	.word	0x08002237
 8002224:	08002259 	.word	0x08002259
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002228:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002232:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* FMC clock source configuration done later after clock selection check */
      break;
 8002234:	e011      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      
    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002236:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002240:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	4618      	mov	r0, r3
 8002248:	f000 ff42 	bl	80030d0 <RCCEx_PLL2_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	75fb      	strb	r3, [r7, #23]
      
      /* FMC clock source configuration done later after clock selection check */
      break;
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;
      
    default:
      ret = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
      break;
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      break;
 8002258:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4313      	orrs	r3, r2
 8002270:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002272:	e003      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002274:	7dba      	ldrb	r2, [r7, #22]
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	4313      	orrs	r3, r2
 800227a:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- RTC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8091 	beq.w	80023ac <HAL_RCCEx_PeriphCLKConfig+0x808>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228a:	4a44      	ldr	r2, [pc, #272]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002296:	f7fe fab1 	bl	80007fc <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229c:	e009      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe faad 	bl	80007fc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d902      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      {
        ret = HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	75fb      	strb	r3, [r7, #23]
        break;
 80022b0:	e005      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x71a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x7f8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ef      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
      }
    }
    
    if(ret == HAL_OK)
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d16f      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x800>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022ce:	4053      	eors	r3, r2
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d8:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e0:	613b      	str	r3, [r7, #16]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80022fa:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
      }
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230a:	d115      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x794>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fa76 	bl	80007fc <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	e00b      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7fe fa72 	bl	80007fc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d902      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x788>
          {
            ret = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	75fb      	strb	r3, [r7, #23]
            break;
 800232a:	e005      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x794>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ed      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x770>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d126      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234c:	d10d      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800234e:	4812      	ldr	r0, [pc, #72]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800235e:	0919      	lsrs	r1, r3, #4
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002362:	400b      	ands	r3, r1
 8002364:	4313      	orrs	r3, r2
 8002366:	6103      	str	r3, [r0, #16]
 8002368:	e005      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002374:	6113      	str	r3, [r2, #16]
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x7f4>)
 800237a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	4313      	orrs	r3, r2
 8002388:	670b      	str	r3, [r1, #112]	; 0x70
 800238a:	e00f      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x808>
      }
      else
      {
        /* set overall return value */
        status |= ret;
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	4313      	orrs	r3, r2
 8002392:	75bb      	strb	r3, [r7, #22]
 8002394:	e00a      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x808>
 8002396:	bf00      	nop
 8002398:	58024400 	.word	0x58024400
 800239c:	58024800 	.word	0x58024800
 80023a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80023a4:	7dba      	ldrb	r2, [r7, #22]
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  
  /*-------------------------- USART1/6 configuration --------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808a 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023be:	2b28      	cmp	r3, #40	; 0x28
 80023c0:	d870      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080024ab 	.word	0x080024ab
 80023cc:	080024a5 	.word	0x080024a5
 80023d0:	080024a5 	.word	0x080024a5
 80023d4:	080024a5 	.word	0x080024a5
 80023d8:	080024a5 	.word	0x080024a5
 80023dc:	080024a5 	.word	0x080024a5
 80023e0:	080024a5 	.word	0x080024a5
 80023e4:	080024a5 	.word	0x080024a5
 80023e8:	0800246d 	.word	0x0800246d
 80023ec:	080024a5 	.word	0x080024a5
 80023f0:	080024a5 	.word	0x080024a5
 80023f4:	080024a5 	.word	0x080024a5
 80023f8:	080024a5 	.word	0x080024a5
 80023fc:	080024a5 	.word	0x080024a5
 8002400:	080024a5 	.word	0x080024a5
 8002404:	080024a5 	.word	0x080024a5
 8002408:	08002489 	.word	0x08002489
 800240c:	080024a5 	.word	0x080024a5
 8002410:	080024a5 	.word	0x080024a5
 8002414:	080024a5 	.word	0x080024a5
 8002418:	080024a5 	.word	0x080024a5
 800241c:	080024a5 	.word	0x080024a5
 8002420:	080024a5 	.word	0x080024a5
 8002424:	080024a5 	.word	0x080024a5
 8002428:	080024ab 	.word	0x080024ab
 800242c:	080024a5 	.word	0x080024a5
 8002430:	080024a5 	.word	0x080024a5
 8002434:	080024a5 	.word	0x080024a5
 8002438:	080024a5 	.word	0x080024a5
 800243c:	080024a5 	.word	0x080024a5
 8002440:	080024a5 	.word	0x080024a5
 8002444:	080024a5 	.word	0x080024a5
 8002448:	080024ab 	.word	0x080024ab
 800244c:	080024a5 	.word	0x080024a5
 8002450:	080024a5 	.word	0x080024a5
 8002454:	080024a5 	.word	0x080024a5
 8002458:	080024a5 	.word	0x080024a5
 800245c:	080024a5 	.word	0x080024a5
 8002460:	080024a5 	.word	0x080024a5
 8002464:	080024a5 	.word	0x080024a5
 8002468:	080024ab 	.word	0x080024ab
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
      
    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800246c:	4ab1      	ldr	r2, [pc, #708]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800246e:	4bb1      	ldr	r3, [pc, #708]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fe27 	bl	80030d0 <RCCEx_PLL2_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x908>
      
    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8002488:	4aaa      	ldr	r2, [pc, #680]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800248a:	4baa      	ldr	r3, [pc, #680]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3324      	adds	r3, #36	; 0x24
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fe99 	bl	80031d0 <RCCEx_PLL3_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80024a2:	e003      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x908>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
      break;
 80024a8:	e000      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x908>
      break;
 80024aa:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x922>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80024b2:	49a0      	ldr	r1, [pc, #640]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80024b4:	4b9f      	ldr	r3, [pc, #636]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c0:	4313      	orrs	r3, r2
 80024c2:	654b      	str	r3, [r1, #84]	; 0x54
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80024c6:	7dba      	ldrb	r2, [r7, #22]
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d043      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d82a      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	0800253f 	.word	0x0800253f
 80024ec:	08002501 	.word	0x08002501
 80024f0:	0800251d 	.word	0x0800251d
 80024f4:	0800253f 	.word	0x0800253f
 80024f8:	0800253f 	.word	0x0800253f
 80024fc:	0800253f 	.word	0x0800253f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
      
    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002500:	4a8c      	ldr	r2, [pc, #560]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002502:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fddd 	bl	80030d0 <RCCEx_PLL2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800251a:	e011      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      
    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800251c:	4a85      	ldr	r2, [pc, #532]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002526:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3324      	adds	r3, #36	; 0x24
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fe4f 	bl	80031d0 <RCCEx_PLL3_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002536:	e003      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
      break;
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      break;
 800253e:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002546:	497b      	ldr	r1, [pc, #492]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002548:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f023 0207 	bic.w	r2, r3, #7
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002554:	4313      	orrs	r3, r2
 8002556:	654b      	str	r3, [r1, #84]	; 0x54
 8002558:	e003      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800255a:	7dba      	ldrb	r2, [r7, #22]
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	4313      	orrs	r3, r2
 8002560:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d046      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	2b05      	cmp	r3, #5
 8002576:	d82b      	bhi.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025d7 	.word	0x080025d7
 8002584:	08002599 	.word	0x08002599
 8002588:	080025b5 	.word	0x080025b5
 800258c:	080025d7 	.word	0x080025d7
 8002590:	080025d7 	.word	0x080025d7
 8002594:	080025d7 	.word	0x080025d7
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002598:	4a66      	ldr	r2, [pc, #408]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800259a:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd91 	bl	80030d0 <RCCEx_PLL2_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80025b2:	e011      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      
    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80025b4:	4a5f      	ldr	r2, [pc, #380]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025be:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3324      	adds	r3, #36	; 0x24
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fe03 	bl	80031d0 <RCCEx_PLL3_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80025ce:	e003      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]
      break;
 80025d4:	e000      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80025d6:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025de:	4955      	ldr	r1, [pc, #340]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80025e0:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f023 0207 	bic.w	r2, r3, #7
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4313      	orrs	r3, r2
 80025f0:	658b      	str	r3, [r1, #88]	; 0x58
 80025f2:	e003      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80025f4:	7dba      	ldrb	r2, [r7, #22]
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d050      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002612:	d020      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002618:	d805      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02c      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 800261e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002624:	e025      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d027      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800262c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002630:	d026      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002636:	d025      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002638:	e01b      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xace>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800263a:	4a3e      	ldr	r2, [pc, #248]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800263c:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002644:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fd40 	bl	80030d0 <RCCEx_PLL2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002654:	e017      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      
    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002656:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002660:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3324      	adds	r3, #36	; 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fdb2 	bl	80031d0 <RCCEx_PLL3_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002670:	e009      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
      break;
 8002676:	e006      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8002678:	bf00      	nop
 800267a:	e004      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 800267c:	bf00      	nop
 800267e:	e002      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      break;
 8002684:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800268c:	4929      	ldr	r1, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	4313      	orrs	r3, r2
 800269e:	654b      	str	r3, [r1, #84]	; 0x54
 80026a0:	e003      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80026a2:	7dba      	ldrb	r2, [r7, #22]
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d053      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c0:	d020      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80026c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c6:	d805      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02c      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80026d2:	e025      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d027      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80026da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80026de:	d026      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80026e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026e4:	d028      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xb94>
 80026e6:	e01b      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026f2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fce9 	bl	80030d0 <RCCEx_PLL2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002702:	e01a      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      
    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3324      	adds	r3, #36	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fd5b 	bl	80031d0 <RCCEx_PLL3_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800271e:	e00c      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
      break;
 8002724:	e009      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 8002726:	bf00      	nop
 8002728:	e007      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 800272a:	bf00      	nop
 800272c:	e005      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      break;
 800272e:	bf00      	nop
 8002730:	e003      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xb96>
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
      break;
 8002738:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002740:	49ae      	ldr	r1, [pc, #696]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002742:	4bae      	ldr	r3, [pc, #696]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002750:	4313      	orrs	r3, r2
 8002752:	658b      	str	r3, [r1, #88]	; 0x58
 8002754:	e003      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002756:	7dba      	ldrb	r2, [r7, #22]
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	4313      	orrs	r3, r2
 800275c:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d050      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d020      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8002776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277a:	d805      	bhi.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02c      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8002780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 8002786:	e025      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc30>
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278c:	d027      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xc3a>
 800278e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002792:	d026      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0xc3e>
 8002794:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002798:	d025      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
 800279a:	e01b      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc30>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
      
    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800279c:	4a97      	ldr	r2, [pc, #604]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800279e:	4b97      	ldr	r3, [pc, #604]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fc8f 	bl	80030d0 <RCCEx_PLL2_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80027b6:	e017      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      
    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80027b8:	4a90      	ldr	r2, [pc, #576]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80027ba:	4b90      	ldr	r3, [pc, #576]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c2:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3324      	adds	r3, #36	; 0x24
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fd01 	bl	80031d0 <RCCEx_PLL3_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	75fb      	strb	r3, [r7, #23]
      
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
      break;
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 80027da:	bf00      	nop
 80027dc:	e004      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 80027de:	bf00      	nop
 80027e0:	e002      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
      break;
 80027e6:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80027ee:	4983      	ldr	r1, [pc, #524]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80027f0:	4b82      	ldr	r3, [pc, #520]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fe:	4313      	orrs	r3, r2
 8002800:	658b      	str	r3, [r1, #88]	; 0x58
 8002802:	e003      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xc68>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002804:	7dba      	ldrb	r2, [r7, #22]
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	4313      	orrs	r3, r2
 800280a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
    
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fcd1 	bl	80031d0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002830:	4b72      	ldr	r3, [pc, #456]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c
 800283a:	e009      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    
    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800283c:	496f      	ldr	r1, [pc, #444]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800283e:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284c:	4313      	orrs	r3, r2
 800284e:	654b      	str	r3, [r1, #84]	; 0x54
    }
    
  }
  
  /*------------------------------ I2C4 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d10b      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
    {
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fcaf 	bl	80031d0 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002872:	4a62      	ldr	r2, [pc, #392]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800287e:	e009      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    }
    
    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002880:	495e      	ldr	r1, [pc, #376]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002882:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	4313      	orrs	r3, r2
 8002892:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }
  
  /*---------------------------- ADC configuration -------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03c      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xd76>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d012      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d020      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11b      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
      
    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80028b6:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028c0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fc02 	bl	80030d0 <RCCEx_PLL2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
      
      /* ADC clock source configuration done later after clock selection check */
      break;
 80028d0:	e011      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      
    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80028d2:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028dc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fc74 	bl	80031d0 <RCCEx_PLL3_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]
      
      /* ADC clock source configuration done later after clock selection check */
      break;
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
      break;
 80028f2:	e000      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
      break;
 80028f4:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028fc:	493f      	ldr	r1, [pc, #252]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800290c:	4313      	orrs	r3, r2
 800290e:	658b      	str	r3, [r1, #88]	; 0x58
 8002910:	e003      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xd76>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002912:	7dba      	ldrb	r2, [r7, #22]
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	4313      	orrs	r3, r2
 8002918:	75bb      	strb	r3, [r7, #22]
    }
  }
  
  /*------------------------------ USB Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    
    switch(PeriphClkInit->UsbClockSelection)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002930:	d00c      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xda8>
 8002932:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002936:	d01a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xdca>
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d114      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* USB clock source configuration done later after clock selection check */
      break;
 800294a:	e011      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      
    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/
      
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002956:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fc37 	bl	80031d0 <RCCEx_PLL3_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]
      
      /* USB clock source configuration done later after clock selection check */
      break;
 8002966:	e003      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
      break;
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
      break;
 800296e:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xde8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002976:	4921      	ldr	r1, [pc, #132]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	4313      	orrs	r3, r2
 8002988:	654b      	str	r3, [r1, #84]	; 0x54
 800298a:	e003      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800298c:	7dba      	ldrb	r2, [r7, #22]
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	4313      	orrs	r3, r2
 8002992:	75bb      	strb	r3, [r7, #22]
    }
    
  }
  
  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d033      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
    
    switch(PeriphClkInit->SdmmcClockSelection)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d007      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 80029ae:	e014      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xe36>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80029bc:	e010      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      
    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/
      
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80029be:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c8:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb7e 	bl	80030d0 <RCCEx_PLL2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
      
      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      
    default:
      ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
      break;
 80029de:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80029e6:	4905      	ldr	r1, [pc, #20]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	4313      	orrs	r3, r2
 80029f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80029fa:	bf00      	nop
 80029fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002a00:	7dba      	ldrb	r2, [r7, #22]
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe90>
  {
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a16:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fbd3 	bl	80031d0 <RCCEx_PLL3_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	7dbb      	ldrb	r3, [r7, #22]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	75bb      	strb	r3, [r7, #22]
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d031      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
  {
    
    switch(PeriphClkInit->RngClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8002a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4e:	d802      	bhi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d011      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xed4>
 8002a54:	e00d      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xece>
 8002a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5a:	d00f      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8002a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a60:	d00e      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8002a62:	e006      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xece>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a64:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a66:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
      
      /* RNG clock source configuration done later after clock selection check */
      break;
 8002a70:	e007      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xede>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;
      
    default:
      ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
      break;
 8002a76:	e004      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8002a78:	bf00      	nop
 8002a7a:	e002      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xede>
      break;
 8002a80:	bf00      	nop
    }
    
    if(ret == HAL_OK)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xef8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4933      	ldr	r1, [pc, #204]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a96:	4313      	orrs	r3, r2
 8002a98:	654b      	str	r3, [r1, #84]	; 0x54
 8002a9a:	e003      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8002a9c:	7dba      	ldrb	r2, [r7, #22]
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
    
  }
  
  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
    
    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ab0:	4929      	ldr	r1, [pc, #164]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	650b      	str	r3, [r1, #80]	; 0x50
  }
  
  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	610b      	str	r3, [r1, #16]
  }
  
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
    
    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aee:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afc:	4313      	orrs	r3, r2
 8002afe:	650b      	str	r3, [r1, #80]	; 0x50
  }
  
  /*------------------------------------ TIM configuration --------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b16:	6113      	str	r3, [r2, #16]
 8002b18:	490f      	ldr	r1, [pc, #60]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da08      	bge.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xf9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
    
    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002b30:	4909      	ldr	r1, [pc, #36]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0xfb4>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002b42:	7dbb      	ldrb	r3, [r7, #22]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xfaa>
  return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400

08002b5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002b62:	f7fe ffb3 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCCEx_GetD3PCLK1Freq+0x3c>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b70:	2210      	movs	r2, #16
 8002b72:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	603a      	str	r2, [r7, #0]
  return result;
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	40d3      	lsrs	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_RCCEx_GetD3PCLK1Freq+0x40>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	08007318 	.word	0x08007318

08002ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t  pllsource = 0, pll2m = 1 ,  pll2fracen = 0, hsivalue = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  float fracn2 =0 ,pll2vco = 0;
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bc4:	4b8d      	ldr	r3, [pc, #564]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	0b1b      	lsrs	r3, r3, #12
 8002bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	613b      	str	r3, [r7, #16]
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002be4:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfc:	edc7 7a02 	vstr	s15, [r7, #8]
  
  switch (pllsource)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d055      	beq.n	8002cb2 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d302      	bcc.n	8002c10 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d072      	beq.n	8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8002c0e:	e092      	b.n	8002d36 <HAL_RCCEx_GetPLL2ClockFreq+0x196>
  {
    
  case 0x00:  /* HSI used as PLL clock source */
    
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c10:	4b7a      	ldr	r3, [pc, #488]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d029      	beq.n	8002c70 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c1c:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	4a76      	ldr	r2, [pc, #472]	; (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c3e:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c52:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8002c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6a:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    }
    break;  
 8002c6e:	e083      	b.n	8002d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002c70:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c94:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8002c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	edc7 7a07 	vstr	s15, [r7, #28]
    break;  
 8002cb0:	e062      	b.n	8002d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  case 0x01:  /* HSI used as PLL clock source */
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cd6:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8002cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cee:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002cf2:	e041      	b.n	8002d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002cf4:	4a45      	ldr	r2, [pc, #276]	; (8002e0c <HAL_RCCEx_GetPLL2ClockFreq+0x26c>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d04:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d14:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d18:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8002d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002d34:	e020      	b.n	8002d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
    
  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d5a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8002d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002d76:	bf00      	nop
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	0a5b      	lsrs	r3, r3, #9
 8002d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d82:	3301      	adds	r3, #1
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	ee17 2a90 	vmov	r2, s15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002daa:	3301      	adds	r3, #1
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc0:	ee17 2a90 	vmov	r2, s15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	0e1b      	lsrs	r3, r3, #24
 8002dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de8:	ee17 2a90 	vmov	r2, s15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
  
  
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	03d09000 	.word	0x03d09000
 8002e04:	46000000 	.word	0x46000000
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  float fracn3 =0 , pll3vco = 0;
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e34:	4b8d      	ldr	r3, [pc, #564]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	0d1b      	lsrs	r3, r3, #20
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e48:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	613b      	str	r3, [r7, #16]
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002e54:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d055      	beq.n	8002f22 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d302      	bcc.n	8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d072      	beq.n	8002f64 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8002e7e:	e092      	b.n	8002fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
  {
  case 0x00:  /* HSI used as PLL clock source */
    
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e80:	4b7a      	ldr	r3, [pc, #488]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d029      	beq.n	8002ee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e8c:	4b77      	ldr	r3, [pc, #476]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec2:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8003074 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8002ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    }
    break;  
 8002ede:	e083      	b.n	8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002ee0:	4a63      	ldr	r2, [pc, #396]	; (8003070 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f00:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f04:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8003074 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8002f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	edc7 7a07 	vstr	s15, [r7, #28]
    break;  
 8002f20:	e062      	b.n	8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  case 0x01:  /* HSI used as PLL clock source */
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002f22:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f46:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8003074 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8002f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002f62:	e041      	b.n	8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
    
  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002f64:	4a45      	ldr	r2, [pc, #276]	; (800307c <HAL_RCCEx_GetPLL3ClockFreq+0x26c>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f84:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f88:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003074 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8002f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002fa4:	e020      	b.n	8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
    
  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fca:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8003074 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 8002fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8002fe6:	bf00      	nop
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003008:	ee17 2a90 	vmov	r2, s15
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800301a:	3301      	adds	r3, #1
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003024:	edd7 6a07 	vldr	s13, [r7, #28]
 8003028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800302c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003030:	ee17 2a90 	vmov	r2, s15
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003042:	3301      	adds	r3, #1
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800304c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003058:	ee17 2a90 	vmov	r2, s15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
  
}
 8003060:	bf00      	nop
 8003062:	3724      	adds	r7, #36	; 0x24
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	58024400 	.word	0x58024400
 8003070:	03d09000 	.word	0x03d09000
 8003074:	46000000 	.word	0x46000000
 8003078:	003d0900 	.word	0x003d0900
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8003086:	f7fe fbb1 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 800308a:	4601      	mov	r1, r0
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCCEx_GetD1SysClockFreq+0x44>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	603a      	str	r2, [r7, #0]
  return result;
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	40d3      	lsrs	r3, r2
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <HAL_RCCEx_GetD1SysClockFreq+0x48>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	fa21 f303 	lsr.w	r3, r1, r3
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 80030b6:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	58024400 	.word	0x58024400
 80030c8:	08007318 	.word	0x08007318
 80030cc:	20002008 	.word	0x20002008

080030d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  
  uint32_t tickstart = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030e0:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d101      	bne.n	80030f0 <RCCEx_PLL2_Config+0x20>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e069      	b.n	80031c4 <RCCEx_PLL2_Config+0xf4>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80030f0:	4a36      	ldr	r2, [pc, #216]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 80030f2:	4b36      	ldr	r3, [pc, #216]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030fa:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fd fb7e 	bl	80007fc <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003102:	e008      	b.n	8003116 <RCCEx_PLL2_Config+0x46>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003104:	f7fd fb7a 	bl	80007fc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <RCCEx_PLL2_Config+0x46>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e056      	b.n	80031c4 <RCCEx_PLL2_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <RCCEx_PLL2_Config+0x34>
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003122:	492a      	ldr	r1, [pc, #168]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003124:	4b29      	ldr	r3, [pc, #164]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	031b      	lsls	r3, r3, #12
 8003132:	4313      	orrs	r3, r2
 8003134:	628b      	str	r3, [r1, #40]	; 0x28
 8003136:	4925      	ldr	r1, [pc, #148]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	3b01      	subs	r3, #1
 800313e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	3b01      	subs	r3, #1
 8003148:	025b      	lsls	r3, r3, #9
 800314a:	b29b      	uxth	r3, r3
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	3b01      	subs	r3, #1
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003168:	4313      	orrs	r3, r2
 800316a:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800316c:	4917      	ldr	r1, [pc, #92]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800317e:	4913      	ldr	r1, [pc, #76]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f023 0220 	bic.w	r2, r3, #32
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319c:	f7fd fb2e 	bl	80007fc <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <RCCEx_PLL2_Config+0xe6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80031a4:	f7fd fb2a 	bl	80007fc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <RCCEx_PLL2_Config+0xe6>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e006      	b.n	80031c4 <RCCEx_PLL2_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <RCCEx_PLL2_Config+0xfc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <RCCEx_PLL2_Config+0xd4>
    }
    
  }
  
  
  return status;
 80031c2:	7afb      	ldrb	r3, [r7, #11]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58024400 	.word	0x58024400

080031d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  
  uint32_t tickstart = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d101      	bne.n	80031f0 <RCCEx_PLL3_Config+0x20>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e069      	b.n	80032c4 <RCCEx_PLL3_Config+0xf4>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80031f0:	4a36      	ldr	r2, [pc, #216]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fc:	f7fd fafe 	bl	80007fc <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8003202:	e008      	b.n	8003216 <RCCEx_PLL3_Config+0x46>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003204:	f7fd fafa 	bl	80007fc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <RCCEx_PLL3_Config+0x46>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e056      	b.n	80032c4 <RCCEx_PLL3_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <RCCEx_PLL3_Config+0x34>
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003222:	492a      	ldr	r1, [pc, #168]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	4313      	orrs	r3, r2
 8003234:	628b      	str	r3, [r1, #40]	; 0x28
 8003236:	4925      	ldr	r1, [pc, #148]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	3b01      	subs	r3, #1
 800323e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	3b01      	subs	r3, #1
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	b29b      	uxth	r3, r3
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	3b01      	subs	r3, #1
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003268:	4313      	orrs	r3, r2
 800326a:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800326c:	4917      	ldr	r1, [pc, #92]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800327e:	4913      	ldr	r1, [pc, #76]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd faae 	bl	80007fc <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <RCCEx_PLL3_Config+0xe6>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80032a4:	f7fd faaa 	bl	80007fc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <RCCEx_PLL3_Config+0xe6>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e006      	b.n	80032c4 <RCCEx_PLL3_Config+0xf4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <RCCEx_PLL3_Config+0xfc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <RCCEx_PLL3_Config+0xd4>
    }
    
  }
  
  
  return status;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400

080032d0 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e01d      	b.n	800331e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f002 f926 	bl	8005548 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 fa4e 	bl	80037b0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	68d2      	ldr	r2, [r2, #12]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	b292      	uxth	r2, r2
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	b292      	uxth	r2, r2
 8003350:	801a      	strh	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9e6 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9d8 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f9e9 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0204 	mvn.w	r2, #4
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9bc 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9ae 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9bf 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b08      	cmp	r3, #8
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0208 	mvn.w	r2, #8
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f992 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f984 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f995 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b10      	cmp	r3, #16
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0210 	mvn.w	r2, #16
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2208      	movs	r2, #8
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f968 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f95a 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f96b 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0201 	mvn.w	r2, #1
 80034dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f001 ff10 	bl	8005304 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003508:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fafa 	bl	8003b04 <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003536:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fae3 	bl	8003b04 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003562:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f919 	bl	800379c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d10e      	bne.n	8003596 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d107      	bne.n	8003596 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0220 	mvn.w	r2, #32
 800358e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 faad 	bl	8003af0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_ConfigClockSource+0x1c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0c8      	b.n	800374e <HAL_TIM_ConfigClockSource+0x1ae>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4b60      	ldr	r3, [pc, #384]	; (8003758 <HAL_TIM_ConfigClockSource+0x1b8>)
 80035d8:	4013      	ands	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d077      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0x144>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d80e      	bhi.n	8003616 <HAL_TIM_ConfigClockSource+0x76>
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	f000 808a 	beq.w	8003712 <HAL_TIM_ConfigClockSource+0x172>
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d802      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x68>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d07e      	beq.n	8003704 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8003606:	e099      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003608:	2b20      	cmp	r3, #32
 800360a:	f000 8089 	beq.w	8003720 <HAL_TIM_ConfigClockSource+0x180>
 800360e:	2b30      	cmp	r3, #48	; 0x30
 8003610:	f000 808d 	beq.w	800372e <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8003614:	e092      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003616:	2b70      	cmp	r3, #112	; 0x70
 8003618:	d016      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xa8>
 800361a:	2b70      	cmp	r3, #112	; 0x70
 800361c:	d804      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x88>
 800361e:	2b50      	cmp	r3, #80	; 0x50
 8003620:	d040      	beq.n	80036a4 <HAL_TIM_ConfigClockSource+0x104>
 8003622:	2b60      	cmp	r3, #96	; 0x60
 8003624:	d04e      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8003626:	e089      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d003      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x96>
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d024      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8003634:	e082      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_TIM_ConfigClockSource+0x1bc>)
 8003642:	400b      	ands	r3, r1
 8003644:	6093      	str	r3, [r2, #8]
    break;
 8003646:	e079      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f000 f9d4 	bl	8003a04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4b3c      	ldr	r3, [pc, #240]	; (8003758 <HAL_TIM_ConfigClockSource+0x1b8>)
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
    break;
 800367c:	e05e      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f000 f9b9 	bl	8003a04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a0:	609a      	str	r2, [r3, #8]
    break;
 80036a2:	e04b      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	461a      	mov	r2, r3
 80036b2:	f000 f91d 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2150      	movs	r1, #80	; 0x50
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f97f 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 80036c2:	e03b      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f000 f940 	bl	8003956 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2160      	movs	r1, #96	; 0x60
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f96f 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 80036e2:	e02b      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f000 f8fd 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2140      	movs	r1, #64	; 0x40
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f95f 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 8003702:	e01b      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f958 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 8003710:	e014      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2110      	movs	r1, #16
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f951 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 800371e:	e00d      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2120      	movs	r1, #32
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f94a 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 800372c:	e006      	b.n	800373c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2130      	movs	r1, #48	; 0x30
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f943 	bl	80039c0 <TIM_ITRx_SetConfig>
    break;
 800373a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	ffceff88 	.word	0xffceff88
 800375c:	fffefff8 	.word	0xfffefff8

08003760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <TIM_Base_SetConfig+0x46>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d00f      	beq.n	80037f6 <TIM_Base_SetConfig+0x46>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0x46>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <TIM_Base_SetConfig+0x128>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0x46>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <TIM_Base_SetConfig+0x12c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0x46>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a3b      	ldr	r2, [pc, #236]	; (80038e0 <TIM_Base_SetConfig+0x130>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01f      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d01b      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d017      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <TIM_Base_SetConfig+0x128>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <TIM_Base_SetConfig+0x12c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00f      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <TIM_Base_SetConfig+0x130>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00b      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <TIM_Base_SetConfig+0x134>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <TIM_Base_SetConfig+0x138>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_Base_SetConfig+0xa0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <TIM_Base_SetConfig+0x13c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00f      	beq.n	80038b2 <TIM_Base_SetConfig+0x102>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <TIM_Base_SetConfig+0x130>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0x102>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <TIM_Base_SetConfig+0x134>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0x102>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <TIM_Base_SetConfig+0x138>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0x102>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <TIM_Base_SetConfig+0x13c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d104      	bne.n	80038bc <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800

080038f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f023 030a 	bic.w	r3, r3, #10
 8003934:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b087      	sub	sp, #28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0210 	bic.w	r2, r3, #16
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800399a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <TIM_ITRx_SetConfig+0x40>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	ffcfff8f 	.word	0xffcfff8f

08003a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	609a      	str	r2, [r3, #8]
} 
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e03d      	b.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
} 
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e043      	b.n	8003bb2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f001 fd68 	bl	8005614 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8d7 	bl	8003d10 <UART_SetConfig>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e022      	b.n	8003bb2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f001 f879 	bl	8004c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b98:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f001 f900 	bl	8004db0 <UART_CheckIdleState>
 8003bb0:	4603      	mov	r3, r0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b088      	sub	sp, #32
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d177      	bne.n	8003cca <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit+0x2c>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e070      	b.n	8003ccc <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit+0x3e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e069      	b.n	8003ccc <HAL_UART_Transmit+0x112>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fc fdf5 	bl	80007fc <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    huart->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    while(huart->TxXferCount > 0U)
 8003c24:	e034      	b.n	8003c90 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f001 f8fd 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e03c      	b.n	8003ccc <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	d111      	bne.n	8003c80 <HAL_UART_Transmit+0xc6>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10d      	bne.n	8003c80 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	8812      	ldrh	r2, [r2, #0]
 8003c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c74:	b292      	uxth	r2, r2
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	e007      	b.n	8003c90 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1c4      	bne.n	8003c26 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f001 f8cb 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e00a      	b.n	8003ccc <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b2db      	uxtb	r3, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	b095      	sub	sp, #84	; 0x54
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg                     = 0x00000000U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint16_t brrtemp                    = 0x0000U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t usartdiv                   = 0x0000U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d54:	4313      	orrs	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4ac0      	ldr	r2, [pc, #768]	; (8004064 <UART_SetConfig+0x354>)
 8003d64:	401a      	ands	r2, r3
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4bb6      	ldr	r3, [pc, #728]	; (8004068 <UART_SetConfig+0x358>)
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d004      	beq.n	8003d9c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d107      	bne.n	8003db6 <UART_SetConfig+0xa6>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	431a      	orrs	r2, r3
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	4313      	orrs	r3, r2
 8003db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4aaa      	ldr	r2, [pc, #680]	; (800406c <UART_SetConfig+0x35c>)
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f023 020f 	bic.w	r2, r3, #15
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	62cb      	str	r3, [r1, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4ba2      	ldr	r3, [pc, #648]	; (8004070 <UART_SetConfig+0x360>)
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d175      	bne.n	8003ed6 <UART_SetConfig+0x1c6>
 8003dea:	4ba2      	ldr	r3, [pc, #648]	; (8004074 <UART_SetConfig+0x364>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df2:	2b28      	cmp	r3, #40	; 0x28
 8003df4:	f200 8266 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0xf0>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003ea5 	.word	0x08003ea5
 8003e04:	080042c5 	.word	0x080042c5
 8003e08:	080042c5 	.word	0x080042c5
 8003e0c:	080042c5 	.word	0x080042c5
 8003e10:	080042c5 	.word	0x080042c5
 8003e14:	080042c5 	.word	0x080042c5
 8003e18:	080042c5 	.word	0x080042c5
 8003e1c:	080042c5 	.word	0x080042c5
 8003e20:	08003ead 	.word	0x08003ead
 8003e24:	080042c5 	.word	0x080042c5
 8003e28:	080042c5 	.word	0x080042c5
 8003e2c:	080042c5 	.word	0x080042c5
 8003e30:	080042c5 	.word	0x080042c5
 8003e34:	080042c5 	.word	0x080042c5
 8003e38:	080042c5 	.word	0x080042c5
 8003e3c:	080042c5 	.word	0x080042c5
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	080042c5 	.word	0x080042c5
 8003e48:	080042c5 	.word	0x080042c5
 8003e4c:	080042c5 	.word	0x080042c5
 8003e50:	080042c5 	.word	0x080042c5
 8003e54:	080042c5 	.word	0x080042c5
 8003e58:	080042c5 	.word	0x080042c5
 8003e5c:	080042c5 	.word	0x080042c5
 8003e60:	08003ebd 	.word	0x08003ebd
 8003e64:	080042c5 	.word	0x080042c5
 8003e68:	080042c5 	.word	0x080042c5
 8003e6c:	080042c5 	.word	0x080042c5
 8003e70:	080042c5 	.word	0x080042c5
 8003e74:	080042c5 	.word	0x080042c5
 8003e78:	080042c5 	.word	0x080042c5
 8003e7c:	080042c5 	.word	0x080042c5
 8003e80:	08003ec5 	.word	0x08003ec5
 8003e84:	080042c5 	.word	0x080042c5
 8003e88:	080042c5 	.word	0x080042c5
 8003e8c:	080042c5 	.word	0x080042c5
 8003e90:	080042c5 	.word	0x080042c5
 8003e94:	080042c5 	.word	0x080042c5
 8003e98:	080042c5 	.word	0x080042c5
 8003e9c:	080042c5 	.word	0x080042c5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003eaa:	e20a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003eb2:	e206      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003eb4:	2340      	movs	r3, #64	; 0x40
 8003eb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003eba:	e202      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003ec2:	e1fe      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003eca:	e1fa      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ecc:	2320      	movs	r3, #32
 8003ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003ed2:	bf00      	nop
 8003ed4:	e1f5      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <UART_SetConfig+0x368>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d12e      	bne.n	8003f3e <UART_SetConfig+0x22e>
 8003ee0:	4b64      	ldr	r3, [pc, #400]	; (8004074 <UART_SetConfig+0x364>)
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	f200 81eb 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x1e4>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f15 	.word	0x08003f15
 8003efc:	08003f1d 	.word	0x08003f1d
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f12:	e1d6      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f1a:	e1d2      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f1c:	2340      	movs	r3, #64	; 0x40
 8003f1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f22:	e1ce      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f2a:	e1ca      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f32:	e1c6      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f34:	2320      	movs	r3, #32
 8003f36:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f3a:	bf00      	nop
 8003f3c:	e1c1      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <UART_SetConfig+0x36c>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d12e      	bne.n	8003fa6 <UART_SetConfig+0x296>
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <UART_SetConfig+0x364>)
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	f200 81b7 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x24c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f85 	.word	0x08003f85
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f7a:	e1a2      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f82:	e19e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f8a:	e19a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f92:	e196      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003f9a:	e192      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003fa2:	bf00      	nop
 8003fa4:	e18d      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b35      	ldr	r3, [pc, #212]	; (8004080 <UART_SetConfig+0x370>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d12e      	bne.n	800400e <UART_SetConfig+0x2fe>
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <UART_SetConfig+0x364>)
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	f200 8183 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x2b4>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fdd 	.word	0x08003fdd
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	08003fed 	.word	0x08003fed
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003fe2:	e16e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003fea:	e16a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003ff2:	e166      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003ffa:	e162      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004002:	e15e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004004:	2320      	movs	r3, #32
 8004006:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800400a:	bf00      	nop
 800400c:	e159      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <UART_SetConfig+0x374>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d140      	bne.n	800409a <UART_SetConfig+0x38a>
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <UART_SetConfig+0x364>)
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	2b05      	cmp	r3, #5
 8004022:	f200 814f 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x31c>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004045 	.word	0x08004045
 8004030:	0800404d 	.word	0x0800404d
 8004034:	08004055 	.word	0x08004055
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004089 	.word	0x08004089
 8004040:	08004091 	.word	0x08004091
 8004044:	2300      	movs	r3, #0
 8004046:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800404a:	e13a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800404c:	2304      	movs	r3, #4
 800404e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004052:	e136      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004054:	2340      	movs	r3, #64	; 0x40
 8004056:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800405a:	e132      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004062:	e12e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004064:	cfff69f3 	.word	0xcfff69f3
 8004068:	58000c00 	.word	0x58000c00
 800406c:	11fff4ff 	.word	0x11fff4ff
 8004070:	40011000 	.word	0x40011000
 8004074:	58024400 	.word	0x58024400
 8004078:	40004400 	.word	0x40004400
 800407c:	40004800 	.word	0x40004800
 8004080:	40004c00 	.word	0x40004c00
 8004084:	40005000 	.word	0x40005000
 8004088:	2310      	movs	r3, #16
 800408a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800408e:	e118      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004090:	2320      	movs	r3, #32
 8004092:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004096:	bf00      	nop
 8004098:	e113      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4bc5      	ldr	r3, [pc, #788]	; (80043b4 <UART_SetConfig+0x6a4>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d174      	bne.n	800418e <UART_SetConfig+0x47e>
 80040a4:	4bc4      	ldr	r3, [pc, #784]	; (80043b8 <UART_SetConfig+0x6a8>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ac:	2b28      	cmp	r3, #40	; 0x28
 80040ae:	f200 8109 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x3a8>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	080042c5 	.word	0x080042c5
 80040c0:	080042c5 	.word	0x080042c5
 80040c4:	080042c5 	.word	0x080042c5
 80040c8:	080042c5 	.word	0x080042c5
 80040cc:	080042c5 	.word	0x080042c5
 80040d0:	080042c5 	.word	0x080042c5
 80040d4:	080042c5 	.word	0x080042c5
 80040d8:	08004165 	.word	0x08004165
 80040dc:	080042c5 	.word	0x080042c5
 80040e0:	080042c5 	.word	0x080042c5
 80040e4:	080042c5 	.word	0x080042c5
 80040e8:	080042c5 	.word	0x080042c5
 80040ec:	080042c5 	.word	0x080042c5
 80040f0:	080042c5 	.word	0x080042c5
 80040f4:	080042c5 	.word	0x080042c5
 80040f8:	0800416d 	.word	0x0800416d
 80040fc:	080042c5 	.word	0x080042c5
 8004100:	080042c5 	.word	0x080042c5
 8004104:	080042c5 	.word	0x080042c5
 8004108:	080042c5 	.word	0x080042c5
 800410c:	080042c5 	.word	0x080042c5
 8004110:	080042c5 	.word	0x080042c5
 8004114:	080042c5 	.word	0x080042c5
 8004118:	08004175 	.word	0x08004175
 800411c:	080042c5 	.word	0x080042c5
 8004120:	080042c5 	.word	0x080042c5
 8004124:	080042c5 	.word	0x080042c5
 8004128:	080042c5 	.word	0x080042c5
 800412c:	080042c5 	.word	0x080042c5
 8004130:	080042c5 	.word	0x080042c5
 8004134:	080042c5 	.word	0x080042c5
 8004138:	0800417d 	.word	0x0800417d
 800413c:	080042c5 	.word	0x080042c5
 8004140:	080042c5 	.word	0x080042c5
 8004144:	080042c5 	.word	0x080042c5
 8004148:	080042c5 	.word	0x080042c5
 800414c:	080042c5 	.word	0x080042c5
 8004150:	080042c5 	.word	0x080042c5
 8004154:	080042c5 	.word	0x080042c5
 8004158:	08004185 	.word	0x08004185
 800415c:	2301      	movs	r3, #1
 800415e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004162:	e0ae      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800416a:	e0aa      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004172:	e0a6      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800417a:	e0a2      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004182:	e09e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004184:	2320      	movs	r3, #32
 8004186:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800418a:	bf00      	nop
 800418c:	e099      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <UART_SetConfig+0x6ac>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d12e      	bne.n	80041f6 <UART_SetConfig+0x4e6>
 8004198:	4b87      	ldr	r3, [pc, #540]	; (80043b8 <UART_SetConfig+0x6a8>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	f200 808f 	bhi.w	80042c4 <UART_SetConfig+0x5b4>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x49c>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041c5 	.word	0x080041c5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041d5 	.word	0x080041d5
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041ca:	e07a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041d2:	e076      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041d4:	2340      	movs	r3, #64	; 0x40
 80041d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041da:	e072      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041e2:	e06e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041ea:	e06a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041ec:	2320      	movs	r3, #32
 80041ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80041f2:	bf00      	nop
 80041f4:	e065      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b71      	ldr	r3, [pc, #452]	; (80043c0 <UART_SetConfig+0x6b0>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d12e      	bne.n	800425e <UART_SetConfig+0x54e>
 8004200:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <UART_SetConfig+0x6a8>)
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	2b05      	cmp	r3, #5
 800420a:	d85b      	bhi.n	80042c4 <UART_SetConfig+0x5b4>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x504>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2300      	movs	r3, #0
 800422e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004232:	e046      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800423a:	e042      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004242:	e03e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800424a:	e03a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004252:	e036      	b.n	80042c2 <UART_SetConfig+0x5b2>
 8004254:	2320      	movs	r3, #32
 8004256:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800425a:	bf00      	nop
 800425c:	e031      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <UART_SetConfig+0x6b4>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d12d      	bne.n	80042c4 <UART_SetConfig+0x5b4>
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <UART_SetConfig+0x6a8>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	2b05      	cmp	r3, #5
 8004272:	d827      	bhi.n	80042c4 <UART_SetConfig+0x5b4>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x56c>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	08004295 	.word	0x08004295
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042a5 	.word	0x080042a5
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	2302      	movs	r3, #2
 8004296:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800429a:	e012      	b.n	80042c2 <UART_SetConfig+0x5b2>
 800429c:	2304      	movs	r3, #4
 800429e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80042a2:	e00e      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80042aa:	e00a      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80042b2:	e006      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80042ba:	e002      	b.n	80042c2 <UART_SetConfig+0x5b2>
 80042bc:	2320      	movs	r3, #32
 80042be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80042c2:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <UART_SetConfig+0x6b4>)
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f040 81f4 	bne.w	80046b8 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch (clocksource)
 80042d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d021      	beq.n	8004320 <UART_SetConfig+0x610>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	dc04      	bgt.n	80042ea <UART_SetConfig+0x5da>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d009      	beq.n	80042f8 <UART_SetConfig+0x5e8>
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d00b      	beq.n	8004300 <UART_SetConfig+0x5f0>
 80042e8:	e033      	b.n	8004352 <UART_SetConfig+0x642>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d02d      	beq.n	800434a <UART_SetConfig+0x63a>
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d00e      	beq.n	8004310 <UART_SetConfig+0x600>
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d026      	beq.n	8004344 <UART_SetConfig+0x634>
 80042f6:	e02c      	b.n	8004352 <UART_SetConfig+0x642>
    {
    case UART_CLOCKSOURCE_D3PCLK1:
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 80042f8:	f7fe fc30 	bl	8002b5c <HAL_RCCEx_GetD3PCLK1Freq>
 80042fc:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 80042fe:	e02c      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fc4b 	bl	8002ba0 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 800430e:	e024      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fd7b 	bl	8002e10 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 800431e:	e01c      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004320:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <UART_SetConfig+0x6a8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <UART_SetConfig+0x62e>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <UART_SetConfig+0x6a8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <UART_SetConfig+0x6b8>)
 8004338:	40d3      	lsrs	r3, r2
 800433a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 800433c:	e00d      	b.n	800435a <UART_SetConfig+0x64a>
        tmpreg = (uint32_t) HSI_VALUE;
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <UART_SetConfig+0x6b8>)
 8004340:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8004342:	e00a      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_CSI:
      tmpreg =(uint32_t) CSI_VALUE;
 8004344:	4b21      	ldr	r3, [pc, #132]	; (80043cc <UART_SetConfig+0x6bc>)
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8004348:	e007      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8004350:	e003      	b.n	800435a <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004358:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0U)
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8475 	beq.w	8004c4c <UART_SetConfig+0xf3c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	429a      	cmp	r2, r3
 8004370:	d805      	bhi.n	800437e <UART_SetConfig+0x66e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8004378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437a:	429a      	cmp	r2, r3
 800437c:	d204      	bcs.n	8004388 <UART_SetConfig+0x678>
      {
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004384:	f000 bc62 	b.w	8004c4c <UART_SetConfig+0xf3c>
      }
      else
      {
        switch (clocksource)
 8004388:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800438c:	2b08      	cmp	r3, #8
 800438e:	f000 80bb 	beq.w	8004508 <UART_SetConfig+0x7f8>
 8004392:	2b08      	cmp	r3, #8
 8004394:	dc04      	bgt.n	80043a0 <UART_SetConfig+0x690>
 8004396:	2b02      	cmp	r3, #2
 8004398:	d01a      	beq.n	80043d0 <UART_SetConfig+0x6c0>
 800439a:	2b04      	cmp	r3, #4
 800439c:	d04a      	beq.n	8004434 <UART_SetConfig+0x724>
 800439e:	e16d      	b.n	800467c <UART_SetConfig+0x96c>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	f000 8146 	beq.w	8004632 <UART_SetConfig+0x922>
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d079      	beq.n	800449e <UART_SetConfig+0x78e>
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	f000 8115 	beq.w	80045da <UART_SetConfig+0x8ca>
 80043b0:	e164      	b.n	800467c <UART_SetConfig+0x96c>
 80043b2:	bf00      	nop
 80043b4:	40011400 	.word	0x40011400
 80043b8:	58024400 	.word	0x58024400
 80043bc:	40007800 	.word	0x40007800
 80043c0:	40007c00 	.word	0x40007c00
 80043c4:	58000c00 	.word	0x58000c00
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	003d0900 	.word	0x003d0900
        {
        case UART_CLOCKSOURCE_D3PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80043d0:	f7fe fbc4 	bl	8002b5c <HAL_RCCEx_GetD3PCLK1Freq>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	4ab1      	ldr	r2, [pc, #708]	; (80046a8 <UART_SetConfig+0x998>)
 80043e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	f7fc f826 	bl	8000440 <__aeabi_uldivmod>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	0222      	lsls	r2, r4, #8
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8004402:	61fa      	str	r2, [r7, #28]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	f04f 0400 	mov.w	r4, #0
 8004412:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004416:	18c0      	adds	r0, r0, r3
 8004418:	eb41 0104 	adc.w	r1, r1, r4
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	461a      	mov	r2, r3
 8004426:	4623      	mov	r3, r4
 8004428:	f7fc f80a 	bl	8000440 <__aeabi_uldivmod>
 800442c:	4603      	mov	r3, r0
 800442e:	460c      	mov	r4, r1
 8004430:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8004432:	e127      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL2:
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004434:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fbb1 	bl	8002ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	4618      	mov	r0, r3
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	4a97      	ldr	r2, [pc, #604]	; (80046a8 <UART_SetConfig+0x998>)
 800444c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	461a      	mov	r2, r3
 8004458:	4623      	mov	r3, r4
 800445a:	f7fb fff1 	bl	8000440 <__aeabi_uldivmod>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	0222      	lsls	r2, r4, #8
 8004464:	617a      	str	r2, [r7, #20]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800446c:	617a      	str	r2, [r7, #20]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	f04f 0400 	mov.w	r4, #0
 800447c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004480:	18c0      	adds	r0, r0, r3
 8004482:	eb41 0104 	adc.w	r1, r1, r4
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f04f 0400 	mov.w	r4, #0
 800448e:	461a      	mov	r2, r3
 8004490:	4623      	mov	r3, r4
 8004492:	f7fb ffd5 	bl	8000440 <__aeabi_uldivmod>
 8004496:	4603      	mov	r3, r0
 8004498:	460c      	mov	r4, r1
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 800449c:	e0f2      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL3:
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800449e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fcb4 	bl	8002e10 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	4618      	mov	r0, r3
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	4a7c      	ldr	r2, [pc, #496]	; (80046a8 <UART_SetConfig+0x998>)
 80044b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	f7fb ffbc 	bl	8000440 <__aeabi_uldivmod>
 80044c8:	4603      	mov	r3, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	0222      	lsls	r2, r4, #8
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80044d6:	60fa      	str	r2, [r7, #12]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	f04f 0400 	mov.w	r4, #0
 80044e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ea:	18c0      	adds	r0, r0, r3
 80044ec:	eb41 0104 	adc.w	r1, r1, r4
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f04f 0400 	mov.w	r4, #0
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	f7fb ffa0 	bl	8000440 <__aeabi_uldivmod>
 8004500:	4603      	mov	r3, r0
 8004502:	460c      	mov	r4, r1
 8004504:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8004506:	e0bd      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_HSI:
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004508:	4b68      	ldr	r3, [pc, #416]	; (80046ac <UART_SetConfig+0x99c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d036      	beq.n	8004582 <UART_SetConfig+0x872>
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8004514:	4b65      	ldr	r3, [pc, #404]	; (80046ac <UART_SetConfig+0x99c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	4a64      	ldr	r2, [pc, #400]	; (80046b0 <UART_SetConfig+0x9a0>)
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	4618      	mov	r0, r3
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	4a5e      	ldr	r2, [pc, #376]	; (80046a8 <UART_SetConfig+0x998>)
 8004530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	461a      	mov	r2, r3
 800453c:	4623      	mov	r3, r4
 800453e:	f7fb ff7f 	bl	8000440 <__aeabi_uldivmod>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	0222      	lsls	r2, r4, #8
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004564:	18c0      	adds	r0, r0, r3
 8004566:	eb41 0104 	adc.w	r1, r1, r4
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f04f 0400 	mov.w	r4, #0
 8004572:	461a      	mov	r2, r3
 8004574:	4623      	mov	r3, r4
 8004576:	f7fb ff63 	bl	8000440 <__aeabi_uldivmod>
 800457a:	4603      	mov	r3, r0
 800457c:	460c      	mov	r4, r1
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          else
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
          }
          break;
 8004580:	e080      	b.n	8004684 <UART_SetConfig+0x974>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <UART_SetConfig+0x998>)
 8004588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	461a      	mov	r2, r3
 8004594:	4623      	mov	r3, r4
 8004596:	4846      	ldr	r0, [pc, #280]	; (80046b0 <UART_SetConfig+0x9a0>)
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f7fb ff50 	bl	8000440 <__aeabi_uldivmod>
 80045a0:	4603      	mov	r3, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 80045a8:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 80045ac:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	eb1a 0003 	adds.w	r0, sl, r3
 80045be:	eb4b 0104 	adc.w	r1, fp, r4
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	461a      	mov	r2, r3
 80045cc:	4623      	mov	r3, r4
 80045ce:	f7fb ff37 	bl	8000440 <__aeabi_uldivmod>
 80045d2:	4603      	mov	r3, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 80045d8:	e054      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_CSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <UART_SetConfig+0x998>)
 80045e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f04f 0400 	mov.w	r4, #0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4623      	mov	r3, r4
 80045ee:	4831      	ldr	r0, [pc, #196]	; (80046b4 <UART_SetConfig+0x9a4>)
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	f7fb ff24 	bl	8000440 <__aeabi_uldivmod>
 80045f8:	4603      	mov	r3, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8004600:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004604:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	eb18 0003 	adds.w	r0, r8, r3
 8004616:	eb49 0104 	adc.w	r1, r9, r4
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f04f 0400 	mov.w	r4, #0
 8004622:	461a      	mov	r2, r3
 8004624:	4623      	mov	r3, r4
 8004626:	f7fb ff0b 	bl	8000440 <__aeabi_uldivmod>
 800462a:	4603      	mov	r3, r0
 800462c:	460c      	mov	r4, r1
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8004630:	e028      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <UART_SetConfig+0x998>)
 8004638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800463c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	f04f 0400 	mov.w	r4, #0
 800464c:	0226      	lsls	r6, r4, #8
 800464e:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8004652:	021d      	lsls	r5, r3, #8
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	f04f 0400 	mov.w	r4, #0
 800465e:	18e8      	adds	r0, r5, r3
 8004660:	eb46 0104 	adc.w	r1, r6, r4
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f04f 0400 	mov.w	r4, #0
 800466c:	461a      	mov	r2, r3
 800466e:	4623      	mov	r3, r4
 8004670:	f7fb fee6 	bl	8000440 <__aeabi_uldivmod>
 8004674:	4603      	mov	r3, r0
 8004676:	460c      	mov	r4, r1
 8004678:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 800467a:	e003      	b.n	8004684 <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          break;
 8004682:	bf00      	nop
        }

        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8004684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d308      	bcc.n	800469e <UART_SetConfig+0x98e>
 800468c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004692:	d204      	bcs.n	800469e <UART_SetConfig+0x98e>
        {
           huart->Instance->BRR = tmpreg;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e2d6      	b.n	8004c4c <UART_SetConfig+0xf3c>
        }
        else
        {
          ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046a4:	e2d2      	b.n	8004c4c <UART_SetConfig+0xf3c>
 80046a6:	bf00      	nop
 80046a8:	08007300 	.word	0x08007300
 80046ac:	58024400 	.word	0x58024400
 80046b0:	03d09000 	.word	0x03d09000
 80046b4:	003d0900 	.word	0x003d0900
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	f040 8165 	bne.w	800498e <UART_SetConfig+0xc7e>
  {
    switch (clocksource)
 80046c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	f200 8144 	bhi.w	8004956 <UART_SetConfig+0xc46>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0x9c4>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080047d9 	.word	0x080047d9
 80046d8:	08004805 	.word	0x08004805
 80046dc:	08004957 	.word	0x08004957
 80046e0:	08004957 	.word	0x08004957
 80046e4:	08004831 	.word	0x08004831
 80046e8:	08004957 	.word	0x08004957
 80046ec:	08004957 	.word	0x08004957
 80046f0:	08004957 	.word	0x08004957
 80046f4:	08004895 	.word	0x08004895
 80046f8:	08004957 	.word	0x08004957
 80046fc:	08004957 	.word	0x08004957
 8004700:	08004957 	.word	0x08004957
 8004704:	08004957 	.word	0x08004957
 8004708:	08004957 	.word	0x08004957
 800470c:	08004957 	.word	0x08004957
 8004710:	08004957 	.word	0x08004957
 8004714:	08004901 	.word	0x08004901
 8004718:	08004957 	.word	0x08004957
 800471c:	08004957 	.word	0x08004957
 8004720:	08004957 	.word	0x08004957
 8004724:	08004957 	.word	0x08004957
 8004728:	08004957 	.word	0x08004957
 800472c:	08004957 	.word	0x08004957
 8004730:	08004957 	.word	0x08004957
 8004734:	08004957 	.word	0x08004957
 8004738:	08004957 	.word	0x08004957
 800473c:	08004957 	.word	0x08004957
 8004740:	08004957 	.word	0x08004957
 8004744:	08004957 	.word	0x08004957
 8004748:	08004957 	.word	0x08004957
 800474c:	08004957 	.word	0x08004957
 8004750:	08004957 	.word	0x08004957
 8004754:	0800492b 	.word	0x0800492b
 8004758:	08004957 	.word	0x08004957
 800475c:	08004957 	.word	0x08004957
 8004760:	08004957 	.word	0x08004957
 8004764:	08004957 	.word	0x08004957
 8004768:	08004957 	.word	0x08004957
 800476c:	08004957 	.word	0x08004957
 8004770:	08004957 	.word	0x08004957
 8004774:	08004957 	.word	0x08004957
 8004778:	08004957 	.word	0x08004957
 800477c:	08004957 	.word	0x08004957
 8004780:	08004957 	.word	0x08004957
 8004784:	08004957 	.word	0x08004957
 8004788:	08004957 	.word	0x08004957
 800478c:	08004957 	.word	0x08004957
 8004790:	08004957 	.word	0x08004957
 8004794:	08004957 	.word	0x08004957
 8004798:	08004957 	.word	0x08004957
 800479c:	08004957 	.word	0x08004957
 80047a0:	08004957 	.word	0x08004957
 80047a4:	08004957 	.word	0x08004957
 80047a8:	08004957 	.word	0x08004957
 80047ac:	08004957 	.word	0x08004957
 80047b0:	08004957 	.word	0x08004957
 80047b4:	08004957 	.word	0x08004957
 80047b8:	08004957 	.word	0x08004957
 80047bc:	08004957 	.word	0x08004957
 80047c0:	08004957 	.word	0x08004957
 80047c4:	08004957 	.word	0x08004957
 80047c8:	08004957 	.word	0x08004957
 80047cc:	08004957 	.word	0x08004957
 80047d0:	08004957 	.word	0x08004957
 80047d4:	08004863 	.word	0x08004863
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80047d8:	f7fd f9a0 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80047dc:	4601      	mov	r1, r0
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	4ac7      	ldr	r2, [pc, #796]	; (8004b00 <UART_SetConfig+0xdf0>)
 80047e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8004802:	e0ac      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004804:	f7fd f9ac 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8004808:	4601      	mov	r1, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	4abc      	ldr	r2, [pc, #752]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004814:	fbb1 f3f3 	udiv	r3, r1, r3
 8004818:	005a      	lsls	r2, r3, #1
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	441a      	add	r2, r3
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 800482e:	e096      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe f9b3 	bl	8002ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004840:	49af      	ldr	r1, [pc, #700]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004842:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004846:	fbb3 f3f2 	udiv	r3, r3, r2
 800484a:	005a      	lsls	r2, r3, #1
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	441a      	add	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8004860:	e07d      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fad2 	bl	8002e10 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004872:	49a3      	ldr	r1, [pc, #652]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004874:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004878:	fbb3 f3f2 	udiv	r3, r3, r2
 800487c:	005a      	lsls	r2, r3, #1
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	441a      	add	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8004892:	e064      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004894:	4b9b      	ldr	r3, [pc, #620]	; (8004b04 <UART_SetConfig+0xdf4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01a      	beq.n	80048d6 <UART_SetConfig+0xbc6>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80048a0:	4b98      	ldr	r3, [pc, #608]	; (8004b04 <UART_SetConfig+0xdf4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	4a97      	ldr	r2, [pc, #604]	; (8004b08 <UART_SetConfig+0xdf8>)
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b4:	4992      	ldr	r1, [pc, #584]	; (8004b00 <UART_SetConfig+0xdf0>)
 80048b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80048ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80048be:	005a      	lsls	r2, r3, #1
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	441a      	add	r2, r3
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 80048d4:	e043      	b.n	800495e <UART_SetConfig+0xc4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	4a89      	ldr	r2, [pc, #548]	; (8004b00 <UART_SetConfig+0xdf0>)
 80048dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b89      	ldr	r3, [pc, #548]	; (8004b08 <UART_SetConfig+0xdf8>)
 80048e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	441a      	add	r2, r3
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80048fe:	e02e      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	4a7e      	ldr	r2, [pc, #504]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490a:	461a      	mov	r2, r3
 800490c:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <UART_SetConfig+0xdfc>)
 800490e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004912:	005a      	lsls	r2, r3, #1
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	441a      	add	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8004928:	e019      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	4a74      	ldr	r2, [pc, #464]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	005a      	lsls	r2, r3, #1
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	441a      	add	r2, r3
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800495c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800495e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800496a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800496e:	105b      	asrs	r3, r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	b29a      	uxth	r2, r3
 8004978:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800497c:	4313      	orrs	r3, r2
 800497e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    huart->Instance->BRR = brrtemp;
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e15e      	b.n	8004c4c <UART_SetConfig+0xf3c>
  }
  else
  {
    switch (clocksource)
 800498e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	f200 8156 	bhi.w	8004c44 <UART_SetConfig+0xf34>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0xc90>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	08004aa5 	.word	0x08004aa5
 80049a4:	08004ad3 	.word	0x08004ad3
 80049a8:	08004c45 	.word	0x08004c45
 80049ac:	08004c45 	.word	0x08004c45
 80049b0:	08004b11 	.word	0x08004b11
 80049b4:	08004c45 	.word	0x08004c45
 80049b8:	08004c45 	.word	0x08004c45
 80049bc:	08004c45 	.word	0x08004c45
 80049c0:	08004b79 	.word	0x08004b79
 80049c4:	08004c45 	.word	0x08004c45
 80049c8:	08004c45 	.word	0x08004c45
 80049cc:	08004c45 	.word	0x08004c45
 80049d0:	08004c45 	.word	0x08004c45
 80049d4:	08004c45 	.word	0x08004c45
 80049d8:	08004c45 	.word	0x08004c45
 80049dc:	08004c45 	.word	0x08004c45
 80049e0:	08004be9 	.word	0x08004be9
 80049e4:	08004c45 	.word	0x08004c45
 80049e8:	08004c45 	.word	0x08004c45
 80049ec:	08004c45 	.word	0x08004c45
 80049f0:	08004c45 	.word	0x08004c45
 80049f4:	08004c45 	.word	0x08004c45
 80049f8:	08004c45 	.word	0x08004c45
 80049fc:	08004c45 	.word	0x08004c45
 8004a00:	08004c45 	.word	0x08004c45
 8004a04:	08004c45 	.word	0x08004c45
 8004a08:	08004c45 	.word	0x08004c45
 8004a0c:	08004c45 	.word	0x08004c45
 8004a10:	08004c45 	.word	0x08004c45
 8004a14:	08004c45 	.word	0x08004c45
 8004a18:	08004c45 	.word	0x08004c45
 8004a1c:	08004c45 	.word	0x08004c45
 8004a20:	08004c15 	.word	0x08004c15
 8004a24:	08004c45 	.word	0x08004c45
 8004a28:	08004c45 	.word	0x08004c45
 8004a2c:	08004c45 	.word	0x08004c45
 8004a30:	08004c45 	.word	0x08004c45
 8004a34:	08004c45 	.word	0x08004c45
 8004a38:	08004c45 	.word	0x08004c45
 8004a3c:	08004c45 	.word	0x08004c45
 8004a40:	08004c45 	.word	0x08004c45
 8004a44:	08004c45 	.word	0x08004c45
 8004a48:	08004c45 	.word	0x08004c45
 8004a4c:	08004c45 	.word	0x08004c45
 8004a50:	08004c45 	.word	0x08004c45
 8004a54:	08004c45 	.word	0x08004c45
 8004a58:	08004c45 	.word	0x08004c45
 8004a5c:	08004c45 	.word	0x08004c45
 8004a60:	08004c45 	.word	0x08004c45
 8004a64:	08004c45 	.word	0x08004c45
 8004a68:	08004c45 	.word	0x08004c45
 8004a6c:	08004c45 	.word	0x08004c45
 8004a70:	08004c45 	.word	0x08004c45
 8004a74:	08004c45 	.word	0x08004c45
 8004a78:	08004c45 	.word	0x08004c45
 8004a7c:	08004c45 	.word	0x08004c45
 8004a80:	08004c45 	.word	0x08004c45
 8004a84:	08004c45 	.word	0x08004c45
 8004a88:	08004c45 	.word	0x08004c45
 8004a8c:	08004c45 	.word	0x08004c45
 8004a90:	08004c45 	.word	0x08004c45
 8004a94:	08004c45 	.word	0x08004c45
 8004a98:	08004c45 	.word	0x08004c45
 8004a9c:	08004c45 	.word	0x08004c45
 8004aa0:	08004b45 	.word	0x08004b45
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681c      	ldr	r4, [r3, #0]
 8004aa8:	f7fd f838 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8004aac:	4601      	mov	r1, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab8:	fbb1 f2f3 	udiv	r2, r1, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	441a      	add	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	60e3      	str	r3, [r4, #12]
      break;
 8004ad0:	e0bc      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_D2PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	681c      	ldr	r4, [r3, #0]
 8004ad6:	f7fd f843 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8004ada:	4601      	mov	r1, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <UART_SetConfig+0xdf0>)
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	fbb1 f2f3 	udiv	r2, r1, r3
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	441a      	add	r2, r3
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	60e3      	str	r3, [r4, #12]
      break;
 8004afe:	e0a5      	b.n	8004c4c <UART_SetConfig+0xf3c>
 8004b00:	08007300 	.word	0x08007300
 8004b04:	58024400 	.word	0x58024400
 8004b08:	03d09000 	.word	0x03d09000
 8004b0c:	003d0900 	.word	0x003d0900
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe f843 	bl	8002ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b22:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004b24:	484d      	ldr	r0, [pc, #308]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004b26:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8004b2a:	fbb2 f1f1 	udiv	r1, r2, r1
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6852      	ldr	r2, [r2, #4]
 8004b32:	0852      	lsrs	r2, r2, #1
 8004b34:	4411      	add	r1, r2
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	6852      	ldr	r2, [r2, #4]
 8004b3a:	fbb1 f2f2 	udiv	r2, r1, r2
 8004b3e:	b292      	uxth	r2, r2
 8004b40:	60da      	str	r2, [r3, #12]
      break;
 8004b42:	e083      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f961 	bl	8002e10 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b56:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004b58:	4840      	ldr	r0, [pc, #256]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004b5a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8004b5e:	fbb2 f1f1 	udiv	r1, r2, r1
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	6852      	ldr	r2, [r2, #4]
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	4411      	add	r1, r2
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	6852      	ldr	r2, [r2, #4]
 8004b6e:	fbb1 f2f2 	udiv	r2, r1, r2
 8004b72:	b292      	uxth	r2, r2
 8004b74:	60da      	str	r2, [r3, #12]
      break;
 8004b76:	e069      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b78:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <UART_SetConfig+0xf50>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <UART_SetConfig+0xeac>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	; (8004c60 <UART_SetConfig+0xf50>)
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	08d2      	lsrs	r2, r2, #3
 8004b8e:	f002 0203 	and.w	r2, r2, #3
 8004b92:	4934      	ldr	r1, [pc, #208]	; (8004c64 <UART_SetConfig+0xf54>)
 8004b94:	fa21 f202 	lsr.w	r2, r1, r2
 8004b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b9a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8004b9c:	482f      	ldr	r0, [pc, #188]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004b9e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8004ba2:	fbb2 f1f1 	udiv	r1, r2, r1
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba8:	6852      	ldr	r2, [r2, #4]
 8004baa:	0852      	lsrs	r2, r2, #1
 8004bac:	4411      	add	r1, r2
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	6852      	ldr	r2, [r2, #4]
 8004bb2:	fbb1 f2f2 	udiv	r2, r1, r2
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	60da      	str	r2, [r3, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 8004bba:	e047      	b.n	8004c4c <UART_SetConfig+0xf3c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc4:	4925      	ldr	r1, [pc, #148]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004bc6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <UART_SetConfig+0xf54>)
 8004bce:	fbb2 f1f1 	udiv	r1, r2, r1
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	4411      	add	r1, r2
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	fbb1 f2f2 	udiv	r2, r1, r2
 8004be2:	b292      	uxth	r2, r2
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	e031      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_CSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bf0:	491a      	ldr	r1, [pc, #104]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004bf2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <UART_SetConfig+0xf58>)
 8004bfa:	fbb2 f1f1 	udiv	r1, r2, r1
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c00:	6852      	ldr	r2, [r2, #4]
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	4411      	add	r1, r2
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	6852      	ldr	r2, [r2, #4]
 8004c0a:	fbb1 f2f2 	udiv	r2, r1, r2
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	60da      	str	r2, [r3, #12]
      break;
 8004c12:	e01b      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c1c:	490f      	ldr	r1, [pc, #60]	; (8004c5c <UART_SetConfig+0xf4c>)
 8004c1e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c26:	fbb1 f2f2 	udiv	r2, r1, r2
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	6852      	ldr	r2, [r2, #4]
 8004c32:	0852      	lsrs	r2, r2, #1
 8004c34:	4411      	add	r1, r2
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	6852      	ldr	r2, [r2, #4]
 8004c3a:	fbb1 f2f2 	udiv	r2, r1, r2
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	60da      	str	r2, [r3, #12]
      break;
 8004c42:	e003      	b.n	8004c4c <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004c4a:	bf00      	nop
    }
  }

  return ret;
 8004c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3754      	adds	r7, #84	; 0x54
 8004c54:	46bd      	mov	sp, r7
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08007300 	.word	0x08007300
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900

08004c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	6852      	ldr	r2, [r2, #4]
 8004c8a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6852      	ldr	r2, [r2, #4]
 8004cac:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	6852      	ldr	r2, [r2, #4]
 8004cce:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	6852      	ldr	r2, [r2, #4]
 8004cf0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	6892      	ldr	r2, [r2, #8]
 8004d34:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	6852      	ldr	r2, [r2, #4]
 8004d56:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d6a:	d10a      	bne.n	8004d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	6852      	ldr	r2, [r2, #4]
 8004d76:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	6852      	ldr	r2, [r2, #4]
 8004d98:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dc2:	f7fb fd1b 	bl	80007fc <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d10e      	bne.n	8004df4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f82c 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e022      	b.n	8004e3a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d10e      	bne.n	8004e20 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f816 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e00c      	b.n	8004e3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e52:	e02c      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d028      	beq.n	8004eae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e62:	f7fb fccb 	bl	80007fc <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d91d      	bls.n	8004eae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e00f      	b.n	8004ece <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0c3      	beq.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	; 0x30
 8004edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	4a79      	ldr	r2, [pc, #484]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004ee0:	4b78      	ldr	r3, [pc, #480]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eee:	4b75      	ldr	r3, [pc, #468]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004efc:	4a71      	ldr	r2, [pc, #452]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004efe:	4b71      	ldr	r3, [pc, #452]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f0c:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1a:	4a6a      	ldr	r2, [pc, #424]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f1c:	4b69      	ldr	r3, [pc, #420]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f2a:	4b66      	ldr	r3, [pc, #408]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f38:	4a62      	ldr	r2, [pc, #392]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f3a:	4b62      	ldr	r3, [pc, #392]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f56:	4a5b      	ldr	r2, [pc, #364]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f58:	4b5a      	ldr	r3, [pc, #360]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f5e:	f043 0308 	orr.w	r3, r3, #8
 8004f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f66:	4b57      	ldr	r3, [pc, #348]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f74:	4a53      	ldr	r2, [pc, #332]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f76:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f84:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <MX_GPIO_Init+0x1ec>)
 8004f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004f98:	484b      	ldr	r0, [pc, #300]	; (80050c8 <MX_GPIO_Init+0x1f0>)
 8004f9a:	f7fb ff2b 	bl	8000df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	484a      	ldr	r0, [pc, #296]	; (80050cc <MX_GPIO_Init+0x1f4>)
 8004fa4:	f7fb ff26 	bl	8000df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fae:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <MX_GPIO_Init+0x1f8>)
 8004fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004fb6:	f107 031c 	add.w	r3, r7, #28
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4845      	ldr	r0, [pc, #276]	; (80050d4 <MX_GPIO_Init+0x1fc>)
 8004fbe:	f7fb fd63 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004fc2:	2332      	movs	r3, #50	; 0x32
 8004fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fd2:	230b      	movs	r3, #11
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	483d      	ldr	r0, [pc, #244]	; (80050d4 <MX_GPIO_Init+0x1fc>)
 8004fde:	f7fb fd53 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fe2:	2386      	movs	r3, #134	; 0x86
 8004fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ff2:	230b      	movs	r3, #11
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff6:	f107 031c 	add.w	r3, r7, #28
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4836      	ldr	r0, [pc, #216]	; (80050d8 <MX_GPIO_Init+0x200>)
 8004ffe:	f7fb fd43 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005010:	2300      	movs	r3, #0
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005014:	230b      	movs	r3, #11
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005018:	f107 031c 	add.w	r3, r7, #28
 800501c:	4619      	mov	r1, r3
 800501e:	482a      	ldr	r0, [pc, #168]	; (80050c8 <MX_GPIO_Init+0x1f0>)
 8005020:	f7fb fd32 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005024:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8005028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502a:	2301      	movs	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005032:	2300      	movs	r3, #0
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005036:	f107 031c 	add.w	r3, r7, #28
 800503a:	4619      	mov	r1, r3
 800503c:	4822      	ldr	r0, [pc, #136]	; (80050c8 <MX_GPIO_Init+0x1f0>)
 800503e:	f7fb fd23 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005046:	2301      	movs	r3, #1
 8005048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504e:	2300      	movs	r3, #0
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005052:	f107 031c 	add.w	r3, r7, #28
 8005056:	4619      	mov	r1, r3
 8005058:	481c      	ldr	r0, [pc, #112]	; (80050cc <MX_GPIO_Init+0x1f4>)
 800505a:	f7fb fd15 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800506a:	f107 031c 	add.w	r3, r7, #28
 800506e:	4619      	mov	r1, r3
 8005070:	4816      	ldr	r0, [pc, #88]	; (80050cc <MX_GPIO_Init+0x1f4>)
 8005072:	f7fb fd09 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005076:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800507a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507c:	2302      	movs	r3, #2
 800507e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005084:	2300      	movs	r3, #0
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005088:	230a      	movs	r3, #10
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508c:	f107 031c 	add.w	r3, r7, #28
 8005090:	4619      	mov	r1, r3
 8005092:	4811      	ldr	r0, [pc, #68]	; (80050d8 <MX_GPIO_Init+0x200>)
 8005094:	f7fb fcf8 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800509c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509e:	2302      	movs	r3, #2
 80050a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050aa:	230b      	movs	r3, #11
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050ae:	f107 031c 	add.w	r3, r7, #28
 80050b2:	4619      	mov	r1, r3
 80050b4:	4805      	ldr	r0, [pc, #20]	; (80050cc <MX_GPIO_Init+0x1f4>)
 80050b6:	f7fb fce7 	bl	8000a88 <HAL_GPIO_Init>

}
 80050ba:	bf00      	nop
 80050bc:	3730      	adds	r7, #48	; 0x30
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
 80050c8:	58020400 	.word	0x58020400
 80050cc:	58021800 	.word	0x58021800
 80050d0:	11110000 	.word	0x11110000
 80050d4:	58020800 	.word	0x58020800
 80050d8:	58020000 	.word	0x58020000

080050dc <__io_putchar>:
/*
 * Printf in Serial 2 (Virtual serial of Nucleo-64 with STLINK)
 */

int __io_putchar(int ch)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	733b      	strb	r3, [r7, #12]

 while(HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY);//Wait until UART is ready
 80050ea:	bf00      	nop
 80050ec:	4808      	ldr	r0, [pc, #32]	; (8005110 <__io_putchar+0x34>)
 80050ee:	f7fe fdf1 	bl	8003cd4 <HAL_UART_GetState>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d1f9      	bne.n	80050ec <__io_putchar+0x10>
 HAL_UART_Transmit(&huart3, &(*c), 1, 10);
 80050f8:	f107 010c 	add.w	r1, r7, #12
 80050fc:	230a      	movs	r3, #10
 80050fe:	2201      	movs	r2, #1
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <__io_putchar+0x34>)
 8005102:	f7fe fd5a 	bl	8003bba <HAL_UART_Transmit>
 return ch;
 8005106:	687b      	ldr	r3, [r7, #4]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	200020e8 	.word	0x200020e8

08005114 <_write>:

int _write(int file,char *ptr, int len)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e009      	b.n	800513a <_write+0x26>
	 __io_putchar(*ptr++);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	60ba      	str	r2, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffd4 	bl	80050dc <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++){
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3301      	adds	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	429a      	cmp	r2, r3
 8005140:	dbf1      	blt.n	8005126 <_write+0x12>
	 }
return len;
 8005142:	687b      	ldr	r3, [r7, #4]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005152:	f7fb fafd 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005156:	f000 f823 	bl	80051a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800515a:	f7ff febd 	bl	8004ed8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800515e:	f000 fa19 	bl	8005594 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8005162:	f000 f9a5 	bl	80054b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//Start 1s timer
 8005166:	480a      	ldr	r0, [pc, #40]	; (8005190 <main+0x44>)
 8005168:	f7fe f8dd 	bl	8003326 <HAL_TIM_Base_Start_IT>

#ifdef milvintequatro
  uint32_t ifftFlag = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	607b      	str	r3, [r7, #4]
  uint32_t doBitReverse = 1;
 8005170:	2301      	movs	r3, #1
 8005172:	603b      	str	r3, [r7, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len512, senoide_input, ifftFlag, doBitReverse);
	  FFT_result++;
#endif

#ifdef milvintequatro
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4905      	ldr	r1, [pc, #20]	; (8005194 <main+0x48>)
 800517e:	4806      	ldr	r0, [pc, #24]	; (8005198 <main+0x4c>)
 8005180:	f000 fdce 	bl	8005d20 <arm_cfft_f32>
	  FFT_result++;
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <main+0x50>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <main+0x50>)
 800518c:	6013      	str	r3, [r2, #0]
	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 800518e:	e7f1      	b.n	8005174 <main+0x28>
 8005190:	200020a8 	.word	0x200020a8
 8005194:	20000008 	.word	0x20000008
 8005198:	08007328 	.word	0x08007328
 800519c:	200020a0 	.word	0x200020a0

080051a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b0cc      	sub	sp, #304	; 0x130
 80051a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 80051a6:	4a53      	ldr	r2, [pc, #332]	; (80052f4 <SystemClock_Config+0x154>)
 80051a8:	4b52      	ldr	r3, [pc, #328]	; (80052f4 <SystemClock_Config+0x154>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	60d3      	str	r3, [r2, #12]

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	4a4e      	ldr	r2, [pc, #312]	; (80052f4 <SystemClock_Config+0x154>)
 80051ba:	4b4e      	ldr	r3, [pc, #312]	; (80052f4 <SystemClock_Config+0x154>)
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051c2:	6193      	str	r3, [r2, #24]
 80051c4:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <SystemClock_Config+0x154>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	681b      	ldr	r3, [r3, #0]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 80051d4:	bf00      	nop
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <SystemClock_Config+0x154>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	d1f8      	bne.n	80051d6 <SystemClock_Config+0x36>
  {
    
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051e4:	2302      	movs	r3, #2
 80051e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80051f0:	2310      	movs	r3, #16
 80051f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051f6:	2302      	movs	r3, #2
 80051f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005202:	2304      	movs	r3, #4
 8005204:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8005208:	2332      	movs	r3, #50	; 0x32
 800520a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800520e:	2302      	movs	r3, #2
 8005210:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005214:	2304      	movs	r3, #4
 8005216:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800521a:	2302      	movs	r3, #2
 800521c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005220:	230c      	movs	r3, #12
 8005222:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005226:	2300      	movs	r3, #0
 8005228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005232:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb fdf4 	bl	8000e24 <HAL_RCC_OscConfig>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005242:	f240 2142 	movw	r1, #578	; 0x242
 8005246:	482c      	ldr	r0, [pc, #176]	; (80052f8 <SystemClock_Config+0x158>)
 8005248:	f000 f87c 	bl	8005344 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800524c:	233f      	movs	r3, #63	; 0x3f
 800524e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005252:	2303      	movs	r3, #3
 8005254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800525e:	2308      	movs	r3, #8
 8005260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800527e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f7fc f967 	bl	8001558 <HAL_RCC_ClockConfig>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <SystemClock_Config+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005290:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005294:	4818      	ldr	r0, [pc, #96]	; (80052f8 <SystemClock_Config+0x158>)
 8005296:	f000 f855 	bl	8005344 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	2202      	movs	r2, #2
 80052a0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	2200      	movs	r2, #0
 80052a8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fc fc78 	bl	8001ba4 <HAL_RCCEx_PeriphCLKConfig>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <SystemClock_Config+0x124>
  {
    _Error_Handler(__FILE__, __LINE__);
 80052ba:	f240 215b 	movw	r1, #603	; 0x25b
 80052be:	480e      	ldr	r0, [pc, #56]	; (80052f8 <SystemClock_Config+0x158>)
 80052c0:	f000 f840 	bl	8005344 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <SystemClock_Config+0x15c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <SystemClock_Config+0x160>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb fba2 	bl	8000a1a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80052d6:	2004      	movs	r0, #4
 80052d8:	f7fb fbac 	bl	8000a34 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80052dc:	2200      	movs	r2, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	f7fb fb6f 	bl	80009c6 <HAL_NVIC_SetPriority>
}
 80052e8:	bf00      	nop
 80052ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58024800 	.word	0x58024800
 80052f8:	080072c0 	.word	0x080072c0
 80052fc:	20002008 	.word	0x20002008
 8005300:	10624dd3 	.word	0x10624dd3

08005304 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d10c      	bne.n	8005330 <HAL_TIM_PeriodElapsedCallback+0x2c>

	  printf("FFT/s: %i \r\n", (FFT_result-FFT_old));
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	4619      	mov	r1, r3
 8005322:	4807      	ldr	r0, [pc, #28]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005324:	f001 f892 	bl	800644c <iprintf>
	  FFT_old = FFT_result;
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800532e:	6013      	str	r3, [r2, #0]

  }

  /* USER CODE END Callback 1 */
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200020a0 	.word	0x200020a0
 800533c:	200020a4 	.word	0x200020a4
 8005340:	080072d0 	.word	0x080072d0

08005344 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800534e:	e7fe      	b.n	800534e <_Error_Handler+0xa>

08005350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <HAL_MspInit+0x88>)
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <HAL_MspInit+0x88>)
 800535a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <HAL_MspInit+0x88>)
 8005368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005374:	2003      	movs	r0, #3
 8005376:	f7fb fb1b 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	f06f 000b 	mvn.w	r0, #11
 8005382:	f7fb fb20 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	f06f 000a 	mvn.w	r0, #10
 800538e:	f7fb fb1a 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005392:	2200      	movs	r2, #0
 8005394:	2100      	movs	r1, #0
 8005396:	f06f 0009 	mvn.w	r0, #9
 800539a:	f7fb fb14 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	f06f 0004 	mvn.w	r0, #4
 80053a6:	f7fb fb0e 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80053aa:	2200      	movs	r2, #0
 80053ac:	2100      	movs	r1, #0
 80053ae:	f06f 0003 	mvn.w	r0, #3
 80053b2:	f7fb fb08 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	f06f 0001 	mvn.w	r0, #1
 80053be:	f7fb fb02 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053c2:	2200      	movs	r2, #0
 80053c4:	2100      	movs	r1, #0
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	f7fb fafc 	bl	80009c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	58024400 	.word	0x58024400

080053dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053e0:	f7fb f9f8 	bl	80007d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80053e4:	f7fb fb42 	bl	8000a6c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}

080053ec <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <TIM2_IRQHandler+0x10>)
 80053f2:	f7fd ffb5 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200020a8 	.word	0x200020a8

08005400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <SystemInit+0xa0>)
 8005406:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <SystemInit+0xa0>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <SystemInit+0xa4>)
 8005416:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <SystemInit+0xa4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005420:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <SystemInit+0xa4>)
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8005426:	491f      	ldr	r1, [pc, #124]	; (80054a4 <SystemInit+0xa4>)
 8005428:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <SystemInit+0xa4>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b1e      	ldr	r3, [pc, #120]	; (80054a8 <SystemInit+0xa8>)
 800542e:	4013      	ands	r3, r2
 8005430:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <SystemInit+0xa4>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <SystemInit+0xa4>)
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <SystemInit+0xa4>)
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8005444:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <SystemInit+0xa4>)
 8005446:	2200      	movs	r2, #0
 8005448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800544a:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <SystemInit+0xa4>)
 800544c:	2200      	movs	r2, #0
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <SystemInit+0xa4>)
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <SystemInit+0xa4>)
 8005458:	2200      	movs	r2, #0
 800545a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <SystemInit+0xa4>)
 800545e:	2200      	movs	r2, #0
 8005460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <SystemInit+0xa4>)
 8005464:	2200      	movs	r2, #0
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <SystemInit+0xa4>)
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <SystemInit+0xa4>)
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005474:	4a0b      	ldr	r2, [pc, #44]	; (80054a4 <SystemInit+0xa4>)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <SystemInit+0xa4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <SystemInit+0xa4>)
 8005482:	2200      	movs	r2, #0
 8005484:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <SystemInit+0xac>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <SystemInit+0xa0>)
 800548e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005492:	609a      	str	r2, [r3, #8]
#endif

}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000ed00 	.word	0xe000ed00
 80054a4:	58024400 	.word	0x58024400
 80054a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80054ac:	51008108 	.word	0x51008108

080054b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <MX_TIM2_Init+0x90>)
 80054b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0xC350;
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <MX_TIM2_Init+0x90>)
 80054c0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80054c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c6:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <MX_TIM2_Init+0x90>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <MX_TIM2_Init+0x90>)
 80054ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80054d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <MX_TIM2_Init+0x90>)
 80054d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <MX_TIM2_Init+0x90>)
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054e2:	4817      	ldr	r0, [pc, #92]	; (8005540 <MX_TIM2_Init+0x90>)
 80054e4:	f7fd fef4 	bl	80032d0 <HAL_TIM_Base_Init>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <MX_TIM2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80054ee:	213f      	movs	r1, #63	; 0x3f
 80054f0:	4814      	ldr	r0, [pc, #80]	; (8005544 <MX_TIM2_Init+0x94>)
 80054f2:	f7ff ff27 	bl	8005344 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054fc:	f107 0310 	add.w	r3, r7, #16
 8005500:	4619      	mov	r1, r3
 8005502:	480f      	ldr	r0, [pc, #60]	; (8005540 <MX_TIM2_Init+0x90>)
 8005504:	f7fe f84c 	bl	80035a0 <HAL_TIM_ConfigClockSource>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800550e:	2145      	movs	r1, #69	; 0x45
 8005510:	480c      	ldr	r0, [pc, #48]	; (8005544 <MX_TIM2_Init+0x94>)
 8005512:	f7ff ff17 	bl	8005344 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4807      	ldr	r0, [pc, #28]	; (8005540 <MX_TIM2_Init+0x90>)
 8005524:	f7fe fa90 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <MX_TIM2_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 800552e:	214c      	movs	r1, #76	; 0x4c
 8005530:	4804      	ldr	r0, [pc, #16]	; (8005544 <MX_TIM2_Init+0x94>)
 8005532:	f7ff ff07 	bl	8005344 <_Error_Handler>
  }

}
 8005536:	bf00      	nop
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	200020a8 	.word	0x200020a8
 8005544:	080072e0 	.word	0x080072e0

08005548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d116      	bne.n	8005588 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800555a:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_TIM_Base_MspInit+0x48>)
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_TIM_Base_MspInit+0x48>)
 800555e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_TIM_Base_MspInit+0x48>)
 800556c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005578:	2200      	movs	r2, #0
 800557a:	2100      	movs	r1, #0
 800557c:	201c      	movs	r0, #28
 800557e:	f7fb fa22 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005582:	201c      	movs	r0, #28
 8005584:	f7fb fa3b 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	58024400 	.word	0x58024400

08005594 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <MX_USART3_UART_Init+0x74>)
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <MX_USART3_UART_Init+0x78>)
 800559c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055bc:	220c      	movs	r2, #12
 80055be:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	621a      	str	r2, [r3, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055da:	2200      	movs	r2, #0
 80055dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055f0:	4805      	ldr	r0, [pc, #20]	; (8005608 <MX_USART3_UART_Init+0x74>)
 80055f2:	f7fe fa91 	bl	8003b18 <HAL_UART_Init>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <MX_USART3_UART_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 80055fc:	2148      	movs	r1, #72	; 0x48
 80055fe:	4804      	ldr	r0, [pc, #16]	; (8005610 <MX_USART3_UART_Init+0x7c>)
 8005600:	f7ff fea0 	bl	8005344 <_Error_Handler>
  }

}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200020e8 	.word	0x200020e8
 800560c:	40004800 	.word	0x40004800
 8005610:	080072f0 	.word	0x080072f0

08005614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <HAL_UART_MspInit+0x5c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d11f      	bne.n	8005666 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_UART_MspInit+0x60>)
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_UART_MspInit+0x60>)
 800562a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800562e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_UART_MspInit+0x60>)
 8005638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800563c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005644:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005648:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564a:	2302      	movs	r3, #2
 800564c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005656:	2307      	movs	r3, #7
 8005658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	4619      	mov	r1, r3
 8005660:	4805      	ldr	r0, [pc, #20]	; (8005678 <HAL_UART_MspInit+0x64>)
 8005662:	f7fb fa11 	bl	8000a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005666:	bf00      	nop
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40004800 	.word	0x40004800
 8005674:	58024400 	.word	0x58024400
 8005678:	58020c00 	.word	0x58020c00

0800567c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800567c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005680:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005682:	e003      	b.n	800568c <LoopCopyDataInit>

08005684 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005686:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005688:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800568a:	3104      	adds	r1, #4

0800568c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800568c:	480b      	ldr	r0, [pc, #44]	; (80056bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005690:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005692:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005694:	d3f6      	bcc.n	8005684 <CopyDataInit>
  ldr  r2, =_sbss
 8005696:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005698:	e002      	b.n	80056a0 <LoopFillZerobss>

0800569a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800569a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800569c:	f842 3b04 	str.w	r3, [r2], #4

080056a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056a4:	d3f9      	bcc.n	800569a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056a6:	f7ff feab 	bl	8005400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056aa:	f000 fea3 	bl	80063f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ae:	f7ff fd4d 	bl	800514c <main>
  bx  lr    
 80056b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056b8:	0800a1f0 	.word	0x0800a1f0
  ldr  r0, =_sdata
 80056bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056c0:	20002074 	.word	0x20002074
  ldr  r2, =_sbss
 80056c4:	20002074 	.word	0x20002074
  ldr  r3, = _ebss
 80056c8:	2000216c 	.word	0x2000216c

080056cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056cc:	e7fe      	b.n	80056cc <ADC3_IRQHandler>
	...

080056d0 <arm_cfft_radix8by2_f32>:
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	4607      	mov	r7, r0
 80056d6:	4608      	mov	r0, r1
 80056d8:	ed2d 8b06 	vpush	{d8-d10}
 80056dc:	f8b7 e000 	ldrh.w	lr, [r7]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80056e6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80056ea:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80056ee:	f000 80b0 	beq.w	8005852 <arm_cfft_radix8by2_f32+0x182>
 80056f2:	008b      	lsls	r3, r1, #2
 80056f4:	3210      	adds	r2, #16
 80056f6:	f100 0610 	add.w	r6, r0, #16
 80056fa:	f108 0510 	add.w	r5, r8, #16
 80056fe:	3310      	adds	r3, #16
 8005700:	18c4      	adds	r4, r0, r3
 8005702:	4443      	add	r3, r8
 8005704:	ed55 6a04 	vldr	s13, [r5, #-16]
 8005708:	f1be 0e01 	subs.w	lr, lr, #1
 800570c:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005710:	f104 0410 	add.w	r4, r4, #16
 8005714:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005718:	f106 0610 	add.w	r6, r6, #16
 800571c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8005720:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005724:	ed55 2a01 	vldr	s5, [r5, #-4]
 8005728:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800572c:	ed53 0a04 	vldr	s1, [r3, #-16]
 8005730:	f102 0210 	add.w	r2, r2, #16
 8005734:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005738:	f105 0510 	add.w	r5, r5, #16
 800573c:	ed13 3a02 	vldr	s6, [r3, #-8]
 8005740:	f103 0310 	add.w	r3, r3, #16
 8005744:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8005748:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800574c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005750:	ee33 8a83 	vadd.f32	s16, s7, s6
 8005754:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8005758:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800575c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005760:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8005764:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005768:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800576c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005770:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8005774:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8005778:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800577c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005780:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005784:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8005788:	ee72 9a22 	vadd.f32	s19, s4, s5
 800578c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005790:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005794:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8005798:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800579c:	ee36 6a44 	vsub.f32	s12, s12, s8
 80057a0:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80057a4:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80057a8:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80057ac:	ee72 7a62 	vsub.f32	s15, s4, s5
 80057b0:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80057b4:	ee73 2a63 	vsub.f32	s5, s6, s7
 80057b8:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80057bc:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80057c0:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80057c4:	ee24 3a84 	vmul.f32	s6, s9, s8
 80057c8:	ee27 2a26 	vmul.f32	s4, s14, s13
 80057cc:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80057d0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80057d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80057d8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80057dc:	ee65 6a26 	vmul.f32	s13, s10, s13
 80057e0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80057e4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80057e8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80057ec:	ee33 4a02 	vadd.f32	s8, s6, s4
 80057f0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80057f4:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80057f8:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80057fc:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005800:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8005804:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8005808:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800580c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005810:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005814:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800581c:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005820:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005824:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005828:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800582c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005830:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005834:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005838:	ee37 7a26 	vadd.f32	s14, s14, s13
 800583c:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8005840:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8005844:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005848:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800584c:	f47f af5a 	bne.w	8005704 <arm_cfft_radix8by2_f32+0x34>
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	b28c      	uxth	r4, r1
 8005854:	2302      	movs	r3, #2
 8005856:	4621      	mov	r1, r4
 8005858:	f000 fada 	bl	8005e10 <arm_radix8_butterfly_f32>
 800585c:	4621      	mov	r1, r4
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4640      	mov	r0, r8
 8005862:	2302      	movs	r3, #2
 8005864:	ecbd 8b06 	vpop	{d8-d10}
 8005868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	f000 bad0 	b.w	8005e10 <arm_radix8_butterfly_f32>

08005870 <arm_cfft_radix8by4_f32>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	ed2d 8b06 	vpush	{d8-d10}
 8005878:	8804      	ldrh	r4, [r0, #0]
 800587a:	b08f      	sub	sp, #60	; 0x3c
 800587c:	ed91 6a00 	vldr	s12, [r1]
 8005880:	460a      	mov	r2, r1
 8005882:	0864      	lsrs	r4, r4, #1
 8005884:	ed91 7a01 	vldr	s14, [r1, #4]
 8005888:	9101      	str	r1, [sp, #4]
 800588a:	00a3      	lsls	r3, r4, #2
 800588c:	6841      	ldr	r1, [r0, #4]
 800588e:	0864      	lsrs	r4, r4, #1
 8005890:	900c      	str	r0, [sp, #48]	; 0x30
 8005892:	9205      	str	r2, [sp, #20]
 8005894:	f101 0610 	add.w	r6, r1, #16
 8005898:	4625      	mov	r5, r4
 800589a:	940b      	str	r4, [sp, #44]	; 0x2c
 800589c:	f101 0408 	add.w	r4, r1, #8
 80058a0:	9602      	str	r6, [sp, #8]
 80058a2:	9407      	str	r4, [sp, #28]
 80058a4:	18d4      	adds	r4, r2, r3
 80058a6:	1eaa      	subs	r2, r5, #2
 80058a8:	f101 0518 	add.w	r5, r1, #24
 80058ac:	18e0      	adds	r0, r4, r3
 80058ae:	edd4 4a00 	vldr	s9, [r4]
 80058b2:	ed94 4a01 	vldr	s8, [r4, #4]
 80058b6:	46a6      	mov	lr, r4
 80058b8:	edd0 6a00 	vldr	s13, [r0]
 80058bc:	18c7      	adds	r7, r0, r3
 80058be:	edd0 7a01 	vldr	s15, [r0, #4]
 80058c2:	46a0      	mov	r8, r4
 80058c4:	ee76 5a26 	vadd.f32	s11, s12, s13
 80058c8:	ed97 5a00 	vldr	s10, [r7]
 80058cc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80058d0:	4604      	mov	r4, r0
 80058d2:	9506      	str	r5, [sp, #24]
 80058d4:	4605      	mov	r5, r0
 80058d6:	ee75 2aa4 	vadd.f32	s5, s11, s9
 80058da:	900a      	str	r0, [sp, #40]	; 0x28
 80058dc:	9801      	ldr	r0, [sp, #4]
 80058de:	ee37 6a27 	vadd.f32	s12, s14, s15
 80058e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e6:	ed97 3a01 	vldr	s6, [r7, #4]
 80058ea:	ee72 2a85 	vadd.f32	s5, s5, s10
 80058ee:	46bc      	mov	ip, r7
 80058f0:	ee76 3a84 	vadd.f32	s7, s13, s8
 80058f4:	9704      	str	r7, [sp, #16]
 80058f6:	ee36 7a44 	vsub.f32	s14, s12, s8
 80058fa:	f8cd e00c 	str.w	lr, [sp, #12]
 80058fe:	ee12 9a90 	vmov	r9, s5
 8005902:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005906:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800590a:	1f3e      	subs	r6, r7, #4
 800590c:	f840 9b08 	str.w	r9, [r0], #8
 8005910:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8005914:	edde 2a01 	vldr	s5, [lr, #4]
 8005918:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800591c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005920:	eddc 4a01 	vldr	s9, [ip, #4]
 8005924:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005928:	9001      	str	r0, [sp, #4]
 800592a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800592e:	9805      	ldr	r0, [sp, #20]
 8005930:	ee13 9a90 	vmov	r9, s7
 8005934:	ee37 7a43 	vsub.f32	s14, s14, s6
 8005938:	ee36 6a24 	vadd.f32	s12, s12, s9
 800593c:	f1ae 0704 	sub.w	r7, lr, #4
 8005940:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005944:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005948:	ed80 6a01 	vstr	s12, [r0, #4]
 800594c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005950:	f848 9b08 	str.w	r9, [r8], #8
 8005954:	edce 4a01 	vstr	s9, [lr, #4]
 8005958:	ee15 ea90 	vmov	lr, s11
 800595c:	f844 eb08 	str.w	lr, [r4], #8
 8005960:	ee16 ea90 	vmov	lr, s13
 8005964:	9408      	str	r4, [sp, #32]
 8005966:	462c      	mov	r4, r5
 8005968:	ed85 7a01 	vstr	s14, [r5, #4]
 800596c:	9d04      	ldr	r5, [sp, #16]
 800596e:	f84c eb08 	str.w	lr, [ip], #8
 8005972:	edc5 7a01 	vstr	s15, [r5, #4]
 8005976:	0855      	lsrs	r5, r2, #1
 8005978:	9509      	str	r5, [sp, #36]	; 0x24
 800597a:	f000 8130 	beq.w	8005bde <arm_cfft_radix8by4_f32+0x36e>
 800597e:	9805      	ldr	r0, [sp, #20]
 8005980:	3b08      	subs	r3, #8
 8005982:	46ab      	mov	fp, r5
 8005984:	f1a4 020c 	sub.w	r2, r4, #12
 8005988:	f100 0510 	add.w	r5, r0, #16
 800598c:	f101 0920 	add.w	r9, r1, #32
 8005990:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005994:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005998:	4433      	add	r3, r6
 800599a:	3410      	adds	r4, #16
 800599c:	4660      	mov	r0, ip
 800599e:	4641      	mov	r1, r8
 80059a0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80059a4:	ed54 6a02 	vldr	s13, [r4, #-8]
 80059a8:	f1bb 0b01 	subs.w	fp, fp, #1
 80059ac:	ed55 5a02 	vldr	s11, [r5, #-8]
 80059b0:	f10a 0a08 	add.w	sl, sl, #8
 80059b4:	edd1 7a00 	vldr	s15, [r1]
 80059b8:	f105 0508 	add.w	r5, r5, #8
 80059bc:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80059c0:	edd0 2a00 	vldr	s5, [r0]
 80059c4:	ed14 7a01 	vldr	s14, [r4, #-4]
 80059c8:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80059cc:	ed55 6a03 	vldr	s13, [r5, #-12]
 80059d0:	f1a2 0208 	sub.w	r2, r2, #8
 80059d4:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80059d8:	ed90 2a01 	vldr	s4, [r0, #4]
 80059dc:	ee36 5a87 	vadd.f32	s10, s13, s14
 80059e0:	ed91 6a01 	vldr	s12, [r1, #4]
 80059e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80059e8:	f109 0910 	add.w	r9, r9, #16
 80059ec:	ee74 6aa2 	vadd.f32	s13, s9, s5
 80059f0:	f104 0408 	add.w	r4, r4, #8
 80059f4:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80059f8:	f10e 0e18 	add.w	lr, lr, #24
 80059fc:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005a00:	f1a3 0308 	sub.w	r3, r3, #8
 8005a04:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a0c:	edd1 6a01 	vldr	s13, [r1, #4]
 8005a10:	ee75 1a86 	vadd.f32	s3, s11, s12
 8005a14:	edd0 4a01 	vldr	s9, [r0, #4]
 8005a18:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005a1c:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005a20:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005a24:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005a28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005a2c:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005a30:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005a34:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005a38:	ee36 2a02 	vadd.f32	s4, s12, s4
 8005a3c:	edd6 7a00 	vldr	s15, [r6]
 8005a40:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005a44:	ed97 1a00 	vldr	s2, [r7]
 8005a48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005a4c:	ed92 8a04 	vldr	s16, [r2, #16]
 8005a50:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005a54:	ed93 aa04 	vldr	s20, [r3, #16]
 8005a58:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005a5c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005a60:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005a64:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005a68:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005a6c:	edd3 9a03 	vldr	s19, [r3, #12]
 8005a70:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005a74:	ed92 9a03 	vldr	s18, [r2, #12]
 8005a78:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005a7c:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8005a80:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005a84:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005a88:	ee16 ca10 	vmov	ip, s12
 8005a8c:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005a90:	ee77 4a01 	vadd.f32	s9, s14, s2
 8005a94:	f847 c908 	str.w	ip, [r7], #-8
 8005a98:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005a9c:	edd2 8a03 	vldr	s17, [r2, #12]
 8005aa0:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005aa4:	ed93 8a03 	vldr	s16, [r3, #12]
 8005aa8:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005aac:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005ab0:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005ab4:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005ab8:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005abc:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005ac0:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ac4:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005ac8:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005acc:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005ad0:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005ad4:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005ad8:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005adc:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005ae0:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005ae4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005ae8:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005aec:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005af0:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005af4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005af8:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005afc:	ee17 ca10 	vmov	ip, s14
 8005b00:	f841 cb08 	str.w	ip, [r1], #8
 8005b04:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005b08:	ed82 0a04 	vstr	s0, [r2, #16]
 8005b0c:	edc2 6a03 	vstr	s13, [r2, #12]
 8005b10:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8005b14:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8005b18:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005b1c:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005b20:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005b24:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005b28:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005b2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b30:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005b34:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b3c:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005b40:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005b44:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005b48:	ee17 ca90 	vmov	ip, s15
 8005b4c:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005b50:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005b54:	f846 c908 	str.w	ip, [r6], #-8
 8005b58:	edc6 6a01 	vstr	s13, [r6, #4]
 8005b5c:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8005b60:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8005b64:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005b68:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005b6c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005b70:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005b74:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005b78:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005b7c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005b80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005b84:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005b88:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005b8c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b94:	ee16 ca10 	vmov	ip, s12
 8005b98:	f840 cb08 	str.w	ip, [r0], #8
 8005b9c:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005ba0:	edc3 0a04 	vstr	s1, [r3, #16]
 8005ba4:	edc3 7a03 	vstr	s15, [r3, #12]
 8005ba8:	f47f aefc 	bne.w	80059a4 <arm_cfft_radix8by4_f32+0x134>
 8005bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bae:	9802      	ldr	r0, [sp, #8]
 8005bb0:	00cb      	lsls	r3, r1, #3
 8005bb2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8005bb6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005bba:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005bbe:	4498      	add	r8, r3
 8005bc0:	449c      	add	ip, r3
 8005bc2:	9102      	str	r1, [sp, #8]
 8005bc4:	9901      	ldr	r1, [sp, #4]
 8005bc6:	4419      	add	r1, r3
 8005bc8:	9101      	str	r1, [sp, #4]
 8005bca:	9907      	ldr	r1, [sp, #28]
 8005bcc:	4419      	add	r1, r3
 8005bce:	9107      	str	r1, [sp, #28]
 8005bd0:	9908      	ldr	r1, [sp, #32]
 8005bd2:	4419      	add	r1, r3
 8005bd4:	9b06      	ldr	r3, [sp, #24]
 8005bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bda:	9108      	str	r1, [sp, #32]
 8005bdc:	9306      	str	r3, [sp, #24]
 8005bde:	9a01      	ldr	r2, [sp, #4]
 8005be0:	2304      	movs	r3, #4
 8005be2:	9e08      	ldr	r6, [sp, #32]
 8005be4:	edd2 7a00 	vldr	s15, [r2]
 8005be8:	ed96 7a00 	vldr	s14, [r6]
 8005bec:	edd8 2a00 	vldr	s5, [r8]
 8005bf0:	ee77 5a87 	vadd.f32	s11, s15, s14
 8005bf4:	ed9c 3a00 	vldr	s6, [ip]
 8005bf8:	ed92 6a01 	vldr	s12, [r2, #4]
 8005bfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005c00:	edd6 6a01 	vldr	s13, [r6, #4]
 8005c04:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8005c08:	ed9c 2a01 	vldr	s4, [ip, #4]
 8005c0c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8005c10:	edd8 7a01 	vldr	s15, [r8, #4]
 8005c14:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005c18:	9d02      	ldr	r5, [sp, #8]
 8005c1a:	ee34 6a83 	vadd.f32	s12, s9, s6
 8005c1e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005c22:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005c26:	9805      	ldr	r0, [sp, #20]
 8005c28:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	ed82 6a00 	vstr	s12, [r2]
 8005c32:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8005c36:	edd8 3a01 	vldr	s7, [r8, #4]
 8005c3a:	ee75 5a67 	vsub.f32	s11, s10, s15
 8005c3e:	eddc 1a01 	vldr	s3, [ip, #4]
 8005c42:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005c46:	ee75 3a23 	vadd.f32	s7, s10, s7
 8005c4a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005c4e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005c52:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8005c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c5a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005c5e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005c62:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005c66:	9a07      	ldr	r2, [sp, #28]
 8005c68:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005c6c:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8005c70:	edd2 2a00 	vldr	s5, [r2]
 8005c74:	ed92 5a01 	vldr	s10, [r2, #4]
 8005c78:	ee64 3a22 	vmul.f32	s7, s8, s5
 8005c7c:	ee24 4a05 	vmul.f32	s8, s8, s10
 8005c80:	ee24 5a85 	vmul.f32	s10, s9, s10
 8005c84:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8005c88:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005c8c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8005c90:	ed88 5a00 	vstr	s10, [r8]
 8005c94:	edc8 4a01 	vstr	s9, [r8, #4]
 8005c98:	edd5 4a01 	vldr	s9, [r5, #4]
 8005c9c:	edd5 6a00 	vldr	s13, [r5]
 8005ca0:	9d06      	ldr	r5, [sp, #24]
 8005ca2:	ee26 5a26 	vmul.f32	s10, s12, s13
 8005ca6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005caa:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8005cae:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005cb2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005cb6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005cba:	ed86 6a01 	vstr	s12, [r6, #4]
 8005cbe:	edc6 5a00 	vstr	s11, [r6]
 8005cc2:	edd5 5a01 	vldr	s11, [r5, #4]
 8005cc6:	edd5 6a00 	vldr	s13, [r5]
 8005cca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005ccc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005cd0:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005cd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005cd8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005cdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ce0:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005ce4:	edcc 7a01 	vstr	s15, [ip, #4]
 8005ce8:	ed8c 7a00 	vstr	s14, [ip]
 8005cec:	6872      	ldr	r2, [r6, #4]
 8005cee:	f000 f88f 	bl	8005e10 <arm_radix8_butterfly_f32>
 8005cf2:	9803      	ldr	r0, [sp, #12]
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	6872      	ldr	r2, [r6, #4]
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f000 f889 	bl	8005e10 <arm_radix8_butterfly_f32>
 8005cfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d00:	4621      	mov	r1, r4
 8005d02:	6872      	ldr	r2, [r6, #4]
 8005d04:	2304      	movs	r3, #4
 8005d06:	f000 f883 	bl	8005e10 <arm_radix8_butterfly_f32>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	6872      	ldr	r2, [r6, #4]
 8005d0e:	2304      	movs	r3, #4
 8005d10:	9804      	ldr	r0, [sp, #16]
 8005d12:	b00f      	add	sp, #60	; 0x3c
 8005d14:	ecbd 8b06 	vpop	{d8-d10}
 8005d18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	f000 b878 	b.w	8005e10 <arm_radix8_butterfly_f32>

08005d20 <arm_cfft_f32>:
 8005d20:	2a01      	cmp	r2, #1
 8005d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d26:	4606      	mov	r6, r0
 8005d28:	4617      	mov	r7, r2
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	4698      	mov	r8, r3
 8005d2e:	8805      	ldrh	r5, [r0, #0]
 8005d30:	d053      	beq.n	8005dda <arm_cfft_f32+0xba>
 8005d32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005d36:	d04b      	beq.n	8005dd0 <arm_cfft_f32+0xb0>
 8005d38:	d916      	bls.n	8005d68 <arm_cfft_f32+0x48>
 8005d3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005d3e:	d01a      	beq.n	8005d76 <arm_cfft_f32+0x56>
 8005d40:	d95a      	bls.n	8005df8 <arm_cfft_f32+0xd8>
 8005d42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005d46:	d043      	beq.n	8005dd0 <arm_cfft_f32+0xb0>
 8005d48:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005d4c:	d105      	bne.n	8005d5a <arm_cfft_f32+0x3a>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	6872      	ldr	r2, [r6, #4]
 8005d52:	4629      	mov	r1, r5
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 f85b 	bl	8005e10 <arm_radix8_butterfly_f32>
 8005d5a:	f1b8 0f00 	cmp.w	r8, #0
 8005d5e:	d111      	bne.n	8005d84 <arm_cfft_f32+0x64>
 8005d60:	2f01      	cmp	r7, #1
 8005d62:	d016      	beq.n	8005d92 <arm_cfft_f32+0x72>
 8005d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d68:	2d20      	cmp	r5, #32
 8005d6a:	d031      	beq.n	8005dd0 <arm_cfft_f32+0xb0>
 8005d6c:	d948      	bls.n	8005e00 <arm_cfft_f32+0xe0>
 8005d6e:	2d40      	cmp	r5, #64	; 0x40
 8005d70:	d0ed      	beq.n	8005d4e <arm_cfft_f32+0x2e>
 8005d72:	2d80      	cmp	r5, #128	; 0x80
 8005d74:	d1f1      	bne.n	8005d5a <arm_cfft_f32+0x3a>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7ff fca9 	bl	80056d0 <arm_cfft_radix8by2_f32>
 8005d7e:	f1b8 0f00 	cmp.w	r8, #0
 8005d82:	d0ed      	beq.n	8005d60 <arm_cfft_f32+0x40>
 8005d84:	68b2      	ldr	r2, [r6, #8]
 8005d86:	4620      	mov	r0, r4
 8005d88:	89b1      	ldrh	r1, [r6, #12]
 8005d8a:	f7fa faa9 	bl	80002e0 <arm_bitreversal_32>
 8005d8e:	2f01      	cmp	r7, #1
 8005d90:	d1e8      	bne.n	8005d64 <arm_cfft_f32+0x44>
 8005d92:	ee07 5a90 	vmov	s15, r5
 8005d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	d0de      	beq.n	8005d64 <arm_cfft_f32+0x44>
 8005da6:	f104 0108 	add.w	r1, r4, #8
 8005daa:	2300      	movs	r3, #0
 8005dac:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005db0:	3301      	adds	r3, #1
 8005db2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005db6:	3108      	adds	r1, #8
 8005db8:	429d      	cmp	r5, r3
 8005dba:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005dbe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005dc2:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005dc6:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005dca:	d1ef      	bne.n	8005dac <arm_cfft_f32+0x8c>
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff fd4c 	bl	8005870 <arm_cfft_radix8by4_f32>
 8005dd8:	e7bf      	b.n	8005d5a <arm_cfft_f32+0x3a>
 8005dda:	b1a5      	cbz	r5, 8005e06 <arm_cfft_f32+0xe6>
 8005ddc:	f101 030c 	add.w	r3, r1, #12
 8005de0:	2200      	movs	r2, #0
 8005de2:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005de6:	3201      	adds	r2, #1
 8005de8:	3308      	adds	r3, #8
 8005dea:	eef1 7a67 	vneg.f32	s15, s15
 8005dee:	4295      	cmp	r5, r2
 8005df0:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005df4:	d1f5      	bne.n	8005de2 <arm_cfft_f32+0xc2>
 8005df6:	e79c      	b.n	8005d32 <arm_cfft_f32+0x12>
 8005df8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005dfc:	d0a7      	beq.n	8005d4e <arm_cfft_f32+0x2e>
 8005dfe:	e7ac      	b.n	8005d5a <arm_cfft_f32+0x3a>
 8005e00:	2d10      	cmp	r5, #16
 8005e02:	d0b8      	beq.n	8005d76 <arm_cfft_f32+0x56>
 8005e04:	e7a9      	b.n	8005d5a <arm_cfft_f32+0x3a>
 8005e06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005e0a:	d896      	bhi.n	8005d3a <arm_cfft_f32+0x1a>
 8005e0c:	e7ac      	b.n	8005d68 <arm_cfft_f32+0x48>
 8005e0e:	bf00      	nop

08005e10 <arm_radix8_butterfly_f32>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	468a      	mov	sl, r1
 8005e1a:	468b      	mov	fp, r1
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	ed2d 8b10 	vpush	{d8-d15}
 8005e22:	469c      	mov	ip, r3
 8005e24:	b09d      	sub	sp, #116	; 0x74
 8005e26:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8006134 <arm_radix8_butterfly_f32+0x324>
 8005e2a:	9019      	str	r0, [sp, #100]	; 0x64
 8005e2c:	921a      	str	r2, [sp, #104]	; 0x68
 8005e2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e30:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005e34:	f04f 0800 	mov.w	r8, #0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	9311      	str	r3, [sp, #68]	; 0x44
 8005e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e40:	4611      	mov	r1, r2
 8005e42:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	0053      	lsls	r3, r2, #1
 8005e4a:	18d5      	adds	r5, r2, r3
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	0113      	lsls	r3, r2, #4
 8005e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e52:	194c      	adds	r4, r1, r5
 8005e54:	eb02 0609 	add.w	r6, r2, r9
 8005e58:	9302      	str	r3, [sp, #8]
 8005e5a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005e5e:	4613      	mov	r3, r2
 8005e60:	190a      	adds	r2, r1, r4
 8005e62:	eb06 0709 	add.w	r7, r6, r9
 8005e66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005e6a:	1888      	adds	r0, r1, r2
 8005e6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e70:	4401      	add	r1, r0
 8005e72:	3204      	adds	r2, #4
 8005e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005e78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	3104      	adds	r1, #4
 8005e80:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8005e84:	44d8      	add	r8, fp
 8005e86:	ed90 7a00 	vldr	s14, [r0]
 8005e8a:	ed94 5a00 	vldr	s10, [r4]
 8005e8e:	45c2      	cmp	sl, r8
 8005e90:	edd7 3a00 	vldr	s7, [r7]
 8005e94:	ed96 6a00 	vldr	s12, [r6]
 8005e98:	ee37 1a85 	vadd.f32	s2, s15, s10
 8005e9c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005ea0:	ee73 4a87 	vadd.f32	s9, s7, s14
 8005ea4:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005ea8:	edd5 7a00 	vldr	s15, [r5]
 8005eac:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8005eb0:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005eb4:	ee36 2a26 	vadd.f32	s4, s12, s13
 8005eb8:	ee37 4a87 	vadd.f32	s8, s15, s14
 8005ebc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005ec0:	ee71 5a24 	vadd.f32	s11, s2, s9
 8005ec4:	ee32 6a04 	vadd.f32	s12, s4, s8
 8005ec8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ecc:	ee31 1a64 	vsub.f32	s2, s2, s9
 8005ed0:	ee75 4a86 	vadd.f32	s9, s11, s12
 8005ed4:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005ed8:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005edc:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8005ee0:	ee32 2a44 	vsub.f32	s4, s4, s8
 8005ee4:	ee67 7a89 	vmul.f32	s15, s15, s18
 8005ee8:	ed94 0a01 	vldr	s0, [r4, #4]
 8005eec:	edc4 5a00 	vstr	s11, [r4]
 8005ef0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005ef4:	edd6 5a01 	vldr	s11, [r6, #4]
 8005ef8:	edd5 2a01 	vldr	s5, [r5, #4]
 8005efc:	ee75 1a27 	vadd.f32	s3, s10, s15
 8005f00:	ed92 4a00 	vldr	s8, [r2]
 8005f04:	ee75 7a67 	vsub.f32	s15, s10, s15
 8005f08:	edd1 4a00 	vldr	s9, [r1]
 8005f0c:	ee27 7a09 	vmul.f32	s14, s14, s18
 8005f10:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8005f14:	ed9c 6a00 	vldr	s12, [ip]
 8005f18:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8005f1c:	edd0 0a01 	vldr	s1, [r0, #4]
 8005f20:	ed97 5a01 	vldr	s10, [r7, #4]
 8005f24:	ee35 4a84 	vadd.f32	s8, s11, s8
 8005f28:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8005f2c:	ee73 5a26 	vadd.f32	s11, s6, s13
 8005f30:	ee76 2a00 	vadd.f32	s5, s12, s0
 8005f34:	ee73 6a66 	vsub.f32	s13, s6, s13
 8005f38:	ee36 6a40 	vsub.f32	s12, s12, s0
 8005f3c:	ee35 0a20 	vadd.f32	s0, s10, s1
 8005f40:	ee65 5a89 	vmul.f32	s11, s11, s18
 8005f44:	ee35 5a60 	vsub.f32	s10, s10, s1
 8005f48:	ee32 3a80 	vadd.f32	s6, s5, s0
 8005f4c:	ee74 0a24 	vadd.f32	s1, s8, s9
 8005f50:	ee66 6a89 	vmul.f32	s13, s13, s18
 8005f54:	ee74 4a64 	vsub.f32	s9, s8, s9
 8005f58:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8005f5c:	ee75 2a25 	vadd.f32	s5, s10, s11
 8005f60:	ee33 0a20 	vadd.f32	s0, s6, s1
 8005f64:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005f68:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005f6c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8005f70:	ed8c 0a00 	vstr	s0, [ip]
 8005f74:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005f78:	449c      	add	ip, r3
 8005f7a:	ee33 6a87 	vadd.f32	s12, s7, s14
 8005f7e:	ed84 3a01 	vstr	s6, [r4, #4]
 8005f82:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8005f86:	441c      	add	r4, r3
 8005f88:	ee71 3a24 	vadd.f32	s7, s2, s9
 8005f8c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005f90:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8005f94:	edc7 3a00 	vstr	s7, [r7]
 8005f98:	ee34 1a42 	vsub.f32	s2, s8, s4
 8005f9c:	edc0 4a00 	vstr	s9, [r0]
 8005fa0:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8005fa4:	ee75 4a46 	vsub.f32	s9, s10, s12
 8005fa8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005fac:	ed87 1a01 	vstr	s2, [r7, #4]
 8005fb0:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8005fb4:	441f      	add	r7, r3
 8005fb6:	ee32 4a04 	vadd.f32	s8, s4, s8
 8005fba:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8005fbe:	ee36 6a05 	vadd.f32	s12, s12, s10
 8005fc2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005fc6:	ed80 4a01 	vstr	s8, [r0, #4]
 8005fca:	ed86 3a00 	vstr	s6, [r6]
 8005fce:	4418      	add	r0, r3
 8005fd0:	ed41 1a01 	vstr	s3, [r1, #-4]
 8005fd4:	ed42 3a01 	vstr	s7, [r2, #-4]
 8005fd8:	edc5 7a00 	vstr	s15, [r5]
 8005fdc:	edc6 4a01 	vstr	s9, [r6, #4]
 8005fe0:	441e      	add	r6, r3
 8005fe2:	ed81 6a00 	vstr	s12, [r1]
 8005fe6:	4419      	add	r1, r3
 8005fe8:	edc2 5a00 	vstr	s11, [r2]
 8005fec:	441a      	add	r2, r3
 8005fee:	ed85 7a01 	vstr	s14, [r5, #4]
 8005ff2:	441d      	add	r5, r3
 8005ff4:	f63f af44 	bhi.w	8005e80 <arm_radix8_butterfly_f32+0x70>
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ffc:	2b07      	cmp	r3, #7
 8005ffe:	f240 81f4 	bls.w	80063ea <arm_radix8_butterfly_f32+0x5da>
 8006002:	9901      	ldr	r1, [sp, #4]
 8006004:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8006008:	9d02      	ldr	r5, [sp, #8]
 800600a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800600e:	3101      	adds	r1, #1
 8006010:	eb04 000e 	add.w	r0, r4, lr
 8006014:	00e4      	lsls	r4, r4, #3
 8006016:	3508      	adds	r5, #8
 8006018:	4419      	add	r1, r3
 800601a:	eb00 0c0e 	add.w	ip, r0, lr
 800601e:	9413      	str	r4, [sp, #76]	; 0x4c
 8006020:	00c0      	lsls	r0, r0, #3
 8006022:	185e      	adds	r6, r3, r1
 8006024:	4617      	mov	r7, r2
 8006026:	9218      	str	r2, [sp, #96]	; 0x60
 8006028:	f109 0908 	add.w	r9, r9, #8
 800602c:	199c      	adds	r4, r3, r6
 800602e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006030:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006032:	9012      	str	r0, [sp, #72]	; 0x48
 8006034:	195d      	adds	r5, r3, r5
 8006036:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006038:	443a      	add	r2, r7
 800603a:	950c      	str	r5, [sp, #48]	; 0x30
 800603c:	4698      	mov	r8, r3
 800603e:	4420      	add	r0, r4
 8006040:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006042:	19d7      	adds	r7, r2, r7
 8006044:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006048:	4405      	add	r5, r0
 800604a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800604e:	9710      	str	r7, [sp, #64]	; 0x40
 8006050:	eb0c 070e 	add.w	r7, ip, lr
 8006054:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006058:	3404      	adds	r4, #4
 800605a:	3004      	adds	r0, #4
 800605c:	44c8      	add	r8, r9
 800605e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8006062:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006064:	940a      	str	r4, [sp, #40]	; 0x28
 8006066:	9009      	str	r0, [sp, #36]	; 0x24
 8006068:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800606c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800606e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006072:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006074:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006078:	eb07 080e 	add.w	r8, r7, lr
 800607c:	eb04 0900 	add.w	r9, r4, r0
 8006080:	00f8      	lsls	r0, r7, #3
 8006082:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8006086:	3504      	adds	r5, #4
 8006088:	4607      	mov	r7, r0
 800608a:	9017      	str	r0, [sp, #92]	; 0x5c
 800608c:	910b      	str	r1, [sp, #44]	; 0x2c
 800608e:	4618      	mov	r0, r3
 8006090:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8006094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006096:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	9508      	str	r5, [sp, #32]
 800609e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80060a0:	910e      	str	r1, [sp, #56]	; 0x38
 80060a2:	4621      	mov	r1, r4
 80060a4:	eb04 0805 	add.w	r8, r4, r5
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	19e5      	adds	r5, r4, r7
 80060ac:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80060b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80060b2:	9316      	str	r3, [sp, #88]	; 0x58
 80060b4:	190b      	adds	r3, r1, r4
 80060b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80060b8:	9505      	str	r5, [sp, #20]
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	f100 0308 	add.w	r3, r0, #8
 80060c0:	9707      	str	r7, [sp, #28]
 80060c2:	4638      	mov	r0, r7
 80060c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c6:	2301      	movs	r3, #1
 80060c8:	9306      	str	r3, [sp, #24]
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	ed90 fa00 	vldr	s30, [r0]
 80060d0:	edd0 ba01 	vldr	s23, [r0, #4]
 80060d4:	9803      	ldr	r0, [sp, #12]
 80060d6:	9903      	ldr	r1, [sp, #12]
 80060d8:	ed90 ba01 	vldr	s22, [r0, #4]
 80060dc:	9804      	ldr	r0, [sp, #16]
 80060de:	edd1 ea00 	vldr	s29, [r1]
 80060e2:	edd0 aa01 	vldr	s21, [r0, #4]
 80060e6:	9805      	ldr	r0, [sp, #20]
 80060e8:	9905      	ldr	r1, [sp, #20]
 80060ea:	edd0 7a01 	vldr	s15, [r0, #4]
 80060ee:	ed91 da00 	vldr	s26, [r1]
 80060f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f4:	9c04      	ldr	r4, [sp, #16]
 80060f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80060fa:	edd8 7a01 	vldr	s15, [r8, #4]
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	edd2 fa00 	vldr	s31, [r2]
 8006104:	ed94 ea00 	vldr	s28, [r4]
 8006108:	ed92 ca01 	vldr	s24, [r2, #4]
 800610c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006110:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006112:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006114:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006116:	edd9 da00 	vldr	s27, [r9]
 800611a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800611c:	edd8 ca00 	vldr	s25, [r8]
 8006120:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006122:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006124:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006128:	ed99 aa01 	vldr	s20, [r9, #4]
 800612c:	edcd 7a02 	vstr	s15, [sp, #8]
 8006130:	9800      	ldr	r0, [sp, #0]
 8006132:	e001      	b.n	8006138 <arm_radix8_butterfly_f32+0x328>
 8006134:	3f3504f3 	.word	0x3f3504f3
 8006138:	edd5 3a00 	vldr	s7, [r5]
 800613c:	44dc      	add	ip, fp
 800613e:	ed91 7a00 	vldr	s14, [r1]
 8006142:	edd4 8a00 	vldr	s17, [r4]
 8006146:	45e2      	cmp	sl, ip
 8006148:	ed57 7a01 	vldr	s15, [r7, #-4]
 800614c:	ed90 5a00 	vldr	s10, [r0]
 8006150:	ed56 5a01 	vldr	s11, [r6, #-4]
 8006154:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8006158:	ed92 1a00 	vldr	s2, [r2]
 800615c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8006160:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8006164:	ee75 9a25 	vadd.f32	s19, s10, s11
 8006168:	ee31 3a07 	vadd.f32	s6, s2, s14
 800616c:	ed92 8a01 	vldr	s16, [r2, #4]
 8006170:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006174:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006178:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800617c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006180:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8006184:	ee75 7a84 	vadd.f32	s15, s11, s8
 8006188:	ee31 1a47 	vsub.f32	s2, s2, s14
 800618c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006190:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006194:	ee33 3a46 	vsub.f32	s6, s6, s12
 8006198:	ed82 7a00 	vstr	s14, [r2]
 800619c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80061a0:	ed96 6a00 	vldr	s12, [r6]
 80061a4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80061a8:	edd5 3a01 	vldr	s7, [r5, #4]
 80061ac:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80061b0:	ed90 7a01 	vldr	s14, [r0, #4]
 80061b4:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80061b8:	edde 4a00 	vldr	s9, [lr]
 80061bc:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80061c0:	ee77 2a46 	vsub.f32	s5, s14, s12
 80061c4:	edd1 6a01 	vldr	s13, [r1, #4]
 80061c8:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80061cc:	edd7 0a00 	vldr	s1, [r7]
 80061d0:	ee77 5a06 	vadd.f32	s11, s14, s12
 80061d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80061d8:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80061dc:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80061e0:	ee78 4a66 	vsub.f32	s9, s16, s13
 80061e4:	ee78 3a26 	vadd.f32	s7, s16, s13
 80061e8:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80061ec:	ee77 6a20 	vadd.f32	s13, s14, s1
 80061f0:	ee24 4a09 	vmul.f32	s8, s8, s18
 80061f4:	ee37 7a60 	vsub.f32	s14, s14, s1
 80061f8:	ee20 8a09 	vmul.f32	s16, s0, s18
 80061fc:	ee75 0a86 	vadd.f32	s1, s11, s12
 8006200:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8006204:	ee62 2a89 	vmul.f32	s5, s5, s18
 8006208:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800620c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006210:	ee77 7a62 	vsub.f32	s15, s14, s5
 8006214:	ee74 5a88 	vadd.f32	s11, s9, s16
 8006218:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800621c:	ee77 4a22 	vadd.f32	s9, s14, s5
 8006220:	ee71 2a04 	vadd.f32	s5, s2, s8
 8006224:	ee31 7a44 	vsub.f32	s14, s2, s8
 8006228:	ee30 1a60 	vsub.f32	s2, s0, s1
 800622c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006230:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006234:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8006238:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800623c:	ee38 4a68 	vsub.f32	s8, s16, s17
 8006240:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8006244:	ee72 5a25 	vadd.f32	s11, s4, s11
 8006248:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800624c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8006250:	ee77 2a27 	vadd.f32	s5, s14, s15
 8006254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006258:	ee78 7a88 	vadd.f32	s15, s17, s16
 800625c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8006260:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8006264:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8006268:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800626c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8006270:	ee70 0a20 	vadd.f32	s1, s0, s1
 8006274:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8006278:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800627c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8006280:	edc2 0a01 	vstr	s1, [r2, #4]
 8006284:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006288:	441a      	add	r2, r3
 800628a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800628e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8006292:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8006296:	ed81 8a00 	vstr	s16, [r1]
 800629a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800629e:	ee33 3a61 	vsub.f32	s6, s6, s3
 80062a2:	ed81 5a01 	vstr	s10, [r1, #4]
 80062a6:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80062aa:	edcd 3a00 	vstr	s7, [sp]
 80062ae:	ed9d 5a02 	vldr	s10, [sp, #8]
 80062b2:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80062b6:	eddd 3a01 	vldr	s7, [sp, #4]
 80062ba:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80062be:	ed84 0a00 	vstr	s0, [r4]
 80062c2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80062c6:	ed84 3a01 	vstr	s6, [r4, #4]
 80062ca:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80062ce:	ee23 6a86 	vmul.f32	s12, s7, s12
 80062d2:	eddd 3a00 	vldr	s7, [sp]
 80062d6:	ee25 5a25 	vmul.f32	s10, s10, s11
 80062da:	4419      	add	r1, r3
 80062dc:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80062e0:	441c      	add	r4, r3
 80062e2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80062e6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80062ea:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80062ee:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80062f2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80062f6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80062fa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80062fe:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8006302:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8006306:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800630a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800630e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006312:	ee38 8a01 	vadd.f32	s16, s16, s2
 8006316:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800631a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800631e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8006322:	ed07 8a01 	vstr	s16, [r7, #-4]
 8006326:	ee30 0a21 	vadd.f32	s0, s0, s3
 800632a:	ed87 6a00 	vstr	s12, [r7]
 800632e:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006332:	edc0 0a00 	vstr	s1, [r0]
 8006336:	ee33 3a28 	vadd.f32	s6, s6, s17
 800633a:	edc0 3a01 	vstr	s7, [r0, #4]
 800633e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006342:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8006346:	edce 4a00 	vstr	s9, [lr]
 800634a:	4418      	add	r0, r3
 800634c:	ed06 0a01 	vstr	s0, [r6, #-4]
 8006350:	441f      	add	r7, r3
 8006352:	edc6 2a00 	vstr	s5, [r6]
 8006356:	449e      	add	lr, r3
 8006358:	ed85 3a00 	vstr	s6, [r5]
 800635c:	441e      	add	r6, r3
 800635e:	ed85 7a01 	vstr	s14, [r5, #4]
 8006362:	441d      	add	r5, r3
 8006364:	f63f aee8 	bhi.w	8006138 <arm_radix8_butterfly_f32+0x328>
 8006368:	9a06      	ldr	r2, [sp, #24]
 800636a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800636c:	3201      	adds	r2, #1
 800636e:	4611      	mov	r1, r2
 8006370:	9206      	str	r2, [sp, #24]
 8006372:	9a07      	ldr	r2, [sp, #28]
 8006374:	4402      	add	r2, r0
 8006376:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006378:	9207      	str	r2, [sp, #28]
 800637a:	9a03      	ldr	r2, [sp, #12]
 800637c:	4402      	add	r2, r0
 800637e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	4402      	add	r2, r0
 8006386:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006388:	9204      	str	r2, [sp, #16]
 800638a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800638c:	4491      	add	r9, r2
 800638e:	9a05      	ldr	r2, [sp, #20]
 8006390:	4402      	add	r2, r0
 8006392:	9205      	str	r2, [sp, #20]
 8006394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006396:	4490      	add	r8, r2
 8006398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800639a:	3208      	adds	r2, #8
 800639c:	920f      	str	r2, [sp, #60]	; 0x3c
 800639e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063a0:	3208      	adds	r2, #8
 80063a2:	920e      	str	r2, [sp, #56]	; 0x38
 80063a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a6:	3208      	adds	r2, #8
 80063a8:	920d      	str	r2, [sp, #52]	; 0x34
 80063aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ac:	3208      	adds	r2, #8
 80063ae:	920c      	str	r2, [sp, #48]	; 0x30
 80063b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063b2:	3208      	adds	r2, #8
 80063b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80063b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b8:	3208      	adds	r2, #8
 80063ba:	920a      	str	r2, [sp, #40]	; 0x28
 80063bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063be:	3208      	adds	r2, #8
 80063c0:	9209      	str	r2, [sp, #36]	; 0x24
 80063c2:	9a08      	ldr	r2, [sp, #32]
 80063c4:	3208      	adds	r2, #8
 80063c6:	9208      	str	r2, [sp, #32]
 80063c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80063ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 80063cc:	4622      	mov	r2, r4
 80063ce:	4288      	cmp	r0, r1
 80063d0:	d005      	beq.n	80063de <arm_radix8_butterfly_f32+0x5ce>
 80063d2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80063d4:	4621      	mov	r1, r4
 80063d6:	4401      	add	r1, r0
 80063d8:	9807      	ldr	r0, [sp, #28]
 80063da:	9110      	str	r1, [sp, #64]	; 0x40
 80063dc:	e676      	b.n	80060cc <arm_radix8_butterfly_f32+0x2bc>
 80063de:	4683      	mov	fp, r0
 80063e0:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 80063e4:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80063e8:	e522      	b.n	8005e30 <arm_radix8_butterfly_f32+0x20>
 80063ea:	b01d      	add	sp, #116	; 0x74
 80063ec:	ecbd 8b10 	vpop	{d8-d15}
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063f4 <__libc_init_array>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	4e0d      	ldr	r6, [pc, #52]	; (800642c <__libc_init_array+0x38>)
 80063f8:	4c0d      	ldr	r4, [pc, #52]	; (8006430 <__libc_init_array+0x3c>)
 80063fa:	1ba4      	subs	r4, r4, r6
 80063fc:	10a4      	asrs	r4, r4, #2
 80063fe:	2500      	movs	r5, #0
 8006400:	42a5      	cmp	r5, r4
 8006402:	d109      	bne.n	8006418 <__libc_init_array+0x24>
 8006404:	4e0b      	ldr	r6, [pc, #44]	; (8006434 <__libc_init_array+0x40>)
 8006406:	4c0c      	ldr	r4, [pc, #48]	; (8006438 <__libc_init_array+0x44>)
 8006408:	f000 ff4e 	bl	80072a8 <_init>
 800640c:	1ba4      	subs	r4, r4, r6
 800640e:	10a4      	asrs	r4, r4, #2
 8006410:	2500      	movs	r5, #0
 8006412:	42a5      	cmp	r5, r4
 8006414:	d105      	bne.n	8006422 <__libc_init_array+0x2e>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800641c:	4798      	blx	r3
 800641e:	3501      	adds	r5, #1
 8006420:	e7ee      	b.n	8006400 <__libc_init_array+0xc>
 8006422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006426:	4798      	blx	r3
 8006428:	3501      	adds	r5, #1
 800642a:	e7f2      	b.n	8006412 <__libc_init_array+0x1e>
 800642c:	0800a1e8 	.word	0x0800a1e8
 8006430:	0800a1e8 	.word	0x0800a1e8
 8006434:	0800a1e8 	.word	0x0800a1e8
 8006438:	0800a1ec 	.word	0x0800a1ec

0800643c <memset>:
 800643c:	4402      	add	r2, r0
 800643e:	4603      	mov	r3, r0
 8006440:	4293      	cmp	r3, r2
 8006442:	d100      	bne.n	8006446 <memset+0xa>
 8006444:	4770      	bx	lr
 8006446:	f803 1b01 	strb.w	r1, [r3], #1
 800644a:	e7f9      	b.n	8006440 <memset+0x4>

0800644c <iprintf>:
 800644c:	b40f      	push	{r0, r1, r2, r3}
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <iprintf+0x2c>)
 8006450:	b513      	push	{r0, r1, r4, lr}
 8006452:	681c      	ldr	r4, [r3, #0]
 8006454:	b124      	cbz	r4, 8006460 <iprintf+0x14>
 8006456:	69a3      	ldr	r3, [r4, #24]
 8006458:	b913      	cbnz	r3, 8006460 <iprintf+0x14>
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f84e 	bl	80064fc <__sinit>
 8006460:	ab05      	add	r3, sp, #20
 8006462:	9a04      	ldr	r2, [sp, #16]
 8006464:	68a1      	ldr	r1, [r4, #8]
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f959 	bl	8006720 <_vfiprintf_r>
 800646e:	b002      	add	sp, #8
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	b004      	add	sp, #16
 8006476:	4770      	bx	lr
 8006478:	20002010 	.word	0x20002010

0800647c <_cleanup_r>:
 800647c:	4901      	ldr	r1, [pc, #4]	; (8006484 <_cleanup_r+0x8>)
 800647e:	f000 b8a9 	b.w	80065d4 <_fwalk_reent>
 8006482:	bf00      	nop
 8006484:	08006ff5 	.word	0x08006ff5

08006488 <std.isra.0>:
 8006488:	2300      	movs	r3, #0
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	6043      	str	r3, [r0, #4]
 8006492:	6083      	str	r3, [r0, #8]
 8006494:	8181      	strh	r1, [r0, #12]
 8006496:	6643      	str	r3, [r0, #100]	; 0x64
 8006498:	81c2      	strh	r2, [r0, #14]
 800649a:	6103      	str	r3, [r0, #16]
 800649c:	6143      	str	r3, [r0, #20]
 800649e:	6183      	str	r3, [r0, #24]
 80064a0:	4619      	mov	r1, r3
 80064a2:	2208      	movs	r2, #8
 80064a4:	305c      	adds	r0, #92	; 0x5c
 80064a6:	f7ff ffc9 	bl	800643c <memset>
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <std.isra.0+0x38>)
 80064ac:	6263      	str	r3, [r4, #36]	; 0x24
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <std.isra.0+0x3c>)
 80064b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <std.isra.0+0x40>)
 80064b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <std.isra.0+0x44>)
 80064b8:	6224      	str	r4, [r4, #32]
 80064ba:	6323      	str	r3, [r4, #48]	; 0x30
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	08006c99 	.word	0x08006c99
 80064c4:	08006cbb 	.word	0x08006cbb
 80064c8:	08006cf3 	.word	0x08006cf3
 80064cc:	08006d17 	.word	0x08006d17

080064d0 <__sfmoreglue>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	1e4a      	subs	r2, r1, #1
 80064d4:	2568      	movs	r5, #104	; 0x68
 80064d6:	4355      	muls	r5, r2
 80064d8:	460e      	mov	r6, r1
 80064da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064de:	f000 f897 	bl	8006610 <_malloc_r>
 80064e2:	4604      	mov	r4, r0
 80064e4:	b140      	cbz	r0, 80064f8 <__sfmoreglue+0x28>
 80064e6:	2100      	movs	r1, #0
 80064e8:	e880 0042 	stmia.w	r0, {r1, r6}
 80064ec:	300c      	adds	r0, #12
 80064ee:	60a0      	str	r0, [r4, #8]
 80064f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064f4:	f7ff ffa2 	bl	800643c <memset>
 80064f8:	4620      	mov	r0, r4
 80064fa:	bd70      	pop	{r4, r5, r6, pc}

080064fc <__sinit>:
 80064fc:	6983      	ldr	r3, [r0, #24]
 80064fe:	b510      	push	{r4, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	bb33      	cbnz	r3, 8006552 <__sinit+0x56>
 8006504:	6483      	str	r3, [r0, #72]	; 0x48
 8006506:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006508:	6503      	str	r3, [r0, #80]	; 0x50
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <__sinit+0x58>)
 800650c:	4a12      	ldr	r2, [pc, #72]	; (8006558 <__sinit+0x5c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6282      	str	r2, [r0, #40]	; 0x28
 8006512:	4298      	cmp	r0, r3
 8006514:	bf04      	itt	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	6183      	streq	r3, [r0, #24]
 800651a:	f000 f81f 	bl	800655c <__sfp>
 800651e:	6060      	str	r0, [r4, #4]
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f81b 	bl	800655c <__sfp>
 8006526:	60a0      	str	r0, [r4, #8]
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f817 	bl	800655c <__sfp>
 800652e:	2200      	movs	r2, #0
 8006530:	60e0      	str	r0, [r4, #12]
 8006532:	2104      	movs	r1, #4
 8006534:	6860      	ldr	r0, [r4, #4]
 8006536:	f7ff ffa7 	bl	8006488 <std.isra.0>
 800653a:	2201      	movs	r2, #1
 800653c:	2109      	movs	r1, #9
 800653e:	68a0      	ldr	r0, [r4, #8]
 8006540:	f7ff ffa2 	bl	8006488 <std.isra.0>
 8006544:	2202      	movs	r2, #2
 8006546:	2112      	movs	r1, #18
 8006548:	68e0      	ldr	r0, [r4, #12]
 800654a:	f7ff ff9d 	bl	8006488 <std.isra.0>
 800654e:	2301      	movs	r3, #1
 8006550:	61a3      	str	r3, [r4, #24]
 8006552:	bd10      	pop	{r4, pc}
 8006554:	0800a148 	.word	0x0800a148
 8006558:	0800647d 	.word	0x0800647d

0800655c <__sfp>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <__sfp+0x74>)
 8006560:	681e      	ldr	r6, [r3, #0]
 8006562:	69b3      	ldr	r3, [r6, #24]
 8006564:	4607      	mov	r7, r0
 8006566:	b913      	cbnz	r3, 800656e <__sfp+0x12>
 8006568:	4630      	mov	r0, r6
 800656a:	f7ff ffc7 	bl	80064fc <__sinit>
 800656e:	3648      	adds	r6, #72	; 0x48
 8006570:	68b4      	ldr	r4, [r6, #8]
 8006572:	6873      	ldr	r3, [r6, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	d503      	bpl.n	8006580 <__sfp+0x24>
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	b133      	cbz	r3, 800658a <__sfp+0x2e>
 800657c:	6836      	ldr	r6, [r6, #0]
 800657e:	e7f7      	b.n	8006570 <__sfp+0x14>
 8006580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006584:	b16d      	cbz	r5, 80065a2 <__sfp+0x46>
 8006586:	3468      	adds	r4, #104	; 0x68
 8006588:	e7f4      	b.n	8006574 <__sfp+0x18>
 800658a:	2104      	movs	r1, #4
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ff9f 	bl	80064d0 <__sfmoreglue>
 8006592:	6030      	str	r0, [r6, #0]
 8006594:	2800      	cmp	r0, #0
 8006596:	d1f1      	bne.n	800657c <__sfp+0x20>
 8006598:	230c      	movs	r3, #12
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4604      	mov	r4, r0
 800659e:	4620      	mov	r0, r4
 80065a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065a6:	81e3      	strh	r3, [r4, #14]
 80065a8:	2301      	movs	r3, #1
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	6665      	str	r5, [r4, #100]	; 0x64
 80065ae:	6025      	str	r5, [r4, #0]
 80065b0:	60a5      	str	r5, [r4, #8]
 80065b2:	6065      	str	r5, [r4, #4]
 80065b4:	6125      	str	r5, [r4, #16]
 80065b6:	6165      	str	r5, [r4, #20]
 80065b8:	61a5      	str	r5, [r4, #24]
 80065ba:	2208      	movs	r2, #8
 80065bc:	4629      	mov	r1, r5
 80065be:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065c2:	f7ff ff3b 	bl	800643c <memset>
 80065c6:	6365      	str	r5, [r4, #52]	; 0x34
 80065c8:	63a5      	str	r5, [r4, #56]	; 0x38
 80065ca:	64a5      	str	r5, [r4, #72]	; 0x48
 80065cc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80065ce:	e7e6      	b.n	800659e <__sfp+0x42>
 80065d0:	0800a148 	.word	0x0800a148

080065d4 <_fwalk_reent>:
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	4680      	mov	r8, r0
 80065da:	4689      	mov	r9, r1
 80065dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065e0:	2600      	movs	r6, #0
 80065e2:	b914      	cbnz	r4, 80065ea <_fwalk_reent+0x16>
 80065e4:	4630      	mov	r0, r6
 80065e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ea:	68a5      	ldr	r5, [r4, #8]
 80065ec:	6867      	ldr	r7, [r4, #4]
 80065ee:	3f01      	subs	r7, #1
 80065f0:	d501      	bpl.n	80065f6 <_fwalk_reent+0x22>
 80065f2:	6824      	ldr	r4, [r4, #0]
 80065f4:	e7f5      	b.n	80065e2 <_fwalk_reent+0xe>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d907      	bls.n	800660c <_fwalk_reent+0x38>
 80065fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006600:	3301      	adds	r3, #1
 8006602:	d003      	beq.n	800660c <_fwalk_reent+0x38>
 8006604:	4629      	mov	r1, r5
 8006606:	4640      	mov	r0, r8
 8006608:	47c8      	blx	r9
 800660a:	4306      	orrs	r6, r0
 800660c:	3568      	adds	r5, #104	; 0x68
 800660e:	e7ee      	b.n	80065ee <_fwalk_reent+0x1a>

08006610 <_malloc_r>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	1ccd      	adds	r5, r1, #3
 8006614:	f025 0503 	bic.w	r5, r5, #3
 8006618:	3508      	adds	r5, #8
 800661a:	2d0c      	cmp	r5, #12
 800661c:	bf38      	it	cc
 800661e:	250c      	movcc	r5, #12
 8006620:	2d00      	cmp	r5, #0
 8006622:	4606      	mov	r6, r0
 8006624:	db01      	blt.n	800662a <_malloc_r+0x1a>
 8006626:	42a9      	cmp	r1, r5
 8006628:	d903      	bls.n	8006632 <_malloc_r+0x22>
 800662a:	230c      	movs	r3, #12
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	2000      	movs	r0, #0
 8006630:	bd70      	pop	{r4, r5, r6, pc}
 8006632:	f000 fd7f 	bl	8007134 <__malloc_lock>
 8006636:	4a23      	ldr	r2, [pc, #140]	; (80066c4 <_malloc_r+0xb4>)
 8006638:	6814      	ldr	r4, [r2, #0]
 800663a:	4621      	mov	r1, r4
 800663c:	b991      	cbnz	r1, 8006664 <_malloc_r+0x54>
 800663e:	4c22      	ldr	r4, [pc, #136]	; (80066c8 <_malloc_r+0xb8>)
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	b91b      	cbnz	r3, 800664c <_malloc_r+0x3c>
 8006644:	4630      	mov	r0, r6
 8006646:	f000 fb17 	bl	8006c78 <_sbrk_r>
 800664a:	6020      	str	r0, [r4, #0]
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f000 fb12 	bl	8006c78 <_sbrk_r>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d126      	bne.n	80066a6 <_malloc_r+0x96>
 8006658:	230c      	movs	r3, #12
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	4630      	mov	r0, r6
 800665e:	f000 fd6a 	bl	8007136 <__malloc_unlock>
 8006662:	e7e4      	b.n	800662e <_malloc_r+0x1e>
 8006664:	680b      	ldr	r3, [r1, #0]
 8006666:	1b5b      	subs	r3, r3, r5
 8006668:	d41a      	bmi.n	80066a0 <_malloc_r+0x90>
 800666a:	2b0b      	cmp	r3, #11
 800666c:	d90f      	bls.n	800668e <_malloc_r+0x7e>
 800666e:	600b      	str	r3, [r1, #0]
 8006670:	50cd      	str	r5, [r1, r3]
 8006672:	18cc      	adds	r4, r1, r3
 8006674:	4630      	mov	r0, r6
 8006676:	f000 fd5e 	bl	8007136 <__malloc_unlock>
 800667a:	f104 000b 	add.w	r0, r4, #11
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	f020 0007 	bic.w	r0, r0, #7
 8006684:	1ac3      	subs	r3, r0, r3
 8006686:	d01b      	beq.n	80066c0 <_malloc_r+0xb0>
 8006688:	425a      	negs	r2, r3
 800668a:	50e2      	str	r2, [r4, r3]
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	428c      	cmp	r4, r1
 8006690:	bf0d      	iteet	eq
 8006692:	6863      	ldreq	r3, [r4, #4]
 8006694:	684b      	ldrne	r3, [r1, #4]
 8006696:	6063      	strne	r3, [r4, #4]
 8006698:	6013      	streq	r3, [r2, #0]
 800669a:	bf18      	it	ne
 800669c:	460c      	movne	r4, r1
 800669e:	e7e9      	b.n	8006674 <_malloc_r+0x64>
 80066a0:	460c      	mov	r4, r1
 80066a2:	6849      	ldr	r1, [r1, #4]
 80066a4:	e7ca      	b.n	800663c <_malloc_r+0x2c>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d005      	beq.n	80066bc <_malloc_r+0xac>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4630      	mov	r0, r6
 80066b4:	f000 fae0 	bl	8006c78 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d0cd      	beq.n	8006658 <_malloc_r+0x48>
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	e7d9      	b.n	8006674 <_malloc_r+0x64>
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	bf00      	nop
 80066c4:	20002094 	.word	0x20002094
 80066c8:	20002098 	.word	0x20002098

080066cc <__sfputc_r>:
 80066cc:	6893      	ldr	r3, [r2, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	b410      	push	{r4}
 80066d4:	6093      	str	r3, [r2, #8]
 80066d6:	da09      	bge.n	80066ec <__sfputc_r+0x20>
 80066d8:	6994      	ldr	r4, [r2, #24]
 80066da:	42a3      	cmp	r3, r4
 80066dc:	db02      	blt.n	80066e4 <__sfputc_r+0x18>
 80066de:	b2cb      	uxtb	r3, r1
 80066e0:	2b0a      	cmp	r3, #10
 80066e2:	d103      	bne.n	80066ec <__sfputc_r+0x20>
 80066e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066e8:	f000 bb1a 	b.w	8006d20 <__swbuf_r>
 80066ec:	6813      	ldr	r3, [r2, #0]
 80066ee:	1c58      	adds	r0, r3, #1
 80066f0:	6010      	str	r0, [r2, #0]
 80066f2:	7019      	strb	r1, [r3, #0]
 80066f4:	b2c8      	uxtb	r0, r1
 80066f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <__sfputs_r>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	4614      	mov	r4, r2
 8006704:	18d5      	adds	r5, r2, r3
 8006706:	42ac      	cmp	r4, r5
 8006708:	d101      	bne.n	800670e <__sfputs_r+0x12>
 800670a:	2000      	movs	r0, #0
 800670c:	e007      	b.n	800671e <__sfputs_r+0x22>
 800670e:	463a      	mov	r2, r7
 8006710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006714:	4630      	mov	r0, r6
 8006716:	f7ff ffd9 	bl	80066cc <__sfputc_r>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d1f3      	bne.n	8006706 <__sfputs_r+0xa>
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006720 <_vfiprintf_r>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	b09d      	sub	sp, #116	; 0x74
 8006726:	460c      	mov	r4, r1
 8006728:	4617      	mov	r7, r2
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	4606      	mov	r6, r0
 800672e:	b118      	cbz	r0, 8006738 <_vfiprintf_r+0x18>
 8006730:	6983      	ldr	r3, [r0, #24]
 8006732:	b90b      	cbnz	r3, 8006738 <_vfiprintf_r+0x18>
 8006734:	f7ff fee2 	bl	80064fc <__sinit>
 8006738:	4b7c      	ldr	r3, [pc, #496]	; (800692c <_vfiprintf_r+0x20c>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d157      	bne.n	80067ee <_vfiprintf_r+0xce>
 800673e:	6874      	ldr	r4, [r6, #4]
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	0718      	lsls	r0, r3, #28
 8006744:	d55d      	bpl.n	8006802 <_vfiprintf_r+0xe2>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05a      	beq.n	8006802 <_vfiprintf_r+0xe2>
 800674c:	2300      	movs	r3, #0
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
 8006750:	2320      	movs	r3, #32
 8006752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006756:	2330      	movs	r3, #48	; 0x30
 8006758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800675c:	f04f 0b01 	mov.w	fp, #1
 8006760:	46b8      	mov	r8, r7
 8006762:	4645      	mov	r5, r8
 8006764:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d155      	bne.n	8006818 <_vfiprintf_r+0xf8>
 800676c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006770:	d00b      	beq.n	800678a <_vfiprintf_r+0x6a>
 8006772:	4653      	mov	r3, sl
 8006774:	463a      	mov	r2, r7
 8006776:	4621      	mov	r1, r4
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff ffbf 	bl	80066fc <__sfputs_r>
 800677e:	3001      	adds	r0, #1
 8006780:	f000 80c4 	beq.w	800690c <_vfiprintf_r+0x1ec>
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	4453      	add	r3, sl
 8006788:	9309      	str	r3, [sp, #36]	; 0x24
 800678a:	f898 3000 	ldrb.w	r3, [r8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80bc 	beq.w	800690c <_vfiprintf_r+0x1ec>
 8006794:	2300      	movs	r3, #0
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	9205      	str	r2, [sp, #20]
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a6:	931a      	str	r3, [sp, #104]	; 0x68
 80067a8:	2205      	movs	r2, #5
 80067aa:	7829      	ldrb	r1, [r5, #0]
 80067ac:	4860      	ldr	r0, [pc, #384]	; (8006930 <_vfiprintf_r+0x210>)
 80067ae:	f7f9 fdf7 	bl	80003a0 <memchr>
 80067b2:	f105 0801 	add.w	r8, r5, #1
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d131      	bne.n	8006820 <_vfiprintf_r+0x100>
 80067bc:	06d9      	lsls	r1, r3, #27
 80067be:	bf44      	itt	mi
 80067c0:	2220      	movmi	r2, #32
 80067c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067c6:	071a      	lsls	r2, r3, #28
 80067c8:	bf44      	itt	mi
 80067ca:	222b      	movmi	r2, #43	; 0x2b
 80067cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067d0:	782a      	ldrb	r2, [r5, #0]
 80067d2:	2a2a      	cmp	r2, #42	; 0x2a
 80067d4:	d02c      	beq.n	8006830 <_vfiprintf_r+0x110>
 80067d6:	9a07      	ldr	r2, [sp, #28]
 80067d8:	2100      	movs	r1, #0
 80067da:	200a      	movs	r0, #10
 80067dc:	46a8      	mov	r8, r5
 80067de:	3501      	adds	r5, #1
 80067e0:	f898 3000 	ldrb.w	r3, [r8]
 80067e4:	3b30      	subs	r3, #48	; 0x30
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d96d      	bls.n	80068c6 <_vfiprintf_r+0x1a6>
 80067ea:	b371      	cbz	r1, 800684a <_vfiprintf_r+0x12a>
 80067ec:	e026      	b.n	800683c <_vfiprintf_r+0x11c>
 80067ee:	4b51      	ldr	r3, [pc, #324]	; (8006934 <_vfiprintf_r+0x214>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d101      	bne.n	80067f8 <_vfiprintf_r+0xd8>
 80067f4:	68b4      	ldr	r4, [r6, #8]
 80067f6:	e7a3      	b.n	8006740 <_vfiprintf_r+0x20>
 80067f8:	4b4f      	ldr	r3, [pc, #316]	; (8006938 <_vfiprintf_r+0x218>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	bf08      	it	eq
 80067fe:	68f4      	ldreq	r4, [r6, #12]
 8006800:	e79e      	b.n	8006740 <_vfiprintf_r+0x20>
 8006802:	4621      	mov	r1, r4
 8006804:	4630      	mov	r0, r6
 8006806:	f000 faef 	bl	8006de8 <__swsetup_r>
 800680a:	2800      	cmp	r0, #0
 800680c:	d09e      	beq.n	800674c <_vfiprintf_r+0x2c>
 800680e:	f04f 30ff 	mov.w	r0, #4294967295
 8006812:	b01d      	add	sp, #116	; 0x74
 8006814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006818:	2b25      	cmp	r3, #37	; 0x25
 800681a:	d0a7      	beq.n	800676c <_vfiprintf_r+0x4c>
 800681c:	46a8      	mov	r8, r5
 800681e:	e7a0      	b.n	8006762 <_vfiprintf_r+0x42>
 8006820:	4a43      	ldr	r2, [pc, #268]	; (8006930 <_vfiprintf_r+0x210>)
 8006822:	1a80      	subs	r0, r0, r2
 8006824:	fa0b f000 	lsl.w	r0, fp, r0
 8006828:	4318      	orrs	r0, r3
 800682a:	9004      	str	r0, [sp, #16]
 800682c:	4645      	mov	r5, r8
 800682e:	e7bb      	b.n	80067a8 <_vfiprintf_r+0x88>
 8006830:	9a03      	ldr	r2, [sp, #12]
 8006832:	1d11      	adds	r1, r2, #4
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	9103      	str	r1, [sp, #12]
 8006838:	2a00      	cmp	r2, #0
 800683a:	db01      	blt.n	8006840 <_vfiprintf_r+0x120>
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	e004      	b.n	800684a <_vfiprintf_r+0x12a>
 8006840:	4252      	negs	r2, r2
 8006842:	f043 0302 	orr.w	r3, r3, #2
 8006846:	9207      	str	r2, [sp, #28]
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	f898 3000 	ldrb.w	r3, [r8]
 800684e:	2b2e      	cmp	r3, #46	; 0x2e
 8006850:	d110      	bne.n	8006874 <_vfiprintf_r+0x154>
 8006852:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006856:	2b2a      	cmp	r3, #42	; 0x2a
 8006858:	f108 0101 	add.w	r1, r8, #1
 800685c:	d137      	bne.n	80068ce <_vfiprintf_r+0x1ae>
 800685e:	9b03      	ldr	r3, [sp, #12]
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	9203      	str	r2, [sp, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfb8      	it	lt
 800686a:	f04f 33ff 	movlt.w	r3, #4294967295
 800686e:	f108 0802 	add.w	r8, r8, #2
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	4d31      	ldr	r5, [pc, #196]	; (800693c <_vfiprintf_r+0x21c>)
 8006876:	f898 1000 	ldrb.w	r1, [r8]
 800687a:	2203      	movs	r2, #3
 800687c:	4628      	mov	r0, r5
 800687e:	f7f9 fd8f 	bl	80003a0 <memchr>
 8006882:	b140      	cbz	r0, 8006896 <_vfiprintf_r+0x176>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	1b40      	subs	r0, r0, r5
 8006888:	fa03 f000 	lsl.w	r0, r3, r0
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	4303      	orrs	r3, r0
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	f898 1000 	ldrb.w	r1, [r8]
 800689a:	4829      	ldr	r0, [pc, #164]	; (8006940 <_vfiprintf_r+0x220>)
 800689c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068a0:	2206      	movs	r2, #6
 80068a2:	f108 0701 	add.w	r7, r8, #1
 80068a6:	f7f9 fd7b 	bl	80003a0 <memchr>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d034      	beq.n	8006918 <_vfiprintf_r+0x1f8>
 80068ae:	4b25      	ldr	r3, [pc, #148]	; (8006944 <_vfiprintf_r+0x224>)
 80068b0:	bb03      	cbnz	r3, 80068f4 <_vfiprintf_r+0x1d4>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	3307      	adds	r3, #7
 80068b6:	f023 0307 	bic.w	r3, r3, #7
 80068ba:	3308      	adds	r3, #8
 80068bc:	9303      	str	r3, [sp, #12]
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	444b      	add	r3, r9
 80068c2:	9309      	str	r3, [sp, #36]	; 0x24
 80068c4:	e74c      	b.n	8006760 <_vfiprintf_r+0x40>
 80068c6:	fb00 3202 	mla	r2, r0, r2, r3
 80068ca:	2101      	movs	r1, #1
 80068cc:	e786      	b.n	80067dc <_vfiprintf_r+0xbc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	9305      	str	r3, [sp, #20]
 80068d2:	4618      	mov	r0, r3
 80068d4:	250a      	movs	r5, #10
 80068d6:	4688      	mov	r8, r1
 80068d8:	3101      	adds	r1, #1
 80068da:	f898 2000 	ldrb.w	r2, [r8]
 80068de:	3a30      	subs	r2, #48	; 0x30
 80068e0:	2a09      	cmp	r2, #9
 80068e2:	d903      	bls.n	80068ec <_vfiprintf_r+0x1cc>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0c5      	beq.n	8006874 <_vfiprintf_r+0x154>
 80068e8:	9005      	str	r0, [sp, #20]
 80068ea:	e7c3      	b.n	8006874 <_vfiprintf_r+0x154>
 80068ec:	fb05 2000 	mla	r0, r5, r0, r2
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7f0      	b.n	80068d6 <_vfiprintf_r+0x1b6>
 80068f4:	ab03      	add	r3, sp, #12
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4622      	mov	r2, r4
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <_vfiprintf_r+0x228>)
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	4630      	mov	r0, r6
 8006900:	f3af 8000 	nop.w
 8006904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006908:	4681      	mov	r9, r0
 800690a:	d1d8      	bne.n	80068be <_vfiprintf_r+0x19e>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	065b      	lsls	r3, r3, #25
 8006910:	f53f af7d 	bmi.w	800680e <_vfiprintf_r+0xee>
 8006914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006916:	e77c      	b.n	8006812 <_vfiprintf_r+0xf2>
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4622      	mov	r2, r4
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <_vfiprintf_r+0x228>)
 8006920:	a904      	add	r1, sp, #16
 8006922:	4630      	mov	r0, r6
 8006924:	f000 f888 	bl	8006a38 <_printf_i>
 8006928:	e7ec      	b.n	8006904 <_vfiprintf_r+0x1e4>
 800692a:	bf00      	nop
 800692c:	0800a16c 	.word	0x0800a16c
 8006930:	0800a1ac 	.word	0x0800a1ac
 8006934:	0800a18c 	.word	0x0800a18c
 8006938:	0800a14c 	.word	0x0800a14c
 800693c:	0800a1b2 	.word	0x0800a1b2
 8006940:	0800a1b6 	.word	0x0800a1b6
 8006944:	00000000 	.word	0x00000000
 8006948:	080066fd 	.word	0x080066fd

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4691      	mov	r9, r2
 8006952:	461f      	mov	r7, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	f8c9 3000 	str.w	r3, [r9]
 8006966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800696a:	4606      	mov	r6, r0
 800696c:	460c      	mov	r4, r1
 800696e:	b112      	cbz	r2, 8006976 <_printf_common+0x2a>
 8006970:	3301      	adds	r3, #1
 8006972:	f8c9 3000 	str.w	r3, [r9]
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	0699      	lsls	r1, r3, #26
 800697a:	bf42      	ittt	mi
 800697c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006980:	3302      	addmi	r3, #2
 8006982:	f8c9 3000 	strmi.w	r3, [r9]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	f015 0506 	ands.w	r5, r5, #6
 800698c:	d107      	bne.n	800699e <_printf_common+0x52>
 800698e:	f104 0a19 	add.w	sl, r4, #25
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	f8d9 2000 	ldr.w	r2, [r9]
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	429d      	cmp	r5, r3
 800699c:	db29      	blt.n	80069f2 <_printf_common+0xa6>
 800699e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	3300      	adds	r3, #0
 80069a6:	bf18      	it	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	0692      	lsls	r2, r2, #26
 80069ac:	d42e      	bmi.n	8006a0c <_printf_common+0xc0>
 80069ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069b2:	4639      	mov	r1, r7
 80069b4:	4630      	mov	r0, r6
 80069b6:	47c0      	blx	r8
 80069b8:	3001      	adds	r0, #1
 80069ba:	d021      	beq.n	8006a00 <_printf_common+0xb4>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	68e5      	ldr	r5, [r4, #12]
 80069c0:	f8d9 2000 	ldr.w	r2, [r9]
 80069c4:	f003 0306 	and.w	r3, r3, #6
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	bf08      	it	eq
 80069cc:	1aad      	subeq	r5, r5, r2
 80069ce:	68a3      	ldr	r3, [r4, #8]
 80069d0:	6922      	ldr	r2, [r4, #16]
 80069d2:	bf0c      	ite	eq
 80069d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d8:	2500      	movne	r5, #0
 80069da:	4293      	cmp	r3, r2
 80069dc:	bfc4      	itt	gt
 80069de:	1a9b      	subgt	r3, r3, r2
 80069e0:	18ed      	addgt	r5, r5, r3
 80069e2:	f04f 0900 	mov.w	r9, #0
 80069e6:	341a      	adds	r4, #26
 80069e8:	454d      	cmp	r5, r9
 80069ea:	d11b      	bne.n	8006a24 <_printf_common+0xd8>
 80069ec:	2000      	movs	r0, #0
 80069ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4639      	mov	r1, r7
 80069f8:	4630      	mov	r0, r6
 80069fa:	47c0      	blx	r8
 80069fc:	3001      	adds	r0, #1
 80069fe:	d103      	bne.n	8006a08 <_printf_common+0xbc>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	3501      	adds	r5, #1
 8006a0a:	e7c2      	b.n	8006992 <_printf_common+0x46>
 8006a0c:	18e1      	adds	r1, r4, r3
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	2030      	movs	r0, #48	; 0x30
 8006a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a16:	4422      	add	r2, r4
 8006a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a20:	3302      	adds	r3, #2
 8006a22:	e7c4      	b.n	80069ae <_printf_common+0x62>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4622      	mov	r2, r4
 8006a28:	4639      	mov	r1, r7
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	47c0      	blx	r8
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0e6      	beq.n	8006a00 <_printf_common+0xb4>
 8006a32:	f109 0901 	add.w	r9, r9, #1
 8006a36:	e7d7      	b.n	80069e8 <_printf_common+0x9c>

08006a38 <_printf_i>:
 8006a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	4617      	mov	r7, r2
 8006a3e:	7e0a      	ldrb	r2, [r1, #24]
 8006a40:	b085      	sub	sp, #20
 8006a42:	2a6e      	cmp	r2, #110	; 0x6e
 8006a44:	4698      	mov	r8, r3
 8006a46:	4606      	mov	r6, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006a50:	f000 80bc 	beq.w	8006bcc <_printf_i+0x194>
 8006a54:	d81a      	bhi.n	8006a8c <_printf_i+0x54>
 8006a56:	2a63      	cmp	r2, #99	; 0x63
 8006a58:	d02e      	beq.n	8006ab8 <_printf_i+0x80>
 8006a5a:	d80a      	bhi.n	8006a72 <_printf_i+0x3a>
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	f000 80c8 	beq.w	8006bf2 <_printf_i+0x1ba>
 8006a62:	2a58      	cmp	r2, #88	; 0x58
 8006a64:	f000 808a 	beq.w	8006b7c <_printf_i+0x144>
 8006a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006a70:	e02a      	b.n	8006ac8 <_printf_i+0x90>
 8006a72:	2a64      	cmp	r2, #100	; 0x64
 8006a74:	d001      	beq.n	8006a7a <_printf_i+0x42>
 8006a76:	2a69      	cmp	r2, #105	; 0x69
 8006a78:	d1f6      	bne.n	8006a68 <_printf_i+0x30>
 8006a7a:	6821      	ldr	r1, [r4, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a82:	d023      	beq.n	8006acc <_printf_i+0x94>
 8006a84:	1d11      	adds	r1, r2, #4
 8006a86:	6019      	str	r1, [r3, #0]
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	e027      	b.n	8006adc <_printf_i+0xa4>
 8006a8c:	2a73      	cmp	r2, #115	; 0x73
 8006a8e:	f000 80b4 	beq.w	8006bfa <_printf_i+0x1c2>
 8006a92:	d808      	bhi.n	8006aa6 <_printf_i+0x6e>
 8006a94:	2a6f      	cmp	r2, #111	; 0x6f
 8006a96:	d02a      	beq.n	8006aee <_printf_i+0xb6>
 8006a98:	2a70      	cmp	r2, #112	; 0x70
 8006a9a:	d1e5      	bne.n	8006a68 <_printf_i+0x30>
 8006a9c:	680a      	ldr	r2, [r1, #0]
 8006a9e:	f042 0220 	orr.w	r2, r2, #32
 8006aa2:	600a      	str	r2, [r1, #0]
 8006aa4:	e003      	b.n	8006aae <_printf_i+0x76>
 8006aa6:	2a75      	cmp	r2, #117	; 0x75
 8006aa8:	d021      	beq.n	8006aee <_printf_i+0xb6>
 8006aaa:	2a78      	cmp	r2, #120	; 0x78
 8006aac:	d1dc      	bne.n	8006a68 <_printf_i+0x30>
 8006aae:	2278      	movs	r2, #120	; 0x78
 8006ab0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006ab4:	496e      	ldr	r1, [pc, #440]	; (8006c70 <_printf_i+0x238>)
 8006ab6:	e064      	b.n	8006b82 <_printf_i+0x14a>
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006abe:	1d11      	adds	r1, r2, #4
 8006ac0:	6019      	str	r1, [r3, #0]
 8006ac2:	6813      	ldr	r3, [r2, #0]
 8006ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0a3      	b.n	8006c14 <_printf_i+0x1dc>
 8006acc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006ad0:	f102 0104 	add.w	r1, r2, #4
 8006ad4:	6019      	str	r1, [r3, #0]
 8006ad6:	d0d7      	beq.n	8006a88 <_printf_i+0x50>
 8006ad8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da03      	bge.n	8006ae8 <_printf_i+0xb0>
 8006ae0:	222d      	movs	r2, #45	; 0x2d
 8006ae2:	425b      	negs	r3, r3
 8006ae4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ae8:	4962      	ldr	r1, [pc, #392]	; (8006c74 <_printf_i+0x23c>)
 8006aea:	220a      	movs	r2, #10
 8006aec:	e017      	b.n	8006b1e <_printf_i+0xe6>
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	6819      	ldr	r1, [r3, #0]
 8006af2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006af6:	d003      	beq.n	8006b00 <_printf_i+0xc8>
 8006af8:	1d08      	adds	r0, r1, #4
 8006afa:	6018      	str	r0, [r3, #0]
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	e006      	b.n	8006b0e <_printf_i+0xd6>
 8006b00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b04:	f101 0004 	add.w	r0, r1, #4
 8006b08:	6018      	str	r0, [r3, #0]
 8006b0a:	d0f7      	beq.n	8006afc <_printf_i+0xc4>
 8006b0c:	880b      	ldrh	r3, [r1, #0]
 8006b0e:	4959      	ldr	r1, [pc, #356]	; (8006c74 <_printf_i+0x23c>)
 8006b10:	2a6f      	cmp	r2, #111	; 0x6f
 8006b12:	bf14      	ite	ne
 8006b14:	220a      	movne	r2, #10
 8006b16:	2208      	moveq	r2, #8
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006b1e:	6865      	ldr	r5, [r4, #4]
 8006b20:	60a5      	str	r5, [r4, #8]
 8006b22:	2d00      	cmp	r5, #0
 8006b24:	f2c0 809c 	blt.w	8006c60 <_printf_i+0x228>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	f020 0004 	bic.w	r0, r0, #4
 8006b2e:	6020      	str	r0, [r4, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d13f      	bne.n	8006bb4 <_printf_i+0x17c>
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	f040 8095 	bne.w	8006c64 <_printf_i+0x22c>
 8006b3a:	4675      	mov	r5, lr
 8006b3c:	2a08      	cmp	r2, #8
 8006b3e:	d10b      	bne.n	8006b58 <_printf_i+0x120>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	07da      	lsls	r2, r3, #31
 8006b44:	d508      	bpl.n	8006b58 <_printf_i+0x120>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	6862      	ldr	r2, [r4, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bfde      	ittt	le
 8006b4e:	2330      	movle	r3, #48	; 0x30
 8006b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b58:	ebae 0305 	sub.w	r3, lr, r5
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	f8cd 8000 	str.w	r8, [sp]
 8006b62:	463b      	mov	r3, r7
 8006b64:	aa03      	add	r2, sp, #12
 8006b66:	4621      	mov	r1, r4
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff feef 	bl	800694c <_printf_common>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d155      	bne.n	8006c1e <_printf_i+0x1e6>
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	b005      	add	sp, #20
 8006b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006b80:	493c      	ldr	r1, [pc, #240]	; (8006c74 <_printf_i+0x23c>)
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006b8a:	f100 0504 	add.w	r5, r0, #4
 8006b8e:	601d      	str	r5, [r3, #0]
 8006b90:	d001      	beq.n	8006b96 <_printf_i+0x15e>
 8006b92:	6803      	ldr	r3, [r0, #0]
 8006b94:	e002      	b.n	8006b9c <_printf_i+0x164>
 8006b96:	0655      	lsls	r5, r2, #25
 8006b98:	d5fb      	bpl.n	8006b92 <_printf_i+0x15a>
 8006b9a:	8803      	ldrh	r3, [r0, #0]
 8006b9c:	07d0      	lsls	r0, r2, #31
 8006b9e:	bf44      	itt	mi
 8006ba0:	f042 0220 	orrmi.w	r2, r2, #32
 8006ba4:	6022      	strmi	r2, [r4, #0]
 8006ba6:	b91b      	cbnz	r3, 8006bb0 <_printf_i+0x178>
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	f022 0220 	bic.w	r2, r2, #32
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	e7b1      	b.n	8006b18 <_printf_i+0xe0>
 8006bb4:	4675      	mov	r5, lr
 8006bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bba:	fb02 3310 	mls	r3, r2, r0, r3
 8006bbe:	5ccb      	ldrb	r3, [r1, r3]
 8006bc0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1f5      	bne.n	8006bb6 <_printf_i+0x17e>
 8006bca:	e7b7      	b.n	8006b3c <_printf_i+0x104>
 8006bcc:	6808      	ldr	r0, [r1, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	6949      	ldr	r1, [r1, #20]
 8006bd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006bd6:	d004      	beq.n	8006be2 <_printf_i+0x1aa>
 8006bd8:	1d10      	adds	r0, r2, #4
 8006bda:	6018      	str	r0, [r3, #0]
 8006bdc:	6813      	ldr	r3, [r2, #0]
 8006bde:	6019      	str	r1, [r3, #0]
 8006be0:	e007      	b.n	8006bf2 <_printf_i+0x1ba>
 8006be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006be6:	f102 0004 	add.w	r0, r2, #4
 8006bea:	6018      	str	r0, [r3, #0]
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	d0f6      	beq.n	8006bde <_printf_i+0x1a6>
 8006bf0:	8019      	strh	r1, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	4675      	mov	r5, lr
 8006bf8:	e7b1      	b.n	8006b5e <_printf_i+0x126>
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	1d11      	adds	r1, r2, #4
 8006bfe:	6019      	str	r1, [r3, #0]
 8006c00:	6815      	ldr	r5, [r2, #0]
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7f9 fbca 	bl	80003a0 <memchr>
 8006c0c:	b108      	cbz	r0, 8006c12 <_printf_i+0x1da>
 8006c0e:	1b40      	subs	r0, r0, r5
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	2300      	movs	r3, #0
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	e79f      	b.n	8006b5e <_printf_i+0x126>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4639      	mov	r1, r7
 8006c24:	4630      	mov	r0, r6
 8006c26:	47c0      	blx	r8
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d0a2      	beq.n	8006b72 <_printf_i+0x13a>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	d507      	bpl.n	8006c42 <_printf_i+0x20a>
 8006c32:	2500      	movs	r5, #0
 8006c34:	f104 0919 	add.w	r9, r4, #25
 8006c38:	68e3      	ldr	r3, [r4, #12]
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	429d      	cmp	r5, r3
 8006c40:	db05      	blt.n	8006c4e <_printf_i+0x216>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	4298      	cmp	r0, r3
 8006c48:	bfb8      	it	lt
 8006c4a:	4618      	movlt	r0, r3
 8006c4c:	e793      	b.n	8006b76 <_printf_i+0x13e>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	464a      	mov	r2, r9
 8006c52:	4639      	mov	r1, r7
 8006c54:	4630      	mov	r0, r6
 8006c56:	47c0      	blx	r8
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d08a      	beq.n	8006b72 <_printf_i+0x13a>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	e7eb      	b.n	8006c38 <_printf_i+0x200>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1a7      	bne.n	8006bb4 <_printf_i+0x17c>
 8006c64:	780b      	ldrb	r3, [r1, #0]
 8006c66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c6e:	e765      	b.n	8006b3c <_printf_i+0x104>
 8006c70:	0800a1ce 	.word	0x0800a1ce
 8006c74:	0800a1bd 	.word	0x0800a1bd

08006c78 <_sbrk_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4c06      	ldr	r4, [pc, #24]	; (8006c94 <_sbrk_r+0x1c>)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4605      	mov	r5, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	f000 fb02 	bl	800728c <_sbrk>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_sbrk_r+0x1a>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_sbrk_r+0x1a>
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20002168 	.word	0x20002168

08006c98 <__sread>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca0:	f000 fa98 	bl	80071d4 <_read_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	bfab      	itete	ge
 8006ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006caa:	89a3      	ldrhlt	r3, [r4, #12]
 8006cac:	181b      	addge	r3, r3, r0
 8006cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cb2:	bfac      	ite	ge
 8006cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cb6:	81a3      	strhlt	r3, [r4, #12]
 8006cb8:	bd10      	pop	{r4, pc}

08006cba <__swrite>:
 8006cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbe:	461f      	mov	r7, r3
 8006cc0:	898b      	ldrh	r3, [r1, #12]
 8006cc2:	05db      	lsls	r3, r3, #23
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	4616      	mov	r6, r2
 8006cca:	d505      	bpl.n	8006cd8 <__swrite+0x1e>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	f000 f9b8 	bl	8007048 <_lseek_r>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	4628      	mov	r0, r5
 8006cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cee:	f000 b869 	b.w	8006dc4 <_write_r>

08006cf2 <__sseek>:
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfa:	f000 f9a5 	bl	8007048 <_lseek_r>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	bf15      	itete	ne
 8006d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d0e:	81a3      	strheq	r3, [r4, #12]
 8006d10:	bf18      	it	ne
 8006d12:	81a3      	strhne	r3, [r4, #12]
 8006d14:	bd10      	pop	{r4, pc}

08006d16 <__sclose>:
 8006d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1a:	f000 b8d3 	b.w	8006ec4 <_close_r>
	...

08006d20 <__swbuf_r>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	460e      	mov	r6, r1
 8006d24:	4614      	mov	r4, r2
 8006d26:	4605      	mov	r5, r0
 8006d28:	b118      	cbz	r0, 8006d32 <__swbuf_r+0x12>
 8006d2a:	6983      	ldr	r3, [r0, #24]
 8006d2c:	b90b      	cbnz	r3, 8006d32 <__swbuf_r+0x12>
 8006d2e:	f7ff fbe5 	bl	80064fc <__sinit>
 8006d32:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <__swbuf_r+0x98>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	d12a      	bne.n	8006d8e <__swbuf_r+0x6e>
 8006d38:	686c      	ldr	r4, [r5, #4]
 8006d3a:	69a3      	ldr	r3, [r4, #24]
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	071a      	lsls	r2, r3, #28
 8006d42:	d52e      	bpl.n	8006da2 <__swbuf_r+0x82>
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b363      	cbz	r3, 8006da2 <__swbuf_r+0x82>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	6820      	ldr	r0, [r4, #0]
 8006d4c:	1ac0      	subs	r0, r0, r3
 8006d4e:	6963      	ldr	r3, [r4, #20]
 8006d50:	b2f6      	uxtb	r6, r6
 8006d52:	4298      	cmp	r0, r3
 8006d54:	4637      	mov	r7, r6
 8006d56:	db04      	blt.n	8006d62 <__swbuf_r+0x42>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f94a 	bl	8006ff4 <_fflush_r>
 8006d60:	bb28      	cbnz	r0, 8006dae <__swbuf_r+0x8e>
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	6022      	str	r2, [r4, #0]
 8006d6e:	701e      	strb	r6, [r3, #0]
 8006d70:	6963      	ldr	r3, [r4, #20]
 8006d72:	3001      	adds	r0, #1
 8006d74:	4298      	cmp	r0, r3
 8006d76:	d004      	beq.n	8006d82 <__swbuf_r+0x62>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	07db      	lsls	r3, r3, #31
 8006d7c:	d519      	bpl.n	8006db2 <__swbuf_r+0x92>
 8006d7e:	2e0a      	cmp	r6, #10
 8006d80:	d117      	bne.n	8006db2 <__swbuf_r+0x92>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f935 	bl	8006ff4 <_fflush_r>
 8006d8a:	b190      	cbz	r0, 8006db2 <__swbuf_r+0x92>
 8006d8c:	e00f      	b.n	8006dae <__swbuf_r+0x8e>
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <__swbuf_r+0x9c>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d101      	bne.n	8006d98 <__swbuf_r+0x78>
 8006d94:	68ac      	ldr	r4, [r5, #8]
 8006d96:	e7d0      	b.n	8006d3a <__swbuf_r+0x1a>
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <__swbuf_r+0xa0>)
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	bf08      	it	eq
 8006d9e:	68ec      	ldreq	r4, [r5, #12]
 8006da0:	e7cb      	b.n	8006d3a <__swbuf_r+0x1a>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f81f 	bl	8006de8 <__swsetup_r>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0cc      	beq.n	8006d48 <__swbuf_r+0x28>
 8006dae:	f04f 37ff 	mov.w	r7, #4294967295
 8006db2:	4638      	mov	r0, r7
 8006db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db6:	bf00      	nop
 8006db8:	0800a16c 	.word	0x0800a16c
 8006dbc:	0800a18c 	.word	0x0800a18c
 8006dc0:	0800a14c 	.word	0x0800a14c

08006dc4 <_write_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4c07      	ldr	r4, [pc, #28]	; (8006de4 <_write_r+0x20>)
 8006dc8:	4605      	mov	r5, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fe f99e 	bl	8005114 <_write>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_write_r+0x1e>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_write_r+0x1e>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20002168 	.word	0x20002168

08006de8 <__swsetup_r>:
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <__swsetup_r+0xcc>)
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	681d      	ldr	r5, [r3, #0]
 8006dee:	4606      	mov	r6, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	b125      	cbz	r5, 8006dfe <__swsetup_r+0x16>
 8006df4:	69ab      	ldr	r3, [r5, #24]
 8006df6:	b913      	cbnz	r3, 8006dfe <__swsetup_r+0x16>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff fb7f 	bl	80064fc <__sinit>
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <__swsetup_r+0xd0>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d10f      	bne.n	8006e24 <__swsetup_r+0x3c>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	0715      	lsls	r5, r2, #28
 8006e0e:	d42c      	bmi.n	8006e6a <__swsetup_r+0x82>
 8006e10:	06d0      	lsls	r0, r2, #27
 8006e12:	d411      	bmi.n	8006e38 <__swsetup_r+0x50>
 8006e14:	2209      	movs	r2, #9
 8006e16:	6032      	str	r2, [r6, #0]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <__swsetup_r+0xd4>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d101      	bne.n	8006e2e <__swsetup_r+0x46>
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	e7eb      	b.n	8006e06 <__swsetup_r+0x1e>
 8006e2e:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <__swsetup_r+0xd8>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	bf08      	it	eq
 8006e34:	68ec      	ldreq	r4, [r5, #12]
 8006e36:	e7e6      	b.n	8006e06 <__swsetup_r+0x1e>
 8006e38:	0751      	lsls	r1, r2, #29
 8006e3a:	d512      	bpl.n	8006e62 <__swsetup_r+0x7a>
 8006e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3e:	b141      	cbz	r1, 8006e52 <__swsetup_r+0x6a>
 8006e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d002      	beq.n	8006e4e <__swsetup_r+0x66>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 f975 	bl	8007138 <_free_r>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6363      	str	r3, [r4, #52]	; 0x34
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f043 0308 	orr.w	r3, r3, #8
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	b94b      	cbnz	r3, 8006e82 <__swsetup_r+0x9a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e78:	d003      	beq.n	8006e82 <__swsetup_r+0x9a>
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f000 f919 	bl	80070b4 <__smakebuf_r>
 8006e82:	89a2      	ldrh	r2, [r4, #12]
 8006e84:	f012 0301 	ands.w	r3, r2, #1
 8006e88:	d00c      	beq.n	8006ea4 <__swsetup_r+0xbc>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	425b      	negs	r3, r3
 8006e92:	61a3      	str	r3, [r4, #24]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b953      	cbnz	r3, 8006eae <__swsetup_r+0xc6>
 8006e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ea0:	d1ba      	bne.n	8006e18 <__swsetup_r+0x30>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	0792      	lsls	r2, r2, #30
 8006ea6:	bf58      	it	pl
 8006ea8:	6963      	ldrpl	r3, [r4, #20]
 8006eaa:	60a3      	str	r3, [r4, #8]
 8006eac:	e7f2      	b.n	8006e94 <__swsetup_r+0xac>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e7f7      	b.n	8006ea2 <__swsetup_r+0xba>
 8006eb2:	bf00      	nop
 8006eb4:	20002010 	.word	0x20002010
 8006eb8:	0800a16c 	.word	0x0800a16c
 8006ebc:	0800a18c 	.word	0x0800a18c
 8006ec0:	0800a14c 	.word	0x0800a14c

08006ec4 <_close_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4c06      	ldr	r4, [pc, #24]	; (8006ee0 <_close_r+0x1c>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4605      	mov	r5, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	f000 f9b4 	bl	800723c <_close>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_close_r+0x1a>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_close_r+0x1a>
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20002168 	.word	0x20002168

08006ee4 <__sflush_r>:
 8006ee4:	898a      	ldrh	r2, [r1, #12]
 8006ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	4605      	mov	r5, r0
 8006eec:	0710      	lsls	r0, r2, #28
 8006eee:	460c      	mov	r4, r1
 8006ef0:	d45a      	bmi.n	8006fa8 <__sflush_r+0xc4>
 8006ef2:	684b      	ldr	r3, [r1, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc05      	bgt.n	8006f04 <__sflush_r+0x20>
 8006ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dc02      	bgt.n	8006f04 <__sflush_r+0x20>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d0f9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f10:	682f      	ldr	r7, [r5, #0]
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	d033      	beq.n	8006f7e <__sflush_r+0x9a>
 8006f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	075a      	lsls	r2, r3, #29
 8006f1c:	d505      	bpl.n	8006f2a <__sflush_r+0x46>
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	1ac0      	subs	r0, r0, r3
 8006f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f24:	b10b      	cbz	r3, 8006f2a <__sflush_r+0x46>
 8006f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f28:	1ac0      	subs	r0, r0, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f30:	6a21      	ldr	r1, [r4, #32]
 8006f32:	4628      	mov	r0, r5
 8006f34:	47b0      	blx	r6
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	d106      	bne.n	8006f4a <__sflush_r+0x66>
 8006f3c:	6829      	ldr	r1, [r5, #0]
 8006f3e:	291d      	cmp	r1, #29
 8006f40:	d84b      	bhi.n	8006fda <__sflush_r+0xf6>
 8006f42:	4a2b      	ldr	r2, [pc, #172]	; (8006ff0 <__sflush_r+0x10c>)
 8006f44:	40ca      	lsrs	r2, r1
 8006f46:	07d6      	lsls	r6, r2, #31
 8006f48:	d547      	bpl.n	8006fda <__sflush_r+0xf6>
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6062      	str	r2, [r4, #4]
 8006f4e:	04d9      	lsls	r1, r3, #19
 8006f50:	6922      	ldr	r2, [r4, #16]
 8006f52:	6022      	str	r2, [r4, #0]
 8006f54:	d504      	bpl.n	8006f60 <__sflush_r+0x7c>
 8006f56:	1c42      	adds	r2, r0, #1
 8006f58:	d101      	bne.n	8006f5e <__sflush_r+0x7a>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	b903      	cbnz	r3, 8006f60 <__sflush_r+0x7c>
 8006f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f62:	602f      	str	r7, [r5, #0]
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d0ca      	beq.n	8006efe <__sflush_r+0x1a>
 8006f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	d002      	beq.n	8006f76 <__sflush_r+0x92>
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 f8e1 	bl	8007138 <_free_r>
 8006f76:	2000      	movs	r0, #0
 8006f78:	6360      	str	r0, [r4, #52]	; 0x34
 8006f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7e:	6a21      	ldr	r1, [r4, #32]
 8006f80:	2301      	movs	r3, #1
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b0      	blx	r6
 8006f86:	1c41      	adds	r1, r0, #1
 8006f88:	d1c6      	bne.n	8006f18 <__sflush_r+0x34>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c3      	beq.n	8006f18 <__sflush_r+0x34>
 8006f90:	2b1d      	cmp	r3, #29
 8006f92:	d001      	beq.n	8006f98 <__sflush_r+0xb4>
 8006f94:	2b16      	cmp	r3, #22
 8006f96:	d101      	bne.n	8006f9c <__sflush_r+0xb8>
 8006f98:	602f      	str	r7, [r5, #0]
 8006f9a:	e7b0      	b.n	8006efe <__sflush_r+0x1a>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	690f      	ldr	r7, [r1, #16]
 8006faa:	2f00      	cmp	r7, #0
 8006fac:	d0a7      	beq.n	8006efe <__sflush_r+0x1a>
 8006fae:	0793      	lsls	r3, r2, #30
 8006fb0:	680e      	ldr	r6, [r1, #0]
 8006fb2:	bf08      	it	eq
 8006fb4:	694b      	ldreq	r3, [r1, #20]
 8006fb6:	600f      	str	r7, [r1, #0]
 8006fb8:	bf18      	it	ne
 8006fba:	2300      	movne	r3, #0
 8006fbc:	eba6 0807 	sub.w	r8, r6, r7
 8006fc0:	608b      	str	r3, [r1, #8]
 8006fc2:	f1b8 0f00 	cmp.w	r8, #0
 8006fc6:	dd9a      	ble.n	8006efe <__sflush_r+0x1a>
 8006fc8:	4643      	mov	r3, r8
 8006fca:	463a      	mov	r2, r7
 8006fcc:	6a21      	ldr	r1, [r4, #32]
 8006fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b0      	blx	r6
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dc07      	bgt.n	8006fe8 <__sflush_r+0x104>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe8:	4407      	add	r7, r0
 8006fea:	eba8 0800 	sub.w	r8, r8, r0
 8006fee:	e7e8      	b.n	8006fc2 <__sflush_r+0xde>
 8006ff0:	20400001 	.word	0x20400001

08006ff4 <_fflush_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	690b      	ldr	r3, [r1, #16]
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	b1db      	cbz	r3, 8007036 <_fflush_r+0x42>
 8006ffe:	b118      	cbz	r0, 8007008 <_fflush_r+0x14>
 8007000:	6983      	ldr	r3, [r0, #24]
 8007002:	b90b      	cbnz	r3, 8007008 <_fflush_r+0x14>
 8007004:	f7ff fa7a 	bl	80064fc <__sinit>
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <_fflush_r+0x48>)
 800700a:	429c      	cmp	r4, r3
 800700c:	d109      	bne.n	8007022 <_fflush_r+0x2e>
 800700e:	686c      	ldr	r4, [r5, #4]
 8007010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007014:	b17b      	cbz	r3, 8007036 <_fflush_r+0x42>
 8007016:	4621      	mov	r1, r4
 8007018:	4628      	mov	r0, r5
 800701a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701e:	f7ff bf61 	b.w	8006ee4 <__sflush_r>
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <_fflush_r+0x4c>)
 8007024:	429c      	cmp	r4, r3
 8007026:	d101      	bne.n	800702c <_fflush_r+0x38>
 8007028:	68ac      	ldr	r4, [r5, #8]
 800702a:	e7f1      	b.n	8007010 <_fflush_r+0x1c>
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <_fflush_r+0x50>)
 800702e:	429c      	cmp	r4, r3
 8007030:	bf08      	it	eq
 8007032:	68ec      	ldreq	r4, [r5, #12]
 8007034:	e7ec      	b.n	8007010 <_fflush_r+0x1c>
 8007036:	2000      	movs	r0, #0
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	0800a16c 	.word	0x0800a16c
 8007040:	0800a18c 	.word	0x0800a18c
 8007044:	0800a14c 	.word	0x0800a14c

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4c07      	ldr	r4, [pc, #28]	; (8007068 <_lseek_r+0x20>)
 800704c:	4605      	mov	r5, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f000 f908 	bl	800726c <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20002168 	.word	0x20002168

0800706c <__swhatbuf_r>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	460e      	mov	r6, r1
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2900      	cmp	r1, #0
 8007076:	b090      	sub	sp, #64	; 0x40
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	da07      	bge.n	800708e <__swhatbuf_r+0x22>
 800707e:	2300      	movs	r3, #0
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	89b3      	ldrh	r3, [r6, #12]
 8007084:	061a      	lsls	r2, r3, #24
 8007086:	d410      	bmi.n	80070aa <__swhatbuf_r+0x3e>
 8007088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708c:	e00e      	b.n	80070ac <__swhatbuf_r+0x40>
 800708e:	aa01      	add	r2, sp, #4
 8007090:	f000 f8b2 	bl	80071f8 <_fstat_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	dbf2      	blt.n	800707e <__swhatbuf_r+0x12>
 8007098:	9a02      	ldr	r2, [sp, #8]
 800709a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800709e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070a2:	425a      	negs	r2, r3
 80070a4:	415a      	adcs	r2, r3
 80070a6:	602a      	str	r2, [r5, #0]
 80070a8:	e7ee      	b.n	8007088 <__swhatbuf_r+0x1c>
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	2000      	movs	r0, #0
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	b010      	add	sp, #64	; 0x40
 80070b2:	bd70      	pop	{r4, r5, r6, pc}

080070b4 <__smakebuf_r>:
 80070b4:	898b      	ldrh	r3, [r1, #12]
 80070b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b8:	079d      	lsls	r5, r3, #30
 80070ba:	4606      	mov	r6, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	d507      	bpl.n	80070d0 <__smakebuf_r+0x1c>
 80070c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	2301      	movs	r3, #1
 80070ca:	6163      	str	r3, [r4, #20]
 80070cc:	b002      	add	sp, #8
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	ab01      	add	r3, sp, #4
 80070d2:	466a      	mov	r2, sp
 80070d4:	f7ff ffca 	bl	800706c <__swhatbuf_r>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	4605      	mov	r5, r0
 80070dc:	4630      	mov	r0, r6
 80070de:	f7ff fa97 	bl	8006610 <_malloc_r>
 80070e2:	b948      	cbnz	r0, 80070f8 <__smakebuf_r+0x44>
 80070e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e8:	059a      	lsls	r2, r3, #22
 80070ea:	d4ef      	bmi.n	80070cc <__smakebuf_r+0x18>
 80070ec:	f023 0303 	bic.w	r3, r3, #3
 80070f0:	f043 0302 	orr.w	r3, r3, #2
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	e7e3      	b.n	80070c0 <__smakebuf_r+0xc>
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <__smakebuf_r+0x7c>)
 80070fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	6163      	str	r3, [r4, #20]
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	6120      	str	r0, [r4, #16]
 800710e:	b15b      	cbz	r3, 8007128 <__smakebuf_r+0x74>
 8007110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007114:	4630      	mov	r0, r6
 8007116:	f000 f881 	bl	800721c <_isatty_r>
 800711a:	b128      	cbz	r0, 8007128 <__smakebuf_r+0x74>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	431d      	orrs	r5, r3
 800712c:	81a5      	strh	r5, [r4, #12]
 800712e:	e7cd      	b.n	80070cc <__smakebuf_r+0x18>
 8007130:	0800647d 	.word	0x0800647d

08007134 <__malloc_lock>:
 8007134:	4770      	bx	lr

08007136 <__malloc_unlock>:
 8007136:	4770      	bx	lr

08007138 <_free_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4605      	mov	r5, r0
 800713c:	2900      	cmp	r1, #0
 800713e:	d045      	beq.n	80071cc <_free_r+0x94>
 8007140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007144:	1f0c      	subs	r4, r1, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	bfb8      	it	lt
 800714a:	18e4      	addlt	r4, r4, r3
 800714c:	f7ff fff2 	bl	8007134 <__malloc_lock>
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <_free_r+0x98>)
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	4610      	mov	r0, r2
 8007156:	b933      	cbnz	r3, 8007166 <_free_r+0x2e>
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	6014      	str	r4, [r2, #0]
 800715c:	4628      	mov	r0, r5
 800715e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007162:	f7ff bfe8 	b.w	8007136 <__malloc_unlock>
 8007166:	42a3      	cmp	r3, r4
 8007168:	d90c      	bls.n	8007184 <_free_r+0x4c>
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	1862      	adds	r2, r4, r1
 800716e:	4293      	cmp	r3, r2
 8007170:	bf04      	itt	eq
 8007172:	681a      	ldreq	r2, [r3, #0]
 8007174:	685b      	ldreq	r3, [r3, #4]
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	bf04      	itt	eq
 800717a:	1852      	addeq	r2, r2, r1
 800717c:	6022      	streq	r2, [r4, #0]
 800717e:	6004      	str	r4, [r0, #0]
 8007180:	e7ec      	b.n	800715c <_free_r+0x24>
 8007182:	4613      	mov	r3, r2
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	b10a      	cbz	r2, 800718c <_free_r+0x54>
 8007188:	42a2      	cmp	r2, r4
 800718a:	d9fa      	bls.n	8007182 <_free_r+0x4a>
 800718c:	6819      	ldr	r1, [r3, #0]
 800718e:	1858      	adds	r0, r3, r1
 8007190:	42a0      	cmp	r0, r4
 8007192:	d10b      	bne.n	80071ac <_free_r+0x74>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	4401      	add	r1, r0
 8007198:	1858      	adds	r0, r3, r1
 800719a:	4282      	cmp	r2, r0
 800719c:	6019      	str	r1, [r3, #0]
 800719e:	d1dd      	bne.n	800715c <_free_r+0x24>
 80071a0:	6810      	ldr	r0, [r2, #0]
 80071a2:	6852      	ldr	r2, [r2, #4]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	4401      	add	r1, r0
 80071a8:	6019      	str	r1, [r3, #0]
 80071aa:	e7d7      	b.n	800715c <_free_r+0x24>
 80071ac:	d902      	bls.n	80071b4 <_free_r+0x7c>
 80071ae:	230c      	movs	r3, #12
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	e7d3      	b.n	800715c <_free_r+0x24>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428a      	cmp	r2, r1
 80071ba:	bf04      	itt	eq
 80071bc:	6811      	ldreq	r1, [r2, #0]
 80071be:	6852      	ldreq	r2, [r2, #4]
 80071c0:	6062      	str	r2, [r4, #4]
 80071c2:	bf04      	itt	eq
 80071c4:	1809      	addeq	r1, r1, r0
 80071c6:	6021      	streq	r1, [r4, #0]
 80071c8:	605c      	str	r4, [r3, #4]
 80071ca:	e7c7      	b.n	800715c <_free_r+0x24>
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	20002094 	.word	0x20002094

080071d4 <_read_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c07      	ldr	r4, [pc, #28]	; (80071f4 <_read_r+0x20>)
 80071d8:	4605      	mov	r5, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f84a 	bl	800727c <_read>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_read_r+0x1e>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_read_r+0x1e>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20002168 	.word	0x20002168

080071f8 <_fstat_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4c07      	ldr	r4, [pc, #28]	; (8007218 <_fstat_r+0x20>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	4605      	mov	r5, r0
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	f000 f821 	bl	800724c <_fstat>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d102      	bne.n	8007214 <_fstat_r+0x1c>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	b103      	cbz	r3, 8007214 <_fstat_r+0x1c>
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20002168 	.word	0x20002168

0800721c <_isatty_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4c06      	ldr	r4, [pc, #24]	; (8007238 <_isatty_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4605      	mov	r5, r0
 8007224:	4608      	mov	r0, r1
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	f000 f818 	bl	800725c <_isatty>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_isatty_r+0x1a>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	b103      	cbz	r3, 8007236 <_isatty_r+0x1a>
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20002168 	.word	0x20002168

0800723c <_close>:
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <_close+0xc>)
 800723e:	2258      	movs	r2, #88	; 0x58
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	4770      	bx	lr
 8007248:	20002168 	.word	0x20002168

0800724c <_fstat>:
 800724c:	4b02      	ldr	r3, [pc, #8]	; (8007258 <_fstat+0xc>)
 800724e:	2258      	movs	r2, #88	; 0x58
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	4770      	bx	lr
 8007258:	20002168 	.word	0x20002168

0800725c <_isatty>:
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <_isatty+0xc>)
 800725e:	2258      	movs	r2, #88	; 0x58
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	2000      	movs	r0, #0
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20002168 	.word	0x20002168

0800726c <_lseek>:
 800726c:	4b02      	ldr	r3, [pc, #8]	; (8007278 <_lseek+0xc>)
 800726e:	2258      	movs	r2, #88	; 0x58
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	4770      	bx	lr
 8007278:	20002168 	.word	0x20002168

0800727c <_read>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <_read+0xc>)
 800727e:	2258      	movs	r2, #88	; 0x58
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	4770      	bx	lr
 8007288:	20002168 	.word	0x20002168

0800728c <_sbrk>:
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <_sbrk+0x14>)
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	4602      	mov	r2, r0
 8007292:	b909      	cbnz	r1, 8007298 <_sbrk+0xc>
 8007294:	4903      	ldr	r1, [pc, #12]	; (80072a4 <_sbrk+0x18>)
 8007296:	6019      	str	r1, [r3, #0]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	4402      	add	r2, r0
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	4770      	bx	lr
 80072a0:	2000209c 	.word	0x2000209c
 80072a4:	2000216c 	.word	0x2000216c

080072a8 <_init>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr

080072b4 <_fini>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr
