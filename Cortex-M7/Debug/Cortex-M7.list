
Cortex-M7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  20000000  08003efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e8  20000110  0800400c  00020110  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001f8  0800400c  000201f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bcb4  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f83  00000000  00000000  0003bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aacc  00000000  00000000  0003ed75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad0  00000000  00000000  00049848  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ef8  00000000  00000000  0004a318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007c90  00000000  00000000  0004b210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005f02  00000000  00000000  00052ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00058da2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001eb8  00000000  00000000  00058e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  0005ad44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000110 	.word	0x20000110
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003ce8 	.word	0x08003ce8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000114 	.word	0x20000114
 80002d4:	08003ce8 	.word	0x08003ce8

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <__aeabi_uldivmod>:
 8000398:	b953      	cbnz	r3, 80003b0 <__aeabi_uldivmod+0x18>
 800039a:	b94a      	cbnz	r2, 80003b0 <__aeabi_uldivmod+0x18>
 800039c:	2900      	cmp	r1, #0
 800039e:	bf08      	it	eq
 80003a0:	2800      	cmpeq	r0, #0
 80003a2:	bf1c      	itt	ne
 80003a4:	f04f 31ff 	movne.w	r1, #4294967295
 80003a8:	f04f 30ff 	movne.w	r0, #4294967295
 80003ac:	f000 b97a 	b.w	80006a4 <__aeabi_idiv0>
 80003b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b8:	f000 f806 	bl	80003c8 <__udivmoddi4>
 80003bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003c4:	b004      	add	sp, #16
 80003c6:	4770      	bx	lr

080003c8 <__udivmoddi4>:
 80003c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003cc:	468c      	mov	ip, r1
 80003ce:	460d      	mov	r5, r1
 80003d0:	4604      	mov	r4, r0
 80003d2:	9e08      	ldr	r6, [sp, #32]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d151      	bne.n	800047c <__udivmoddi4+0xb4>
 80003d8:	428a      	cmp	r2, r1
 80003da:	4617      	mov	r7, r2
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0xf2>
 80003de:	fab2 fe82 	clz	lr, r2
 80003e2:	f1be 0f00 	cmp.w	lr, #0
 80003e6:	d00b      	beq.n	8000400 <__udivmoddi4+0x38>
 80003e8:	f1ce 0c20 	rsb	ip, lr, #32
 80003ec:	fa01 f50e 	lsl.w	r5, r1, lr
 80003f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f4:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f8:	ea4c 0c05 	orr.w	ip, ip, r5
 80003fc:	fa00 f40e 	lsl.w	r4, r0, lr
 8000400:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000404:	0c25      	lsrs	r5, r4, #16
 8000406:	fbbc f8fa 	udiv	r8, ip, sl
 800040a:	fa1f f987 	uxth.w	r9, r7
 800040e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000412:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000416:	fb08 f309 	mul.w	r3, r8, r9
 800041a:	42ab      	cmp	r3, r5
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x6c>
 800041e:	19ed      	adds	r5, r5, r7
 8000420:	f108 32ff 	add.w	r2, r8, #4294967295
 8000424:	f080 8123 	bcs.w	800066e <__udivmoddi4+0x2a6>
 8000428:	42ab      	cmp	r3, r5
 800042a:	f240 8120 	bls.w	800066e <__udivmoddi4+0x2a6>
 800042e:	f1a8 0802 	sub.w	r8, r8, #2
 8000432:	443d      	add	r5, r7
 8000434:	1aed      	subs	r5, r5, r3
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb5 f0fa 	udiv	r0, r5, sl
 800043c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000440:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000444:	fb00 f909 	mul.w	r9, r0, r9
 8000448:	45a1      	cmp	r9, r4
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x98>
 800044c:	19e4      	adds	r4, r4, r7
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	f080 810a 	bcs.w	800066a <__udivmoddi4+0x2a2>
 8000456:	45a1      	cmp	r9, r4
 8000458:	f240 8107 	bls.w	800066a <__udivmoddi4+0x2a2>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 0409 	sub.w	r4, r4, r9
 8000464:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000468:	2100      	movs	r1, #0
 800046a:	2e00      	cmp	r6, #0
 800046c:	d061      	beq.n	8000532 <__udivmoddi4+0x16a>
 800046e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000472:	2300      	movs	r3, #0
 8000474:	6034      	str	r4, [r6, #0]
 8000476:	6073      	str	r3, [r6, #4]
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	428b      	cmp	r3, r1
 800047e:	d907      	bls.n	8000490 <__udivmoddi4+0xc8>
 8000480:	2e00      	cmp	r6, #0
 8000482:	d054      	beq.n	800052e <__udivmoddi4+0x166>
 8000484:	2100      	movs	r1, #0
 8000486:	e886 0021 	stmia.w	r6, {r0, r5}
 800048a:	4608      	mov	r0, r1
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	fab3 f183 	clz	r1, r3
 8000494:	2900      	cmp	r1, #0
 8000496:	f040 808e 	bne.w	80005b6 <__udivmoddi4+0x1ee>
 800049a:	42ab      	cmp	r3, r5
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xdc>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80fa 	bhi.w	8000698 <__udivmoddi4+0x2d0>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb65 0503 	sbc.w	r5, r5, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	46ac      	mov	ip, r5
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d03f      	beq.n	8000532 <__udivmoddi4+0x16a>
 80004b2:	e886 1010 	stmia.w	r6, {r4, ip}
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	b912      	cbnz	r2, 80004c2 <__udivmoddi4+0xfa>
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb7 f7f2 	udiv	r7, r7, r2
 80004c2:	fab7 fe87 	clz	lr, r7
 80004c6:	f1be 0f00 	cmp.w	lr, #0
 80004ca:	d134      	bne.n	8000536 <__udivmoddi4+0x16e>
 80004cc:	1beb      	subs	r3, r5, r7
 80004ce:	0c3a      	lsrs	r2, r7, #16
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	2101      	movs	r1, #1
 80004d6:	fbb3 f8f2 	udiv	r8, r3, r2
 80004da:	0c25      	lsrs	r5, r4, #16
 80004dc:	fb02 3318 	mls	r3, r2, r8, r3
 80004e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004e4:	fb0c f308 	mul.w	r3, ip, r8
 80004e8:	42ab      	cmp	r3, r5
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x134>
 80004ec:	19ed      	adds	r5, r5, r7
 80004ee:	f108 30ff 	add.w	r0, r8, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x132>
 80004f4:	42ab      	cmp	r3, r5
 80004f6:	f200 80d1 	bhi.w	800069c <__udivmoddi4+0x2d4>
 80004fa:	4680      	mov	r8, r0
 80004fc:	1aed      	subs	r5, r5, r3
 80004fe:	b2a3      	uxth	r3, r4
 8000500:	fbb5 f0f2 	udiv	r0, r5, r2
 8000504:	fb02 5510 	mls	r5, r2, r0, r5
 8000508:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800050c:	fb0c fc00 	mul.w	ip, ip, r0
 8000510:	45a4      	cmp	ip, r4
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x15c>
 8000514:	19e4      	adds	r4, r4, r7
 8000516:	f100 33ff 	add.w	r3, r0, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x15a>
 800051c:	45a4      	cmp	ip, r4
 800051e:	f200 80b8 	bhi.w	8000692 <__udivmoddi4+0x2ca>
 8000522:	4618      	mov	r0, r3
 8000524:	eba4 040c 	sub.w	r4, r4, ip
 8000528:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800052c:	e79d      	b.n	800046a <__udivmoddi4+0xa2>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1ce 0420 	rsb	r4, lr, #32
 800053a:	fa05 f30e 	lsl.w	r3, r5, lr
 800053e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000542:	fa20 f804 	lsr.w	r8, r0, r4
 8000546:	0c3a      	lsrs	r2, r7, #16
 8000548:	fa25 f404 	lsr.w	r4, r5, r4
 800054c:	ea48 0803 	orr.w	r8, r8, r3
 8000550:	fbb4 f1f2 	udiv	r1, r4, r2
 8000554:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000558:	fb02 4411 	mls	r4, r2, r1, r4
 800055c:	fa1f fc87 	uxth.w	ip, r7
 8000560:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000564:	fb01 f30c 	mul.w	r3, r1, ip
 8000568:	42ab      	cmp	r3, r5
 800056a:	fa00 f40e 	lsl.w	r4, r0, lr
 800056e:	d909      	bls.n	8000584 <__udivmoddi4+0x1bc>
 8000570:	19ed      	adds	r5, r5, r7
 8000572:	f101 30ff 	add.w	r0, r1, #4294967295
 8000576:	f080 808a 	bcs.w	800068e <__udivmoddi4+0x2c6>
 800057a:	42ab      	cmp	r3, r5
 800057c:	f240 8087 	bls.w	800068e <__udivmoddi4+0x2c6>
 8000580:	3902      	subs	r1, #2
 8000582:	443d      	add	r5, r7
 8000584:	1aeb      	subs	r3, r5, r3
 8000586:	fa1f f588 	uxth.w	r5, r8
 800058a:	fbb3 f0f2 	udiv	r0, r3, r2
 800058e:	fb02 3310 	mls	r3, r2, r0, r3
 8000592:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000596:	fb00 f30c 	mul.w	r3, r0, ip
 800059a:	42ab      	cmp	r3, r5
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x1e6>
 800059e:	19ed      	adds	r5, r5, r7
 80005a0:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a4:	d26f      	bcs.n	8000686 <__udivmoddi4+0x2be>
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	d96d      	bls.n	8000686 <__udivmoddi4+0x2be>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443d      	add	r5, r7
 80005ae:	1aeb      	subs	r3, r5, r3
 80005b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005b4:	e78f      	b.n	80004d6 <__udivmoddi4+0x10e>
 80005b6:	f1c1 0720 	rsb	r7, r1, #32
 80005ba:	fa22 f807 	lsr.w	r8, r2, r7
 80005be:	408b      	lsls	r3, r1
 80005c0:	fa05 f401 	lsl.w	r4, r5, r1
 80005c4:	ea48 0303 	orr.w	r3, r8, r3
 80005c8:	fa20 fe07 	lsr.w	lr, r0, r7
 80005cc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005d0:	40fd      	lsrs	r5, r7
 80005d2:	ea4e 0e04 	orr.w	lr, lr, r4
 80005d6:	fbb5 f9fc 	udiv	r9, r5, ip
 80005da:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005de:	fb0c 5519 	mls	r5, ip, r9, r5
 80005e2:	fa1f f883 	uxth.w	r8, r3
 80005e6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005ea:	fb09 f408 	mul.w	r4, r9, r8
 80005ee:	42ac      	cmp	r4, r5
 80005f0:	fa02 f201 	lsl.w	r2, r2, r1
 80005f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x244>
 80005fa:	18ed      	adds	r5, r5, r3
 80005fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000600:	d243      	bcs.n	800068a <__udivmoddi4+0x2c2>
 8000602:	42ac      	cmp	r4, r5
 8000604:	d941      	bls.n	800068a <__udivmoddi4+0x2c2>
 8000606:	f1a9 0902 	sub.w	r9, r9, #2
 800060a:	441d      	add	r5, r3
 800060c:	1b2d      	subs	r5, r5, r4
 800060e:	fa1f fe8e 	uxth.w	lr, lr
 8000612:	fbb5 f0fc 	udiv	r0, r5, ip
 8000616:	fb0c 5510 	mls	r5, ip, r0, r5
 800061a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800061e:	fb00 f808 	mul.w	r8, r0, r8
 8000622:	45a0      	cmp	r8, r4
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x26e>
 8000626:	18e4      	adds	r4, r4, r3
 8000628:	f100 35ff 	add.w	r5, r0, #4294967295
 800062c:	d229      	bcs.n	8000682 <__udivmoddi4+0x2ba>
 800062e:	45a0      	cmp	r8, r4
 8000630:	d927      	bls.n	8000682 <__udivmoddi4+0x2ba>
 8000632:	3802      	subs	r0, #2
 8000634:	441c      	add	r4, r3
 8000636:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063a:	eba4 0408 	sub.w	r4, r4, r8
 800063e:	fba0 8902 	umull	r8, r9, r0, r2
 8000642:	454c      	cmp	r4, r9
 8000644:	46c6      	mov	lr, r8
 8000646:	464d      	mov	r5, r9
 8000648:	d315      	bcc.n	8000676 <__udivmoddi4+0x2ae>
 800064a:	d012      	beq.n	8000672 <__udivmoddi4+0x2aa>
 800064c:	b156      	cbz	r6, 8000664 <__udivmoddi4+0x29c>
 800064e:	ebba 030e 	subs.w	r3, sl, lr
 8000652:	eb64 0405 	sbc.w	r4, r4, r5
 8000656:	fa04 f707 	lsl.w	r7, r4, r7
 800065a:	40cb      	lsrs	r3, r1
 800065c:	431f      	orrs	r7, r3
 800065e:	40cc      	lsrs	r4, r1
 8000660:	6037      	str	r7, [r6, #0]
 8000662:	6074      	str	r4, [r6, #4]
 8000664:	2100      	movs	r1, #0
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	4618      	mov	r0, r3
 800066c:	e6f8      	b.n	8000460 <__udivmoddi4+0x98>
 800066e:	4690      	mov	r8, r2
 8000670:	e6e0      	b.n	8000434 <__udivmoddi4+0x6c>
 8000672:	45c2      	cmp	sl, r8
 8000674:	d2ea      	bcs.n	800064c <__udivmoddi4+0x284>
 8000676:	ebb8 0e02 	subs.w	lr, r8, r2
 800067a:	eb69 0503 	sbc.w	r5, r9, r3
 800067e:	3801      	subs	r0, #1
 8000680:	e7e4      	b.n	800064c <__udivmoddi4+0x284>
 8000682:	4628      	mov	r0, r5
 8000684:	e7d7      	b.n	8000636 <__udivmoddi4+0x26e>
 8000686:	4640      	mov	r0, r8
 8000688:	e791      	b.n	80005ae <__udivmoddi4+0x1e6>
 800068a:	4681      	mov	r9, r0
 800068c:	e7be      	b.n	800060c <__udivmoddi4+0x244>
 800068e:	4601      	mov	r1, r0
 8000690:	e778      	b.n	8000584 <__udivmoddi4+0x1bc>
 8000692:	3802      	subs	r0, #2
 8000694:	443c      	add	r4, r7
 8000696:	e745      	b.n	8000524 <__udivmoddi4+0x15c>
 8000698:	4608      	mov	r0, r1
 800069a:	e708      	b.n	80004ae <__udivmoddi4+0xe6>
 800069c:	f1a8 0802 	sub.w	r8, r8, #2
 80006a0:	443d      	add	r5, r7
 80006a2:	e72b      	b.n	80004fc <__udivmoddi4+0x134>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_InitTick+0x3c>)
{
 80006ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_InitTick+0x40>)
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	fbb3 f3f0 	udiv	r3, r3, r0
 80006ba:	6810      	ldr	r0, [r2, #0]
 80006bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80006c0:	f000 f882 	bl	80007c8 <HAL_SYSTICK_Config>
 80006c4:	4604      	mov	r4, r0
 80006c6:	b958      	cbnz	r0, 80006e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	2d0f      	cmp	r5, #15
 80006ca:	d809      	bhi.n	80006e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	4602      	mov	r2, r0
 80006ce:	4629      	mov	r1, r5
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f840 	bl	8000758 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <HAL_InitTick+0x44>)
 80006da:	4620      	mov	r0, r4
 80006dc:	601d      	str	r5, [r3, #0]
 80006de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000108 	.word	0x20000108
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_Init>:
{
 80006f0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 f81e 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ffd5 	bl	80006a8 <HAL_InitTick>
 80006fe:	4604      	mov	r4, r0
 8000700:	b918      	cbnz	r0, 800070a <HAL_Init+0x1a>
  HAL_MspInit();
 8000702:	f002 fafd 	bl	8002d00 <HAL_MspInit>
}
 8000706:	4620      	mov	r0, r4
 8000708:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800070a:	2401      	movs	r4, #1
 800070c:	e7fb      	b.n	8000706 <HAL_Init+0x16>
	...

08000710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x10>)
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <HAL_IncTick+0x14>)
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	440b      	add	r3, r1
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	2000012c 	.word	0x2000012c
 8000724:	20000000 	.word	0x20000000

08000728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000728:	4b01      	ldr	r3, [pc, #4]	; (8000730 <HAL_GetTick+0x8>)
 800072a:	6818      	ldr	r0, [r3, #0]
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	2000012c 	.word	0x2000012c

08000734 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000736:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800074e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000750:	60d3      	str	r3, [r2, #12]
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075a:	b530      	push	{r4, r5, lr}
 800075c:	68dc      	ldr	r4, [r3, #12]
 800075e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000762:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	2b04      	cmp	r3, #4
 800076a:	bf28      	it	cs
 800076c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000774:	bf8c      	ite	hi
 8000776:	3c03      	subhi	r4, #3
 8000778:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800077e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f103 33ff 	add.w	r3, r3, #4294967295
 8000784:	ea01 0103 	and.w	r1, r1, r3
 8000788:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	fa05 f404 	lsl.w	r4, r5, r4
 8000790:	f104 34ff 	add.w	r4, r4, #4294967295
 8000794:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	ea42 0201 	orr.w	r2, r2, r1
 800079c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80007a0:	db07      	blt.n	80007b2 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80007ac:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80007b0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f000 000f 	and.w	r0, r0, #15
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_NVIC_SetPriority+0x6c>)
 80007ba:	541a      	strb	r2, [r3, r0]
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	e000ed14 	.word	0xe000ed14

080007c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	3801      	subs	r0, #1
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ce:	d20a      	bcs.n	80007e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	21f0      	movs	r1, #240	; 0xf0
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007f6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	bf0c      	ite	eq
 80007fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000800:	f022 0204 	bicne.w	r2, r2, #4
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	4770      	bx	lr
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800080c:	4770      	bx	lr

0800080e <HAL_SYSTICK_IRQHandler>:
{
 800080e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000810:	f7ff fffc 	bl	800080c <HAL_SYSTICK_Callback>
 8000814:	bd08      	pop	{r3, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081c:	680b      	ldr	r3, [r1, #0]
{
 800081e:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80009e4 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000824:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000828:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 800082c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80009e8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000830:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000834:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 800083a:	42af      	cmp	r7, r5
 800083c:	f040 80b7 	bne.w	80009ae <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000840:	684a      	ldr	r2, [r1, #4]
 8000842:	f022 0610 	bic.w	r6, r2, #16
 8000846:	2e02      	cmp	r6, #2
 8000848:	d116      	bne.n	8000878 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800084a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800084e:	f003 0b07 	and.w	fp, r3, #7
 8000852:	f04f 0e0f 	mov.w	lr, #15
 8000856:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800085a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800085e:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000862:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000866:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800086a:	690c      	ldr	r4, [r1, #16]
 800086c:	fa04 f40b 	lsl.w	r4, r4, fp
 8000870:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000874:	f8ca 4020 	str.w	r4, [sl, #32]
 8000878:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800087c:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800087e:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000882:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000886:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800088c:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000890:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000892:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000894:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000898:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 800089c:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a0:	d810      	bhi.n	80008c4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 80008a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008a4:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80008a8:	68ce      	ldr	r6, [r1, #12]
 80008aa:	fa06 fe0a 	lsl.w	lr, r6, sl
 80008ae:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80008b2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008b4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b6:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008ba:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80008be:	409e      	lsls	r6, r3
 80008c0:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 80008c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80008c4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008c6:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008c8:	688e      	ldr	r6, [r1, #8]
 80008ca:	fa06 f60a 	lsl.w	r6, r6, sl
 80008ce:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80008d0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d2:	00d4      	lsls	r4, r2, #3
 80008d4:	d56b      	bpl.n	80009ae <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80008da:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008de:	f003 0703 	and.w	r7, r3, #3
 80008e2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	f044 0402 	orr.w	r4, r4, #2
 80008ea:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008ee:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80008f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008f8:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80008fc:	f004 0402 	and.w	r4, r4, #2
 8000900:	9403      	str	r4, [sp, #12]
 8000902:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000904:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000908:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800090c:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000910:	4c33      	ldr	r4, [pc, #204]	; (80009e0 <HAL_GPIO_Init+0x1c8>)
 8000912:	42a0      	cmp	r0, r4
 8000914:	d052      	beq.n	80009bc <HAL_GPIO_Init+0x1a4>
 8000916:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800091a:	42a0      	cmp	r0, r4
 800091c:	d050      	beq.n	80009c0 <HAL_GPIO_Init+0x1a8>
 800091e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000922:	42a0      	cmp	r0, r4
 8000924:	d04e      	beq.n	80009c4 <HAL_GPIO_Init+0x1ac>
 8000926:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800092a:	42a0      	cmp	r0, r4
 800092c:	d04c      	beq.n	80009c8 <HAL_GPIO_Init+0x1b0>
 800092e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000932:	42a0      	cmp	r0, r4
 8000934:	d04a      	beq.n	80009cc <HAL_GPIO_Init+0x1b4>
 8000936:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800093a:	42a0      	cmp	r0, r4
 800093c:	d048      	beq.n	80009d0 <HAL_GPIO_Init+0x1b8>
 800093e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000942:	42a0      	cmp	r0, r4
 8000944:	d046      	beq.n	80009d4 <HAL_GPIO_Init+0x1bc>
 8000946:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800094a:	42a0      	cmp	r0, r4
 800094c:	d044      	beq.n	80009d8 <HAL_GPIO_Init+0x1c0>
 800094e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000952:	42a0      	cmp	r0, r4
 8000954:	d042      	beq.n	80009dc <HAL_GPIO_Init+0x1c4>
 8000956:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800095a:	42a0      	cmp	r0, r4
 800095c:	bf14      	ite	ne
 800095e:	240a      	movne	r4, #10
 8000960:	2409      	moveq	r4, #9
 8000962:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000964:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000966:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800096a:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800096c:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000970:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000974:	bf54      	ite	pl
 8000976:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000978:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800097a:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 800097c:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000980:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000984:	bf54      	ite	pl
 8000986:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000988:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800098a:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800098c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000990:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000994:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000998:	bf54      	ite	pl
 800099a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800099c:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800099e:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80009a0:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 80009a2:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 80009a4:	bf54      	ite	pl
 80009a6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009a8:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 80009aa:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80009ae:	3301      	adds	r3, #1
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	f47f af3d 	bne.w	8000830 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 80009b6:	b005      	add	sp, #20
 80009b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009bc:	2400      	movs	r4, #0
 80009be:	e7d0      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009c0:	2401      	movs	r4, #1
 80009c2:	e7ce      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009c4:	2402      	movs	r4, #2
 80009c6:	e7cc      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009c8:	2403      	movs	r4, #3
 80009ca:	e7ca      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009cc:	2404      	movs	r4, #4
 80009ce:	e7c8      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009d0:	2405      	movs	r4, #5
 80009d2:	e7c6      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009d4:	2406      	movs	r4, #6
 80009d6:	e7c4      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009d8:	2407      	movs	r4, #7
 80009da:	e7c2      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009dc:	2408      	movs	r4, #8
 80009de:	e7c0      	b.n	8000962 <HAL_GPIO_Init+0x14a>
 80009e0:	58020000 	.word	0x58020000
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58000080 	.word	0x58000080

080009ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009ec:	b10a      	cbz	r2, 80009f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80009ee:	8301      	strh	r1, [r0, #24]
 80009f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80009f2:	8341      	strh	r1, [r0, #26]
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fa:	6803      	ldr	r3, [r0, #0]
{
 80009fc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fe:	07d8      	lsls	r0, r3, #31
 8000a00:	d45c      	bmi.n	8000abc <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	0799      	lsls	r1, r3, #30
 8000a06:	f100 80af 	bmi.w	8000b68 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	06d9      	lsls	r1, r3, #27
 8000a0e:	d525      	bpl.n	8000a5c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000a10:	4bac      	ldr	r3, [pc, #688]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000a12:	691a      	ldr	r2, [r3, #16]
 8000a14:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000a18:	2a08      	cmp	r2, #8
 8000a1a:	d00b      	beq.n	8000a34 <HAL_RCC_OscConfig+0x3c>
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000a22:	2a18      	cmp	r2, #24
 8000a24:	f040 80f7 	bne.w	8000c16 <HAL_RCC_OscConfig+0x21e>
 8000a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	f040 80f1 	bne.w	8000c16 <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000a34:	4ba3      	ldr	r3, [pc, #652]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	05d2      	lsls	r2, r2, #23
 8000a3a:	d502      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x4a>
 8000a3c:	69ea      	ldr	r2, [r5, #28]
 8000a3e:	2a80      	cmp	r2, #128	; 0x80
 8000a40:	d153      	bne.n	8000aea <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000a42:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a44:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000a48:	fa92 f2a2 	rbit	r2, r2
 8000a4c:	fab2 f182 	clz	r1, r2
 8000a50:	6a2a      	ldr	r2, [r5, #32]
 8000a52:	408a      	lsls	r2, r1
 8000a54:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	0719      	lsls	r1, r3, #28
 8000a60:	f100 810b 	bmi.w	8000c7a <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	069a      	lsls	r2, r3, #26
 8000a68:	f100 8130 	bmi.w	8000ccc <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	075c      	lsls	r4, r3, #29
 8000a70:	d51e      	bpl.n	8000ab0 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000a72:	4c95      	ldr	r4, [pc, #596]	; (8000cc8 <HAL_RCC_OscConfig+0x2d0>)
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000a7c:	f7ff fe54 	bl	8000728 <HAL_GetTick>
 8000a80:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	05da      	lsls	r2, r3, #23
 8000a86:	f140 8146 	bpl.w	8000d16 <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8a:	68ab      	ldr	r3, [r5, #8]
 8000a8c:	4c8d      	ldr	r4, [pc, #564]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	f040 8148 	bne.w	8000d24 <HAL_RCC_OscConfig+0x32c>
 8000a94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9c:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fe42 	bl	8000728 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	4e87      	ldr	r6, [pc, #540]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000aa6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000aaa:	079b      	lsls	r3, r3, #30
 8000aac:	f140 8160 	bpl.w	8000d70 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ab0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8163 	bne.w	8000d7e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ab8:	2000      	movs	r0, #0
 8000aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000abc:	4b81      	ldr	r3, [pc, #516]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ac4:	2a10      	cmp	r2, #16
 8000ac6:	d009      	beq.n	8000adc <HAL_RCC_OscConfig+0xe4>
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ace:	2a18      	cmp	r2, #24
 8000ad0:	d10d      	bne.n	8000aee <HAL_RCC_OscConfig+0xf6>
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d108      	bne.n	8000aee <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	4b79      	ldr	r3, [pc, #484]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	039a      	lsls	r2, r3, #14
 8000ae2:	d58e      	bpl.n	8000a02 <HAL_RCC_OscConfig+0xa>
 8000ae4:	686b      	ldr	r3, [r5, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d18b      	bne.n	8000a02 <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000aea:	2001      	movs	r0, #1
 8000aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aee:	686b      	ldr	r3, [r5, #4]
 8000af0:	4c74      	ldr	r4, [pc, #464]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af6:	d112      	bne.n	8000b1e <HAL_RCC_OscConfig+0x126>
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b00:	f7ff fe12 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b04:	4c6f      	ldr	r4, [pc, #444]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000b06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	039b      	lsls	r3, r3, #14
 8000b0c:	f53f af79 	bmi.w	8000a02 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b10:	f7ff fe0a 	bl	8000728 <HAL_GetTick>
 8000b14:	1b80      	subs	r0, r0, r6
 8000b16:	2864      	cmp	r0, #100	; 0x64
 8000b18:	d9f6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	b9a3      	cbnz	r3, 8000b4a <HAL_RCC_OscConfig+0x152>
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b26:	6023      	str	r3, [r4, #0]
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b30:	f7ff fdfa 	bl	8000728 <HAL_GetTick>
 8000b34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	039f      	lsls	r7, r3, #14
 8000b3a:	f57f af62 	bpl.w	8000a02 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fdf3 	bl	8000728 <HAL_GetTick>
 8000b42:	1b80      	subs	r0, r0, r6
 8000b44:	2864      	cmp	r0, #100	; 0x64
 8000b46:	d9f6      	bls.n	8000b36 <HAL_RCC_OscConfig+0x13e>
 8000b48:	e7e7      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	d103      	bne.n	8000b5a <HAL_RCC_OscConfig+0x162>
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	6023      	str	r3, [r4, #0]
 8000b58:	e7ce      	b.n	8000af8 <HAL_RCC_OscConfig+0x100>
 8000b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5e:	6023      	str	r3, [r4, #0]
 8000b60:	6823      	ldr	r3, [r4, #0]
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b66:	e7ca      	b.n	8000afe <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b68:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000b6a:	68e9      	ldr	r1, [r5, #12]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	f012 0f38 	tst.w	r2, #56	; 0x38
 8000b72:	d007      	beq.n	8000b84 <HAL_RCC_OscConfig+0x18c>
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b7a:	2a18      	cmp	r2, #24
 8000b7c:	d128      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x1d8>
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	079c      	lsls	r4, r3, #30
 8000b82:	d125      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b84:	4a4f      	ldr	r2, [pc, #316]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	0758      	lsls	r0, r3, #29
 8000b8a:	d501      	bpl.n	8000b90 <HAL_RCC_OscConfig+0x198>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d0ac      	beq.n	8000aea <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b90:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b92:	4c4c      	ldr	r4, [pc, #304]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b94:	f023 0319 	bic.w	r3, r3, #25
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fdc4 	bl	8000728 <HAL_GetTick>
 8000ba0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	d50d      	bpl.n	8000bc4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba8:	6861      	ldr	r1, [r4, #4]
 8000baa:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8000bae:	fa93 f3a3 	rbit	r3, r3
 8000bb2:	fab3 f283 	clz	r2, r3
 8000bb6:	692b      	ldr	r3, [r5, #16]
 8000bb8:	4093      	lsls	r3, r2
 8000bba:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	6063      	str	r3, [r4, #4]
 8000bc2:	e722      	b.n	8000a0a <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fdb0 	bl	8000728 <HAL_GetTick>
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9e9      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x1aa>
 8000bce:	e7a4      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
 8000bd0:	4c3c      	ldr	r4, [pc, #240]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bd2:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bd4:	b179      	cbz	r1, 8000bf6 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bd6:	f023 0319 	bic.w	r3, r3, #25
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bde:	f7ff fda3 	bl	8000728 <HAL_GetTick>
 8000be2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	075f      	lsls	r7, r3, #29
 8000be8:	d4de      	bmi.n	8000ba8 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bea:	f7ff fd9d 	bl	8000728 <HAL_GetTick>
 8000bee:	1b80      	subs	r0, r0, r6
 8000bf0:	2802      	cmp	r0, #2
 8000bf2:	d9f7      	bls.n	8000be4 <HAL_RCC_OscConfig+0x1ec>
 8000bf4:	e791      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fd94 	bl	8000728 <HAL_GetTick>
 8000c00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	0758      	lsls	r0, r3, #29
 8000c06:	f57f af00 	bpl.w	8000a0a <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fd8d 	bl	8000728 <HAL_GetTick>
 8000c0e:	1b80      	subs	r0, r0, r6
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f6      	bls.n	8000c02 <HAL_RCC_OscConfig+0x20a>
 8000c14:	e781      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000c16:	69eb      	ldr	r3, [r5, #28]
 8000c18:	4c2a      	ldr	r4, [pc, #168]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000c1a:	b1eb      	cbz	r3, 8000c58 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c24:	f7ff fd80 	bl	8000728 <HAL_GetTick>
 8000c28:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	05df      	lsls	r7, r3, #23
 8000c2e:	d50d      	bpl.n	8000c4c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c30:	6861      	ldr	r1, [r4, #4]
 8000c32:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8000c36:	fa93 f3a3 	rbit	r3, r3
 8000c3a:	fab3 f283 	clz	r2, r3
 8000c3e:	6a2b      	ldr	r3, [r5, #32]
 8000c40:	4093      	lsls	r3, r2
 8000c42:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8000c46:	4313      	orrs	r3, r2
 8000c48:	6063      	str	r3, [r4, #4]
 8000c4a:	e707      	b.n	8000a5c <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fd6c 	bl	8000728 <HAL_GetTick>
 8000c50:	1b80      	subs	r0, r0, r6
 8000c52:	2802      	cmp	r0, #2
 8000c54:	d9e9      	bls.n	8000c2a <HAL_RCC_OscConfig+0x232>
 8000c56:	e760      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd62 	bl	8000728 <HAL_GetTick>
 8000c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	05d8      	lsls	r0, r3, #23
 8000c6a:	f57f aef7 	bpl.w	8000a5c <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000c6e:	f7ff fd5b 	bl	8000728 <HAL_GetTick>
 8000c72:	1b80      	subs	r0, r0, r6
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f6      	bls.n	8000c66 <HAL_RCC_OscConfig+0x26e>
 8000c78:	e74f      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c7a:	696b      	ldr	r3, [r5, #20]
 8000c7c:	4c11      	ldr	r4, [pc, #68]	; (8000cc4 <HAL_RCC_OscConfig+0x2cc>)
 8000c7e:	b183      	cbz	r3, 8000ca2 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8000c80:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c88:	f7ff fd4e 	bl	8000728 <HAL_GetTick>
 8000c8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c90:	079b      	lsls	r3, r3, #30
 8000c92:	f53f aee7 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c96:	f7ff fd47 	bl	8000728 <HAL_GetTick>
 8000c9a:	1b80      	subs	r0, r0, r6
 8000c9c:	2802      	cmp	r0, #2
 8000c9e:	d9f6      	bls.n	8000c8e <HAL_RCC_OscConfig+0x296>
 8000ca0:	e73b      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000ca2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ca4:	f023 0301 	bic.w	r3, r3, #1
 8000ca8:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000caa:	f7ff fd3d 	bl	8000728 <HAL_GetTick>
 8000cae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000cb2:	079f      	lsls	r7, r3, #30
 8000cb4:	f57f aed6 	bpl.w	8000a64 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cb8:	f7ff fd36 	bl	8000728 <HAL_GetTick>
 8000cbc:	1b80      	subs	r0, r0, r6
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f6      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x2b8>
 8000cc2:	e72a      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000ccc:	69ab      	ldr	r3, [r5, #24]
 8000cce:	4c6e      	ldr	r4, [pc, #440]	; (8000e88 <HAL_RCC_OscConfig+0x490>)
 8000cd0:	b183      	cbz	r3, 8000cf4 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000cda:	f7ff fd25 	bl	8000728 <HAL_GetTick>
 8000cde:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	0498      	lsls	r0, r3, #18
 8000ce4:	f53f aec2 	bmi.w	8000a6c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000ce8:	f7ff fd1e 	bl	8000728 <HAL_GetTick>
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d9f6      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x2e8>
 8000cf2:	e712      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cfa:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fd14 	bl	8000728 <HAL_GetTick>
 8000d00:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	0499      	lsls	r1, r3, #18
 8000d06:	f57f aeb1 	bpl.w	8000a6c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000d0a:	f7ff fd0d 	bl	8000728 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	2802      	cmp	r0, #2
 8000d12:	d9f6      	bls.n	8000d02 <HAL_RCC_OscConfig+0x30a>
 8000d14:	e701      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d16:	f7ff fd07 	bl	8000728 <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2864      	cmp	r0, #100	; 0x64
 8000d1e:	f67f aeb0 	bls.w	8000a82 <HAL_RCC_OscConfig+0x8a>
 8000d22:	e6fa      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d24:	b9b3      	cbnz	r3, 8000d54 <HAL_RCC_OscConfig+0x35c>
 8000d26:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d28:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	6723      	str	r3, [r4, #112]	; 0x70
 8000d32:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fcf5 	bl	8000728 <HAL_GetTick>
 8000d3e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d42:	0798      	lsls	r0, r3, #30
 8000d44:	f57f aeb4 	bpl.w	8000ab0 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d48:	f7ff fcee 	bl	8000728 <HAL_GetTick>
 8000d4c:	1b80      	subs	r0, r0, r6
 8000d4e:	42b8      	cmp	r0, r7
 8000d50:	d9f6      	bls.n	8000d40 <HAL_RCC_OscConfig+0x348>
 8000d52:	e6e2      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d58:	d103      	bne.n	8000d62 <HAL_RCC_OscConfig+0x36a>
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6723      	str	r3, [r4, #112]	; 0x70
 8000d60:	e698      	b.n	8000a94 <HAL_RCC_OscConfig+0x9c>
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	6723      	str	r3, [r4, #112]	; 0x70
 8000d68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d6a:	f023 0304 	bic.w	r3, r3, #4
 8000d6e:	e694      	b.n	8000a9a <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcda 	bl	8000728 <HAL_GetTick>
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	42a0      	cmp	r0, r4
 8000d78:	f67f ae96 	bls.w	8000aa8 <HAL_RCC_OscConfig+0xb0>
 8000d7c:	e6cd      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000d7e:	4c42      	ldr	r4, [pc, #264]	; (8000e88 <HAL_RCC_OscConfig+0x490>)
 8000d80:	6923      	ldr	r3, [r4, #16]
 8000d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d86:	2b18      	cmp	r3, #24
 8000d88:	f43f aeaf 	beq.w	8000aea <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8000d8c:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d8e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d96:	d169      	bne.n	8000e6c <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000d98:	f7ff fcc6 	bl	8000728 <HAL_GetTick>
 8000d9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	0199      	lsls	r1, r3, #6
 8000da2:	d45d      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000da6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000da8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000dac:	f023 0303 	bic.w	r3, r3, #3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000db4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dbc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	025b      	lsls	r3, r3, #9
 8000dc4:	0412      	lsls	r2, r2, #16
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000dda:	3a01      	subs	r2, #1
 8000ddc:	0612      	lsls	r2, r2, #24
 8000dde:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000de2:	4313      	orrs	r3, r2
 8000de4:	6323      	str	r3, [r4, #48]	; 0x30
 8000de6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000dea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000df8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000dfa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dfe:	408b      	lsls	r3, r1
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000e04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e08:	f023 030c 	bic.w	r3, r3, #12
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000e10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e12:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e14:	f023 0302 	bic.w	r3, r3, #2
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e32:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e44:	f7ff fc70 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	4c0f      	ldr	r4, [pc, #60]	; (8000e88 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8000e4a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	019a      	lsls	r2, r3, #6
 8000e50:	f53f ae32 	bmi.w	8000ab8 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fc68 	bl	8000728 <HAL_GetTick>
 8000e58:	1b40      	subs	r0, r0, r5
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9f6      	bls.n	8000e4c <HAL_RCC_OscConfig+0x454>
 8000e5e:	e65c      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fc62 	bl	8000728 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d999      	bls.n	8000d9e <HAL_RCC_OscConfig+0x3a6>
 8000e6a:	e656      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc5c 	bl	8000728 <HAL_GetTick>
 8000e70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	019b      	lsls	r3, r3, #6
 8000e76:	f57f ae1f 	bpl.w	8000ab8 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7a:	f7ff fc55 	bl	8000728 <HAL_GetTick>
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	2802      	cmp	r0, #2
 8000e82:	d9f6      	bls.n	8000e72 <HAL_RCC_OscConfig+0x47a>
 8000e84:	e649      	b.n	8000b1a <HAL_RCC_OscConfig+0x122>
 8000e86:	bf00      	nop
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x124>)
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000e94:	2a10      	cmp	r2, #16
{
 8000e96:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e98:	d00e      	beq.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x2c>
 8000e9a:	2a18      	cmp	r2, #24
 8000e9c:	d00e      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x30>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	f040 8084 	bne.w	8000fac <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0x128>)
 8000ea8:	f012 0f20 	tst.w	r2, #32
 8000eac:	d07f      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000eb4:	40d8      	lsrs	r0, r3
 8000eb6:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000eb8:	483f      	ldr	r0, [pc, #252]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000eba:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ebc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ebe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ec4:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000ec8:	f001 0101 	and.w	r1, r1, #1
 8000ecc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8000fbc <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ed0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8000ed4:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ed6:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000eda:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8000ede:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ee0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000ee4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8000ee8:	d002      	beq.n	8000ef0 <HAL_RCC_GetSysClockFreq+0x64>
 8000eea:	d30e      	bcc.n	8000f0a <HAL_RCC_GetSysClockFreq+0x7e>
 8000eec:	2a02      	cmp	r2, #2
 8000eee:	d04c      	beq.n	8000f8a <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0x134>)
 8000ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ef8:	ee07 3a10 	vmov	s14, r3
 8000efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f00:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f08:	e04b      	b.n	8000fa2 <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f012 0f20 	tst.w	r2, #32
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0x128>)
 8000f12:	d026      	beq.n	8000f62 <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f14:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f18:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f20:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f22:	fbb2 f2f0 	udiv	r2, r2, r0
 8000f26:	ee07 2a10 	vmov	s14, r2
 8000f2a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000f2e:	ee07 3a10 	vmov	s14, r3
 8000f32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f36:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f3e:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x124>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000f4a:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8000f4c:	ee07 3a10 	vmov	s14, r3
 8000f50:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f58:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f5c:	ee17 0a90 	vmov	r0, s15
 8000f60:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f68:	ee07 3a10 	vmov	s14, r3
 8000f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f70:	fbb2 f3f0 	udiv	r3, r2, r0
 8000f74:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f7c:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	e7db      	b.n	8000f42 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f92:	ee07 3a10 	vmov	s14, r3
 8000f96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f9a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000fa2:	fbb2 f2f0 	udiv	r2, r2, r0
 8000fa6:	ee07 2a90 	vmov	s15, r2
 8000faa:	e7e9      	b.n	8000f80 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	03d09000 	.word	0x03d09000
 8000fb8:	007a1200 	.word	0x007a1200
 8000fbc:	39000000 	.word	0x39000000
 8000fc0:	003d0900 	.word	0x003d0900

08000fc4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc4:	4a68      	ldr	r2, [pc, #416]	; (8001168 <HAL_RCC_ClockConfig+0x1a4>)
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	428b      	cmp	r3, r1
{
 8000fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fd6:	d342      	bcc.n	800105e <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd8:	6822      	ldr	r2, [r4, #0]
 8000fda:	0797      	lsls	r7, r2, #30
 8000fdc:	d44c      	bmi.n	8001078 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fde:	07d6      	lsls	r6, r2, #31
 8000fe0:	d452      	bmi.n	8001088 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fe2:	4a61      	ldr	r2, [pc, #388]	; (8001168 <HAL_RCC_ClockConfig+0x1a4>)
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	429d      	cmp	r5, r3
 8000fec:	f0c0 80a8 	bcc.w	8001140 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	0755      	lsls	r5, r2, #29
 8000ff4:	f100 80af 	bmi.w	8001156 <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff8:	0710      	lsls	r0, r2, #28
 8000ffa:	d506      	bpl.n	800100a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000ffc:	495b      	ldr	r1, [pc, #364]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 8000ffe:	6960      	ldr	r0, [r4, #20]
 8001000:	69cb      	ldr	r3, [r1, #28]
 8001002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001006:	4303      	orrs	r3, r0
 8001008:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100a:	06d1      	lsls	r1, r2, #27
 800100c:	d506      	bpl.n	800101c <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800100e:	4957      	ldr	r1, [pc, #348]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 8001010:	69a0      	ldr	r0, [r4, #24]
 8001012:	69cb      	ldr	r3, [r1, #28]
 8001014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001018:	4303      	orrs	r3, r0
 800101a:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800101c:	0693      	lsls	r3, r2, #26
 800101e:	d506      	bpl.n	800102e <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001020:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 8001022:	69e1      	ldr	r1, [r4, #28]
 8001024:	6a13      	ldr	r3, [r2, #32]
 8001026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800102a:	430b      	orrs	r3, r1
 800102c:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800102e:	f7ff ff2d 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 8001034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	fab2 f282 	clz	r2, r2
 8001042:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001046:	40d3      	lsrs	r3, r2
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <HAL_RCC_ClockConfig+0x1ac>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	40d8      	lsrs	r0, r3
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <HAL_RCC_ClockConfig+0x1b0>)
 8001050:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fb28 	bl	80006a8 <HAL_InitTick>
  return HAL_OK;
 8001058:	2000      	movs	r0, #0
}
 800105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	430b      	orrs	r3, r1
 8001066:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	4299      	cmp	r1, r3
 8001070:	d0b2      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001078:	493c      	ldr	r1, [pc, #240]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 800107a:	68e0      	ldr	r0, [r4, #12]
 800107c:	698b      	ldr	r3, [r1, #24]
 800107e:	f023 030f 	bic.w	r3, r3, #15
 8001082:	4303      	orrs	r3, r0
 8001084:	618b      	str	r3, [r1, #24]
 8001086:	e7aa      	b.n	8000fde <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 800108a:	68a1      	ldr	r1, [r4, #8]
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001092:	430a      	orrs	r2, r1
 8001094:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001096:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	2902      	cmp	r1, #2
 800109c:	d11d      	bne.n	80010da <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a2:	d0e6      	beq.n	8001072 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010a4:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a6:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80010aa:	4f30      	ldr	r7, [pc, #192]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010ac:	f022 0207 	bic.w	r2, r2, #7
 80010b0:	430a      	orrs	r2, r1
 80010b2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80010b4:	f7ff fb38 	bl	8000728 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b8:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80010ba:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d119      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d08b      	beq.n	8000fe2 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ca:	f7ff fb2d 	bl	8000728 <HAL_GetTick>
 80010ce:	1b80      	subs	r0, r0, r6
 80010d0:	4540      	cmp	r0, r8
 80010d2:	d9f5      	bls.n	80010c0 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010da:	2903      	cmp	r1, #3
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80010e2:	e7de      	b.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80010e4:	2901      	cmp	r1, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010e8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80010ec:	e7d9      	b.n	80010a2 <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	f012 0f04 	tst.w	r2, #4
 80010f2:	e7d6      	b.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010fe:	2b18      	cmp	r3, #24
 8001100:	f43f af6f 	beq.w	8000fe2 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fb10 	bl	8000728 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	4540      	cmp	r0, r8
 800110c:	d9f4      	bls.n	80010f8 <HAL_RCC_ClockConfig+0x134>
 800110e:	e7e1      	b.n	80010d4 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001110:	2b01      	cmp	r3, #1
 8001112:	d110      	bne.n	8001136 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800111a:	2b08      	cmp	r3, #8
 800111c:	f43f af61 	beq.w	8000fe2 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001120:	f7ff fb02 	bl	8000728 <HAL_GetTick>
 8001124:	1b80      	subs	r0, r0, r6
 8001126:	4540      	cmp	r0, r8
 8001128:	d9f4      	bls.n	8001114 <HAL_RCC_ClockConfig+0x150>
 800112a:	e7d3      	b.n	80010d4 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff fafc 	bl	8000728 <HAL_GetTick>
 8001130:	1b80      	subs	r0, r0, r6
 8001132:	4540      	cmp	r0, r8
 8001134:	d8ce      	bhi.n	80010d4 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f013 0f38 	tst.w	r3, #56	; 0x38
 800113c:	d1f6      	bne.n	800112c <HAL_RCC_ClockConfig+0x168>
 800113e:	e750      	b.n	8000fe2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f023 0307 	bic.w	r3, r3, #7
 8001146:	432b      	orrs	r3, r5
 8001148:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	429d      	cmp	r5, r3
 8001152:	d18e      	bne.n	8001072 <HAL_RCC_ClockConfig+0xae>
 8001154:	e74c      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001156:	4905      	ldr	r1, [pc, #20]	; (800116c <HAL_RCC_ClockConfig+0x1a8>)
 8001158:	6920      	ldr	r0, [r4, #16]
 800115a:	698b      	ldr	r3, [r1, #24]
 800115c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001160:	4303      	orrs	r3, r0
 8001162:	618b      	str	r3, [r1, #24]
 8001164:	e748      	b.n	8000ff8 <HAL_RCC_ClockConfig+0x34>
 8001166:	bf00      	nop
 8001168:	52002000 	.word	0x52002000
 800116c:	58024400 	.word	0x58024400
 8001170:	08003d4e 	.word	0x08003d4e
 8001174:	20000108 	.word	0x20000108

08001178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001178:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 800117a:	f000 ff3b 	bl	8001ff4 <HAL_RCCEx_GetD1SysClockFreq>
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_RCC_GetHCLKFreq+0x28>)
 8001180:	2201      	movs	r2, #1
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	40d3      	lsrs	r3, r2
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	40d8      	lsrs	r0, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800119a:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	58024400 	.word	0x58024400
 80011a4:	08003d4e 	.word	0x08003d4e
 80011a8:	2000010c 	.word	0x2000010c

080011ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80011ae:	f7ff ffe3 	bl	8001178 <HAL_RCC_GetHCLKFreq>
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	fa92 f2a2 	rbit	r2, r2
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011c4:	40d3      	lsrs	r3, r2
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	bd08      	pop	{r3, pc}
 80011ce:	bf00      	nop
 80011d0:	58024400 	.word	0x58024400
 80011d4:	08003d4e 	.word	0x08003d4e

080011d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80011da:	f7ff ffcd 	bl	8001178 <HAL_RCC_GetHCLKFreq>
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011f2:	40d3      	lsrs	r3, r2
 80011f4:	4a02      	ldr	r2, [pc, #8]	; (8001200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80011f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	bd08      	pop	{r3, pc}
 80011fc:	58024400 	.word	0x58024400
 8001200:	08003d4e 	.word	0x08003d4e

08001204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8001204:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  
  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001206:	4c2b      	ldr	r4, [pc, #172]	; (80012b4 <RCCEx_PLL2_Config+0xb0>)
{
 8001208:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800120a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d04c      	beq.n	80012ae <RCCEx_PLL2_Config+0xaa>
  
  
  else    
  {  
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800121a:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800121c:	f7ff fa84 	bl	8000728 <HAL_GetTick>
 8001220:	4606      	mov	r6, r0
    
    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	011a      	lsls	r2, r3, #4
 8001226:	d435      	bmi.n	8001294 <RCCEx_PLL2_Config+0x90>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800122a:	682a      	ldr	r2, [r5, #0]
 800122c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001230:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001234:	62a3      	str	r3, [r4, #40]	; 0x28
 8001236:	68ab      	ldr	r3, [r5, #8]
 8001238:	68ea      	ldr	r2, [r5, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	3a01      	subs	r2, #1
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	0412      	lsls	r2, r2, #16
 8001242:	b29b      	uxth	r3, r3
 8001244:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001248:	4313      	orrs	r3, r2
 800124a:	686a      	ldr	r2, [r5, #4]
 800124c:	3a01      	subs	r2, #1
 800124e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001252:	4313      	orrs	r3, r2
 8001254:	692a      	ldr	r2, [r5, #16]
 8001256:	3a01      	subs	r2, #1
 8001258:	0612      	lsls	r2, r2, #24
 800125a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800125e:	4313      	orrs	r3, r2
 8001260:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);
    
    /* Select PLL2 input reference frequency range: VCI */  
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001264:	696a      	ldr	r2, [r5, #20]
 8001266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800126a:	4313      	orrs	r3, r2
 800126c:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800126e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001270:	69aa      	ldr	r2, [r5, #24]
 8001272:	f023 0320 	bic.w	r3, r3, #32
 8001276:	4313      	orrs	r3, r2
 8001278:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001280:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001282:	f7ff fa51 	bl	8000728 <HAL_GetTick>
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8001286:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <RCCEx_PLL2_Config+0xb0>)
    tickstart = HAL_GetTick();
 8001288:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	d508      	bpl.n	80012a2 <RCCEx_PLL2_Config+0x9e>
    }
    
  }
  
  
  return status;
 8001290:	2000      	movs	r0, #0
 8001292:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001294:	f7ff fa48 	bl	8000728 <HAL_GetTick>
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	2802      	cmp	r0, #2
 800129c:	d9c1      	bls.n	8001222 <RCCEx_PLL2_Config+0x1e>
        return HAL_TIMEOUT;
 800129e:	2003      	movs	r0, #3
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80012a2:	f7ff fa41 	bl	8000728 <HAL_GetTick>
 80012a6:	1b40      	subs	r0, r0, r5
 80012a8:	2802      	cmp	r0, #2
 80012aa:	d9ee      	bls.n	800128a <RCCEx_PLL2_Config+0x86>
 80012ac:	e7f7      	b.n	800129e <RCCEx_PLL2_Config+0x9a>
    return HAL_ERROR;
 80012ae:	2001      	movs	r0, #1
}
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	bf00      	nop
 80012b4:	58024400 	.word	0x58024400

080012b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
  
  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80012ba:	4c2b      	ldr	r4, [pc, #172]	; (8001368 <RCCEx_PLL3_Config+0xb0>)
{
 80012bc:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80012be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d04c      	beq.n	8001362 <RCCEx_PLL3_Config+0xaa>
  
  
  else    
  { 
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012d0:	f7ff fa2a 	bl	8000728 <HAL_GetTick>
 80012d4:	4606      	mov	r6, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	d435      	bmi.n	8001348 <RCCEx_PLL3_Config+0x90>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80012dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012de:	682a      	ldr	r2, [r5, #0]
 80012e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80012e4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80012e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80012ea:	68ab      	ldr	r3, [r5, #8]
 80012ec:	68ea      	ldr	r2, [r5, #12]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	3a01      	subs	r2, #1
 80012f2:	025b      	lsls	r3, r3, #9
 80012f4:	0412      	lsls	r2, r2, #16
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80012fc:	4313      	orrs	r3, r2
 80012fe:	686a      	ldr	r2, [r5, #4]
 8001300:	3a01      	subs	r2, #1
 8001302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001306:	4313      	orrs	r3, r2
 8001308:	692a      	ldr	r2, [r5, #16]
 800130a:	3a01      	subs	r2, #1
 800130c:	0612      	lsls	r2, r2, #24
 800130e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001312:	4313      	orrs	r3, r2
 8001314:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);
    
    /* Select PLL3 input reference frequency range: VCI */  
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001318:	696a      	ldr	r2, [r5, #20]
 800131a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800131e:	4313      	orrs	r3, r2
 8001320:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001324:	69aa      	ldr	r2, [r5, #24]
 8001326:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800132a:	4313      	orrs	r3, r2
 800132c:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001336:	f7ff f9f7 	bl	8000728 <HAL_GetTick>
    
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800133a:	4c0b      	ldr	r4, [pc, #44]	; (8001368 <RCCEx_PLL3_Config+0xb0>)
    tickstart = HAL_GetTick();
 800133c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	d508      	bpl.n	8001356 <RCCEx_PLL3_Config+0x9e>
    }
    
  }
  
  
  return status;
 8001344:	2000      	movs	r0, #0
 8001346:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001348:	f7ff f9ee 	bl	8000728 <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9c1      	bls.n	80012d6 <RCCEx_PLL3_Config+0x1e>
        return HAL_TIMEOUT;
 8001352:	2003      	movs	r0, #3
 8001354:	bd70      	pop	{r4, r5, r6, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001356:	f7ff f9e7 	bl	8000728 <HAL_GetTick>
 800135a:	1b40      	subs	r0, r0, r5
 800135c:	2802      	cmp	r0, #2
 800135e:	d9ee      	bls.n	800133e <RCCEx_PLL3_Config+0x86>
 8001360:	e7f7      	b.n	8001352 <RCCEx_PLL3_Config+0x9a>
    return HAL_ERROR;
 8001362:	2001      	movs	r0, #1
}
 8001364:	bd70      	pop	{r4, r5, r6, pc}
 8001366:	bf00      	nop
 8001368:	58024400 	.word	0x58024400

0800136c <HAL_RCCEx_PeriphCLKConfig>:
{
 800136c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001370:	6805      	ldr	r5, [r0, #0]
{
 8001372:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001374:	f015 6500 	ands.w	r5, r5, #134217728	; 0x8000000
 8001378:	d027      	beq.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800137a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800137c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001380:	d018      	beq.n	80013b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001382:	d802      	bhi.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001384:	b183      	cbz	r3, 80013a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001386:	2501      	movs	r5, #1
 8001388:	e01f      	b.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800138a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800138e:	d027      	beq.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001394:	d1f7      	bne.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001396:	4a9f      	ldr	r2, [pc, #636]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001398:	2500      	movs	r5, #0
 800139a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800139c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800139e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6513      	str	r3, [r2, #80]	; 0x50
 80013a6:	e010      	b.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013a8:	4a9a      	ldr	r2, [pc, #616]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80013aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80013b2:	e7f0      	b.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80013b4:	4a97      	ldr	r2, [pc, #604]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80013b6:	3004      	adds	r0, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80013b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013be:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80013c0:	f7ff ff20 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80013c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d0e5      	beq.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	05de      	lsls	r6, r3, #23
 80013ce:	d545      	bpl.n	800145c <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80013d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d83e      	bhi.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80013d6:	e8df f003 	tbb	[pc, r3]
 80013da:	130c      	.short	0x130c
 80013dc:	1133      	.short	0x1133
 80013de:	11          	.byte	0x11
 80013df:	00          	.byte	0x00
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80013e0:	4a8c      	ldr	r2, [pc, #560]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80013e2:	3024      	adds	r0, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 80013e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ea:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80013ec:	f7ff ff64 	bl	80012b8 <RCCEx_PLL3_Config>
 80013f0:	e7e8      	b.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013f2:	4a88      	ldr	r2, [pc, #544]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80013f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80013fc:	462e      	mov	r6, r5
 80013fe:	e008      	b.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001400:	4a84      	ldr	r2, [pc, #528]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001402:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001404:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800140c:	f7ff fefa 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001410:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001412:	bb06      	cbnz	r6, 8001456 <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001414:	4a7f      	ldr	r2, [pc, #508]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001416:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001418:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800141a:	f023 0307 	bic.w	r3, r3, #7
 800141e:	430b      	orrs	r3, r1
 8001420:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23)
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	0598      	lsls	r0, r3, #22
 8001426:	d529      	bpl.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800142a:	2b80      	cmp	r3, #128	; 0x80
 800142c:	d048      	beq.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800142e:	d817      	bhi.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001430:	2b00      	cmp	r3, #0
 8001432:	d035      	beq.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001434:	2b40      	cmp	r3, #64	; 0x40
 8001436:	d039      	beq.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = HAL_ERROR;
 8001438:	2601      	movs	r6, #1
      status |= ret;
 800143a:	4335      	orrs	r5, r6
 800143c:	b2ed      	uxtb	r5, r5
 800143e:	e01d      	b.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001440:	4a74      	ldr	r2, [pc, #464]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001442:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001446:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800144e:	f7ff ff33 	bl	80012b8 <RCCEx_PLL3_Config>
 8001452:	e7dd      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = HAL_ERROR;
 8001454:	2601      	movs	r6, #1
      status |= ret;
 8001456:	4335      	orrs	r5, r6
 8001458:	b2ed      	uxtb	r5, r5
 800145a:	e7e2      	b.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800145c:	462e      	mov	r6, r5
 800145e:	e7e0      	b.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001460:	2bc0      	cmp	r3, #192	; 0xc0
 8001462:	d002      	beq.n	800146a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001468:	d1e6      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(ret == HAL_OK)
 800146a:	2e00      	cmp	r6, #0
 800146c:	d1e5      	bne.n	800143a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001470:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001472:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001474:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001478:	430b      	orrs	r3, r1
 800147a:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	0559      	lsls	r1, r3, #21
 8001480:	d538      	bpl.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001482:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800148a:	d055      	beq.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800148c:	d822      	bhi.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d042      	beq.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8001492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001496:	d045      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      ret = HAL_ERROR;
 8001498:	2601      	movs	r6, #1
      status |= ret;
 800149a:	4335      	orrs	r5, r6
 800149c:	b2ed      	uxtb	r5, r5
 800149e:	e029      	b.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014a0:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80014a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80014aa:	e7de      	b.n	800146a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80014ac:	4a59      	ldr	r2, [pc, #356]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80014ae:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80014b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014b6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80014b8:	f7ff fea4 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80014bc:	4606      	mov	r6, r0
      break;
 80014be:	e7d4      	b.n	800146a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80014c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 80014c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80014ce:	f7ff fef3 	bl	80012b8 <RCCEx_PLL3_Config>
 80014d2:	e7f3      	b.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80014d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80014d8:	d002      	beq.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80014da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014de:	d1db      	bne.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    if(ret == HAL_OK)
 80014e0:	2e00      	cmp	r6, #0
 80014e2:	d1da      	bne.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80014e4:	4a4b      	ldr	r2, [pc, #300]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80014e6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80014ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80014ec:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B)
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	051a      	lsls	r2, r3, #20
 80014f8:	d538      	bpl.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch(PeriphClkInit->Sai4BClockSelection)
 80014fa:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80014fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001502:	d04f      	beq.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001504:	d822      	bhi.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03c      	beq.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800150a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150e:	d03f      	beq.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x224>
      ret = HAL_ERROR;
 8001510:	2601      	movs	r6, #1
      status |= ret;
 8001512:	4335      	orrs	r5, r6
 8001514:	b2ed      	uxtb	r5, r5
 8001516:	e029      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x200>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001518:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800151a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001522:	e7dd      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001524:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001526:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001528:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800152a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001530:	f7ff fe68 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001534:	4606      	mov	r6, r0
      break;
 8001536:	e7d3      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001538:	4a36      	ldr	r2, [pc, #216]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800153a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800153e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001544:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001546:	f7ff feb7 	bl	80012b8 <RCCEx_PLL3_Config>
 800154a:	e7f3      	b.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    switch(PeriphClkInit->Sai4BClockSelection)
 800154c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001550:	d002      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001556:	d1db      	bne.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    if(ret == HAL_OK)
 8001558:	2e00      	cmp	r6, #0
 800155a:	d1da      	bne.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800155c:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800155e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001562:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001564:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001568:	430b      	orrs	r3, r1
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	d52f      	bpl.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x266>
    switch(PeriphClkInit->QspiClockSelection)
 8001572:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001574:	2b10      	cmp	r3, #16
 8001576:	d03d      	beq.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8001578:	d81e      	bhi.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800157a:	b30b      	cbz	r3, 80015c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 800157c:	2601      	movs	r6, #1
      status |= ret;
 800157e:	4335      	orrs	r5, r6
 8001580:	b2ed      	uxtb	r5, r5
 8001582:	e026      	b.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001586:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800158e:	e7e3      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001592:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001594:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800159a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800159c:	f7ff fe32 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80015a0:	4606      	mov	r6, r0
      break;
 80015a2:	e7d9      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80015a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 80015aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80015b2:	f7ff fe81 	bl	80012b8 <RCCEx_PLL3_Config>
 80015b6:	e7f3      	b.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch(PeriphClkInit->QspiClockSelection)
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d021      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x294>
 80015bc:	2b30      	cmp	r3, #48	; 0x30
 80015be:	d1dd      	bne.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(ret == HAL_OK)
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d1dc      	bne.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80015c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80015c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80015ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015ce:	430b      	orrs	r3, r1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123)
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	04df      	lsls	r7, r3, #19
 80015d6:	d52e      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->Spi123ClockSelection)
 80015d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015de:	d04a      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80015e0:	d81a      	bhi.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d037      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d03a      	beq.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      ret = HAL_ERROR;
 80015ec:	2601      	movs	r6, #1
      status |= ret;
 80015ee:	4335      	orrs	r5, r6
 80015f0:	b2ed      	uxtb	r5, r5
 80015f2:	e020      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80015f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80015fe:	e7df      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001602:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001604:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800160c:	f7ff fdfa 	bl	8001204 <RCCEx_PLL2_Config>
 8001610:	4606      	mov	r6, r0
      break;
 8001612:	e7d5      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8001614:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi123ClockSelection)
 8001618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800161c:	d002      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800161e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001622:	d1e3      	bne.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x280>
    if(ret == HAL_OK)
 8001624:	2e00      	cmp	r6, #0
 8001626:	d1e2      	bne.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001628:	4aa4      	ldr	r2, [pc, #656]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800162a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800162c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800162e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001632:	430b      	orrs	r3, r1
 8001634:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45)
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	0498      	lsls	r0, r3, #18
 800163a:	d538      	bpl.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    switch(PeriphClkInit->Spi45ClockSelection)
 800163c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800163e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001642:	d04f      	beq.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8001644:	d821      	bhi.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001646:	b34b      	cbz	r3, 800169c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164c:	d040      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 800164e:	2601      	movs	r6, #1
      status |= ret;
 8001650:	4335      	orrs	r5, r6
 8001652:	b2ed      	uxtb	r5, r5
 8001654:	e02b      	b.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x342>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001656:	4a99      	ldr	r2, [pc, #612]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001658:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001660:	e7e0      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001664:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001666:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800166c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800166e:	f7ff fdc9 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001672:	4606      	mov	r6, r0
      break;
 8001674:	e7d6      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 8001676:	4a91      	ldr	r2, [pc, #580]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001678:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);  
 800167c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800167e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001682:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001684:	f7ff fe18 	bl	80012b8 <RCCEx_PLL3_Config>
 8001688:	e7f3      	b.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 800168a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800168e:	d005      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d002      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800169a:	d1d8      	bne.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    if(ret == HAL_OK)
 800169c:	2e00      	cmp	r6, #0
 800169e:	d1d7      	bne.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80016a0:	4a86      	ldr	r2, [pc, #536]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80016a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80016a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80016a6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	0459      	lsls	r1, r3, #17
 80016b2:	d534      	bpl.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 80016b4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80016b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016bc:	d059      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80016be:	d81b      	bhi.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80016c0:	b31b      	cbz	r3, 800170a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80016c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016c6:	d04a      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      ret = HAL_ERROR;
 80016c8:	2601      	movs	r6, #1
      status |= ret;
 80016ca:	4335      	orrs	r5, r6
 80016cc:	b2ed      	uxtb	r5, r5
 80016ce:	e026      	b.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80016d0:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80016d2:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80016d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016da:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 80016dc:	f7ff fd92 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80016e0:	4606      	mov	r6, r0
      break;
 80016e2:	e7db      	b.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80016e4:	4a75      	ldr	r2, [pc, #468]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80016e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80016ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80016f2:	f7ff fde1 	bl	80012b8 <RCCEx_PLL3_Config>
 80016f6:	e7f3      	b.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->Spi6ClockSelection)
 80016f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fc:	d005      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80016fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001702:	d002      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8001704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001708:	d1de      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    if(ret == HAL_OK)
 800170a:	2e00      	cmp	r6, #0
 800170c:	d1dd      	bne.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800170e:	4a6b      	ldr	r2, [pc, #428]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001710:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8001714:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001716:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800171a:	430b      	orrs	r3, r1
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	d511      	bpl.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch(PeriphClkInit->FdcanClockSelection)
 8001724:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800172a:	d02c      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800172c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001730:	d02f      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001732:	2b00      	cmp	r3, #0
 8001734:	d137      	bne.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if(ret == HAL_OK)
 8001736:	2e00      	cmp	r6, #0
 8001738:	d136      	bne.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800173a:	4a60      	ldr	r2, [pc, #384]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800173c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800173e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001740:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001744:	430b      	orrs	r3, r1
 8001746:	6513      	str	r3, [r2, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC)
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	d53d      	bpl.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->FmcClockSelection)
 800174e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001750:	2b03      	cmp	r3, #3
 8001752:	f200 8099 	bhi.w	8001888 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8001756:	e8df f003 	tbb	[pc, r3]
 800175a:	2a2f      	.short	0x2a2f
 800175c:	2f8d      	.short	0x2f8d
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800175e:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001760:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001762:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001768:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800176a:	f7ff fd4b 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800176e:	4606      	mov	r6, r0
      break;
 8001770:	e7cb      	b.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001772:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001774:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001778:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001780:	f7ff fd9a 	bl	80012b8 <RCCEx_PLL3_Config>
 8001784:	e7f3      	b.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x402>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8001786:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001788:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800178a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001790:	e7d1      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001792:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001794:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001796:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800179c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800179e:	f7ff fd31 	bl	8001204 <RCCEx_PLL2_Config>
 80017a2:	4606      	mov	r6, r0
      break;
 80017a4:	e7c7      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 80017a6:	2601      	movs	r6, #1
      status |= ret;
 80017a8:	4335      	orrs	r5, r6
 80017aa:	b2ed      	uxtb	r5, r5
 80017ac:	e7cc      	b.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017ae:	4a43      	ldr	r2, [pc, #268]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80017b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80017b8:	2e00      	cmp	r6, #0
 80017ba:	d166      	bne.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x51e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80017bc:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80017be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80017c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	430b      	orrs	r3, r1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	025f      	lsls	r7, r3, #9
 80017ce:	d542      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d0:	4f3b      	ldr	r7, [pc, #236]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80017da:	f7fe ffa5 	bl	8000728 <HAL_GetTick>
 80017de:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	05d8      	lsls	r0, r3, #23
 80017e4:	d554      	bpl.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if(ret == HAL_OK)
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	d159      	bne.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x532>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80017ec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80017f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017f2:	4042      	eors	r2, r0
 80017f4:	f412 7f40 	tst.w	r2, #768	; 0x300
 80017f8:	d00b      	beq.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80017fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001802:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001806:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001808:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800180a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800180e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001810:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001812:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001816:	d108      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x4be>
        tickstart = HAL_GetTick();
 8001818:	f7fe ff86 	bl	8000728 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4f27      	ldr	r7, [pc, #156]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
        tickstart = HAL_GetTick();
 800181e:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001826:	0799      	lsls	r1, r3, #30
 8001828:	d53c      	bpl.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x538>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800182a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800182e:	4923      	ldr	r1, [pc, #140]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001830:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001834:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001838:	d146      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 800183a:	6908      	ldr	r0, [r1, #16]
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800183e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001842:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001846:	4302      	orrs	r2, r0
 8001848:	610a      	str	r2, [r1, #16]
 800184a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184e:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8001850:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001852:	430b      	orrs	r3, r1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16)
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	07da      	lsls	r2, r3, #31
 800185a:	d548      	bpl.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    switch(PeriphClkInit->Usart16ClockSelection)
 800185c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800185e:	2b10      	cmp	r3, #16
 8001860:	d05a      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8001862:	d835      	bhi.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x564>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d039      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001868:	2b08      	cmp	r3, #8
 800186a:	d04b      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x598>
      ret = HAL_ERROR;
 800186c:	2601      	movs	r6, #1
      status |= ret;
 800186e:	4335      	orrs	r5, r6
 8001870:	b2ed      	uxtb	r5, r5
 8001872:	e03c      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x582>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x550>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001876:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001878:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001880:	f7ff fcc0 	bl	8001204 <RCCEx_PLL2_Config>
 8001884:	4606      	mov	r6, r0
      break;
 8001886:	e797      	b.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      ret = HAL_ERROR;
 8001888:	2601      	movs	r6, #1
      status |= ret;
 800188a:	4335      	orrs	r5, r6
 800188c:	b2ed      	uxtb	r5, r5
 800188e:	e79c      	b.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7fe ff4a 	bl	8000728 <HAL_GetTick>
 8001894:	eba0 0008 	sub.w	r0, r0, r8
 8001898:	2864      	cmp	r0, #100	; 0x64
 800189a:	d9a1      	bls.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        ret = HAL_TIMEOUT;
 800189c:	2603      	movs	r6, #3
      status |= ret;
 800189e:	4335      	orrs	r5, r6
 80018a0:	b2ed      	uxtb	r5, r5
 80018a2:	e7d8      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7fe ff40 	bl	8000728 <HAL_GetTick>
 80018a8:	eba0 0008 	sub.w	r0, r0, r8
 80018ac:	4548      	cmp	r0, r9
 80018ae:	d9b9      	bls.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        status |= ret;
 80018b0:	f045 0503 	orr.w	r5, r5, #3
            ret = HAL_TIMEOUT;
 80018b4:	2603      	movs	r6, #3
        status |= ret;
 80018b6:	b2ed      	uxtb	r5, r5
 80018b8:	e7cd      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80018ba:	bf00      	nop
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58024800 	.word	0x58024800
 80018c4:	00ffffcf 	.word	0x00ffffcf
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018c8:	690a      	ldr	r2, [r1, #16]
 80018ca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80018ce:	e7bb      	b.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    switch(PeriphClkInit->Usart16ClockSelection)
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d003      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80018d4:	2b28      	cmp	r3, #40	; 0x28
 80018d6:	d001      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80018d8:	2b18      	cmp	r3, #24
 80018da:	d1c7      	bne.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x500>
    if(ret == HAL_OK)
 80018dc:	2e00      	cmp	r6, #0
 80018de:	d1c6      	bne.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x502>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80018e0:	4a79      	ldr	r2, [pc, #484]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 80018e2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80018e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80018e6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80018ea:	430b      	orrs	r3, r1
 80018ec:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	079b      	lsls	r3, r3, #30
 80018f2:	d52c      	bpl.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80018f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d83f      	bhi.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80018fa:	e8df f003 	tbb	[pc, r3]
 80018fe:	1720      	.short	0x1720
 8001900:	20202034 	.word	0x20202034
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001904:	4a70      	ldr	r2, [pc, #448]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001906:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001908:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800190a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190e:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001910:	f7ff fc78 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001914:	4606      	mov	r6, r0
      break;
 8001916:	e7e1      	b.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001918:	4a6b      	ldr	r2, [pc, #428]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800191a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800191e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001924:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001926:	f7ff fcc7 	bl	80012b8 <RCCEx_PLL3_Config>
 800192a:	e7f3      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800192c:	4a66      	ldr	r2, [pc, #408]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800192e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001930:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001936:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001938:	f7ff fc64 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 800193c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800193e:	b9ee      	cbnz	r6, 800197c <HAL_RCCEx_PeriphCLKConfig+0x610>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001940:	4a61      	ldr	r2, [pc, #388]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8001942:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001944:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001946:	f023 0307 	bic.w	r3, r3, #7
 800194a:	430b      	orrs	r3, r1
 800194c:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	075f      	lsls	r7, r3, #29
 8001952:	d528      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001954:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001958:	2b05      	cmp	r3, #5
 800195a:	d83f      	bhi.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x670>
 800195c:	e8df f003 	tbb	[pc, r3]
 8001960:	1a34111a 	.word	0x1a34111a
 8001964:	1a1a      	.short	0x1a1a
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 8001966:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001968:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 800196c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800196e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001972:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001974:	f7ff fca0 	bl	80012b8 <RCCEx_PLL3_Config>
 8001978:	e7e0      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      ret = HAL_ERROR;
 800197a:	2601      	movs	r6, #1
      status |= ret;
 800197c:	4335      	orrs	r5, r6
 800197e:	b2ed      	uxtb	r5, r5
 8001980:	e7e5      	b.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001984:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001986:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800198c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 800198e:	f7ff fc39 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001992:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001994:	bb1e      	cbnz	r6, 80019de <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001996:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8001998:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800199c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800199e:	f023 0307 	bic.w	r3, r3, #7
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	0698      	lsls	r0, r3, #26
 80019aa:	d52e      	bpl.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x69e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80019ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80019b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b4:	d044      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80019b6:	d815      	bhi.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80019b8:	b1eb      	cbz	r3, 80019f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80019ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019be:	d035      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      ret = HAL_ERROR;
 80019c0:	2601      	movs	r6, #1
      status |= ret;
 80019c2:	4335      	orrs	r5, r6
 80019c4:	b2ed      	uxtb	r5, r5
 80019c6:	e020      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80019c8:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80019ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);  
 80019ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019d4:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 80019d6:	f7ff fc6f 	bl	80012b8 <RCCEx_PLL3_Config>
 80019da:	e7da      	b.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = HAL_ERROR;
 80019dc:	2601      	movs	r6, #1
      status |= ret;
 80019de:	4335      	orrs	r5, r6
 80019e0:	b2ed      	uxtb	r5, r5
 80019e2:	e7e0      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d005      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80019ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ee:	d002      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80019f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80019f4:	d1e4      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d1e3      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x656>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019fa:	4a33      	ldr	r2, [pc, #204]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 80019fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001a00:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001a02:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001a06:	430b      	orrs	r3, r1
 8001a08:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	0659      	lsls	r1, r3, #25
 8001a0e:	d534      	bpl.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001a10:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a18:	d04c      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8001a1a:	d81b      	bhi.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8001a1c:	b31b      	cbz	r3, 8001a66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d03d      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = HAL_ERROR;
 8001a24:	2601      	movs	r6, #1
      status |= ret;
 8001a26:	4335      	orrs	r5, r6
 8001a28:	b2ed      	uxtb	r5, r5
 8001a2a:	e026      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x70e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001a2e:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001a30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a36:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001a38:	f7ff fbe4 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001a3c:	4606      	mov	r6, r0
      break;
 8001a3e:	e7da      	b.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001a42:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001a46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001a4e:	f7ff fc33 	bl	80012b8 <RCCEx_PLL3_Config>
 8001a52:	e7f3      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a58:	d005      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8001a5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a5e:	d002      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8001a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a64:	d1de      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if(ret == HAL_OK)
 8001a66:	2e00      	cmp	r6, #0
 8001a68:	d1dd      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 8001a6c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8001a70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a76:	430b      	orrs	r3, r1
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	061a      	lsls	r2, r3, #24
 8001a7e:	d538      	bpl.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001a80:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a88:	f000 80aa 	beq.w	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8001a8c:	d81e      	bhi.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8001a8e:	b333      	cbz	r3, 8001ade <HAL_RCCEx_PeriphCLKConfig+0x772>
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	f000 809a 	beq.w	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x860>
      ret = HAL_ERROR;
 8001a98:	2601      	movs	r6, #1
      status |= ret;
 8001a9a:	4335      	orrs	r5, r6
 8001a9c:	b2ed      	uxtb	r5, r5
 8001a9e:	e028      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001aa2:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001aa4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001aac:	f7ff fbaa 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ab0:	4606      	mov	r6, r0
      break;
 8001ab2:	e7d8      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ab6:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001aba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001ac2:	f7ff fbf9 	bl	80012b8 <RCCEx_PLL3_Config>
 8001ac6:	e7f3      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8001ac8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d005      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x772>
 8001ad2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001ad6:	d002      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x772>
 8001ad8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001adc:	d1dc      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    if(ret == HAL_OK)
 8001ade:	2e00      	cmp	r6, #0
 8001ae0:	d1db      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x72e>
      __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001ae2:	4a98      	ldr	r2, [pc, #608]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001ae4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8001ae8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001aea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	071b      	lsls	r3, r3, #28
 8001af6:	d50d      	bpl.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001af8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001afc:	4f91      	ldr	r7, [pc, #580]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001afe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001b02:	d177      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b08:	f7ff fbd6 	bl	80012b8 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	06df      	lsls	r7, r3, #27
 8001b18:	d50d      	bpl.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001b1a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8001b1e:	4f89      	ldr	r7, [pc, #548]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001b20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001b24:	d16c      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x894>
      RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b2a:	f7ff fbc5 	bl	80012b8 <RCCEx_PLL3_Config>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	0318      	lsls	r0, r3, #12
 8001b3a:	d51c      	bpl.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    switch(PeriphClkInit->AdcClockSelection)
 8001b3c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d062      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8001b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b4a:	d00a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d167      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001b50:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b52:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001b54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001b5c:	f7ff fb52 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001b60:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b62:	2e00      	cmp	r6, #0
 8001b64:	d15d      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001b68:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8001b6c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	0359      	lsls	r1, r3, #13
 8001b7a:	d519      	bpl.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    switch(PeriphClkInit->UsbClockSelection)
 8001b7c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b84:	d050      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8001b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b90:	d155      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b92:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001b94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001b9c:	2e00      	cmp	r6, #0
 8001b9e:	d14f      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ba0:	4a68      	ldr	r2, [pc, #416]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001ba2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001ba6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001ba8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6553      	str	r3, [r2, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC)
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	03da      	lsls	r2, r3, #15
 8001bb4:	d555      	bpl.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001bb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d044      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	f000 80a5 	beq.w	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      ret = HAL_ERROR;
 8001bc4:	2601      	movs	r6, #1
      status |= ret;
 8001bc6:	4335      	orrs	r5, r6
 8001bc8:	b2ed      	uxtb	r5, r5
 8001bca:	e04a      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001bcc:	4a5d      	ldr	r2, [pc, #372]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001bce:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001bd0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001bd8:	f7ff fb14 	bl	8001204 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001bdc:	4606      	mov	r6, r0
      break;
 8001bde:	e77e      	b.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x772>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001be2:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001be6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bec:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001bee:	f7ff fb63 	bl	80012b8 <RCCEx_PLL3_Config>
 8001bf2:	e7f3      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8001bfe:	e789      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c06:	4313      	orrs	r3, r2
 8001c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c0a:	e794      	b.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001c12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c18:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c1a:	f7ff fb4d 	bl	80012b8 <RCCEx_PLL3_Config>
 8001c1e:	e79f      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = HAL_ERROR;
 8001c20:	2601      	movs	r6, #1
      status |= ret;
 8001c22:	4335      	orrs	r5, r6
 8001c24:	b2ed      	uxtb	r5, r5
 8001c26:	e7a6      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001c28:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001c2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c34:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c36:	f7ff fb3f 	bl	80012b8 <RCCEx_PLL3_Config>
 8001c3a:	4606      	mov	r6, r0
      break;
 8001c3c:	e7ae      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8001c3e:	2601      	movs	r6, #1
      status |= ret;
 8001c40:	4335      	orrs	r5, r6
 8001c42:	b2ed      	uxtb	r5, r5
 8001c44:	e7b4      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);        
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001c48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	d1b8      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8001c54:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001c56:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	d50a      	bpl.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x912>
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001c68:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);  
 8001c6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
 8001c76:	f7ff fb1f 	bl	80012b8 <RCCEx_PLL3_Config>
 8001c7a:	4305      	orrs	r5, r0
 8001c7c:	b2ed      	uxtb	r5, r5
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	039f      	lsls	r7, r3, #14
 8001c82:	d50e      	bpl.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x936>
    switch(PeriphClkInit->RngClockSelection)
 8001c84:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001c86:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001c8a:	d054      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8001c8c:	d849      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8001c8e:	2900      	cmp	r1, #0
 8001c90:	d14d      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    if(ret == HAL_OK)
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d14c      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001c98:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	6542      	str	r2, [r0, #84]	; 0x54
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1)
 8001ca2:	02de      	lsls	r6, r3, #11
 8001ca4:	d506      	bpl.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001ca8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001caa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001cac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1)
 8001cb4:	00d8      	lsls	r0, r3, #3
 8001cb6:	d507      	bpl.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001cb8:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001cba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8001cbe:	690a      	ldr	r2, [r1, #16]
 8001cc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cc4:	4302      	orrs	r2, r0
 8001cc6:	610a      	str	r2, [r1, #16]
  if((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8001cc8:	0299      	lsls	r1, r3, #10
 8001cca:	d506      	bpl.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x96e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ccc:	491d      	ldr	r1, [pc, #116]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001cce:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001cd0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001cd2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	650a      	str	r2, [r1, #80]	; 0x50
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_TIM))
 8001cda:	005a      	lsls	r2, r3, #1
 8001cdc:	d509      	bpl.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001ce0:	6911      	ldr	r1, [r2, #16]
 8001ce2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001ce6:	6111      	str	r1, [r2, #16]
 8001ce8:	6911      	ldr	r1, [r2, #16]
 8001cea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001cee:	4301      	orrs	r1, r0
 8001cf0:	6111      	str	r1, [r2, #16]
  if((PeriphClkInit->PeriphClockSelection) & (RCC_PERIPHCLK_CKPER))
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da06      	bge.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x998>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001cf8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001cfa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001cfc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001d00:	430b      	orrs	r3, r1
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	1c28      	adds	r0, r5, #0
 8001d06:	bf18      	it	ne
 8001d08:	2001      	movne	r0, #1
}
 8001d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d10:	1d20      	adds	r0, r4, #4
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d18:	62d3      	str	r3, [r2, #44]	; 0x2c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2));
 8001d1a:	f7ff fa73 	bl	8001204 <RCCEx_PLL2_Config>
 8001d1e:	4606      	mov	r6, r0
      break;
 8001d20:	e796      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    switch(PeriphClkInit->RngClockSelection)
 8001d22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d26:	d0b4      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8001d28:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001d2c:	d0b1      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x926>
      ret = HAL_ERROR;
 8001d2e:	2601      	movs	r6, #1
      status |= ret;
 8001d30:	4335      	orrs	r5, r6
 8001d32:	b2ed      	uxtb	r5, r5
 8001d34:	e7b5      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8001d38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d3e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8001d40:	e7a7      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8001d42:	bf00      	nop
 8001d44:	58024400 	.word	0x58024400

08001d48 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8001d48:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8001d4a:	f7ff fa15 	bl	8001178 <HAL_RCC_GetHCLKFreq>
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8001d50:	2210      	movs	r2, #16
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d60:	40d3      	lsrs	r3, r2
 8001d62:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d66:	40d8      	lsrs	r0, r3
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	08003d4e 	.word	0x08003d4e

08001d74 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8001d74:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d76:	4c4a      	ldr	r4, [pc, #296]	; (8001ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001d78:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8001d7c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001d7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001d84:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001d88:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d8c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001d90:	4353      	muls	r3, r2
 8001d92:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d96:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001d9a:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d9c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001da0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001da4:	d002      	beq.n	8001dac <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 8001da6:	d30e      	bcc.n	8001dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d068      	beq.n	8001e7e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8001db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db4:	ee07 3a10 	vmov	s14, r3
 8001db8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dbc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc4:	e067      	b.n	8001e96 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8001dca:	f013 0f20 	tst.w	r3, #32
 8001dce:	d042      	beq.n	8001e56 <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dd0:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dd4:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ddc:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dde:	fbb2 f2f1 	udiv	r2, r2, r1
 8001de2:	ee07 2a10 	vmov	s14, r2
 8001de6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001dea:	ee07 3a10 	vmov	s14, r3
 8001dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001df2:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8001dfe:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001e00:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e02:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001e06:	3301      	adds	r3, #1
 8001e08:	ee07 3a10 	vmov	s14, r3
 8001e0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e14:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e18:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8001e1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e1e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001e22:	3301      	adds	r3, #1
 8001e24:	ee07 3a10 	vmov	s14, r3
 8001e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e30:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e34:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8001e38:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e3a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001e3e:	3301      	adds	r3, #1
 8001e40:	ee07 3a10 	vmov	s14, r3
 8001e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e4c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e50:	edc0 6a02 	vstr	s13, [r0, #8]
 8001e54:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5c:	ee07 3a10 	vmov	s14, r3
 8001e60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e64:	fbb2 f3f1 	udiv	r3, r2, r1
 8001e68:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e70:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001e7c:	e7bf      	b.n	8001dfe <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8001e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e86:	ee07 3a10 	vmov	s14, r3
 8001e8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e8e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e92:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e96:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e9a:	ee07 2a90 	vmov	s15, r2
 8001e9e:	e7e9      	b.n	8001e74 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	39000000 	.word	0x39000000
 8001ea8:	003d0900 	.word	0x003d0900
 8001eac:	03d09000 	.word	0x03d09000
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8001eb4:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eb6:	4c4a      	ldr	r4, [pc, #296]	; (8001fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001eb8:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8001ebc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001ebe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001ec2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001ec4:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001ecc:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001ed0:	4353      	muls	r3, r2
 8001ed2:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed6:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001eda:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001edc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001ee0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001ee4:	d002      	beq.n	8001eec <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8001ee6:	d30e      	bcc.n	8001f06 <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d068      	beq.n	8001fbe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eee:	4a3e      	ldr	r2, [pc, #248]	; (8001fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8001ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef4:	ee07 3a10 	vmov	s14, r3
 8001ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001efc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	e067      	b.n	8001fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8001f0a:	f013 0f20 	tst.w	r3, #32
 8001f0e:	d042      	beq.n	8001f96 <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f10:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f14:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f1c:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f1e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f22:	ee07 2a10 	vmov	s14, r2
 8001f26:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001f2a:	ee07 3a10 	vmov	s14, r3
 8001f2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f32:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3a:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001f40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f42:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001f46:	3301      	adds	r3, #1
 8001f48:	ee07 3a10 	vmov	s14, r3
 8001f4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f54:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f58:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8001f5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f5e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001f62:	3301      	adds	r3, #1
 8001f64:	ee07 3a10 	vmov	s14, r3
 8001f68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f70:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f74:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8001f78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f7a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001f7e:	3301      	adds	r3, #1
 8001f80:	ee07 3a10 	vmov	s14, r3
 8001f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f90:	edc0 6a02 	vstr	s13, [r0, #8]
 8001f94:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9c:	ee07 3a10 	vmov	s14, r3
 8001fa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fa4:	fbb2 f3f1 	udiv	r3, r2, r1
 8001fa8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb0:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001fbc:	e7bf      	b.n	8001f3e <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	ee07 3a10 	vmov	s14, r3
 8001fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fce:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001fd6:	fbb2 f2f1 	udiv	r2, r2, r1
 8001fda:	ee07 2a90 	vmov	s15, r2
 8001fde:	e7e9      	b.n	8001fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	39000000 	.word	0x39000000
 8001fe8:	003d0900 	.word	0x003d0900
 8001fec:	03d09000 	.word	0x03d09000
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8001ff4:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001ff6:	f7fe ff49 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8001ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800200e:	40d3      	lsrs	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	40d8      	lsrs	r0, r3
 8002016:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002018:	6018      	str	r0, [r3, #0]
}
 800201a:	bd08      	pop	{r3, pc}
 800201c:	58024400 	.word	0x58024400
 8002020:	08003d4e 	.word	0x08003d4e
 8002024:	20000108 	.word	0x20000108

08002028 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002028:	6802      	ldr	r2, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 800202a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800202c:	68d3      	ldr	r3, [r2, #12]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002034:	8813      	ldrh	r3, [r2, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	8013      	strh	r3, [r2, #0]
}
 800203e:	4770      	bx	lr

08002040 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 8002042:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8002046:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002048:	d012      	beq.n	8002070 <TIM_Base_SetConfig+0x30>
 800204a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800204e:	d00f      	beq.n	8002070 <TIM_Base_SetConfig+0x30>
 8002050:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002054:	4290      	cmp	r0, r2
 8002056:	d00b      	beq.n	8002070 <TIM_Base_SetConfig+0x30>
 8002058:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800205c:	4290      	cmp	r0, r2
 800205e:	d007      	beq.n	8002070 <TIM_Base_SetConfig+0x30>
 8002060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002064:	4290      	cmp	r0, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0x30>
 8002068:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800206c:	4290      	cmp	r0, r2
 800206e:	d119      	bne.n	80020a4 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002070:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002076:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <TIM_Base_SetConfig+0xc8>)
 800207a:	4290      	cmp	r0, r2
 800207c:	d01d      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 800207e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002082:	d01a      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 8002084:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002088:	4290      	cmp	r0, r2
 800208a:	d016      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 800208c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002090:	4290      	cmp	r0, r2
 8002092:	d012      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 8002094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002098:	4290      	cmp	r0, r2
 800209a:	d00e      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 800209c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020a0:	4290      	cmp	r0, r2
 80020a2:	d00a      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <TIM_Base_SetConfig+0xcc>)
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d007      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 80020aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0x7a>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d103      	bne.n	80020c2 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	68ca      	ldr	r2, [r1, #12]
 80020c0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c2:	694a      	ldr	r2, [r1, #20]
 80020c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ce:	688b      	ldr	r3, [r1, #8]
 80020d0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020d2:	880b      	ldrh	r3, [r1, #0]
 80020d4:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <TIM_Base_SetConfig+0xc8>)
 80020d8:	4298      	cmp	r0, r3
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0xbc>
 80020dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e0:	4298      	cmp	r0, r3
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0xbc>
 80020e4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80020e8:	4298      	cmp	r0, r3
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0xbc>
 80020ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xbc>
 80020f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d101      	bne.n	8002100 <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	8a0b      	ldrh	r3, [r1, #16]
 80020fe:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	2301      	movs	r3, #1
 8002102:	6143      	str	r3, [r0, #20]
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40014000 	.word	0x40014000

08002110 <HAL_TIM_Base_Init>:
{ 
 8002110:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002112:	4604      	mov	r4, r0
 8002114:	b1a0      	cbz	r0, 8002140 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002116:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800211a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800211e:	b91b      	cbnz	r3, 8002128 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002120:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002124:	f000 fe9a 	bl	8002e5c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002128:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800212a:	6820      	ldr	r0, [r4, #0]
 800212c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800212e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002132:	f7ff ff85 	bl	8002040 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002136:	2301      	movs	r3, #1
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800213a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800213e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
}
 8002142:	bd10      	pop	{r4, pc}

08002144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002144:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002146:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002148:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800214a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002152:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002154:	6083      	str	r3, [r0, #8]
 8002156:	bd10      	pop	{r4, pc}

08002158 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002158:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800215c:	2b01      	cmp	r3, #1
{
 800215e:	b570      	push	{r4, r5, r6, lr}
 8002160:	4604      	mov	r4, r0
 8002162:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002166:	d01a      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800216c:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800216e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002170:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002174:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002176:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_TIM_ConfigClockSource+0x184>)
 8002178:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800217a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800217c:	680b      	ldr	r3, [r1, #0]
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d07b      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x122>
 8002182:	d81a      	bhi.n	80021ba <HAL_TIM_ConfigClockSource+0x62>
 8002184:	2b10      	cmp	r3, #16
 8002186:	f000 8099 	beq.w	80022bc <HAL_TIM_ConfigClockSource+0x164>
 800218a:	d809      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x48>
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 808d 	beq.w	80022ac <HAL_TIM_ConfigClockSource+0x154>
  htim->State = HAL_TIM_STATE_READY;
 8002192:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002194:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800219a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800219e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f000 8093 	beq.w	80022cc <HAL_TIM_ConfigClockSource+0x174>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d1f3      	bne.n	8002192 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80021aa:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021b4:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80021b8:	e035      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 80021ba:	2b70      	cmp	r3, #112	; 0x70
 80021bc:	d035      	beq.n	800222a <HAL_TIM_ConfigClockSource+0xd2>
 80021be:	d81d      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0xa4>
 80021c0:	2b50      	cmp	r3, #80	; 0x50
 80021c2:	d041      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xf0>
 80021c4:	2b60      	cmp	r3, #96	; 0x60
 80021c6:	d1e4      	bne.n	8002192 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80021c8:	684d      	ldr	r5, [r1, #4]
 80021ca:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021cc:	6a01      	ldr	r1, [r0, #32]
 80021ce:	f021 0110 	bic.w	r1, r1, #16
 80021d2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80021d6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 80021e0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 80021e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80021e8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021ea:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80021ec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021f6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80021fa:	e014      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
  switch (sClockSourceConfig->ClockSource)
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d00c      	beq.n	800221c <HAL_TIM_ConfigClockSource+0xc4>
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d1c4      	bne.n	8002192 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002208:	68cb      	ldr	r3, [r1, #12]
 800220a:	684a      	ldr	r2, [r1, #4]
 800220c:	6889      	ldr	r1, [r1, #8]
 800220e:	f7ff ff99 	bl	8002144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	6893      	ldr	r3, [r2, #8]
 8002216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221a:	e013      	b.n	8002244 <HAL_TIM_ConfigClockSource+0xec>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800221c:	6883      	ldr	r3, [r0, #8]
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002226:	6083      	str	r3, [r0, #8]
 8002228:	e7b3      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800222a:	68cb      	ldr	r3, [r1, #12]
 800222c:	684a      	ldr	r2, [r1, #4]
 800222e:	6889      	ldr	r1, [r1, #8]
 8002230:	f7ff ff88 	bl	8002144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002238:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800223c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002244:	6093      	str	r3, [r2, #8]
    break;
 8002246:	e7a4      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002248:	684a      	ldr	r2, [r1, #4]
 800224a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800224c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002250:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002254:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002258:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800225a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800225c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800225e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002262:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002266:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002268:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800226a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800226c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002274:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002278:	e7d5      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800227a:	684a      	ldr	r2, [r1, #4]
 800227c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800227e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002280:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002282:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002286:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800228a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800228e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002294:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002298:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800229a:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800229c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800229e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022a6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80022aa:	e7bc      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
   tmpsmcr = TIMx->SMCR;
 80022ac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022b6:	f043 0307 	orr.w	r3, r3, #7
 80022ba:	e7b4      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
   tmpsmcr = TIMx->SMCR;
 80022bc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022c6:	f043 0317 	orr.w	r3, r3, #23
 80022ca:	e7ac      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
   tmpsmcr = TIMx->SMCR;
 80022cc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022d6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80022da:	e7a4      	b.n	8002226 <HAL_TIM_ConfigClockSource+0xce>
 80022dc:	ffce0088 	.word	0xffce0088

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022e4:	2b01      	cmp	r3, #1
{
 80022e6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80022e8:	d01c      	beq.n	8002324 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ea:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022ec:	4d0e      	ldr	r5, [pc, #56]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80022ee:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022f0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80022f2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022f4:	d003      	beq.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80022f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022fa:	42aa      	cmp	r2, r5
 80022fc:	d103      	bne.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002302:	684d      	ldr	r5, [r1, #4]
 8002304:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002306:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800230c:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800230e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002312:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002314:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002316:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002318:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800231a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800231c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002320:	4618      	mov	r0, r3
 8002322:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002324:	2002      	movs	r0, #2
} 
 8002326:	bd30      	pop	{r4, r5, pc}
 8002328:	40010000 	.word	0x40010000

0800232c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800232c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002330:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002332:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 8002334:	6805      	ldr	r5, [r0, #0]
{
 8002336:	b087      	sub	sp, #28
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002338:	68a3      	ldr	r3, [r4, #8]
 800233a:	6922      	ldr	r2, [r4, #16]
 800233c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800233e:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002340:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002342:	4313      	orrs	r3, r2
 8002344:	6962      	ldr	r2, [r4, #20]
 8002346:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002348:	4ab3      	ldr	r2, [pc, #716]	; (8002618 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800234a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800234c:	4032      	ands	r2, r6
 800234e:	4313      	orrs	r3, r2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002350:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002352:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	686b      	ldr	r3, [r5, #4]
 8002356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800235a:	4313      	orrs	r3, r2
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800235c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235e:	606b      	str	r3, [r5, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002360:	4bae      	ldr	r3, [pc, #696]	; (800261c <UART_SetConfig+0x2f0>)
 8002362:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002364:	bf1c      	itt	ne
 8002366:	6a23      	ldrne	r3, [r4, #32]
 8002368:	431a      	orrne	r2, r3
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800236a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800236e:	bf02      	ittt	eq
 8002370:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 8002372:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8002374:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002376:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002378:	bf08      	it	eq
 800237a:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800237c:	68ab      	ldr	r3, [r5, #8]
 800237e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002382:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002386:	4313      	orrs	r3, r2
 8002388:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 800238a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800238c:	f023 030f 	bic.w	r3, r3, #15
 8002390:	430b      	orrs	r3, r1
 8002392:	62eb      	str	r3, [r5, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002394:	4ba2      	ldr	r3, [pc, #648]	; (8002620 <UART_SetConfig+0x2f4>)
 8002396:	429d      	cmp	r5, r3
 8002398:	d11c      	bne.n	80023d4 <UART_SetConfig+0xa8>
 800239a:	4ba2      	ldr	r3, [pc, #648]	; (8002624 <UART_SetConfig+0x2f8>)
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a2:	2b28      	cmp	r3, #40	; 0x28
 80023a4:	f200 825e 	bhi.w	8002864 <UART_SetConfig+0x538>
 80023a8:	4a9f      	ldr	r2, [pc, #636]	; (8002628 <UART_SetConfig+0x2fc>)
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	f040 81e6 	bne.w	8002780 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	f000 81ba 	beq.w	800272e <UART_SetConfig+0x402>
 80023ba:	f200 816e 	bhi.w	800269a <UART_SetConfig+0x36e>
 80023be:	2b01      	cmp	r3, #1
 80023c0:	f000 8197 	beq.w	80026f2 <UART_SetConfig+0x3c6>
 80023c4:	f0c0 817d 	bcc.w	80026c2 <UART_SetConfig+0x396>
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	f000 8195 	beq.w	80026f8 <UART_SetConfig+0x3cc>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 80023d0:	2200      	movs	r2, #0
 80023d2:	e186      	b.n	80026e2 <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023d4:	4b95      	ldr	r3, [pc, #596]	; (800262c <UART_SetConfig+0x300>)
 80023d6:	429d      	cmp	r5, r3
 80023d8:	d108      	bne.n	80023ec <UART_SetConfig+0xc0>
 80023da:	4b92      	ldr	r3, [pc, #584]	; (8002624 <UART_SetConfig+0x2f8>)
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	f200 823e 	bhi.w	8002864 <UART_SetConfig+0x538>
 80023e8:	4a91      	ldr	r2, [pc, #580]	; (8002630 <UART_SetConfig+0x304>)
 80023ea:	e7de      	b.n	80023aa <UART_SetConfig+0x7e>
 80023ec:	4b91      	ldr	r3, [pc, #580]	; (8002634 <UART_SetConfig+0x308>)
 80023ee:	429d      	cmp	r5, r3
 80023f0:	d108      	bne.n	8002404 <UART_SetConfig+0xd8>
 80023f2:	4b8c      	ldr	r3, [pc, #560]	; (8002624 <UART_SetConfig+0x2f8>)
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	f200 8232 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002400:	4a8d      	ldr	r2, [pc, #564]	; (8002638 <UART_SetConfig+0x30c>)
 8002402:	e7d2      	b.n	80023aa <UART_SetConfig+0x7e>
 8002404:	4b8d      	ldr	r3, [pc, #564]	; (800263c <UART_SetConfig+0x310>)
 8002406:	429d      	cmp	r5, r3
 8002408:	d108      	bne.n	800241c <UART_SetConfig+0xf0>
 800240a:	4b86      	ldr	r3, [pc, #536]	; (8002624 <UART_SetConfig+0x2f8>)
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	2b05      	cmp	r3, #5
 8002414:	f200 8226 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002418:	4a89      	ldr	r2, [pc, #548]	; (8002640 <UART_SetConfig+0x314>)
 800241a:	e7c6      	b.n	80023aa <UART_SetConfig+0x7e>
 800241c:	4b89      	ldr	r3, [pc, #548]	; (8002644 <UART_SetConfig+0x318>)
 800241e:	429d      	cmp	r5, r3
 8002420:	d108      	bne.n	8002434 <UART_SetConfig+0x108>
 8002422:	4b80      	ldr	r3, [pc, #512]	; (8002624 <UART_SetConfig+0x2f8>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	2b05      	cmp	r3, #5
 800242c:	f200 821a 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002430:	4a85      	ldr	r2, [pc, #532]	; (8002648 <UART_SetConfig+0x31c>)
 8002432:	e7ba      	b.n	80023aa <UART_SetConfig+0x7e>
 8002434:	4b85      	ldr	r3, [pc, #532]	; (800264c <UART_SetConfig+0x320>)
 8002436:	429d      	cmp	r5, r3
 8002438:	d108      	bne.n	800244c <UART_SetConfig+0x120>
 800243a:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <UART_SetConfig+0x2f8>)
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002442:	2b28      	cmp	r3, #40	; 0x28
 8002444:	f200 820e 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002448:	4a81      	ldr	r2, [pc, #516]	; (8002650 <UART_SetConfig+0x324>)
 800244a:	e7ae      	b.n	80023aa <UART_SetConfig+0x7e>
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <UART_SetConfig+0x328>)
 800244e:	429d      	cmp	r5, r3
 8002450:	d108      	bne.n	8002464 <UART_SetConfig+0x138>
 8002452:	4b74      	ldr	r3, [pc, #464]	; (8002624 <UART_SetConfig+0x2f8>)
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2b05      	cmp	r3, #5
 800245c:	f200 8202 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002460:	4a7d      	ldr	r2, [pc, #500]	; (8002658 <UART_SetConfig+0x32c>)
 8002462:	e7a2      	b.n	80023aa <UART_SetConfig+0x7e>
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <UART_SetConfig+0x330>)
 8002466:	429d      	cmp	r5, r3
 8002468:	d108      	bne.n	800247c <UART_SetConfig+0x150>
 800246a:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <UART_SetConfig+0x2f8>)
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	2b05      	cmp	r3, #5
 8002474:	f200 81f6 	bhi.w	8002864 <UART_SetConfig+0x538>
 8002478:	4a79      	ldr	r2, [pc, #484]	; (8002660 <UART_SetConfig+0x334>)
 800247a:	e796      	b.n	80023aa <UART_SetConfig+0x7e>
 800247c:	4b67      	ldr	r3, [pc, #412]	; (800261c <UART_SetConfig+0x2f0>)
 800247e:	429d      	cmp	r5, r3
 8002480:	f040 81f0 	bne.w	8002864 <UART_SetConfig+0x538>
 8002484:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800248a:	f002 0207 	and.w	r2, r2, #7
 800248e:	2a05      	cmp	r2, #5
 8002490:	d901      	bls.n	8002496 <UART_SetConfig+0x16a>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
      break;
    }
  }

  return ret;
 8002494:	e080      	b.n	8002598 <UART_SetConfig+0x26c>
 8002496:	4973      	ldr	r1, [pc, #460]	; (8002664 <UART_SetConfig+0x338>)
 8002498:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 800249a:	2d08      	cmp	r5, #8
 800249c:	d02f      	beq.n	80024fe <UART_SetConfig+0x1d2>
 800249e:	d808      	bhi.n	80024b2 <UART_SetConfig+0x186>
 80024a0:	2d02      	cmp	r5, #2
 80024a2:	d021      	beq.n	80024e8 <UART_SetConfig+0x1bc>
 80024a4:	2d04      	cmp	r5, #4
 80024a6:	d1f4      	bne.n	8002492 <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80024a8:	4668      	mov	r0, sp
 80024aa:	f7ff fc63 	bl	8001d74 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 80024ae:	9801      	ldr	r0, [sp, #4]
      break;
 80024b0:	e01c      	b.n	80024ec <UART_SetConfig+0x1c0>
    switch (clocksource)
 80024b2:	2d20      	cmp	r5, #32
 80024b4:	d005      	beq.n	80024c2 <UART_SetConfig+0x196>
 80024b6:	2d40      	cmp	r5, #64	; 0x40
 80024b8:	d01c      	beq.n	80024f4 <UART_SetConfig+0x1c8>
 80024ba:	2d10      	cmp	r5, #16
 80024bc:	d1e9      	bne.n	8002492 <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 80024be:	486a      	ldr	r0, [pc, #424]	; (8002668 <UART_SetConfig+0x33c>)
 80024c0:	e001      	b.n	80024c6 <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 80024c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80024c6:	6866      	ldr	r6, [r4, #4]
 80024c8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80024cc:	4283      	cmp	r3, r0
 80024ce:	d8e0      	bhi.n	8002492 <UART_SetConfig+0x166>
 80024d0:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 80024d4:	d8dd      	bhi.n	8002492 <UART_SetConfig+0x166>
        switch (clocksource)
 80024d6:	2d08      	cmp	r5, #8
 80024d8:	d078      	beq.n	80025cc <UART_SetConfig+0x2a0>
 80024da:	d81a      	bhi.n	8002512 <UART_SetConfig+0x1e6>
 80024dc:	2d02      	cmp	r5, #2
 80024de:	d038      	beq.n	8002552 <UART_SetConfig+0x226>
 80024e0:	2d04      	cmp	r5, #4
 80024e2:	d05d      	beq.n	80025a0 <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04f      	b.n	8002588 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 80024e8:	f7ff fc2e 	bl	8001d48 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d1ea      	bne.n	80024c6 <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f0:	2300      	movs	r3, #0
      break;
 80024f2:	e051      	b.n	8002598 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80024f4:	a803      	add	r0, sp, #12
 80024f6:	f7ff fcdd 	bl	8001eb4 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 80024fa:	9804      	ldr	r0, [sp, #16]
      break;
 80024fc:	e7f6      	b.n	80024ec <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	485a      	ldr	r0, [pc, #360]	; (800266c <UART_SetConfig+0x340>)
 8002502:	f012 0f20 	tst.w	r2, #32
 8002506:	d0de      	beq.n	80024c6 <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800250e:	40d8      	lsrs	r0, r3
 8002510:	e7d9      	b.n	80024c6 <UART_SetConfig+0x19a>
        switch (clocksource)
 8002512:	2d20      	cmp	r5, #32
 8002514:	f000 80b0 	beq.w	8002678 <UART_SetConfig+0x34c>
 8002518:	2d40      	cmp	r5, #64	; 0x40
 800251a:	d04c      	beq.n	80025b6 <UART_SetConfig+0x28a>
 800251c:	2d10      	cmp	r5, #16
 800251e:	d1e1      	bne.n	80024e4 <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <UART_SetConfig+0x344>)
 8002522:	2100      	movs	r1, #0
 8002524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002526:	4850      	ldr	r0, [pc, #320]	; (8002668 <UART_SetConfig+0x33c>)
 8002528:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800252c:	2300      	movs	r3, #0
 800252e:	f7fd ff33 	bl	8000398 <__aeabi_uldivmod>
 8002532:	4632      	mov	r2, r6
 8002534:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002538:	2300      	movs	r3, #0
 800253a:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800253e:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002542:	0870      	lsrs	r0, r6, #1
 8002544:	eb18 0500 	adds.w	r5, r8, r0
 8002548:	f149 0600 	adc.w	r6, r9, #0
 800254c:	4628      	mov	r0, r5
 800254e:	4631      	mov	r1, r6
 8002550:	e017      	b.n	8002582 <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002552:	f7ff fbf9 	bl	8001d48 <HAL_RCCEx_GetD3PCLK1Freq>
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <UART_SetConfig+0x344>)
 8002558:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800255a:	6865      	ldr	r5, [r4, #4]
 800255c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002560:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002562:	2100      	movs	r1, #0
 8002564:	f7fd ff18 	bl	8000398 <__aeabi_uldivmod>
 8002568:	462a      	mov	r2, r5
 800256a:	020f      	lsls	r7, r1, #8
 800256c:	2300      	movs	r3, #0
 800256e:	0206      	lsls	r6, r0, #8
 8002570:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002574:	0868      	lsrs	r0, r5, #1
 8002576:	eb16 0800 	adds.w	r8, r6, r0
 800257a:	f147 0900 	adc.w	r9, r7, #0
 800257e:	4640      	mov	r0, r8
 8002580:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002582:	f7fd ff09 	bl	8000398 <__aeabi_uldivmod>
          break;
 8002586:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002588:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800258c:	4a39      	ldr	r2, [pc, #228]	; (8002674 <UART_SetConfig+0x348>)
 800258e:	4291      	cmp	r1, r2
 8002590:	f63f af7f 	bhi.w	8002492 <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 8002594:	6822      	ldr	r2, [r4, #0]
 8002596:	60d0      	str	r0, [r2, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	b007      	add	sp, #28
 800259c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80025a0:	4668      	mov	r0, sp
 80025a2:	f7ff fbe7 	bl	8001d74 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <UART_SetConfig+0x344>)
 80025a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025aa:	6865      	ldr	r5, [r4, #4]
 80025ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9801      	ldr	r0, [sp, #4]
 80025b4:	e7d5      	b.n	8002562 <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80025b6:	a803      	add	r0, sp, #12
 80025b8:	f7ff fc7c 	bl	8001eb4 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <UART_SetConfig+0x344>)
 80025be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025c0:	6865      	ldr	r5, [r4, #4]
 80025c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9804      	ldr	r0, [sp, #16]
 80025ca:	e7ca      	b.n	8002562 <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025cc:	4915      	ldr	r1, [pc, #84]	; (8002624 <UART_SetConfig+0x2f8>)
 80025ce:	0877      	lsrs	r7, r6, #1
 80025d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025d2:	680d      	ldr	r5, [r1, #0]
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <UART_SetConfig+0x344>)
 80025d6:	f015 0520 	ands.w	r5, r5, #32
 80025da:	d017      	beq.n	800260c <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80025dc:	6809      	ldr	r1, [r1, #0]
 80025de:	4823      	ldr	r0, [pc, #140]	; (800266c <UART_SetConfig+0x340>)
 80025e0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80025e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80025e8:	2300      	movs	r3, #0
 80025ea:	40c8      	lsrs	r0, r1
 80025ec:	2100      	movs	r1, #0
 80025ee:	f7fd fed3 	bl	8000398 <__aeabi_uldivmod>
 80025f2:	4632      	mov	r2, r6
 80025f4:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80025f8:	2300      	movs	r3, #0
 80025fa:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80025fe:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002602:	eb18 0007 	adds.w	r0, r8, r7
 8002606:	f149 0100 	adc.w	r1, r9, #0
 800260a:	e7ba      	b.n	8002582 <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800260c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002610:	2300      	movs	r3, #0
 8002612:	4816      	ldr	r0, [pc, #88]	; (800266c <UART_SetConfig+0x340>)
 8002614:	e7ea      	b.n	80025ec <UART_SetConfig+0x2c0>
 8002616:	bf00      	nop
 8002618:	cfff69f3 	.word	0xcfff69f3
 800261c:	58000c00 	.word	0x58000c00
 8002620:	40011000 	.word	0x40011000
 8002624:	58024400 	.word	0x58024400
 8002628:	08003d00 	.word	0x08003d00
 800262c:	40004400 	.word	0x40004400
 8002630:	08003d29 	.word	0x08003d29
 8002634:	40004800 	.word	0x40004800
 8002638:	08003d29 	.word	0x08003d29
 800263c:	40004c00 	.word	0x40004c00
 8002640:	08003d29 	.word	0x08003d29
 8002644:	40005000 	.word	0x40005000
 8002648:	08003d29 	.word	0x08003d29
 800264c:	40011400 	.word	0x40011400
 8002650:	08003d00 	.word	0x08003d00
 8002654:	40007800 	.word	0x40007800
 8002658:	08003d29 	.word	0x08003d29
 800265c:	40007c00 	.word	0x40007c00
 8002660:	08003d29 	.word	0x08003d29
 8002664:	08003d2f 	.word	0x08003d2f
 8002668:	003d0900 	.word	0x003d0900
 800266c:	03d09000 	.word	0x03d09000
 8002670:	08003d36 	.word	0x08003d36
 8002674:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002678:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800267a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <UART_SetConfig+0x544>)
 8002680:	0870      	lsrs	r0, r6, #1
 8002682:	2100      	movs	r1, #0
 8002684:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002688:	4632      	mov	r2, r6
 800268a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800268e:	fbb5 f5f3 	udiv	r5, r5, r3
 8002692:	2300      	movs	r3, #0
 8002694:	fbe5 0106 	umlal	r0, r1, r5, r6
 8002698:	e773      	b.n	8002582 <UART_SetConfig+0x256>
    switch (clocksource)
 800269a:	2b20      	cmp	r3, #32
 800269c:	d068      	beq.n	8002770 <UART_SetConfig+0x444>
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d03b      	beq.n	800271a <UART_SetConfig+0x3ee>
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	f47f ae93 	bne.w	80023ce <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80026a8:	4b71      	ldr	r3, [pc, #452]	; (8002870 <UART_SetConfig+0x544>)
 80026aa:	4a72      	ldr	r2, [pc, #456]	; (8002874 <UART_SetConfig+0x548>)
 80026ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80026b0:	6860      	ldr	r0, [r4, #4]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	0842      	lsrs	r2, r0, #1
 80026b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80026bc:	fbb2 f2f0 	udiv	r2, r2, r0
 80026c0:	e00d      	b.n	80026de <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80026c2:	f7fe fd73 	bl	80011ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80026c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026c8:	4a69      	ldr	r2, [pc, #420]	; (8002870 <UART_SetConfig+0x544>)
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80026d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80026d4:	085a      	lsrs	r2, r3, #1
 80026d6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80026da:	fbb2 f2f3 	udiv	r2, r2, r3
 80026de:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80026e0:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 80026e2:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026e6:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60c2      	str	r2, [r0, #12]
 80026f0:	e752      	b.n	8002598 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80026f2:	f7fe fd71 	bl	80011d8 <HAL_RCC_GetPCLK2Freq>
 80026f6:	e7e6      	b.n	80026c6 <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80026f8:	4668      	mov	r0, sp
 80026fa:	f7ff fb3b 	bl	8001d74 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <UART_SetConfig+0x544>)
 8002700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002702:	6861      	ldr	r1, [r4, #4]
 8002704:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002708:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800270a:	fbb3 f3f2 	udiv	r3, r3, r2
 800270e:	084a      	lsrs	r2, r1, #1
 8002710:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002714:	fbb2 f2f1 	udiv	r2, r2, r1
 8002718:	e7e1      	b.n	80026de <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800271a:	a803      	add	r0, sp, #12
 800271c:	f7ff fbca 	bl	8001eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <UART_SetConfig+0x544>)
 8002722:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002724:	6861      	ldr	r1, [r4, #4]
 8002726:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800272a:	9b04      	ldr	r3, [sp, #16]
 800272c:	e7ed      	b.n	800270a <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800272e:	4a52      	ldr	r2, [pc, #328]	; (8002878 <UART_SetConfig+0x54c>)
 8002730:	4852      	ldr	r0, [pc, #328]	; (800287c <UART_SetConfig+0x550>)
 8002732:	6813      	ldr	r3, [r2, #0]
 8002734:	6865      	ldr	r5, [r4, #4]
 8002736:	f013 0320 	ands.w	r3, r3, #32
 800273a:	4e4d      	ldr	r6, [pc, #308]	; (8002870 <UART_SetConfig+0x544>)
 800273c:	d00d      	beq.n	800275a <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002744:	40d0      	lsrs	r0, r2
 8002746:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 800274a:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800274e:	086a      	lsrs	r2, r5, #1
 8002750:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002754:	fbb2 f2f5 	udiv	r2, r2, r5
 8002758:	e7c1      	b.n	80026de <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800275a:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 800275e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002762:	086a      	lsrs	r2, r5, #1
 8002764:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002768:	fbb2 f2f5 	udiv	r2, r2, r5
 800276c:	b292      	uxth	r2, r2
 800276e:	e7b8      	b.n	80026e2 <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <UART_SetConfig+0x544>)
 8002772:	6865      	ldr	r5, [r4, #4]
 8002774:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002778:	fbb0 f0f3 	udiv	r0, r0, r3
 800277c:	b280      	uxth	r0, r0
 800277e:	e7e6      	b.n	800274e <UART_SetConfig+0x422>
    switch (clocksource)
 8002780:	2b08      	cmp	r3, #8
 8002782:	d046      	beq.n	8002812 <UART_SetConfig+0x4e6>
 8002784:	d818      	bhi.n	80027b8 <UART_SetConfig+0x48c>
 8002786:	2b01      	cmp	r3, #1
 8002788:	d035      	beq.n	80027f6 <UART_SetConfig+0x4ca>
 800278a:	d324      	bcc.n	80027d6 <UART_SetConfig+0x4aa>
 800278c:	2b04      	cmp	r3, #4
 800278e:	f47f ae80 	bne.w	8002492 <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002792:	4668      	mov	r0, sp
 8002794:	f7ff faee 	bl	8001d74 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <UART_SetConfig+0x544>)
 800279a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800279c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80027a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80027a4:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80027a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80027aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80027ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	60cb      	str	r3, [r1, #12]
 80027b6:	e69b      	b.n	80024f0 <UART_SetConfig+0x1c4>
    switch (clocksource)
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d04c      	beq.n	8002856 <UART_SetConfig+0x52a>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d01d      	beq.n	80027fc <UART_SetConfig+0x4d0>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	f47f ae66 	bne.w	8002492 <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <UART_SetConfig+0x544>)
 80027c8:	6862      	ldr	r2, [r4, #4]
 80027ca:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d4:	e008      	b.n	80027e8 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027d6:	f7fe fce9 	bl	80011ac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <UART_SetConfig+0x544>)
 80027de:	6862      	ldr	r2, [r4, #4]
 80027e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80027e4:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027e8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80027ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	60eb      	str	r3, [r5, #12]
 80027f4:	e67c      	b.n	80024f0 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027f6:	f7fe fcef 	bl	80011d8 <HAL_RCC_GetPCLK2Freq>
 80027fa:	e7ee      	b.n	80027da <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80027fc:	a803      	add	r0, sp, #12
 80027fe:	f7ff fb59 	bl	8001eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <UART_SetConfig+0x544>)
 8002804:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002806:	e894 0006 	ldmia.w	r4, {r1, r2}
 800280a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800280e:	9b04      	ldr	r3, [sp, #16]
 8002810:	e7c9      	b.n	80027a6 <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002812:	4e19      	ldr	r6, [pc, #100]	; (8002878 <UART_SetConfig+0x54c>)
 8002814:	6860      	ldr	r0, [r4, #4]
 8002816:	6833      	ldr	r3, [r6, #0]
 8002818:	4a18      	ldr	r2, [pc, #96]	; (800287c <UART_SetConfig+0x550>)
 800281a:	f013 0320 	ands.w	r3, r3, #32
 800281e:	4c14      	ldr	r4, [pc, #80]	; (8002870 <UART_SetConfig+0x544>)
 8002820:	d00e      	beq.n	8002840 <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002822:	6833      	ldr	r3, [r6, #0]
 8002824:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002828:	40da      	lsrs	r2, r3
 800282a:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 800282e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002832:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002836:	fbb2 f2f0 	udiv	r2, r2, r0
 800283a:	b292      	uxth	r2, r2
 800283c:	60ea      	str	r2, [r5, #12]
 800283e:	e657      	b.n	80024f0 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002840:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8002844:	fbb2 f2f1 	udiv	r2, r2, r1
 8002848:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800284c:	fbb2 f2f0 	udiv	r2, r2, r0
 8002850:	b292      	uxth	r2, r2
 8002852:	60ea      	str	r2, [r5, #12]
 8002854:	e6a0      	b.n	8002598 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <UART_SetConfig+0x544>)
 8002858:	6862      	ldr	r2, [r4, #4]
 800285a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	e7b5      	b.n	80027d0 <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002864:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002868:	f47f ae13 	bne.w	8002492 <UART_SetConfig+0x166>
 800286c:	e5af      	b.n	80023ce <UART_SetConfig+0xa2>
 800286e:	bf00      	nop
 8002870:	08003d36 	.word	0x08003d36
 8002874:	003d0900 	.word	0x003d0900
 8002878:	58024400 	.word	0x58024400
 800287c:	03d09000 	.word	0x03d09000

08002880 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002880:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002882:	07da      	lsls	r2, r3, #31
{
 8002884:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002886:	d506      	bpl.n	8002896 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002888:	6801      	ldr	r1, [r0, #0]
 800288a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800288c:	684a      	ldr	r2, [r1, #4]
 800288e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002892:	4322      	orrs	r2, r4
 8002894:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002896:	079c      	lsls	r4, r3, #30
 8002898:	d506      	bpl.n	80028a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800289a:	6801      	ldr	r1, [r0, #0]
 800289c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800289e:	684a      	ldr	r2, [r1, #4]
 80028a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028a4:	4322      	orrs	r2, r4
 80028a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028a8:	0759      	lsls	r1, r3, #29
 80028aa:	d506      	bpl.n	80028ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028ac:	6801      	ldr	r1, [r0, #0]
 80028ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b0:	684a      	ldr	r2, [r1, #4]
 80028b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b6:	4322      	orrs	r2, r4
 80028b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ba:	071a      	lsls	r2, r3, #28
 80028bc:	d506      	bpl.n	80028cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028be:	6801      	ldr	r1, [r0, #0]
 80028c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028c2:	684a      	ldr	r2, [r1, #4]
 80028c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c8:	4322      	orrs	r2, r4
 80028ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	06dc      	lsls	r4, r3, #27
 80028ce:	d506      	bpl.n	80028de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d0:	6801      	ldr	r1, [r0, #0]
 80028d2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80028d4:	688a      	ldr	r2, [r1, #8]
 80028d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028da:	4322      	orrs	r2, r4
 80028dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028de:	0699      	lsls	r1, r3, #26
 80028e0:	d506      	bpl.n	80028f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e2:	6801      	ldr	r1, [r0, #0]
 80028e4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80028e6:	688a      	ldr	r2, [r1, #8]
 80028e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ec:	4322      	orrs	r2, r4
 80028ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028f0:	065a      	lsls	r2, r3, #25
 80028f2:	d510      	bpl.n	8002916 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028f4:	6801      	ldr	r1, [r0, #0]
 80028f6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80028f8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028fa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002902:	ea42 0204 	orr.w	r2, r2, r4
 8002906:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002908:	d105      	bne.n	8002916 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800290a:	684a      	ldr	r2, [r1, #4]
 800290c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800290e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002912:	4322      	orrs	r2, r4
 8002914:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	d506      	bpl.n	8002928 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800291a:	6802      	ldr	r2, [r0, #0]
 800291c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800291e:	6853      	ldr	r3, [r2, #4]
 8002920:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002924:	430b      	orrs	r3, r1
 8002926:	6053      	str	r3, [r2, #4]
 8002928:	bd10      	pop	{r4, pc}

0800292a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292e:	9d06      	ldr	r5, [sp, #24]
 8002930:	4604      	mov	r4, r0
 8002932:	460f      	mov	r7, r1
 8002934:	4616      	mov	r6, r2
 8002936:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	6821      	ldr	r1, [r4, #0]
 800293a:	69ca      	ldr	r2, [r1, #28]
 800293c:	ea37 0302 	bics.w	r3, r7, r2
 8002940:	bf0c      	ite	eq
 8002942:	2201      	moveq	r2, #1
 8002944:	2200      	movne	r2, #0
 8002946:	42b2      	cmp	r2, r6
 8002948:	d002      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800294a:	2000      	movs	r0, #0
}
 800294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002950:	1c6b      	adds	r3, r5, #1
 8002952:	d0f2      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002954:	b99d      	cbnz	r5, 800297e <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002956:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002958:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002960:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800296a:	2320      	movs	r3, #32
 800296c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8002970:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8002974:	2300      	movs	r3, #0
 8002976:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 800297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800297e:	f7fd fed3 	bl	8000728 <HAL_GetTick>
 8002982:	eba0 0008 	sub.w	r0, r0, r8
 8002986:	4285      	cmp	r5, r0
 8002988:	d2d6      	bcs.n	8002938 <UART_WaitOnFlagUntilTimeout+0xe>
 800298a:	e7e4      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0x2c>

0800298c <UART_CheckIdleState>:
{
 800298c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	2600      	movs	r6, #0
{
 8002990:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002994:	f7fd fec8 	bl	8000728 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002998:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800299a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	071a      	lsls	r2, r3, #28
 80029a0:	d417      	bmi.n	80029d2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	075b      	lsls	r3, r3, #29
 80029a8:	d50a      	bpl.n	80029c0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ae:	2200      	movs	r2, #0
 80029b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029b4:	4620      	mov	r0, r4
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	462b      	mov	r3, r5
 80029ba:	f7ff ffb6 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 80029be:	b9a0      	cbnz	r0, 80029ea <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80029c0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80029c2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029c4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 80029c8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029cc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 80029d0:	e00c      	b.n	80029ec <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029d6:	4632      	mov	r2, r6
 80029d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4603      	mov	r3, r0
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff ffa2 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0db      	beq.n	80029a2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80029ea:	2003      	movs	r0, #3
}
 80029ec:	b002      	add	sp, #8
 80029ee:	bd70      	pop	{r4, r5, r6, pc}

080029f0 <HAL_UART_Init>:
{
 80029f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80029f2:	4604      	mov	r4, r0
 80029f4:	b360      	cbz	r0, 8002a50 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80029f6:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80029fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029fe:	b91b      	cbnz	r3, 8002a08 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002a00:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002a04:	f000 fa66 	bl	8002ed4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002a08:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a0a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a0c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002a0e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a1a:	f7ff fc87 	bl	800232c <UART_SetConfig>
 8002a1e:	2801      	cmp	r0, #1
 8002a20:	d016      	beq.n	8002a50 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a24:	b113      	cbz	r3, 8002a2c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff ff2a 	bl	8002880 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002a2e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a3e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
}
 8002a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002a4a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002a4c:	f7ff bf9e 	b.w	800298c <UART_CheckIdleState>
}
 8002a50:	2001      	movs	r0, #1
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <MX_GPIO_Init+0x188>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a56:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a5e:	f042 0204 	orr.w	r2, r2, #4
{
 8002a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8002a6a:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a72:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002be8 <MX_GPIO_Init+0x194>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002a76:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a7e:	4e58      	ldr	r6, [pc, #352]	; (8002be0 <MX_GPIO_Init+0x18c>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a80:	4640      	mov	r0, r8
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a82:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8002bec <MX_GPIO_Init+0x198>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a8c:	270b      	movs	r7, #11
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002aa2:	9202      	str	r2, [sp, #8]
 8002aa4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ab2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ab6:	f002 0201 	and.w	r2, r2, #1
 8002aba:	9203      	str	r2, [sp, #12]
 8002abc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ac2:	f042 0202 	orr.w	r2, r2, #2
 8002ac6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ace:	f002 0202 	and.w	r2, r2, #2
 8002ad2:	9204      	str	r2, [sp, #16]
 8002ad4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ada:	f042 0208 	orr.w	r2, r2, #8
 8002ade:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ae2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ae6:	f002 0208 	and.w	r2, r2, #8
 8002aea:	9205      	str	r2, [sp, #20]
 8002aec:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	9306      	str	r3, [sp, #24]
 8002b06:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b08:	f7fd ff70 	bl	80009ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4630      	mov	r0, r6
 8002b10:	2140      	movs	r1, #64	; 0x40
 8002b12:	f7fd ff6b 	bl	80009ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <MX_GPIO_Init+0x190>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b18:	a907      	add	r1, sp, #28
 8002b1a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002b1c:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b20:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f7fd fe78 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b28:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	a907      	add	r1, sp, #28
 8002b2c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b32:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b3a:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3c:	f7fd fe6c 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b40:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	a907      	add	r1, sp, #28
 8002b44:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b48:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b4e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f7fd fe62 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002b54:	a907      	add	r1, sp, #28
 8002b56:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002b58:	f8cd a01c 	str.w	sl, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b66:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f7fd fe56 	bl	8000818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002b6c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	a907      	add	r1, sp, #28
 8002b72:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002b78:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f7fd fe4b 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002b82:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b84:	a907      	add	r1, sp, #28
 8002b86:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b88:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002b8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f7fd fe41 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b96:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b98:	a907      	add	r1, sp, #28
 8002b9a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b9e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f7fd fe39 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ba6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	a907      	add	r1, sp, #28
 8002bac:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bb0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002bb2:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002bb6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f7fd fe2d 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002bbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc2:	a907      	add	r1, sp, #28
 8002bc4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002bc8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bce:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd0:	f7fd fe22 	bl	8000818 <HAL_GPIO_Init>

}
 8002bd4:	b00c      	add	sp, #48	; 0x30
 8002bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bda:	bf00      	nop
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58021800 	.word	0x58021800
 8002be4:	11110000 	.word	0x11110000
 8002be8:	58020400 	.word	0x58020400
 8002bec:	58020800 	.word	0x58020800

08002bf0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <SystemClock_Config+0xbc>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
{
 8002bf8:	b530      	push	{r4, r5, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002bfa:	60da      	str	r2, [r3, #12]
{
 8002bfc:	b0cd      	sub	sp, #308	; 0x134

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	9201      	str	r2, [sp, #4]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c08:	619a      	str	r2, [r3, #24]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002c10:	9201      	str	r2, [sp, #4]
 8002c12:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	0492      	lsls	r2, r2, #18
 8002c18:	d5fc      	bpl.n	8002c14 <SystemClock_Config+0x24>
    
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002c1a:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002c1c:	2232      	movs	r2, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c1e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c20:	2504      	movs	r5, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002c22:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002c24:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002c26:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002c28:	220c      	movs	r2, #12
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002c2a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c2c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c2e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c30:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c32:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c34:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c36:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002c38:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c3a:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c3c:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002c3e:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c40:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002c42:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c44:	f7fd fed8 	bl	80009f8 <HAL_RCC_OscConfig>
 8002c48:	b100      	cbz	r0, 8002c4c <SystemClock_Config+0x5c>
 8002c4a:	e7fe      	b.n	8002c4a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4c:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002c52:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c54:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c56:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c5a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c5c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002c60:	2308      	movs	r3, #8
 8002c62:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002c64:	2340      	movs	r3, #64	; 0x40
 8002c66:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002c68:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002c6a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c6c:	f7fe f9aa 	bl	8000fc4 <HAL_RCC_ClockConfig>
 8002c70:	b100      	cbz	r0, 8002c74 <SystemClock_Config+0x84>
 8002c72:	e7fe      	b.n	8002c72 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c74:	903a      	str	r0, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c76:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c78:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7a:	f7fe fb77 	bl	800136c <HAL_RCCEx_PeriphCLKConfig>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b100      	cbz	r0, 8002c84 <SystemClock_Config+0x94>
 8002c82:	e7fe      	b.n	8002c82 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <SystemClock_Config+0xc0>)
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c90:	f7fd fd9a 	bl	80007c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002c94:	4628      	mov	r0, r5
 8002c96:	f7fd fdad 	bl	80007f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca2:	f7fd fd59 	bl	8000758 <HAL_NVIC_SetPriority>
}
 8002ca6:	b04d      	add	sp, #308	; 0x134
 8002ca8:	bd30      	pop	{r4, r5, pc}
 8002caa:	bf00      	nop
 8002cac:	58024800 	.word	0x58024800
 8002cb0:	20000108 	.word	0x20000108

08002cb4 <main>:
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
	  arm_cfft_f32(&arm_cfft_sR_f32_len32, senoide_input, ifftFlag, doBitReverse);
 8002cb6:	4e0d      	ldr	r6, [pc, #52]	; (8002cec <main+0x38>)
  HAL_Init();
 8002cb8:	f7fd fd1a 	bl	80006f0 <HAL_Init>
	  arm_cfft_f32(&arm_cfft_sR_f32_len32, senoide_input, ifftFlag, doBitReverse);
 8002cbc:	4d0c      	ldr	r5, [pc, #48]	; (8002cf0 <main+0x3c>)
  SystemClock_Config();
 8002cbe:	f7ff ff97 	bl	8002bf0 <SystemClock_Config>
	  FFT_result++;
 8002cc2:	4c0c      	ldr	r4, [pc, #48]	; (8002cf4 <main+0x40>)
  MX_GPIO_Init();
 8002cc4:	f7ff fec6 	bl	8002a54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002cc8:	f000 f8de 	bl	8002e88 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002ccc:	f000 f892 	bl	8002df4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);//Start 1s timer
 8002cd0:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <main+0x44>)
 8002cd2:	f7ff f9a9 	bl	8002028 <HAL_TIM_Base_Start_IT>
	  arm_cfft_f32(&arm_cfft_sR_f32_len32, senoide_input, ifftFlag, doBitReverse);
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4631      	mov	r1, r6
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f000 fc75 	bl	80035cc <arm_cfft_f32>
	  FFT_result++;
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	e7f5      	b.n	8002cd6 <main+0x22>
 8002cea:	bf00      	nop
 8002cec:	20000008 	.word	0x20000008
 8002cf0:	08003d7c 	.word	0x08003d7c
 8002cf4:	20000130 	.word	0x20000130
 8002cf8:	20000138 	.word	0x20000138

08002cfc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002cfc:	e7fe      	b.n	8002cfc <_Error_Handler>
	...

08002d00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_MspInit+0x7c>)
{
 8002d02:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d04:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d08:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	f042 0202 	orr.w	r2, r2, #2
 8002d0e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d1e:	f7fd fd09 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f06f 000b 	mvn.w	r0, #11
 8002d28:	4611      	mov	r1, r2
 8002d2a:	f7fd fd15 	bl	8000758 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f06f 000a 	mvn.w	r0, #10
 8002d34:	4611      	mov	r1, r2
 8002d36:	f7fd fd0f 	bl	8000758 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f06f 0009 	mvn.w	r0, #9
 8002d40:	4611      	mov	r1, r2
 8002d42:	f7fd fd09 	bl	8000758 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f06f 0004 	mvn.w	r0, #4
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	f7fd fd03 	bl	8000758 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	f06f 0003 	mvn.w	r0, #3
 8002d58:	4611      	mov	r1, r2
 8002d5a:	f7fd fcfd 	bl	8000758 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f06f 0001 	mvn.w	r0, #1
 8002d64:	4611      	mov	r1, r2
 8002d66:	f7fd fcf7 	bl	8000758 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	4611      	mov	r1, r2
 8002d72:	f7fd fcf1 	bl	8000758 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d76:	b003      	add	sp, #12
 8002d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d7c:	58024400 	.word	0x58024400

08002d80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d82:	f7fd fcc5 	bl	8000710 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d8a:	f7fd bd40 	b.w	800080e <HAL_SYSTICK_IRQHandler>
	...

08002d90 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d90:	4914      	ldr	r1, [pc, #80]	; (8002de4 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002d92:	4815      	ldr	r0, [pc, #84]	; (8002de8 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002d9c:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <SystemInit+0x5c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002db0:	681c      	ldr	r4, [r3, #0]
 8002db2:	4020      	ands	r0, r4
 8002db4:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002db8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dba:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002dd2:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SystemInit+0x60>)
 8002dda:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002de0:	608b      	str	r3, [r1, #8]
 8002de2:	bd10      	pop	{r4, pc}
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002dec:	58024400 	.word	0x58024400
 8002df0:	51008108 	.word	0x51008108

08002df4 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8002df4:	4817      	ldr	r0, [pc, #92]	; (8002e54 <MX_TIM2_Init+0x60>)
 8002df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8002dfa:	b500      	push	{lr}
  htim2.Instance = TIM2;
 8002dfc:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002dfe:	2300      	movs	r3, #0
{
 8002e00:	b089      	sub	sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 8002e02:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e04:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8002e06:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e08:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e0c:	f7ff f980 	bl	8002110 <HAL_TIM_Base_Init>
 8002e10:	b118      	cbz	r0, 8002e1a <MX_TIM2_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e12:	213f      	movs	r1, #63	; 0x3f
 8002e14:	4810      	ldr	r0, [pc, #64]	; (8002e58 <MX_TIM2_Init+0x64>)
 8002e16:	f7ff ff71 	bl	8002cfc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1a:	a908      	add	r1, sp, #32
 8002e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e20:	480c      	ldr	r0, [pc, #48]	; (8002e54 <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e22:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e26:	f7ff f997 	bl	8002158 <HAL_TIM_ConfigClockSource>
 8002e2a:	b118      	cbz	r0, 8002e34 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e2c:	2145      	movs	r1, #69	; 0x45
 8002e2e:	480a      	ldr	r0, [pc, #40]	; (8002e58 <MX_TIM2_Init+0x64>)
 8002e30:	f7ff ff64 	bl	8002cfc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e34:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e36:	a901      	add	r1, sp, #4
 8002e38:	4806      	ldr	r0, [pc, #24]	; (8002e54 <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e3e:	f7ff fa4f 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e42:	b118      	cbz	r0, 8002e4c <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e44:	214c      	movs	r1, #76	; 0x4c
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_TIM2_Init+0x64>)
 8002e48:	f7ff ff58 	bl	8002cfc <_Error_Handler>
  }

}
 8002e4c:	b009      	add	sp, #36	; 0x24
 8002e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e52:	bf00      	nop
 8002e54:	20000138 	.word	0x20000138
 8002e58:	08003d5e 	.word	0x08003d5e

08002e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002e5c:	6803      	ldr	r3, [r0, #0]
{
 8002e5e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d10c      	bne.n	8002e80 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_TIM_Base_MspInit+0x28>)
 8002e68:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e80:	b002      	add	sp, #8
 8002e82:	4770      	bx	lr
 8002e84:	58024400 	.word	0x58024400

08002e88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e88:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002e8a:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <MX_USART3_UART_Init+0x40>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8002e8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e90:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <MX_USART3_UART_Init+0x44>)
 8002e92:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8002e96:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e9a:	2300      	movs	r3, #0
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e9e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ea0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea2:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea4:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea6:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea8:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8002eaa:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8002eac:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8002eae:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8002eb0:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eb4:	f7ff fd9c 	bl	80029f0 <HAL_UART_Init>
 8002eb8:	b128      	cbz	r0, 8002ec6 <MX_USART3_UART_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002eba:	2148      	movs	r1, #72	; 0x48
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_USART3_UART_Init+0x48>)
  }

}
 8002ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002ec2:	f7ff bf1b 	b.w	8002cfc <_Error_Handler>
 8002ec6:	bd08      	pop	{r3, pc}
 8002ec8:	20000178 	.word	0x20000178
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	08003d6b 	.word	0x08003d6b

08002ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8002ed6:	6802      	ldr	r2, [r0, #0]
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_UART_MspInit+0x48>)
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee0:	a901      	add	r1, sp, #4
 8002ee2:	4810      	ldr	r0, [pc, #64]	; (8002f24 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002ee8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002eec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f10:	f7fd fc82 	bl	8000818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f14:	b007      	add	sp, #28
 8002f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f1a:	bf00      	nop
 8002f1c:	40004800 	.word	0x40004800
 8002f20:	58024400 	.word	0x58024400
 8002f24:	58020c00 	.word	0x58020c00

08002f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f2e:	e003      	b.n	8002f38 <LoopCopyDataInit>

08002f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f36:	3104      	adds	r1, #4

08002f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f38:	480b      	ldr	r0, [pc, #44]	; (8002f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f40:	d3f6      	bcc.n	8002f30 <CopyDataInit>
  ldr  r2, =_sbss
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f44:	e002      	b.n	8002f4c <LoopFillZerobss>

08002f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f48:	f842 3b04 	str.w	r3, [r2], #4

08002f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f50:	d3f9      	bcc.n	8002f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f52:	f7ff ff1d 	bl	8002d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f56:	f000 fea3 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5a:	f7ff feab 	bl	8002cb4 <main>
  bx  lr    
 8002f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f64:	08003efc 	.word	0x08003efc
  ldr  r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f6c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8002f70:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8002f74:	200001f8 	.word	0x200001f8

08002f78 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC3_IRQHandler>
	...

08002f7c <arm_cfft_radix8by2_f32>:
 8002f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	4607      	mov	r7, r0
 8002f82:	4608      	mov	r0, r1
 8002f84:	ed2d 8b06 	vpush	{d8-d10}
 8002f88:	f8b7 e000 	ldrh.w	lr, [r7]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8002f92:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8002f96:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8002f9a:	f000 80b0 	beq.w	80030fe <arm_cfft_radix8by2_f32+0x182>
 8002f9e:	008b      	lsls	r3, r1, #2
 8002fa0:	3210      	adds	r2, #16
 8002fa2:	f100 0610 	add.w	r6, r0, #16
 8002fa6:	f108 0510 	add.w	r5, r8, #16
 8002faa:	3310      	adds	r3, #16
 8002fac:	18c4      	adds	r4, r0, r3
 8002fae:	4443      	add	r3, r8
 8002fb0:	ed55 6a04 	vldr	s13, [r5, #-16]
 8002fb4:	f1be 0e01 	subs.w	lr, lr, #1
 8002fb8:	ed56 4a04 	vldr	s9, [r6, #-16]
 8002fbc:	f104 0410 	add.w	r4, r4, #16
 8002fc0:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002fc4:	f106 0610 	add.w	r6, r6, #16
 8002fc8:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8002fcc:	ed55 7a02 	vldr	s15, [r5, #-8]
 8002fd0:	ed55 2a01 	vldr	s5, [r5, #-4]
 8002fd4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8002fd8:	ed53 0a04 	vldr	s1, [r3, #-16]
 8002fdc:	f102 0210 	add.w	r2, r2, #16
 8002fe0:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002fe4:	f105 0510 	add.w	r5, r5, #16
 8002fe8:	ed13 3a02 	vldr	s6, [r3, #-8]
 8002fec:	f103 0310 	add.w	r3, r3, #16
 8002ff0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8002ff4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8002ff8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8002ffc:	ee33 8a83 	vadd.f32	s16, s7, s6
 8003000:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8003004:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8003008:	ee34 0a06 	vadd.f32	s0, s8, s12
 800300c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8003010:	ee76 aa87 	vadd.f32	s21, s13, s14
 8003014:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8003018:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800301c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8003020:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8003024:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8003028:	ee71 8a05 	vadd.f32	s17, s2, s10
 800302c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8003030:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8003034:	ee72 9a22 	vadd.f32	s19, s4, s5
 8003038:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800303c:	ee35 5a41 	vsub.f32	s10, s10, s2
 8003040:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8003044:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8003048:	ee36 6a44 	vsub.f32	s12, s12, s8
 800304c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8003050:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8003054:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8003058:	ee72 7a62 	vsub.f32	s15, s4, s5
 800305c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8003060:	ee73 2a63 	vsub.f32	s5, s6, s7
 8003064:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8003068:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800306c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8003070:	ee24 3a84 	vmul.f32	s6, s9, s8
 8003074:	ee27 2a26 	vmul.f32	s4, s14, s13
 8003078:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800307c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8003080:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003084:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003088:	ee65 6a26 	vmul.f32	s13, s10, s13
 800308c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8003090:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003094:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003098:	ee33 4a02 	vadd.f32	s8, s6, s4
 800309c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80030a0:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80030a4:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80030a8:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80030ac:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80030b0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80030b4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80030b8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80030bc:	ee27 4a87 	vmul.f32	s8, s15, s14
 80030c0:	ee61 5a87 	vmul.f32	s11, s3, s14
 80030c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c8:	ee22 5a87 	vmul.f32	s10, s5, s14
 80030cc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80030d0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80030d4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80030d8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80030dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80030e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80030e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80030e8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 80030ec:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80030f0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80030f4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80030f8:	f47f af5a 	bne.w	8002fb0 <arm_cfft_radix8by2_f32+0x34>
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	b28c      	uxth	r4, r1
 8003100:	2302      	movs	r3, #2
 8003102:	4621      	mov	r1, r4
 8003104:	f000 fada 	bl	80036bc <arm_radix8_butterfly_f32>
 8003108:	4621      	mov	r1, r4
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4640      	mov	r0, r8
 800310e:	2302      	movs	r3, #2
 8003110:	ecbd 8b06 	vpop	{d8-d10}
 8003114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003118:	f000 bad0 	b.w	80036bc <arm_radix8_butterfly_f32>

0800311c <arm_cfft_radix8by4_f32>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	ed2d 8b06 	vpush	{d8-d10}
 8003124:	8804      	ldrh	r4, [r0, #0]
 8003126:	b08f      	sub	sp, #60	; 0x3c
 8003128:	ed91 6a00 	vldr	s12, [r1]
 800312c:	460a      	mov	r2, r1
 800312e:	0864      	lsrs	r4, r4, #1
 8003130:	ed91 7a01 	vldr	s14, [r1, #4]
 8003134:	9101      	str	r1, [sp, #4]
 8003136:	00a3      	lsls	r3, r4, #2
 8003138:	6841      	ldr	r1, [r0, #4]
 800313a:	0864      	lsrs	r4, r4, #1
 800313c:	900c      	str	r0, [sp, #48]	; 0x30
 800313e:	9205      	str	r2, [sp, #20]
 8003140:	f101 0610 	add.w	r6, r1, #16
 8003144:	4625      	mov	r5, r4
 8003146:	940b      	str	r4, [sp, #44]	; 0x2c
 8003148:	f101 0408 	add.w	r4, r1, #8
 800314c:	9602      	str	r6, [sp, #8]
 800314e:	9407      	str	r4, [sp, #28]
 8003150:	18d4      	adds	r4, r2, r3
 8003152:	1eaa      	subs	r2, r5, #2
 8003154:	f101 0518 	add.w	r5, r1, #24
 8003158:	18e0      	adds	r0, r4, r3
 800315a:	edd4 4a00 	vldr	s9, [r4]
 800315e:	ed94 4a01 	vldr	s8, [r4, #4]
 8003162:	46a6      	mov	lr, r4
 8003164:	edd0 6a00 	vldr	s13, [r0]
 8003168:	18c7      	adds	r7, r0, r3
 800316a:	edd0 7a01 	vldr	s15, [r0, #4]
 800316e:	46a0      	mov	r8, r4
 8003170:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003174:	ed97 5a00 	vldr	s10, [r7]
 8003178:	ee76 6a66 	vsub.f32	s13, s12, s13
 800317c:	4604      	mov	r4, r0
 800317e:	9506      	str	r5, [sp, #24]
 8003180:	4605      	mov	r5, r0
 8003182:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8003186:	900a      	str	r0, [sp, #40]	; 0x28
 8003188:	9801      	ldr	r0, [sp, #4]
 800318a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800318e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003192:	ed97 3a01 	vldr	s6, [r7, #4]
 8003196:	ee72 2a85 	vadd.f32	s5, s5, s10
 800319a:	46bc      	mov	ip, r7
 800319c:	ee76 3a84 	vadd.f32	s7, s13, s8
 80031a0:	9704      	str	r7, [sp, #16]
 80031a2:	ee36 7a44 	vsub.f32	s14, s12, s8
 80031a6:	f8cd e00c 	str.w	lr, [sp, #12]
 80031aa:	ee12 9a90 	vmov	r9, s5
 80031ae:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80031b2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80031b6:	1f3e      	subs	r6, r7, #4
 80031b8:	f840 9b08 	str.w	r9, [r0], #8
 80031bc:	ee37 4ae4 	vsub.f32	s8, s15, s9
 80031c0:	edde 2a01 	vldr	s5, [lr, #4]
 80031c4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80031c8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80031cc:	eddc 4a01 	vldr	s9, [ip, #4]
 80031d0:	ee36 6a22 	vadd.f32	s12, s12, s5
 80031d4:	9001      	str	r0, [sp, #4]
 80031d6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80031da:	9805      	ldr	r0, [sp, #20]
 80031dc:	ee13 9a90 	vmov	r9, s7
 80031e0:	ee37 7a43 	vsub.f32	s14, s14, s6
 80031e4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80031e8:	f1ae 0704 	sub.w	r7, lr, #4
 80031ec:	ee74 4a05 	vadd.f32	s9, s8, s10
 80031f0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80031f4:	ed80 6a01 	vstr	s12, [r0, #4]
 80031f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80031fc:	f848 9b08 	str.w	r9, [r8], #8
 8003200:	edce 4a01 	vstr	s9, [lr, #4]
 8003204:	ee15 ea90 	vmov	lr, s11
 8003208:	f844 eb08 	str.w	lr, [r4], #8
 800320c:	ee16 ea90 	vmov	lr, s13
 8003210:	9408      	str	r4, [sp, #32]
 8003212:	462c      	mov	r4, r5
 8003214:	ed85 7a01 	vstr	s14, [r5, #4]
 8003218:	9d04      	ldr	r5, [sp, #16]
 800321a:	f84c eb08 	str.w	lr, [ip], #8
 800321e:	edc5 7a01 	vstr	s15, [r5, #4]
 8003222:	0855      	lsrs	r5, r2, #1
 8003224:	9509      	str	r5, [sp, #36]	; 0x24
 8003226:	f000 8130 	beq.w	800348a <arm_cfft_radix8by4_f32+0x36e>
 800322a:	9805      	ldr	r0, [sp, #20]
 800322c:	3b08      	subs	r3, #8
 800322e:	46ab      	mov	fp, r5
 8003230:	f1a4 020c 	sub.w	r2, r4, #12
 8003234:	f100 0510 	add.w	r5, r0, #16
 8003238:	f101 0920 	add.w	r9, r1, #32
 800323c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8003240:	f8dd a008 	ldr.w	sl, [sp, #8]
 8003244:	4433      	add	r3, r6
 8003246:	3410      	adds	r4, #16
 8003248:	4660      	mov	r0, ip
 800324a:	4641      	mov	r1, r8
 800324c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8003250:	ed54 6a02 	vldr	s13, [r4, #-8]
 8003254:	f1bb 0b01 	subs.w	fp, fp, #1
 8003258:	ed55 5a02 	vldr	s11, [r5, #-8]
 800325c:	f10a 0a08 	add.w	sl, sl, #8
 8003260:	edd1 7a00 	vldr	s15, [r1]
 8003264:	f105 0508 	add.w	r5, r5, #8
 8003268:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800326c:	edd0 2a00 	vldr	s5, [r0]
 8003270:	ed14 7a01 	vldr	s14, [r4, #-4]
 8003274:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8003278:	ed55 6a03 	vldr	s13, [r5, #-12]
 800327c:	f1a2 0208 	sub.w	r2, r2, #8
 8003280:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8003284:	ed90 2a01 	vldr	s4, [r0, #4]
 8003288:	ee36 5a87 	vadd.f32	s10, s13, s14
 800328c:	ed91 6a01 	vldr	s12, [r1, #4]
 8003290:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003294:	f109 0910 	add.w	r9, r9, #16
 8003298:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800329c:	f104 0408 	add.w	r4, r4, #8
 80032a0:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80032a4:	f10e 0e18 	add.w	lr, lr, #24
 80032a8:	ee37 3a67 	vsub.f32	s6, s14, s15
 80032ac:	f1a3 0308 	sub.w	r3, r3, #8
 80032b0:	ed45 6a04 	vstr	s13, [r5, #-16]
 80032b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b8:	edd1 6a01 	vldr	s13, [r1, #4]
 80032bc:	ee75 1a86 	vadd.f32	s3, s11, s12
 80032c0:	edd0 4a01 	vldr	s9, [r0, #4]
 80032c4:	ee33 3a22 	vadd.f32	s6, s6, s5
 80032c8:	ee75 6a26 	vadd.f32	s13, s10, s13
 80032cc:	ee35 5a46 	vsub.f32	s10, s10, s12
 80032d0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80032d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80032d8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80032dc:	ee35 5a42 	vsub.f32	s10, s10, s4
 80032e0:	ed45 6a03 	vstr	s13, [r5, #-12]
 80032e4:	ee36 2a02 	vadd.f32	s4, s12, s4
 80032e8:	edd6 7a00 	vldr	s15, [r6]
 80032ec:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80032f0:	ed97 1a00 	vldr	s2, [r7]
 80032f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80032f8:	ed92 8a04 	vldr	s16, [r2, #16]
 80032fc:	ee71 8a27 	vadd.f32	s17, s2, s15
 8003300:	ed93 aa04 	vldr	s20, [r3, #16]
 8003304:	ed16 7a01 	vldr	s14, [r6, #-4]
 8003308:	ee71 7a67 	vsub.f32	s15, s2, s15
 800330c:	ed57 0a01 	vldr	s1, [r7, #-4]
 8003310:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8003314:	ee38 6a88 	vadd.f32	s12, s17, s16
 8003318:	edd3 9a03 	vldr	s19, [r3, #12]
 800331c:	ee30 0a87 	vadd.f32	s0, s1, s14
 8003320:	ed92 9a03 	vldr	s18, [r2, #12]
 8003324:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8003328:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800332c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8003330:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8003334:	ee16 ca10 	vmov	ip, s12
 8003338:	ee30 6a49 	vsub.f32	s12, s0, s18
 800333c:	ee77 4a01 	vadd.f32	s9, s14, s2
 8003340:	f847 c908 	str.w	ip, [r7], #-8
 8003344:	ee34 4a29 	vadd.f32	s8, s8, s19
 8003348:	edd2 8a03 	vldr	s17, [r2, #12]
 800334c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8003350:	ed93 8a03 	vldr	s16, [r3, #12]
 8003354:	ee71 0a47 	vsub.f32	s1, s2, s14
 8003358:	ee30 0a28 	vadd.f32	s0, s0, s17
 800335c:	ee39 1a67 	vsub.f32	s2, s18, s15
 8003360:	ee36 6a69 	vsub.f32	s12, s12, s19
 8003364:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003368:	ee75 5aca 	vsub.f32	s11, s11, s20
 800336c:	ed87 0a01 	vstr	s0, [r7, #4]
 8003370:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8003374:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8003378:	ee21 8a80 	vmul.f32	s16, s3, s0
 800337c:	ee23 7a26 	vmul.f32	s14, s6, s13
 8003380:	ee64 7a26 	vmul.f32	s15, s8, s13
 8003384:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8003388:	ee24 4a00 	vmul.f32	s8, s8, s0
 800338c:	ee23 3a00 	vmul.f32	s6, s6, s0
 8003390:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003394:	ee24 0a80 	vmul.f32	s0, s9, s0
 8003398:	ee38 7a07 	vadd.f32	s14, s16, s14
 800339c:	ee76 6a84 	vadd.f32	s13, s13, s8
 80033a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80033a4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80033a8:	ee17 ca10 	vmov	ip, s14
 80033ac:	f841 cb08 	str.w	ip, [r1], #8
 80033b0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80033b4:	ed82 0a04 	vstr	s0, [r2, #16]
 80033b8:	edc2 6a03 	vstr	s13, [r2, #12]
 80033bc:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 80033c0:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 80033c4:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80033c8:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80033cc:	ee65 4a27 	vmul.f32	s9, s10, s15
 80033d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80033d4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80033d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033dc:	ee25 5a26 	vmul.f32	s10, s10, s13
 80033e0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80033e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e8:	ee34 6a24 	vadd.f32	s12, s8, s9
 80033ec:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80033f0:	ee35 5a63 	vsub.f32	s10, s10, s7
 80033f4:	ee17 ca90 	vmov	ip, s15
 80033f8:	ed04 6a04 	vstr	s12, [r4, #-16]
 80033fc:	ed04 5a03 	vstr	s10, [r4, #-12]
 8003400:	f846 c908 	str.w	ip, [r6], #-8
 8003404:	edc6 6a01 	vstr	s13, [r6, #4]
 8003408:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800340c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8003410:	ee62 5a27 	vmul.f32	s11, s4, s15
 8003414:	ee22 6a87 	vmul.f32	s12, s5, s14
 8003418:	ee22 2a07 	vmul.f32	s4, s4, s14
 800341c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8003420:	ee61 6a07 	vmul.f32	s13, s2, s14
 8003424:	ee20 7a87 	vmul.f32	s14, s1, s14
 8003428:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800342c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8003430:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003434:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8003438:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800343c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003440:	ee16 ca10 	vmov	ip, s12
 8003444:	f840 cb08 	str.w	ip, [r0], #8
 8003448:	ed40 2a01 	vstr	s5, [r0, #-4]
 800344c:	edc3 0a04 	vstr	s1, [r3, #16]
 8003450:	edc3 7a03 	vstr	s15, [r3, #12]
 8003454:	f47f aefc 	bne.w	8003250 <arm_cfft_radix8by4_f32+0x134>
 8003458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800345a:	9802      	ldr	r0, [sp, #8]
 800345c:	00cb      	lsls	r3, r1, #3
 800345e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8003462:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003466:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800346a:	4498      	add	r8, r3
 800346c:	449c      	add	ip, r3
 800346e:	9102      	str	r1, [sp, #8]
 8003470:	9901      	ldr	r1, [sp, #4]
 8003472:	4419      	add	r1, r3
 8003474:	9101      	str	r1, [sp, #4]
 8003476:	9907      	ldr	r1, [sp, #28]
 8003478:	4419      	add	r1, r3
 800347a:	9107      	str	r1, [sp, #28]
 800347c:	9908      	ldr	r1, [sp, #32]
 800347e:	4419      	add	r1, r3
 8003480:	9b06      	ldr	r3, [sp, #24]
 8003482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003486:	9108      	str	r1, [sp, #32]
 8003488:	9306      	str	r3, [sp, #24]
 800348a:	9a01      	ldr	r2, [sp, #4]
 800348c:	2304      	movs	r3, #4
 800348e:	9e08      	ldr	r6, [sp, #32]
 8003490:	edd2 7a00 	vldr	s15, [r2]
 8003494:	ed96 7a00 	vldr	s14, [r6]
 8003498:	edd8 2a00 	vldr	s5, [r8]
 800349c:	ee77 5a87 	vadd.f32	s11, s15, s14
 80034a0:	ed9c 3a00 	vldr	s6, [ip]
 80034a4:	ed92 6a01 	vldr	s12, [r2, #4]
 80034a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80034ac:	edd6 6a01 	vldr	s13, [r6, #4]
 80034b0:	ee75 4aa2 	vadd.f32	s9, s11, s5
 80034b4:	ed9c 2a01 	vldr	s4, [ip, #4]
 80034b8:	ee36 5a26 	vadd.f32	s10, s12, s13
 80034bc:	edd8 7a01 	vldr	s15, [r8, #4]
 80034c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80034c4:	9d02      	ldr	r5, [sp, #8]
 80034c6:	ee34 6a83 	vadd.f32	s12, s9, s6
 80034ca:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80034ce:	ee37 4a27 	vadd.f32	s8, s14, s15
 80034d2:	9805      	ldr	r0, [sp, #20]
 80034d4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 80034d8:	4621      	mov	r1, r4
 80034da:	ed82 6a00 	vstr	s12, [r2]
 80034de:	ee35 6ae2 	vsub.f32	s12, s11, s5
 80034e2:	edd8 3a01 	vldr	s7, [r8, #4]
 80034e6:	ee75 5a67 	vsub.f32	s11, s10, s15
 80034ea:	eddc 1a01 	vldr	s3, [ip, #4]
 80034ee:	ee34 4a42 	vsub.f32	s8, s8, s4
 80034f2:	ee75 3a23 	vadd.f32	s7, s10, s7
 80034f6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80034fa:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80034fe:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8003502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003506:	ee36 6a43 	vsub.f32	s12, s12, s6
 800350a:	ed82 5a01 	vstr	s10, [r2, #4]
 800350e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003512:	9a07      	ldr	r2, [sp, #28]
 8003514:	ee77 7a02 	vadd.f32	s15, s14, s4
 8003518:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800351c:	edd2 2a00 	vldr	s5, [r2]
 8003520:	ed92 5a01 	vldr	s10, [r2, #4]
 8003524:	ee64 3a22 	vmul.f32	s7, s8, s5
 8003528:	ee24 4a05 	vmul.f32	s8, s8, s10
 800352c:	ee24 5a85 	vmul.f32	s10, s9, s10
 8003530:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8003534:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003538:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800353c:	ed88 5a00 	vstr	s10, [r8]
 8003540:	edc8 4a01 	vstr	s9, [r8, #4]
 8003544:	edd5 4a01 	vldr	s9, [r5, #4]
 8003548:	edd5 6a00 	vldr	s13, [r5]
 800354c:	9d06      	ldr	r5, [sp, #24]
 800354e:	ee26 5a26 	vmul.f32	s10, s12, s13
 8003552:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003556:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800355a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800355e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003562:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003566:	ed86 6a01 	vstr	s12, [r6, #4]
 800356a:	edc6 5a00 	vstr	s11, [r6]
 800356e:	edd5 5a01 	vldr	s11, [r5, #4]
 8003572:	edd5 6a00 	vldr	s13, [r5]
 8003576:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003578:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800357c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003580:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003584:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800358c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003590:	edcc 7a01 	vstr	s15, [ip, #4]
 8003594:	ed8c 7a00 	vstr	s14, [ip]
 8003598:	6872      	ldr	r2, [r6, #4]
 800359a:	f000 f88f 	bl	80036bc <arm_radix8_butterfly_f32>
 800359e:	9803      	ldr	r0, [sp, #12]
 80035a0:	4621      	mov	r1, r4
 80035a2:	6872      	ldr	r2, [r6, #4]
 80035a4:	2304      	movs	r3, #4
 80035a6:	f000 f889 	bl	80036bc <arm_radix8_butterfly_f32>
 80035aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035ac:	4621      	mov	r1, r4
 80035ae:	6872      	ldr	r2, [r6, #4]
 80035b0:	2304      	movs	r3, #4
 80035b2:	f000 f883 	bl	80036bc <arm_radix8_butterfly_f32>
 80035b6:	4621      	mov	r1, r4
 80035b8:	6872      	ldr	r2, [r6, #4]
 80035ba:	2304      	movs	r3, #4
 80035bc:	9804      	ldr	r0, [sp, #16]
 80035be:	b00f      	add	sp, #60	; 0x3c
 80035c0:	ecbd 8b06 	vpop	{d8-d10}
 80035c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c8:	f000 b878 	b.w	80036bc <arm_radix8_butterfly_f32>

080035cc <arm_cfft_f32>:
 80035cc:	2a01      	cmp	r2, #1
 80035ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d2:	4606      	mov	r6, r0
 80035d4:	4617      	mov	r7, r2
 80035d6:	460c      	mov	r4, r1
 80035d8:	4698      	mov	r8, r3
 80035da:	8805      	ldrh	r5, [r0, #0]
 80035dc:	d053      	beq.n	8003686 <arm_cfft_f32+0xba>
 80035de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80035e2:	d04b      	beq.n	800367c <arm_cfft_f32+0xb0>
 80035e4:	d916      	bls.n	8003614 <arm_cfft_f32+0x48>
 80035e6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80035ea:	d01a      	beq.n	8003622 <arm_cfft_f32+0x56>
 80035ec:	d95a      	bls.n	80036a4 <arm_cfft_f32+0xd8>
 80035ee:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80035f2:	d043      	beq.n	800367c <arm_cfft_f32+0xb0>
 80035f4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80035f8:	d105      	bne.n	8003606 <arm_cfft_f32+0x3a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	6872      	ldr	r2, [r6, #4]
 80035fe:	4629      	mov	r1, r5
 8003600:	4620      	mov	r0, r4
 8003602:	f000 f85b 	bl	80036bc <arm_radix8_butterfly_f32>
 8003606:	f1b8 0f00 	cmp.w	r8, #0
 800360a:	d111      	bne.n	8003630 <arm_cfft_f32+0x64>
 800360c:	2f01      	cmp	r7, #1
 800360e:	d016      	beq.n	800363e <arm_cfft_f32+0x72>
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003614:	2d20      	cmp	r5, #32
 8003616:	d031      	beq.n	800367c <arm_cfft_f32+0xb0>
 8003618:	d948      	bls.n	80036ac <arm_cfft_f32+0xe0>
 800361a:	2d40      	cmp	r5, #64	; 0x40
 800361c:	d0ed      	beq.n	80035fa <arm_cfft_f32+0x2e>
 800361e:	2d80      	cmp	r5, #128	; 0x80
 8003620:	d1f1      	bne.n	8003606 <arm_cfft_f32+0x3a>
 8003622:	4621      	mov	r1, r4
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff fca9 	bl	8002f7c <arm_cfft_radix8by2_f32>
 800362a:	f1b8 0f00 	cmp.w	r8, #0
 800362e:	d0ed      	beq.n	800360c <arm_cfft_f32+0x40>
 8003630:	68b2      	ldr	r2, [r6, #8]
 8003632:	4620      	mov	r0, r4
 8003634:	89b1      	ldrh	r1, [r6, #12]
 8003636:	f7fc fe4f 	bl	80002d8 <arm_bitreversal_32>
 800363a:	2f01      	cmp	r7, #1
 800363c:	d1e8      	bne.n	8003610 <arm_cfft_f32+0x44>
 800363e:	ee07 5a90 	vmov	s15, r5
 8003642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800364e:	2d00      	cmp	r5, #0
 8003650:	d0de      	beq.n	8003610 <arm_cfft_f32+0x44>
 8003652:	f104 0108 	add.w	r1, r4, #8
 8003656:	2300      	movs	r3, #0
 8003658:	ed11 7a02 	vldr	s14, [r1, #-8]
 800365c:	3301      	adds	r3, #1
 800365e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003662:	3108      	adds	r1, #8
 8003664:	429d      	cmp	r5, r3
 8003666:	ee27 7a26 	vmul.f32	s14, s14, s13
 800366a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800366e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003672:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003676:	d1ef      	bne.n	8003658 <arm_cfft_f32+0x8c>
 8003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800367c:	4621      	mov	r1, r4
 800367e:	4630      	mov	r0, r6
 8003680:	f7ff fd4c 	bl	800311c <arm_cfft_radix8by4_f32>
 8003684:	e7bf      	b.n	8003606 <arm_cfft_f32+0x3a>
 8003686:	b1a5      	cbz	r5, 80036b2 <arm_cfft_f32+0xe6>
 8003688:	f101 030c 	add.w	r3, r1, #12
 800368c:	2200      	movs	r2, #0
 800368e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003692:	3201      	adds	r2, #1
 8003694:	3308      	adds	r3, #8
 8003696:	eef1 7a67 	vneg.f32	s15, s15
 800369a:	4295      	cmp	r5, r2
 800369c:	ed43 7a04 	vstr	s15, [r3, #-16]
 80036a0:	d1f5      	bne.n	800368e <arm_cfft_f32+0xc2>
 80036a2:	e79c      	b.n	80035de <arm_cfft_f32+0x12>
 80036a4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80036a8:	d0a7      	beq.n	80035fa <arm_cfft_f32+0x2e>
 80036aa:	e7ac      	b.n	8003606 <arm_cfft_f32+0x3a>
 80036ac:	2d10      	cmp	r5, #16
 80036ae:	d0b8      	beq.n	8003622 <arm_cfft_f32+0x56>
 80036b0:	e7a9      	b.n	8003606 <arm_cfft_f32+0x3a>
 80036b2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80036b6:	d896      	bhi.n	80035e6 <arm_cfft_f32+0x1a>
 80036b8:	e7ac      	b.n	8003614 <arm_cfft_f32+0x48>
 80036ba:	bf00      	nop

080036bc <arm_radix8_butterfly_f32>:
 80036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	468a      	mov	sl, r1
 80036c6:	468b      	mov	fp, r1
 80036c8:	3304      	adds	r3, #4
 80036ca:	ed2d 8b10 	vpush	{d8-d15}
 80036ce:	469c      	mov	ip, r3
 80036d0:	b09d      	sub	sp, #116	; 0x74
 80036d2:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80039e0 <arm_radix8_butterfly_f32+0x324>
 80036d6:	9019      	str	r0, [sp, #100]	; 0x64
 80036d8:	921a      	str	r2, [sp, #104]	; 0x68
 80036da:	931b      	str	r3, [sp, #108]	; 0x6c
 80036dc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80036e0:	f04f 0800 	mov.w	r8, #0
 80036e4:	461a      	mov	r2, r3
 80036e6:	9311      	str	r3, [sp, #68]	; 0x44
 80036e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036ec:	4611      	mov	r1, r2
 80036ee:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	0053      	lsls	r3, r2, #1
 80036f6:	18d5      	adds	r5, r2, r3
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	0113      	lsls	r3, r2, #4
 80036fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80036fe:	194c      	adds	r4, r1, r5
 8003700:	eb02 0609 	add.w	r6, r2, r9
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800370a:	4613      	mov	r3, r2
 800370c:	190a      	adds	r2, r1, r4
 800370e:	eb06 0709 	add.w	r7, r6, r9
 8003712:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8003716:	1888      	adds	r0, r1, r2
 8003718:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800371c:	4401      	add	r1, r0
 800371e:	3204      	adds	r2, #4
 8003720:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003724:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003728:	9b00      	ldr	r3, [sp, #0]
 800372a:	3104      	adds	r1, #4
 800372c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8003730:	44d8      	add	r8, fp
 8003732:	ed90 7a00 	vldr	s14, [r0]
 8003736:	ed94 5a00 	vldr	s10, [r4]
 800373a:	45c2      	cmp	sl, r8
 800373c:	edd7 3a00 	vldr	s7, [r7]
 8003740:	ed96 6a00 	vldr	s12, [r6]
 8003744:	ee37 1a85 	vadd.f32	s2, s15, s10
 8003748:	ed52 6a01 	vldr	s13, [r2, #-4]
 800374c:	ee73 4a87 	vadd.f32	s9, s7, s14
 8003750:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8003754:	edd5 7a00 	vldr	s15, [r5]
 8003758:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800375c:	ed11 7a01 	vldr	s14, [r1, #-4]
 8003760:	ee36 2a26 	vadd.f32	s4, s12, s13
 8003764:	ee37 4a87 	vadd.f32	s8, s15, s14
 8003768:	ee76 6a66 	vsub.f32	s13, s12, s13
 800376c:	ee71 5a24 	vadd.f32	s11, s2, s9
 8003770:	ee32 6a04 	vadd.f32	s12, s4, s8
 8003774:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003778:	ee31 1a64 	vsub.f32	s2, s2, s9
 800377c:	ee75 4a86 	vadd.f32	s9, s11, s12
 8003780:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8003784:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8003788:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800378c:	ee32 2a44 	vsub.f32	s4, s4, s8
 8003790:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003794:	ed94 0a01 	vldr	s0, [r4, #4]
 8003798:	edc4 5a00 	vstr	s11, [r4]
 800379c:	ee36 7a87 	vadd.f32	s14, s13, s14
 80037a0:	edd6 5a01 	vldr	s11, [r6, #4]
 80037a4:	edd5 2a01 	vldr	s5, [r5, #4]
 80037a8:	ee75 1a27 	vadd.f32	s3, s10, s15
 80037ac:	ed92 4a00 	vldr	s8, [r2]
 80037b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80037b4:	edd1 4a00 	vldr	s9, [r1]
 80037b8:	ee27 7a09 	vmul.f32	s14, s14, s18
 80037bc:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80037c0:	ed9c 6a00 	vldr	s12, [ip]
 80037c4:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80037c8:	edd0 0a01 	vldr	s1, [r0, #4]
 80037cc:	ed97 5a01 	vldr	s10, [r7, #4]
 80037d0:	ee35 4a84 	vadd.f32	s8, s11, s8
 80037d4:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80037d8:	ee73 5a26 	vadd.f32	s11, s6, s13
 80037dc:	ee76 2a00 	vadd.f32	s5, s12, s0
 80037e0:	ee73 6a66 	vsub.f32	s13, s6, s13
 80037e4:	ee36 6a40 	vsub.f32	s12, s12, s0
 80037e8:	ee35 0a20 	vadd.f32	s0, s10, s1
 80037ec:	ee65 5a89 	vmul.f32	s11, s11, s18
 80037f0:	ee35 5a60 	vsub.f32	s10, s10, s1
 80037f4:	ee32 3a80 	vadd.f32	s6, s5, s0
 80037f8:	ee74 0a24 	vadd.f32	s1, s8, s9
 80037fc:	ee66 6a89 	vmul.f32	s13, s13, s18
 8003800:	ee74 4a64 	vsub.f32	s9, s8, s9
 8003804:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8003808:	ee75 2a25 	vadd.f32	s5, s10, s11
 800380c:	ee33 0a20 	vadd.f32	s0, s6, s1
 8003810:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003814:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003818:	ee36 5a26 	vadd.f32	s10, s12, s13
 800381c:	ed8c 0a00 	vstr	s0, [ip]
 8003820:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003824:	449c      	add	ip, r3
 8003826:	ee33 6a87 	vadd.f32	s12, s7, s14
 800382a:	ed84 3a01 	vstr	s6, [r4, #4]
 800382e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8003832:	441c      	add	r4, r3
 8003834:	ee71 3a24 	vadd.f32	s7, s2, s9
 8003838:	ee71 4a64 	vsub.f32	s9, s2, s9
 800383c:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8003840:	edc7 3a00 	vstr	s7, [r7]
 8003844:	ee34 1a42 	vsub.f32	s2, s8, s4
 8003848:	edc0 4a00 	vstr	s9, [r0]
 800384c:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8003850:	ee75 4a46 	vsub.f32	s9, s10, s12
 8003854:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003858:	ed87 1a01 	vstr	s2, [r7, #4]
 800385c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8003860:	441f      	add	r7, r3
 8003862:	ee32 4a04 	vadd.f32	s8, s4, s8
 8003866:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800386a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800386e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003872:	ed80 4a01 	vstr	s8, [r0, #4]
 8003876:	ed86 3a00 	vstr	s6, [r6]
 800387a:	4418      	add	r0, r3
 800387c:	ed41 1a01 	vstr	s3, [r1, #-4]
 8003880:	ed42 3a01 	vstr	s7, [r2, #-4]
 8003884:	edc5 7a00 	vstr	s15, [r5]
 8003888:	edc6 4a01 	vstr	s9, [r6, #4]
 800388c:	441e      	add	r6, r3
 800388e:	ed81 6a00 	vstr	s12, [r1]
 8003892:	4419      	add	r1, r3
 8003894:	edc2 5a00 	vstr	s11, [r2]
 8003898:	441a      	add	r2, r3
 800389a:	ed85 7a01 	vstr	s14, [r5, #4]
 800389e:	441d      	add	r5, r3
 80038a0:	f63f af44 	bhi.w	800372c <arm_radix8_butterfly_f32+0x70>
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038a8:	2b07      	cmp	r3, #7
 80038aa:	f240 81f4 	bls.w	8003c96 <arm_radix8_butterfly_f32+0x5da>
 80038ae:	9901      	ldr	r1, [sp, #4]
 80038b0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80038b4:	9d02      	ldr	r5, [sp, #8]
 80038b6:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80038ba:	3101      	adds	r1, #1
 80038bc:	eb04 000e 	add.w	r0, r4, lr
 80038c0:	00e4      	lsls	r4, r4, #3
 80038c2:	3508      	adds	r5, #8
 80038c4:	4419      	add	r1, r3
 80038c6:	eb00 0c0e 	add.w	ip, r0, lr
 80038ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80038cc:	00c0      	lsls	r0, r0, #3
 80038ce:	185e      	adds	r6, r3, r1
 80038d0:	4617      	mov	r7, r2
 80038d2:	9218      	str	r2, [sp, #96]	; 0x60
 80038d4:	f109 0908 	add.w	r9, r9, #8
 80038d8:	199c      	adds	r4, r3, r6
 80038da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80038de:	9012      	str	r0, [sp, #72]	; 0x48
 80038e0:	195d      	adds	r5, r3, r5
 80038e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80038e4:	443a      	add	r2, r7
 80038e6:	950c      	str	r5, [sp, #48]	; 0x30
 80038e8:	4698      	mov	r8, r3
 80038ea:	4420      	add	r0, r4
 80038ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80038ee:	19d7      	adds	r7, r2, r7
 80038f0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80038f4:	4405      	add	r5, r0
 80038f6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80038fa:	9710      	str	r7, [sp, #64]	; 0x40
 80038fc:	eb0c 070e 	add.w	r7, ip, lr
 8003900:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003904:	3404      	adds	r4, #4
 8003906:	3004      	adds	r0, #4
 8003908:	44c8      	add	r8, r9
 800390a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800390e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003910:	940a      	str	r4, [sp, #40]	; 0x28
 8003912:	9009      	str	r0, [sp, #36]	; 0x24
 8003914:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003918:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800391a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800391e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003920:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8003924:	eb07 080e 	add.w	r8, r7, lr
 8003928:	eb04 0900 	add.w	r9, r4, r0
 800392c:	00f8      	lsls	r0, r7, #3
 800392e:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8003932:	3504      	adds	r5, #4
 8003934:	4607      	mov	r7, r0
 8003936:	9017      	str	r0, [sp, #92]	; 0x5c
 8003938:	910b      	str	r1, [sp, #44]	; 0x2c
 800393a:	4618      	mov	r0, r3
 800393c:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8003940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003942:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8003946:	18e3      	adds	r3, r4, r3
 8003948:	9508      	str	r5, [sp, #32]
 800394a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800394c:	910e      	str	r1, [sp, #56]	; 0x38
 800394e:	4621      	mov	r1, r4
 8003950:	eb04 0805 	add.w	r8, r4, r5
 8003954:	9304      	str	r3, [sp, #16]
 8003956:	19e5      	adds	r5, r4, r7
 8003958:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800395c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800395e:	9316      	str	r3, [sp, #88]	; 0x58
 8003960:	190b      	adds	r3, r1, r4
 8003962:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003964:	9505      	str	r5, [sp, #20]
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	f100 0308 	add.w	r3, r0, #8
 800396c:	9707      	str	r7, [sp, #28]
 800396e:	4638      	mov	r0, r7
 8003970:	930f      	str	r3, [sp, #60]	; 0x3c
 8003972:	2301      	movs	r3, #1
 8003974:	9306      	str	r3, [sp, #24]
 8003976:	9b00      	ldr	r3, [sp, #0]
 8003978:	ed90 fa00 	vldr	s30, [r0]
 800397c:	edd0 ba01 	vldr	s23, [r0, #4]
 8003980:	9803      	ldr	r0, [sp, #12]
 8003982:	9903      	ldr	r1, [sp, #12]
 8003984:	ed90 ba01 	vldr	s22, [r0, #4]
 8003988:	9804      	ldr	r0, [sp, #16]
 800398a:	edd1 ea00 	vldr	s29, [r1]
 800398e:	edd0 aa01 	vldr	s21, [r0, #4]
 8003992:	9805      	ldr	r0, [sp, #20]
 8003994:	9905      	ldr	r1, [sp, #20]
 8003996:	edd0 7a01 	vldr	s15, [r0, #4]
 800399a:	ed91 da00 	vldr	s26, [r1]
 800399e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039a0:	9c04      	ldr	r4, [sp, #16]
 80039a2:	edcd 7a01 	vstr	s15, [sp, #4]
 80039a6:	edd8 7a01 	vldr	s15, [r8, #4]
 80039aa:	9100      	str	r1, [sp, #0]
 80039ac:	edd2 fa00 	vldr	s31, [r2]
 80039b0:	ed94 ea00 	vldr	s28, [r4]
 80039b4:	ed92 ca01 	vldr	s24, [r2, #4]
 80039b8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80039bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039c2:	edd9 da00 	vldr	s27, [r9]
 80039c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80039c8:	edd8 ca00 	vldr	s25, [r8]
 80039cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80039ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039d0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80039d4:	ed99 aa01 	vldr	s20, [r9, #4]
 80039d8:	edcd 7a02 	vstr	s15, [sp, #8]
 80039dc:	9800      	ldr	r0, [sp, #0]
 80039de:	e001      	b.n	80039e4 <arm_radix8_butterfly_f32+0x328>
 80039e0:	3f3504f3 	.word	0x3f3504f3
 80039e4:	edd5 3a00 	vldr	s7, [r5]
 80039e8:	44dc      	add	ip, fp
 80039ea:	ed91 7a00 	vldr	s14, [r1]
 80039ee:	edd4 8a00 	vldr	s17, [r4]
 80039f2:	45e2      	cmp	sl, ip
 80039f4:	ed57 7a01 	vldr	s15, [r7, #-4]
 80039f8:	ed90 5a00 	vldr	s10, [r0]
 80039fc:	ed56 5a01 	vldr	s11, [r6, #-4]
 8003a00:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8003a04:	ed92 1a00 	vldr	s2, [r2]
 8003a08:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8003a0c:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8003a10:	ee75 9a25 	vadd.f32	s19, s10, s11
 8003a14:	ee31 3a07 	vadd.f32	s6, s2, s14
 8003a18:	ed92 8a01 	vldr	s16, [r2, #4]
 8003a1c:	ee73 6a84 	vadd.f32	s13, s7, s8
 8003a20:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003a24:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003a28:	ee73 1a06 	vadd.f32	s3, s6, s12
 8003a2c:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8003a30:	ee75 7a84 	vadd.f32	s15, s11, s8
 8003a34:	ee31 1a47 	vsub.f32	s2, s2, s14
 8003a38:	ee31 7a85 	vadd.f32	s14, s3, s10
 8003a3c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003a40:	ee33 3a46 	vsub.f32	s6, s6, s12
 8003a44:	ed82 7a00 	vstr	s14, [r2]
 8003a48:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8003a4c:	ed96 6a00 	vldr	s12, [r6]
 8003a50:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8003a54:	edd5 3a01 	vldr	s7, [r5, #4]
 8003a58:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8003a5c:	ed90 7a01 	vldr	s14, [r0, #4]
 8003a60:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8003a64:	edde 4a00 	vldr	s9, [lr]
 8003a68:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8003a6c:	ee77 2a46 	vsub.f32	s5, s14, s12
 8003a70:	edd1 6a01 	vldr	s13, [r1, #4]
 8003a74:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8003a78:	edd7 0a00 	vldr	s1, [r7]
 8003a7c:	ee77 5a06 	vadd.f32	s11, s14, s12
 8003a80:	ed94 7a01 	vldr	s14, [r4, #4]
 8003a84:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8003a88:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8003a8c:	ee78 4a66 	vsub.f32	s9, s16, s13
 8003a90:	ee78 3a26 	vadd.f32	s7, s16, s13
 8003a94:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8003a98:	ee77 6a20 	vadd.f32	s13, s14, s1
 8003a9c:	ee24 4a09 	vmul.f32	s8, s8, s18
 8003aa0:	ee37 7a60 	vsub.f32	s14, s14, s1
 8003aa4:	ee20 8a09 	vmul.f32	s16, s0, s18
 8003aa8:	ee75 0a86 	vadd.f32	s1, s11, s12
 8003aac:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8003ab0:	ee62 2a89 	vmul.f32	s5, s5, s18
 8003ab4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003ab8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8003abc:	ee77 7a62 	vsub.f32	s15, s14, s5
 8003ac0:	ee74 5a88 	vadd.f32	s11, s9, s16
 8003ac4:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8003ac8:	ee77 4a22 	vadd.f32	s9, s14, s5
 8003acc:	ee71 2a04 	vadd.f32	s5, s2, s8
 8003ad0:	ee31 7a44 	vsub.f32	s14, s2, s8
 8003ad4:	ee30 1a60 	vsub.f32	s2, s0, s1
 8003ad8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8003adc:	ee33 6a46 	vsub.f32	s12, s6, s12
 8003ae0:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8003ae4:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8003ae8:	ee38 4a68 	vsub.f32	s8, s16, s17
 8003aec:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8003af0:	ee72 5a25 	vadd.f32	s11, s4, s11
 8003af4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8003af8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8003afc:	ee77 2a27 	vadd.f32	s5, s14, s15
 8003b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b04:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003b08:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8003b0c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8003b10:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8003b14:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8003b18:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8003b1c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003b20:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8003b24:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8003b28:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8003b2c:	edc2 0a01 	vstr	s1, [r2, #4]
 8003b30:	ee38 8a88 	vadd.f32	s16, s17, s16
 8003b34:	441a      	add	r2, r3
 8003b36:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8003b3a:	ee31 5a45 	vsub.f32	s10, s2, s10
 8003b3e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8003b42:	ed81 8a00 	vstr	s16, [r1]
 8003b46:	ee39 0a80 	vadd.f32	s0, s19, s0
 8003b4a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003b4e:	ed81 5a01 	vstr	s10, [r1, #4]
 8003b52:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8003b56:	edcd 3a00 	vstr	s7, [sp]
 8003b5a:	ed9d 5a02 	vldr	s10, [sp, #8]
 8003b5e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8003b62:	eddd 3a01 	vldr	s7, [sp, #4]
 8003b66:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8003b6a:	ed84 0a00 	vstr	s0, [r4]
 8003b6e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8003b72:	ed84 3a01 	vstr	s6, [r4, #4]
 8003b76:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8003b7a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003b7e:	eddd 3a00 	vldr	s7, [sp]
 8003b82:	ee25 5a25 	vmul.f32	s10, s10, s11
 8003b86:	4419      	add	r1, r3
 8003b88:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8003b8c:	441c      	add	r4, r3
 8003b8e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8003b92:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8003b96:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8003b9a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8003b9e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8003ba2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8003ba6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8003baa:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8003bae:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8003bb2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8003bb6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8003bba:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003bbe:	ee38 8a01 	vadd.f32	s16, s16, s2
 8003bc2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003bc6:	ee39 5a85 	vadd.f32	s10, s19, s10
 8003bca:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8003bce:	ed07 8a01 	vstr	s16, [r7, #-4]
 8003bd2:	ee30 0a21 	vadd.f32	s0, s0, s3
 8003bd6:	ed87 6a00 	vstr	s12, [r7]
 8003bda:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003bde:	edc0 0a00 	vstr	s1, [r0]
 8003be2:	ee33 3a28 	vadd.f32	s6, s6, s17
 8003be6:	edc0 3a01 	vstr	s7, [r0, #4]
 8003bea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003bee:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8003bf2:	edce 4a00 	vstr	s9, [lr]
 8003bf6:	4418      	add	r0, r3
 8003bf8:	ed06 0a01 	vstr	s0, [r6, #-4]
 8003bfc:	441f      	add	r7, r3
 8003bfe:	edc6 2a00 	vstr	s5, [r6]
 8003c02:	449e      	add	lr, r3
 8003c04:	ed85 3a00 	vstr	s6, [r5]
 8003c08:	441e      	add	r6, r3
 8003c0a:	ed85 7a01 	vstr	s14, [r5, #4]
 8003c0e:	441d      	add	r5, r3
 8003c10:	f63f aee8 	bhi.w	80039e4 <arm_radix8_butterfly_f32+0x328>
 8003c14:	9a06      	ldr	r2, [sp, #24]
 8003c16:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003c18:	3201      	adds	r2, #1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	9206      	str	r2, [sp, #24]
 8003c1e:	9a07      	ldr	r2, [sp, #28]
 8003c20:	4402      	add	r2, r0
 8003c22:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003c24:	9207      	str	r2, [sp, #28]
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	4402      	add	r2, r0
 8003c2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003c2c:	9203      	str	r2, [sp, #12]
 8003c2e:	9a04      	ldr	r2, [sp, #16]
 8003c30:	4402      	add	r2, r0
 8003c32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003c34:	9204      	str	r2, [sp, #16]
 8003c36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c38:	4491      	add	r9, r2
 8003c3a:	9a05      	ldr	r2, [sp, #20]
 8003c3c:	4402      	add	r2, r0
 8003c3e:	9205      	str	r2, [sp, #20]
 8003c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003c42:	4490      	add	r8, r2
 8003c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c46:	3208      	adds	r2, #8
 8003c48:	920f      	str	r2, [sp, #60]	; 0x3c
 8003c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	920e      	str	r2, [sp, #56]	; 0x38
 8003c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c52:	3208      	adds	r2, #8
 8003c54:	920d      	str	r2, [sp, #52]	; 0x34
 8003c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c58:	3208      	adds	r2, #8
 8003c5a:	920c      	str	r2, [sp, #48]	; 0x30
 8003c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c5e:	3208      	adds	r2, #8
 8003c60:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c64:	3208      	adds	r2, #8
 8003c66:	920a      	str	r2, [sp, #40]	; 0x28
 8003c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c6a:	3208      	adds	r2, #8
 8003c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c6e:	9a08      	ldr	r2, [sp, #32]
 8003c70:	3208      	adds	r2, #8
 8003c72:	9208      	str	r2, [sp, #32]
 8003c74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003c76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4288      	cmp	r0, r1
 8003c7c:	d005      	beq.n	8003c8a <arm_radix8_butterfly_f32+0x5ce>
 8003c7e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003c80:	4621      	mov	r1, r4
 8003c82:	4401      	add	r1, r0
 8003c84:	9807      	ldr	r0, [sp, #28]
 8003c86:	9110      	str	r1, [sp, #64]	; 0x40
 8003c88:	e676      	b.n	8003978 <arm_radix8_butterfly_f32+0x2bc>
 8003c8a:	4683      	mov	fp, r0
 8003c8c:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8003c90:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8003c94:	e522      	b.n	80036dc <arm_radix8_butterfly_f32+0x20>
 8003c96:	b01d      	add	sp, #116	; 0x74
 8003c98:	ecbd 8b10 	vpop	{d8-d15}
 8003c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0d      	ldr	r6, [pc, #52]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca4:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca6:	1ba4      	subs	r4, r4, r6
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	2500      	movs	r5, #0
 8003cac:	42a5      	cmp	r5, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	4e0b      	ldr	r6, [pc, #44]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <__libc_init_array+0x44>)
 8003cb4:	f000 f818 	bl	8003ce8 <_init>
 8003cb8:	1ba4      	subs	r4, r4, r6
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	42a5      	cmp	r5, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc8:	4798      	blx	r3
 8003cca:	3501      	adds	r5, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd2:	4798      	blx	r3
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08003ef4 	.word	0x08003ef4
 8003cdc:	08003ef4 	.word	0x08003ef4
 8003ce0:	08003ef4 	.word	0x08003ef4
 8003ce4:	08003ef8 	.word	0x08003ef8

08003ce8 <_init>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr

08003cf4 <_fini>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr
